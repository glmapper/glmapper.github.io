<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>glmapper</title>
  
  <subtitle>大家都喊我磊叔</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.glmapper.com/"/>
  <updated>2020-01-28T09:13:18.963Z</updated>
  <id>http://www.glmapper.com/</id>
  
  <author>
    <name>GuoLei Song</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>菜鸟成长系列-适配器模式</title>
    <link href="http://www.glmapper.com/2020/01/28/java-design-model-adapter/"/>
    <id>http://www.glmapper.com/2020/01/28/java-design-model-adapter/</id>
    <published>2020-01-28T07:32:14.000Z</published>
    <updated>2020-01-28T09:13:18.963Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>本文为阅读 《JAVA与模式》的个人笔记，文中相关概念及背景描述参考书本。如有不当，请联系指正。</p></blockquote><p><strong>定义：适配器模式把一个类的接口变换成客户端所期待的另一种接口，从而使原本因接口不匹配为无法在一起工作的两个类能够在一起工作 -《JAVA与模式》</strong></p><p>适配、包装、转换几个字眼从汉字的字面意思来说是不同的，不同在于这几个词所对应的行为不同；但是他们所期望的目的是差不多一致的，就是将不可用变成可用。所以常说的适配器模式、转换器模式以及包装模式指的都是一个模式。</p><h2 id="适配器模式的两种形式"><a href="#适配器模式的两种形式" class="headerlink" title="适配器模式的两种形式"></a>适配器模式的两种形式</h2><p>在 java 语言体系中，根据适配类型的不同。适配器模式可以分为：<strong>类的适配器模式</strong>和<strong>对象的适配器模式</strong>。</p><h3 id="类的适配器模式"><a href="#类的适配器模式" class="headerlink" title="类的适配器模式"></a>类的适配器模式</h3><p>顾名思义，类的适配器模式是把被适配的类的 API 转换成为目标类的 API。</p><p>这里涉及到三个角色：</p><ul><li>目标角色：客户端期待的接口</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Target</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 源类没有的方法</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">sampleOperation1</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 源类没有的方法</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">sampleOperation2</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>源角色：现有需要被适配的接口</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Adaptee</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">sampleOperation1</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">// todo your biz</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>适配器角色：把源接口转换成目标接口的适配器类。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Adapter</span> <span class="keyword">extends</span> <span class="title">Adaptee</span> <span class="keyword">implements</span> <span class="title">Target</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sampleOperation1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// todo your biz</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 由于源类没有 sampleOperation2 方法，因此适配器类中补充上这个方法</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sampleOperation2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// todo your biz</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Target 接口申明了两个方法：sampleOperation1 和 sampleOperation2 ，而源角色 Adaptee 是一个具体的类，它只有一个 sampleOperation1 方法，但是没有 sampleOperation2 这个方法。适配器角色 Adapter 扩展了 Adaptee ，同时又实现了目标接口，由于 Adaptee 没有 sampleOperation2 方法，而目标接口又要求这个方法，因此适配器角色 Adapter 实现了这个方法。</p><p>适配器模式所达到的效果是：<strong>使用一个具体类把源（Adaptee）适配到目标（Target）中，这样一来，如果源以及源的子类都使用此类适配，就行不通了。由于适配器类是源的子类，因此可以在适配器类中置换掉源的一些方法；另外，由于只引进了一个适配器类，因此只有一个路线达到目标类，使问题得到简化。</strong></p><h3 id="对象的适配器模式"><a href="#对象的适配器模式" class="headerlink" title="对象的适配器模式"></a>对象的适配器模式</h3><p>与类的适配器模式一样，对象的适配器模式把被适配的类的 API 转换成为目标类的 API ，与类的适配器模式不同的是，对象的适配器模式不是使用继承关系连接到 Adaptee 类，而是使用委派关系连接到 Adaptee 类。这里我们只需要对前面的 Adapter 做简单的修改即可。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ObjAdapter</span> <span class="keyword">implements</span> <span class="title">Target</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Adaptee adaptee;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ObjAdapter</span><span class="params">(Adaptee adaptee)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.adaptee = adaptee;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sampleOperation1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        adaptee.sampleOperation1();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sampleOperation2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// todo your biz</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>实际上这里所说的委派就是组合。</p></blockquote><p>适配器模式的用意在于将接口不同而功能相同或者相近的两个接口加以转换，这里面包括适配器角色补充了一个源角色没有的方法。需要注意的是，不要误以为适配器模式就是为了补充源角色没有的方法而准备的。</p><h2 id="在什么情况下需要使用适配器模式"><a href="#在什么情况下需要使用适配器模式" class="headerlink" title="在什么情况下需要使用适配器模式"></a>在什么情况下需要使用适配器模式</h2><p>书中提到的有三种场景，但是在实际的工程中，场景要远远多于书中所说的。</p><ul><li>1、系统需要使用现有的类，而此类的接口不符合系统的需要</li><li>2、想要建立一个可以重复使用的类，用于与一些彼此之间没有太大关联的一些类，包括一些可能在将来引进的类一起工作，这些源类不一定有很复杂的接口</li><li>3、在设计里，需要改变多个已有的子类的接口，如果使用类的适配器模式，就需要针对每一个子类做一个适配器，而这不太实际。</li></ul><h2 id="与一些模式的区别"><a href="#与一些模式的区别" class="headerlink" title="与一些模式的区别"></a>与一些模式的区别</h2><h3 id="与桥接器模式的区别"><a href="#与桥接器模式的区别" class="headerlink" title="与桥接器模式的区别"></a>与桥接器模式的区别</h3><p>桥接器模式的用意是要把实现和它的接口分开，以便于它们可以独立的变化。桥接器模式并不是用来把一个已有的对象接到不匹配的接口上的，当一个客户端只知道一个特定的接口，但是又必须与具有不同接口的类打交道时，就应当使用适配器模式。</p><p><img src="https://glmapper-blog.oss-cn-hangzhou.aliyuncs.com/blogs/designmodel/bridge.jpg" alt=""></p><h3 id="与装饰模式的区别"><a href="#与装饰模式的区别" class="headerlink" title="与装饰模式的区别"></a>与装饰模式的区别</h3><p>一个装饰类也是位于客户端和另一个 Component 对象之间的，在它接到客户端的调用后把调用传给一个或者几个 Component 对象。一个纯粹的装饰类必须与 Component 对象在接口上的完全相同，并增强后者的功能。</p><p><img src="https://glmapper-blog.oss-cn-hangzhou.aliyuncs.com/blogs/designmodel/decrator.jpg" alt=""><br>与适配器类不同的是，装饰类不能改变它所装饰的 Component 对象的接口。</p><blockquote><p>装饰模式可以这样理解，《开局一把枪，装备全靠打：皮肤、装备加持就是角色的装饰》</p></blockquote><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>本篇是在阅读 《JAVA与模式》一书所做的笔记记录，以备后续方便查阅。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;本文为阅读 《JAVA与模式》的个人笔记，文中相关概念及背景描述参考书本。如有不当，请联系指正。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;定义：适配器模式把一个类的接口变换成客户端所期待的另一种接口，从而使原本因接口不匹配为无法在
      
    
    </summary>
    
      <category term="架构之路" scheme="http://www.glmapper.com/categories/%E6%9E%B6%E6%9E%84%E4%B9%8B%E8%B7%AF/"/>
    
    
      <category term="设计模式" scheme="http://www.glmapper.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
      <category term="读书笔记" scheme="http://www.glmapper.com/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>一文详解蚂蚁金服分布式链路组件 SOFATracer 的埋点机制</title>
    <link href="http://www.glmapper.com/2020/01/20/sofa-tracer-integration-analysis/"/>
    <id>http://www.glmapper.com/2020/01/20/sofa-tracer-integration-analysis/</id>
    <published>2020-01-20T03:43:56.000Z</published>
    <updated>2020-01-20T04:04:01.705Z</updated>
    
    <content type="html"><![CDATA[<p>SOFATracer 是一个用于分布式系统调用跟踪的组件，通过统一的 TraceId 将调用链路中的各种网络调用情况以日志的方式记录下来，以达到透视化网络调用的目的，这些链路数据可用于故障的快速发现，服务治理等。</p><blockquote><p>GITHUB 地址：<a href="https://github.com/sofastack/sofa-tracer/pulls" target="_blank" rel="noopener">https://github.com/sofastack/sofa-tracer/pulls</a> （欢迎 star）<br>官方文件地址：<a href="https://www.sofastack.tech/projects/sofa-tracer/overview/" target="_blank" rel="noopener">https://www.sofastack.tech/projects/sofa-tracer/overview/</a></p></blockquote><p>2018 年末时至 2019 年初，SOFA 团队发起过 <a href="https://www.sofastack.tech/tags/%E5%89%96%E6%9E%90-sofatracer-%E6%A1%86%E6%9E%B6/" target="_blank" rel="noopener">剖析-sofatracer-框架</a> 的源码解析系列文章。这个系列中，基本对 SOFATracer 所提供的能力及实现原理都做了比较全面的分析，有兴趣的同学可以看下。</p><p>从官方文档及 PR 来看，目前 SOFATracer 已经支持了对以下开源组件的埋点支持：</p><ul><li>Spring MVC</li><li>RestTemplate</li><li>HttpClient</li><li>OkHttp3</li><li>JDBC </li><li>Dubbo(2.6/2.7)</li><li>SOFARPC</li><li>Redis</li><li>MongoDB</li><li>Spring Message</li><li>Spring Cloud Stream (基于 Spring Message 的埋点)</li><li>RocketMQ</li><li>Spring Cloud FeignClient</li><li>Hystrix</li></ul><blockquote><p>大多数能力提供在 3.x 版本，2.x 版本从官方 issue 中可以看到后续将不在继续提供新的功能更新；这也是和 SpringBoot 宣布不在继续维护 1.x 版本有关系。</p></blockquote><p>本文将从插件的角度来分析，SOFATracer 是如何实现对上述组件进行埋点的；通过本文，除了了解 SOFATracer 的埋点机制之外，也可以对上述组件的基本扩展机制以及基本原理有一点学习。篇幅较长，可以先码再看。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;SOFATracer 是一个用于分布式系统调用跟踪的组件，通过统一的 TraceId 将调用链路中的各种网络调用情况以日志的方式记录下来，以达到透视化网络调用的目的，这些链路数据可用于故障的快速发现，服务治理等。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;GITHUB 地址：
      
    
    </summary>
    
      <category term="SOFA" scheme="http://www.glmapper.com/categories/SOFA/"/>
    
    
      <category term="OpenTracing" scheme="http://www.glmapper.com/tags/OpenTracing/"/>
    
      <category term="SOFATracer" scheme="http://www.glmapper.com/tags/SOFATracer/"/>
    
  </entry>
  
  <entry>
    <title>SpringBoot 系列-自动配置及 starter 机制解析</title>
    <link href="http://www.glmapper.com/2020/01/05/springboot-series-auto-configure/"/>
    <id>http://www.glmapper.com/2020/01/05/springboot-series-auto-configure/</id>
    <published>2020-01-05T09:50:13.000Z</published>
    <updated>2020-01-10T02:12:29.435Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>一家之言，如有任何错误，请批评指出，不胜感激 </p></blockquote><p><strong>本篇主要来讨论研究两个问题：1、什么自动配置，2、如何编写自动配置</strong></p><p>在使用 Spring 作为项目开发框架的过程中，当需要集成某个组件时，通常需要大量的 xml 配置才可以让项目工程 run 起来，下面先以 mybatis 为例，来看下如何使用 mybatis-Spring 模块，需要哪些必不可少的依赖和配置。</p><h2 id="使用-mybatis-spring"><a href="#使用-mybatis-spring" class="headerlink" title="使用 mybatis-spring"></a>使用 mybatis-spring</h2><p>任何组件的集成都绕不过两个问题：依赖和配置，关于配置在<a href=""></a>这篇文章中介绍了配置的一些点，有兴趣的可以看下。</p><h3 id="依赖"><a href="#依赖" class="headerlink" title="依赖"></a>依赖</h3><p>从 mybatis 的官方文当可以了解到，要使用 MyBatis-Spring 模块，需要在类路径下包含 mybatis-spring.jar 文件和相关依赖（如：mysql-connector-java）即可。如果使用 Maven 作为构建工具，则在 pom.xml 中加入以下代码即可：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;latest.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="bean-配置"><a href="#bean-配置" class="headerlink" title="bean 配置"></a>bean 配置</h2><p>Spirng 集成 mybatis 通常需要以下 bean 配置：</p><p><strong>1、dataSource</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"dataSource"</span> <span class="attr">class</span>=<span class="string">"com.alibaba.druid.pool.DruidDataSource"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">init-method</span>=<span class="string">"init"</span> <span class="attr">destroy-method</span>=<span class="string">"close"</span>&gt;</span></span><br><span class="line">    // 省略其他配置</span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>2、sqlSessionFactory</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"sqlSessionFactory"</span> <span class="attr">class</span>=<span class="string">"org.mybatis.spring.SqlSessionFactoryBean"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>3、其他：包扫描和事务配置</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- DAO 接口所在包名，Spring 会自动查找其下的类，并将其定义为一个 Spring Bean --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.mybatis.spring.mapper.MapperScannerConfigurer"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"basePackage"</span> <span class="attr">value</span>=<span class="string">"com.glmapper.bridge.boot.dao"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"sqlSessionFactoryBeanName"</span> <span class="attr">value</span>=<span class="string">"sqlSessionFactory"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- (事务管理)transaction manager --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"transactionManager"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">class</span>=<span class="string">"org.springframework.jdbc.datasource.DataSourceTransactionManager"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这些个 bean 是在 Spring 中使用 mybatis 框架时基本必不可少的配置。那么在 SpringBoot 中呢？</p><h2 id="SpringBoot-中如何集成-mybatis-的"><a href="#SpringBoot-中如何集成-mybatis-的" class="headerlink" title="SpringBoot 中如何集成 mybatis 的"></a>SpringBoot 中如何集成 mybatis 的</h2><p>SpringBoot 集成 mybatis 非常简单，加一下下面的 starter ，再在 application.properties 配置下数据库连接配置即可；不需要配置 datasource，sqlSessionFactory 等这些 bean。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>官方文档：<a href="https://mybatis.org/spring-boot-starter/mybatis-spring-boot-autoconfigure/" target="_blank" rel="noopener">https://mybatis.org/spring-boot-starter/mybatis-spring-boot-autoconfigure/</a></p></blockquote><h2 id="mybatis-starter-是如何规避-bean-配置的"><a href="#mybatis-starter-是如何规避-bean-配置的" class="headerlink" title="mybatis starter 是如何规避 bean 配置的"></a>mybatis starter 是如何规避 bean 配置的</h2><p>引用 <code>mybatis-spring-boot-starter</code> 既然可以不用在 xml 中配置 bean ，那肯定是这些 bean 是在 <code>mybatis-spring-boot-starter</code> 中通过某种方式被创建了。</p><blockquote><p>在 SpringBoot 官方文档的描述中，starter 只是用来管理依赖的，一般不会有代码，自动配置的代码一般在 <code>xxxx-autoconfigure</code> 中。mybatis 的自动配置相关代码是在 <code>mybatis-spring-boot-autoconfigure</code> 中。</p></blockquote><p><code>mybatis-spring-boot-autoconfigure</code> 这依赖中只有简单的几个类，其中最核心的就是 MybatisAutoConfiguration 这个配置类。另外一个 MybatisProperties 是 mybatis spring boot 的属性配置类，就是常见的 mybatis.xxxx。</p><h3 id="MybatisAutoConfiguration-自动配置类"><a href="#MybatisAutoConfiguration-自动配置类" class="headerlink" title="MybatisAutoConfiguration 自动配置类"></a>MybatisAutoConfiguration 自动配置类</h3><p>MybatisAutoConfiguration 的定义及其生效条件：</p><ul><li>1.当前 classpath 下必须有 SqlSessionFactory 和 SqlSessionFactoryBean 这两个类</li><li>2.存在 DataSource bean 实例 </li><li>3.有配置类 MybatisProperties 实例</li><li>4.在 DataSourceAutoConfiguration 和 MybatisLanguageDriverAutoConfiguration 两个自动配置类之后刷新</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ConditionalOnClass</span>(&#123; SqlSessionFactory.class, SqlSessionFactoryBean.class &#125;)</span><br><span class="line"><span class="meta">@ConditionalOnSingleCandidate</span>(DataSource.class)</span><br><span class="line"><span class="meta">@EnableConfigurationProperties</span>(MybatisProperties.class)</span><br><span class="line"><span class="meta">@AutoConfigureAfter</span>(&#123; DataSourceAutoConfiguration.class, MybatisLanguageDriverAutoConfiguration.class &#125;)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MybatisAutoConfiguration</span> <span class="keyword">implements</span> <span class="title">InitializingBean</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 定义 SqlSessionFactory bean</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@ConditionalOnMissingBean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> SqlSessionFactory <span class="title">sqlSessionFactory</span><span class="params">(DataSource dataSource)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">// </span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// check</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterPropertiesSet</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    checkConfigFileExists();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 省略其他code</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从上面的代码片段大体可以知道 MybatisAutoConfiguration 所做的事情主要包括以下几点：1、刷新 SqlSessionFactory 和 SqlSessionFactoryBean 两个 bean；2、afterPropertiesSet 中做一些准备或者检验工作（这里就是 check 了 mybatis 的配置文件是否配置了）</p><p>关于 DataSource 的 bean ，则是由 DataSourceAutoConfiguration 这个配置类中来定义。</p><blockquote><p>具体代码有兴趣的读者可以自己查阅相关源码，这里就不展开了。</p></blockquote><p>所以整体看来， MybatisAutoConfiguration 及其所依赖的 xxxConfiguration 会帮助用户定义 bean 和解析配置。</p><h2 id="mybatis-自动配置的-bean-是如何生效的"><a href="#mybatis-自动配置的-bean-是如何生效的" class="headerlink" title="mybatis 自动配置的 bean 是如何生效的"></a>mybatis 自动配置的 bean 是如何生效的</h2><p>上面分析到 MybatisAutoConfiguration 及其依赖的配置自动类会帮助创建运行时所需要的 bean，那么这些 bean 是如何被 SpringBoot 框架感知并加载的呢？</p><p>其实一般的项目工程中，如果我们在一个类上打了 @Configuration 注解的话，Spring 会直接能够加载到的（前提是这个类所在的包在启动类的子包下）。但是在框架层面，项目的包和所引入的组件包的包路径肯定是有差异的，所以在一些情况下会刷不到依赖中的 bean。</p><p>SpringBoot 中提供了一种类似于 SPI 机制的方式来帮忙加载 EnableAutoConfiguration、ApplicationListner、ApplicationContextInitializer 等类型的 bean。比如 mybatis 自动配置的配置如下：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># Auto Configure</span><br><span class="line">org.springframework.boot.autoconfigure.EnableAutoConfiguration=\</span><br><span class="line">org.mybatis.spring.boot.autoconfigure.MybatisLanguageDriverAutoConfiguration,\</span><br><span class="line">org.mybatis.spring.boot.autoconfigure.MybatisAutoConfiguration</span><br></pre></td></tr></table></figure><p>其处理逻辑在 SpringApplication 类中，具体解析方法如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> &lt;T&gt; <span class="function">List&lt;T&gt; <span class="title">createSpringFactoriesInstances</span><span class="params">(Class&lt;T&gt; type, Class&lt;?&gt;[] parameterTypes,</span></span></span><br><span class="line"><span class="function"><span class="params">ClassLoader classLoader, Object[] args, Set&lt;String&gt; names)</span> </span>&#123;</span><br><span class="line">    List&lt;T&gt; instances = <span class="keyword">new</span> ArrayList&lt;&gt;(names.size());</span><br><span class="line">    <span class="keyword">for</span> (String name : names) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Class&lt;?&gt; instanceClass = ClassUtils.forName(name, classLoader);</span><br><span class="line">            Assert.isAssignable(type, instanceClass);</span><br><span class="line">            <span class="comment">// 反射拿到构造函数</span></span><br><span class="line">            Constructor&lt;?&gt; constructor = instanceClass.getDeclaredConstructor(parameterTypes);</span><br><span class="line">            <span class="comment">// 创建 bean </span></span><br><span class="line">            T instance = (T) BeanUtils.instantiateClass(constructor, args);</span><br><span class="line">            instances.add(instance);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (Throwable ex) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Cannot instantiate "</span> + type + <span class="string">" : "</span> + name, ex);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> instances;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="如何编写自己的-starter"><a href="#如何编写自己的-starter" class="headerlink" title="如何编写自己的 starter"></a>如何编写自己的 starter</h2><p>本小节将结合上面的描述，自定义一个 starter，让你的项目和 xml bean 配置说再见。</p><p><strong>场景描述：有两个 bean,一个 parentBean，一个 childBean，parentBean 需要依赖 childBean，parentBean中又要依赖 http 包</strong></p><p>原来的 xml 配置：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"parentBean"</span> <span class="attr">class</span>=<span class="string">"com.glmapper.bridge.boot.service.impl.ParentBean"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"childBean"</span> <span class="attr">ref</span>=<span class="string">"childBean"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"childBean"</span> <span class="attr">class</span>=<span class="string">"com.glmapper.bridge.boot.service.impl.ChildBean"</span>/&gt;</span></span><br></pre></td></tr></table></figure><p>下面考虑的是将这些 bean 作为公共组件提供给其他项目工程用，从框架角度来看，最佳实践是：</p><ul><li>提供一个 autoconfigure 模块用于编写自动配置类代码</li><li>提供一个 starter，用于提供给外部用户使用</li></ul><h3 id="编写-autoconfigure"><a href="#编写-autoconfigure" class="headerlink" title="编写 autoconfigure"></a>编写 autoconfigure</h3><ul><li>自动配置类</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="comment">// parentBean 依赖 HttpClient，所以如果没有 HttpClient 则不会刷新当前自动配置类</span></span><br><span class="line"><span class="meta">@ConditionalOnClass</span>(HttpClient.class)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GlmpperAutoConfiguration</span> </span>&#123;</span><br><span class="line">    <span class="comment">// ParentBean bean 定义</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@ConditionalOnMissingBean</span>   <span class="comment">// 如果当前 Spring 容器中已经存在 parentBean则不会再创建</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ParentBean <span class="title">parentBean</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ParentBean();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ChildBean bean 定义</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@ConditionalOnMissingBean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ChildBean <span class="title">childBean</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ChildBean();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>依赖 scope 使用 provided，不直接打在 autoconfigure 依赖中</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.httpcomponents<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>httpclient<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.5.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>编写 spring.factories，在 resources/META-INF/ 新建一个 spring.factories 文件，配置如下：</li></ul><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># Auto Configure</span><br><span class="line">org.springframework.boot.autoconfigure.EnableAutoConfiguration=\</span><br><span class="line">  com.glmapper.bridge.boot.autoconfigure.GlmpperAutoConfiguration</span><br></pre></td></tr></table></figure><h3 id="编写-starter"><a href="#编写-starter" class="headerlink" title="编写 starter"></a>编写 starter</h3><p>starter 里面没有代码，只做依赖管控</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.glmapper.bridge.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>guides-autoconfigure<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.httpcomponents<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>httpclient<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.5.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>starter 里面包括了自动配置的依赖和 httpclient 的依赖，所以用户在引入 starter 之后所有生效条件都满足了，就会在启动时直接刷新。</p><blockquote><p>示例工程: <a href="https://github.com/glmapper/springboot-series-guides.git（guides-autoconfigure" target="_blank" rel="noopener">https://github.com/glmapper/springboot-series-guides.git（guides-autoconfigure</a> 模块和 guides-starter 模块）</p></blockquote><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><blockquote><p>本篇是介于源码解析和实践系列之间的一篇，作为源码解析的终篇和实践的开篇。</p></blockquote><p>本篇以 mybatis 为例，对 spring 环境和 SpringBoot 环境下的使用方式做了简单对比；以此为切入点，介绍了 SpringBoot 中的自动配置及 starter 最佳实践。</p><p><img src="https://glmapper-blog.oss-cn-hangzhou.aliyuncs.com/glmapper-2.jpg" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;一家之言，如有任何错误，请批评指出，不胜感激 &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;本篇主要来讨论研究两个问题：1、什么自动配置，2、如何编写自动配置&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;在使用 Spring 作为项目开发框架的过
      
    
    </summary>
    
      <category term="springboot" scheme="http://www.glmapper.com/categories/springboot/"/>
    
    
      <category term="springboot" scheme="http://www.glmapper.com/tags/springboot/"/>
    
  </entry>
  
  <entry>
    <title>SpringBoot 实践-外部化配置优先级问题</title>
    <link href="http://www.glmapper.com/2020/01/03/springboot-series-externalize-prop/"/>
    <id>http://www.glmapper.com/2020/01/03/springboot-series-externalize-prop/</id>
    <published>2020-01-03T15:27:29.000Z</published>
    <updated>2020-01-04T04:08:42.297Z</updated>
    
    <content type="html"><![CDATA[<p>本文主要针对 <code>spring.profiles.active</code>、<code>spring.config.location</code> 以及 <code>spring.config.additional-location</code> 的作用机制及优先级问题进行实践对比。</p><blockquote><p>本文案例工程已上传 github 仓库：<a href="https://github.com/glmapper/springboot-series-guides/tree/master/guides-properties" target="_blank" rel="noopener">https://github.com/glmapper/springboot-series-guides/tree/master/guides-properties</a></p></blockquote><h2 id="spring-profiles-active"><a href="#spring-profiles-active" class="headerlink" title="spring.profiles.active"></a>spring.profiles.active</h2><p>除了 application.properties 文件之外，profile-specific 配置也可以通过以下命名方式来定义:application-{profile}.properties。在没有使用 active 指定 profiles 的情况下，Environment 会指定一组默认的 profiles（默认情况下是[default])，换句话说就是，如果没有显示的激活 profiles 配置文件，则默认加载的是 application-default.properties 配置文件。</p><p>profile-specific 配置文件的属性与标准 application.properties 从相同的位置加载（一般是 classpath 下）；profile-specific 指定的 properties 配置文件始终覆盖默认配置。</p><p>在案例工程中(guides-properties)，resources 下面包括 application.properties 和 application-dev.properties 两份配置文件</p><ul><li>application.properties 文件配置</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">spring.application.name=appNameInner</span><br><span class="line">testKey=key-default</span><br></pre></td></tr></table></figure><ul><li>application-dev.properties 文件配置</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">testKey=key-dev</span><br></pre></td></tr></table></figure><p>通过以下代码在启动时将配置值输出：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@Value</span>(<span class="string">"$&#123;testKey&#125;"</span>)</span><br><span class="line"><span class="keyword">private</span> String testKey;</span><br><span class="line"></span><br><span class="line"><span class="meta">@PostConstruct</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"-------------------------------"</span>);</span><br><span class="line">    System.out.println(testKey);</span><br><span class="line">    System.out.println(<span class="string">"-------------------------------"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="不指定-spring-profiles-active-时"><a href="#不指定-spring-profiles-active-时" class="headerlink" title="不指定 spring.profiles.active 时"></a>不指定 spring.profiles.active 时</h3><p>通过 <code>java -jar guides-properties/target/guides-properties-0.0.1-SNAPSHOT.jar</code> 启动工程，console 输出如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">2020-01-04 00:08:47.279  INFO 11050 --- [           main] com.glmapper.bridge.boot.BootStrap       : No active profile set, falling back to default profiles: default</span><br><span class="line">-------------------------------</span><br><span class="line">key-default</span><br><span class="line">-------------------------------</span><br></pre></td></tr></table></figure><p>结论是，如果不显示指定 profiles，则使用默认的。</p><h3 id="指定-spring-profiles-active-时"><a href="#指定-spring-profiles-active-时" class="headerlink" title="指定 spring.profiles.active 时"></a>指定 spring.profiles.active 时</h3><p>通过 <code>java -jar -Dspring.profiles.active=dev guides-properties/target/guides-properties-0.0.1-SNAPSHOT.jar</code> 启动工程，console 输出如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">2020-01-04 00:08:14.426  INFO 11040 --- [           main] com.glmapper.bridge.boot.BootStrap       : The following profiles are active: dev</span><br><span class="line">-------------------------------</span><br><span class="line">key-dev</span><br><span class="line">-------------------------------</span><br></pre></td></tr></table></figure><p>结论是，在显示指定 profiles 的情况下，会覆盖默认 application.properties 中的配置值。</p><h2 id="spring-config-location"><a href="#spring-config-location" class="headerlink" title="spring.config.location"></a>spring.config.location</h2><p>在 SpringBoot 2.x 中 spring.config.location 的语义发生了变更(此项配置会导致 classpath 中的 application.properties 不再生效)。原因如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> Set&lt;String&gt; <span class="title">getSearchLocations</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// spring.config.location 直接使用此份文件，不会再处理其他配置文件</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.environment.containsProperty(CONFIG_LOCATION_PROPERTY)) &#123;</span><br><span class="line">        <span class="keyword">return</span> getSearchLocations(CONFIG_LOCATION_PROPERTY);</span><br><span class="line">    &#125;</span><br><span class="line">    Set&lt;String&gt; locations = getSearchLocations(CONFIG_ADDITIONAL_LOCATION_PROPERTY);</span><br><span class="line">    locations.addAll(</span><br><span class="line">            asResolvedSet(ConfigFileApplicationListener.<span class="keyword">this</span>.searchLocations, DEFAULT_SEARCH_LOCATIONS));</span><br><span class="line">    <span class="keyword">return</span> locations;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在工程的根目录的 <code>conf</code> 目录下新建一个 <code>application-conf.properties</code> 配置文件，内容如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">testKey=key-spring.config.location</span><br></pre></td></tr></table></figure><p>通过 <code>java -jar -Dspring.config.location=conf/application-conf.properties guides-properties/target/guides-properties-0.0.1-SNAPSHOT.jar</code> 启动工程，发现启动报错，原因是因为 application-conf.properties 中没有 配置 <code>spring.application.name</code>，而 <code>spring.application.name</code> 是在 resources 目录下的 application.properties 中的，所以也间接说明前面提到的，会使 classpath 下的配置失效。新增 <code>spring.application.name</code> 之后，重新启动工程，</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">spring.application.name=guides-properties</span><br><span class="line">testKey=key-spring.config.location</span><br></pre></td></tr></table></figure><p>输出结果如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">2020-01-04 00:19:12.225  INFO 11147 --- [           main] com.glmapper.bridge.boot.BootStrap       : No active profile set, falling back to default profiles: default</span><br><span class="line">-------------------------------</span><br><span class="line">key-spring.config.location</span><br><span class="line">-------------------------------</span><br></pre></td></tr></table></figure><p>所以在使用 <code>spring.config.location</code> 指定外部配置文件时，需要此份配置文件需全量满足当前工程运行时所需，因为它不会去与 resources 目录下的配置文件去做 merge 操作。</p><h2 id="spring-config-additional-location"><a href="#spring-config-additional-location" class="headerlink" title="spring.config.additional-location"></a>spring.config.additional-location</h2><p>在使用 <code>spring.config.additional-location</code> 这种方式自定义 locations 时，除了默认 locations 之外，还会使用 <code>spring.config.additional-location</code> 指定的。</p><blockquote><p>additional-location：言外之意就是增量的配置</p></blockquote><p>在工程的根目录的 <code>conf</code> 目录下新建一个 <code>application-addition.properties</code> 配置文件，内容如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">testKey=key-addition</span><br></pre></td></tr></table></figure></p><p>通过 <code>java -jar -Dspring.config.additional-location=conf/application-addition.properties guides-properties/target/guides-properties-0.0.1-SNAPSHOT.jar</code> 启动工程，输出结果如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">2020-01-04 00:28:30.048  INFO 11384 --- [           main] com.glmapper.bridge.boot.BootStrap       : No active profile set, falling back to default profiles: default</span><br><span class="line">-------------------------------</span><br><span class="line">key-addition</span><br><span class="line">-------------------------------</span><br></pre></td></tr></table></figure></p><p>结论是，会覆盖默认 application.properties 中的配置值。</p><h2 id="spring-config-additional-location-与-spring-profiles-active-配置加载关系"><a href="#spring-config-additional-location-与-spring-profiles-active-配置加载关系" class="headerlink" title="spring.config.additional-location 与 spring.profiles.active 配置加载关系"></a>spring.config.additional-location 与 spring.profiles.active 配置加载关系</h2><p><code>spring.config.location</code> 不用多说，它就是独立的一份，使用它就不能使用其它的。所以这里只分析 <code>spring.config.additional-location</code> 与 <code>spring.profiles.active</code> 配置加载关系。</p><h3 id="同时指定两个配置"><a href="#同时指定两个配置" class="headerlink" title="同时指定两个配置"></a>同时指定两个配置</h3><p>通过 <code>java -jar -Dspring.profiles.active=dev -Dspring.config.additional-location=conf/application-addition.properties guides-properties/target/guides-properties-0.0.1-SNAPSHOT.jar</code> 启动工程，输出如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">2020-01-04 00:32:59.044  INFO 11451 --- [           main] com.glmapper.bridge.boot.BootStrap       : The following profiles are active: dev</span><br><span class="line">-------------------------------</span><br><span class="line">key-dev</span><br><span class="line">-------------------------------</span><br></pre></td></tr></table></figure><p>为了排除与 -D 参数顺序有关，也使用如下方式再执行一次：<code>java -jar -Dspring.config.additional-location=conf/application-addition.properties -Dspring.profiles.active=dev  guides-properties/target/guides-properties-0.0.1-SNAPSHOT.jar</code>，输出结果与前面相同，所以可以得出，<code>spring.profiles.active</code> 的优先级比 <code>spring.config.additional-location</code> 要高。</p><h3 id="spring-config-additional-location-指定差异增量配置"><a href="#spring-config-additional-location-指定差异增量配置" class="headerlink" title="spring.config.additional-location 指定差异增量配置"></a><code>spring.config.additional-location</code> 指定差异增量配置</h3><p>在 <code>spring.config.additional-location</code> 中增加 additionKey</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">testKey=key-addition</span><br><span class="line">additionKey=testAddition</span><br></pre></td></tr></table></figure><p>使用 <code>java -jar -Dspring.config.additional-location=conf/application-addition.properties -Dspring.profiles.active=dev  guides-properties/target/guides-properties-0.0.1-SNAPSHOT.jar</code> 启动工程，输出如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">2020-01-04 11:44:42.227  INFO 12821 --- [           main] com.glmapper.bridge.boot.BootStrap       : The following profiles are active: dev</span><br><span class="line">-------------------------------</span><br><span class="line">key-dev</span><br><span class="line">testAddition</span><br><span class="line">-------------------------------</span><br></pre></td></tr></table></figure><p>结论是 <code>spring.config.additional-location</code> 可以用于提供出 profiles 机制或者默认方式之外的增量配置。</p><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>在使用外部化配置文件时，执行顺序为：</p><p><code>spring.config.location</code> &gt; <code>spring.profiles.active</code> &gt; <code>spring.config.additional-location</code> &gt; 默认的 <code>application.proerties</code>。</p><p>其中通过 <code>spring.profiles.active</code> 和 <code>spring.config.additional-location</code>指定的配置文件会与 默认的<code>application.proerties</code> merge 作为最终的配置，<code>spring.config.location</code> 则不会。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;本文主要针对 &lt;code&gt;spring.profiles.active&lt;/code&gt;、&lt;code&gt;spring.config.location&lt;/code&gt; 以及 &lt;code&gt;spring.config.additional-location&lt;/code&gt; 的作用机制及优先
      
    
    </summary>
    
      <category term="springboot" scheme="http://www.glmapper.com/categories/springboot/"/>
    
    
      <category term="springboot" scheme="http://www.glmapper.com/tags/springboot/"/>
    
  </entry>
  
  <entry>
    <title>SpringBoot系列-配置解析</title>
    <link href="http://www.glmapper.com/2019/12/29/springboot-series-propertysource/"/>
    <id>http://www.glmapper.com/2019/12/29/springboot-series-propertysource/</id>
    <published>2019-12-29T12:41:49.000Z</published>
    <updated>2019-12-31T15:42:51.057Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>注：本文基于 SpringBoot 2.1.11 版本</p></blockquote><p><strong>说到配置，你能想到的是什么？</strong> </p><p>在日常的开发和运维过程中，可以说配置都是及其重要的，因为它可能影响到应用的正常启动或者正常运行。相信在之前 Spring xml 时代，很多人都会被一堆 xml 配置折腾的够呛，除此之外，还有像数据库连接配置、缓存配置、注册中心配置、消息配置等等，这些相信大家都不会陌生。</p><p>配置对于开发人员或者运维人员来说可以比喻成一把”钥匙“，可以通过这把”钥匙“让我们的程序 run 起来，可以通过这把 ”钥匙“ 开启或者关闭应用程序的某一个功能。那么为什么会需要配置，对于一个应用来说，配置的意义又是什么呢？</p><h2 id="配置对于框架组件和应用程序的意义"><a href="#配置对于框架组件和应用程序的意义" class="headerlink" title="配置对于框架组件和应用程序的意义"></a>配置对于框架组件和应用程序的意义</h2><p>配置对于框架组件和应用程序的意义是什么？我的理解是可以让框架组件和应用程序变得灵活，通过配置可以使得一个框架组件或者一个应用程序在不需要做任何自身代码变更的情况下跑在不同的环境、不同的场景下。例如 Dubbo ，用户可以通过配置使得 Dubbo 将服务注册到不同的注册中心，nacos、zookeeper、SOFARegistry 等等；再比如，我有一个应用程序，在 dev 环境和生产环境需要连接不同的数据库，但是我又不想去在代码里面去做修改来适配不同的环境，那么同样我也可以使用配置的方式来做控制。配置可以让框架组件和应用程序变得灵活、不强耦合在某一个场景或者环境下，它可以有很多种存在形态，如常见的是存在文件中、配置中心中、系统环境变量中，对于 JAVA 程序来说还可以是命令行参数或者 -D 参数。可以说任何优秀的框架或者应用，都离不开配置。</p><p>那么作为 Java 语言生态里面最优秀的框架， Spring 是如何管理和使用配置的呢？本篇将以 SpringBoot 中的配置为切入点，来进行详细的剖析。</p><h2 id="SpringBoot-中的配置"><a href="#SpringBoot-中的配置" class="headerlink" title="SpringBoot 中的配置"></a>SpringBoot 中的配置</h2><p>Spring Boot 官方文章中使用了单独的章节和大量的篇幅对配置进行了描述，可以见得，配置对于 SpringBoot 来说，是相当重要的。 Spring Boot 允许用户将配置外部化，以便可以在不同的环境中使用相同的应用程序代码，用户可以使用 properties 文件、YAML 文件、环境变量和命令行参数来具体化配置。属性值可以通过使用 @Value 注释直接注入 bean，可以通过 Spring 的环境抽象访问，也可以通过 @ConfigurationProperties 绑定到结构化对象。</p><p>在日常的开发中，对于 SpringBoot 中的配置，可能直接想到的就是 application.properties，实际上，从 SpringBoot 官方文档可以看到，SpringBoot 获取配置的方式有多达 17 种；同时 Spring Boot 也提供了一种非常特殊的 PropertyOrder，来允许用户可以在适当的场景下覆盖某些属性值，下面就是官方文档中描述的属性优先加载顺序:</p><ul><li>1.在主目录（当 devtools 被激活，则为 ~/.spring-boot-devtools.properties ）中的 Devtools 全局设置属性。</li><li>2.在测试中使用到的 @TestPropertySource 注解。</li><li>3.在测试中使用到的 properties 属性，可以是 @SpringBootTest 和用于测试应用程序某部分的测试注解。</li><li>4.命令行参数。</li><li>5.来自 SPRING_APPLICATION_JSON 的属性（嵌入在环境变量或者系统属性【system propert】中的内联 JSON）</li><li>6.ServletConfig 初始化参数。</li><li>7.ServletContext 初始化参数。</li><li>8.来自 java:comp/env 的 JNDI 属性。</li><li>9.Java 系统属性（System.getProperties()）。</li><li>10.操作系统环境变量。</li><li>11.只有 random.* 属性的 RandomValuePropertySource。</li><li>12.在已打包的 fatjar 外部的指定 profile 的应用属性文件（application-{profile}.properties 和 YAML 变量）。</li><li>13.在已打包的 fatjar 内部的指定 profile 的应用属性文件（application-{profile}.properties 和 YAML 变量）。</li><li>14.在已打包的 fatjar 外部的应用属性文件（application.properties 和 YAML 变量）。</li><li>15.在已打包的 fatjar 内部的应用属性文件（application.properties 和 YAML 变量）。</li><li>16.在 @Configuration 类上的 @PropertySource 注解。</li><li>17.默认属性（使用 SpringApplication.setDefaultProperties 指定）。</li></ul><p>相信绝大多数都是你不曾用过的，不用纠结，其实用不到也很正常，但是我们还是需要能够知道它提供的方式有哪些，以便于在适当的场景下掏出来镇楼！</p><p>Spring 中对于配置最终都是交给 Environment 对象来管理，也就是我们常说的 Spring 环境。比如可以通过以下方式从 Environment 中获取配置值：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ConfigurableEnvironment environment = context.getEnvironment();</span><br><span class="line">environment.getProperty(<span class="string">"key"</span>);</span><br></pre></td></tr></table></figure><p>那么 Environment 是如何被构建的呢？Environment 与配置的关系又是什么？</p><h2 id="Environment-构建"><a href="#Environment-构建" class="headerlink" title="Environment 构建"></a>Environment 构建</h2><p>Environment 的构建发生在 prepareEnvironment 中，关于 SpringBoot 启动过程想了解更多，可以参考这篇 <a href="http://www.glmapper.com/2019/12/07/springboot-series-started/">SpringBoot系列-启动过程分析</a>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> ConfigurableEnvironment <span class="title">getOrCreateEnvironment</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>.environment != <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">this</span>.environment;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">switch</span> (<span class="keyword">this</span>.webApplicationType) &#123;</span><br><span class="line">        <span class="comment">// 标准的 web 应用</span></span><br><span class="line"><span class="keyword">case</span> SERVLET:</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> StandardServletEnvironment();</span><br><span class="line">        <span class="comment">// webflux 应用</span></span><br><span class="line"><span class="keyword">case</span> REACTIVE:</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> StandardReactiveWebEnvironment();</span><br><span class="line">        <span class="comment">// 非web应用</span></span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> StandardEnvironment();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>本篇基于非 web 应用分析，所有主要围绕 StandardEnvironment 这个类展开分析。</p></blockquote><p>Environment 类继承结构体系：</p><p><img src="https://glmapper-blog.oss-cn-hangzhou.aliyuncs.com/env/env-class.jpg" alt=""></p><h3 id="systemProperties-amp-systemEnvironment"><a href="#systemProperties-amp-systemEnvironment" class="headerlink" title="systemProperties &amp; systemEnvironment"></a>systemProperties &amp; systemEnvironment</h3><p>在构建 StandardEnvironment 对象的过程中，会初始化 systemProperties &amp; systemEnvironment 两个 PropertySource。其触发时机是在其父类 AbstractEnvironment 的构造函数中。customizePropertySources 方法在 AbstractEnvironment 中并没有具体的实现，其依赖子类完成，如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">AbstractEnvironment</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    customizePropertySources(<span class="keyword">this</span>.propertySources);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 子类 StandardEnvironment 中的实现逻辑</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">customizePropertySources</span><span class="params">(MutablePropertySources propertySources)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 构建 systemProperties 配置</span></span><br><span class="line">    propertySources.addLast(</span><br><span class="line">            <span class="keyword">new</span> PropertiesPropertySource(SYSTEM_PROPERTIES_PROPERTY_SOURCE_NAME, getSystemProperties()));</span><br><span class="line">    <span class="comment">// // 构建 systemEnvironment 配置</span></span><br><span class="line">    propertySources.addLast(</span><br><span class="line">            <span class="keyword">new</span> SystemEnvironmentPropertySource(SYSTEM_ENVIRONMENT_PROPERTY_SOURCE_NAME, getSystemEnvironment()));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>以我本机为例，来分别看下 systemProperties 和 systemEnvironment 主要是哪些东西</p><ul><li>systemProperties</li></ul><p><img src="https://glmapper-blog.oss-cn-hangzhou.aliyuncs.com/env/sysProperties.jpg" alt=""></p><ul><li>systemEnvironment</li></ul><p><img src="https://glmapper-blog.oss-cn-hangzhou.aliyuncs.com/env/sysEnvoriment.jpg" alt=""></p><h3 id="defaultProperties-amp-commandLineArgs"><a href="#defaultProperties-amp-commandLineArgs" class="headerlink" title="defaultProperties &amp; commandLineArgs"></a>defaultProperties &amp; commandLineArgs</h3><p>在构建完默认的 Environment 完成之后就是配置 Environment ，这里主要就包括默认的 defaultProperties 和命令行参数两个部分。defaultProperties 可以通过以下方式设置：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Map&lt;String, Object&gt; defaultProperties = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">defaultProperties.put(<span class="string">"defaultKey"</span>,<span class="string">"defaultValue"</span>);</span><br><span class="line">SpringApplication springApplication = <span class="keyword">new</span> SpringApplication(BootStrap.class);</span><br><span class="line">springApplication.setDefaultProperties(defaultProperties);</span><br><span class="line">springApplication.run(args);</span><br></pre></td></tr></table></figure><p>配置 defaultProperties 和命令行参数过程的代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configurePropertySources</span><span class="params">(ConfigurableEnvironment environment, String[] args)</span> </span>&#123;</span><br><span class="line">    MutablePropertySources sources = environment.getPropertySources();</span><br><span class="line">    <span class="comment">// 如果 springApplication 设置了则构建 defaultProperties，没有就算了</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.defaultProperties != <span class="keyword">null</span> &amp;&amp; !<span class="keyword">this</span>.defaultProperties.isEmpty()) &#123;</span><br><span class="line">        sources.addLast(<span class="keyword">new</span> MapPropertySource(<span class="string">"defaultProperties"</span>, <span class="keyword">this</span>.defaultProperties));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 命令行参数</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.addCommandLineProperties &amp;&amp; args.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="comment">// PropertySource 名为 commandLineArgs</span></span><br><span class="line">        String name = CommandLinePropertySource.COMMAND_LINE_PROPERTY_SOURCE_NAME;</span><br><span class="line">        <span class="keyword">if</span> (sources.contains(name)) &#123;</span><br><span class="line">            PropertySource&lt;?&gt; source = sources.get(name);</span><br><span class="line">            CompositePropertySource composite = <span class="keyword">new</span> CompositePropertySource(name);</span><br><span class="line">            composite.addPropertySource(</span><br><span class="line">                    <span class="keyword">new</span> SimpleCommandLinePropertySource(<span class="string">"springApplicationCommandLineArgs"</span>, args));</span><br><span class="line">            composite.addPropertySource(source);</span><br><span class="line">            sources.replace(name, composite);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            sources.addFirst(<span class="keyword">new</span> SimpleCommandLinePropertySource(args));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>SpringBoot 打成 fatjar 包后通过命令行传入的参数 包括以下 3 种实现方式</p><ul><li>java -jar xxx.jar  a b c : 通过 main 方法的参数获取，即 args </li><li>java -jar xxx.jar -Dp1=a -Dp2=b -Dp3=c : -D 参数方式，会被设置到系统参数中</li><li>java -jar xxx.jar –p1=a –p2=b –p3=c : SpringBoot 规范方式，可以通过 @Value(“${p1}”） 获取</li></ul><h3 id="配置-Profiles"><a href="#配置-Profiles" class="headerlink" title="配置 Profiles"></a>配置 Profiles</h3><p>为 application enviroment 配置哪些配置文件是 active 的(或者默认情况下是 active)。在配置文件处理期间，可以通过 spring.profiles.active 配置属性来激活其他配置文件。主要包括两种：</p><ul><li>通过 spring.profiles.active 配置</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> Set&lt;String&gt; <span class="title">doGetActiveProfiles</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">synchronized</span> (<span class="keyword">this</span>.activeProfiles) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.activeProfiles.isEmpty()) &#123;</span><br><span class="line">            <span class="comment">// 获取 spring.profiles.active 配置值</span></span><br><span class="line">            <span class="comment">// 如：spring.profiles.active=local ，profiles 为 local</span></span><br><span class="line">            <span class="comment">// 如：spring.profiles.active=local,dev ，profiles 为 local,dev</span></span><br><span class="line">            String profiles = getProperty(ACTIVE_PROFILES_PROPERTY_NAME);</span><br><span class="line">            <span class="keyword">if</span> (StringUtils.hasText(profiles)) &#123;</span><br><span class="line">                <span class="comment">// 按 ，分割成 String[] 数组</span></span><br><span class="line">                setActiveProfiles(StringUtils.commaDelimitedListToStringArray(</span><br><span class="line">                        StringUtils.trimAllWhitespace(profiles)));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 返回，这里还没有解析和 merge 配置</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.activeProfiles;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>通过 SpringApplication 对象 setAdditionalProfiles 配置</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">SpringApplication springApplication = <span class="keyword">new</span> SpringApplication(BootStrap.class);</span><br><span class="line"><span class="comment">// 设置 dev</span></span><br><span class="line">springApplication.setAdditionalProfiles(<span class="string">"dev"</span>);</span><br><span class="line">springApplication.run(args);</span><br></pre></td></tr></table></figure><p>以上两种方式设置的 profiles 会作为最后生效的 activeProfiles。</p><h3 id="configurationProperties"><a href="#configurationProperties" class="headerlink" title="configurationProperties"></a>configurationProperties</h3><p>将 ConfigurationPropertySource 支持附加到指定的 Environment。将 Environment 管理的每个 PropertySource 调整为 ConfigurationPropertySource 类型，并允许 PropertySourcesPropertyResolver 使用 ConfigurationPropertyName 调用解析。附加的解析器将动态跟踪任何来自基础环境属性源的添加或删除（这个也是 SpringCloud Config 的底层支持原理）。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">attach</span><span class="params">(Environment environment)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 类型检查</span></span><br><span class="line">    Assert.isInstanceOf(ConfigurableEnvironment.class, environment);</span><br><span class="line">    MutablePropertySources sources = ((ConfigurableEnvironment) environment).getPropertySources();</span><br><span class="line">    <span class="comment">// 获取名为 configurationProperties 的 PropertySource</span></span><br><span class="line">    PropertySource&lt;?&gt; attached = sources.get(ATTACHED_PROPERTY_SOURCE_NAME);</span><br><span class="line">    <span class="comment">// 如果存在先移除，保证每次都是最新的 PropertySource</span></span><br><span class="line">    <span class="keyword">if</span> (attached != <span class="keyword">null</span> &amp;&amp; attached.getSource() != sources) &#123;</span><br><span class="line">        sources.remove(ATTACHED_PROPERTY_SOURCE_NAME);</span><br><span class="line">        attached = <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (attached == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="comment">// 重新将名为 configurationProperties 的 PropertySource 放到属性源中</span></span><br><span class="line">        sources.addFirst(<span class="keyword">new</span> ConfigurationPropertySourcesPropertySource(ATTACHED_PROPERTY_SOURCE_NAME,</span><br><span class="line">                <span class="keyword">new</span> SpringConfigurationPropertySources(sources)));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="绑定-Environment-到-SpringApplication"><a href="#绑定-Environment-到-SpringApplication" class="headerlink" title="绑定 Environment 到 SpringApplication"></a>绑定 Environment 到 SpringApplication</h3><p>在 Spring Boot 2.0 中，用于绑定 Environment 属性的机制 @ConfigurationProperties 已经完全彻底修改; 所以相信很多人在迁移 SpringBoot 从 1.x 到 2.x 系列时，或者或少都会踩这块的坑。</p><p>新的 API 可以使得 @ConfigurationProperties 直接在你自己的代码之外使用。绑定规则可以参考：<a href="https://github.com/spring-projects/spring-boot/wiki/Relaxed-Binding-2.0" target="_blank" rel="noopener">Relaxed-Binding-2.0</a>。这里简单演示下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 绑定 CustomProp</span></span><br><span class="line">List&lt;CustomProp&gt; props = Binder.get(run.getEnvironment())</span><br><span class="line">                .bind(<span class="string">"glmapper.property"</span>, Bindable.listOf(CustomProp.class))</span><br><span class="line">                .orElseThrow(IllegalStateException::<span class="keyword">new</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 配置类</span></span><br><span class="line"><span class="meta">@ConfigurationProperties</span>(prefix = <span class="string">"glmapper.property"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomProp</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">    <span class="comment">// 省略 get&amp;set</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>属性配置：<br><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">glmapper:</span></span><br><span class="line"><span class="attr">  property:</span></span><br><span class="line"><span class="attr">    - name:</span> <span class="string">glmapper</span></span><br><span class="line"><span class="attr">      age:</span> <span class="number">26</span></span><br><span class="line"><span class="attr">    - name:</span> <span class="string">slg</span></span><br><span class="line"><span class="attr">      age:</span> <span class="number">26</span></span><br></pre></td></tr></table></figure></p><p>从上面整个构建过程来看，Enviroment 对象构建实际就是 MutablePropertySources 对象填充的过程。Environment 的静态属性和存储容器都是在AbstractEnvironment 中定义的，ConfigurableWebEnvironment 接口提供的 getPropertySources() 方法可以获取到返回的 MutablePropertySources 实例，然后添加额外的 PropertySource。实际上，Environment 的存储容器就是 PropertySource 的子类集合，而 AbstractEnvironment 中使用的实例就是 MutablePropertySources。</p><p>那么到这里相比 Environment 与配置的关系就非常清楚了，一句话概括就是：Environment 是所有配置的管理器，是 Spring 对提供配置的统一接口。前面提到 Environment 管理了所有 Spring 的环境配置，这些配置最终是以 MutablePropertySources 对象的形态存在 Environment  中。下图为 MutablePropertySources 类的继承体系：</p><p><img src="https://glmapper-blog.oss-cn-hangzhou.aliyuncs.com/env/propertySource.jpg" alt=""></p><p>下面继续来看 PropertySources。</p><h2 id="PropertySource-amp-PropertySources"><a href="#PropertySource-amp-PropertySources" class="headerlink" title="PropertySource &amp; PropertySources"></a>PropertySource &amp; PropertySources</h2><p>从名字就能直观看出，PropertySources 是持有一个或者多个 PropertySource 的类。PropertySources 提供了一组基本管理 PropertySource 的方法。</p><h3 id="PropertySource"><a href="#PropertySource" class="headerlink" title="PropertySource"></a>PropertySource</h3><p>下面看下 PropertySource 的源码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">PropertySource</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">final</span> Log logger = LogFactory.getLog(getClass());</span><br><span class="line">    <span class="comment">// 属性名</span></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">final</span> String name;</span><br><span class="line">    <span class="comment">// 属性源</span></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">final</span> T source;</span><br><span class="line">    <span class="comment">// 根据指定 name 和 source 构建</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">PropertySource</span><span class="params">(String name, T source)</span> </span>&#123;</span><br><span class="line">Assert.hasText(name, <span class="string">"Property source name must contain at least one character"</span>);</span><br><span class="line">Assert.notNull(source, <span class="string">"Property source must not be null"</span>);</span><br><span class="line"><span class="keyword">this</span>.name = name;</span><br><span class="line"><span class="keyword">this</span>.source = source;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 根据指定 name 构建，source 默认为 Object 类型</span></span><br><span class="line"><span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">PropertySource</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>(name, (T) <span class="keyword">new</span> Object());</span><br><span class="line">&#125;</span><br><span class="line">    <span class="comment">// 返回当前 PropertySource 的 name</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">this</span>.name;</span><br><span class="line">&#125;</span><br><span class="line">    <span class="comment">// 返回当前 PropertySource 的 source</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> T <span class="title">getSource</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">this</span>.source;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">containsProperty</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> (getProperty(name) != <span class="keyword">null</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Nullable</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> Object <span class="title">getProperty</span><span class="params">(String name)</span></span>;</span><br><span class="line"><span class="comment">// 返回用于集合比较目的的 PropertySource 实现 (ComparisonPropertySource)。</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> PropertySource&lt;?&gt; named(String name) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> ComparisonPropertySource(name);</span><br><span class="line">&#125;</span><br><span class="line">    <span class="comment">// 省略其他两个内部类实现，无实际意义</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>一个 PropertySource 实例对应一个 name，例如 systemProperties、enviromentProperties 等。 PropertySource 包括多种类型的实现，主要包括：</p><ul><li>1、AnsiPropertySource：Ansi.*，包括 AnsiStyle、AnsiColor、AnsiBackground 等</li><li>2、StubPropertySource：在实际的属性源不能在 application context 创建时立即初始化的情况下用作占位符。例如，基于 ServletContext 的属性源必须等待，直到  ServletContext 对象对其封装的 ApplicationContext 可用。在这种情况下，应该使用存根来保存属性源的默认位置/顺序，然后在上下文刷新期间替换存根。<ul><li>ComparisonPropertySource：继承自 StubPropertySource ，所有属性访问方法强制抛出异常，作用就是一个不可访问属性的空实现。</li></ul></li><li>3、EnumerablePropertySource：可枚举的 PropertySource，在其父类的基础上扩展了 getPropertyNames 方法<ul><li>CompositePropertySource：source 为组合类型的 PropertySource 实现</li><li>CommandLinePropertySource：source 为命令行参数类型的 PropertySource 实现，包括两种命令行参数和 java opts 参数两种。</li><li>MapPropertySource：source 为 Map 类型的 PropertySource 实现<ul><li>PropertiesPropertySource：内部的 Map 实例由 Properties 实例转换而来</li><li>JsonPropertySource：内部的 Map 实例由 Json 实例转换而来</li><li>SystemEnvironmentPropertySource：内部的 Map 实例由 system env 获取</li></ul></li></ul></li></ul><p>其他还有 ServletConfigPropertySource、ServletContextPropertySource、AnnotationsPropertySource 等，均可根据名字知晓其 source 来源。</p><h3 id="PropertySources"><a href="#PropertySources" class="headerlink" title="PropertySources"></a>PropertySources</h3><p>PropertySources 接口比较简单，如下所示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">PropertySources</span> <span class="keyword">extends</span> <span class="title">Iterable</span>&lt;<span class="title">PropertySource</span>&lt;?&gt;&gt; </span>&#123;</span><br><span class="line">    <span class="comment">// 从 5.1 版本才提供的</span></span><br><span class="line"><span class="keyword">default</span> Stream&lt;PropertySource&lt;?&gt;&gt; stream() &#123;</span><br><span class="line"><span class="keyword">return</span> StreamSupport.stream(spliterator(), <span class="keyword">false</span>);</span><br><span class="line">&#125;</span><br><span class="line">    <span class="comment">// check name 为 「name」 的数据源是否存在</span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">contains</span><span class="params">(String name)</span></span>;</span><br><span class="line">    <span class="comment">// 根据 name」 获取数据源</span></span><br><span class="line"><span class="meta">@Nullable</span></span><br><span class="line">PropertySource&lt;?&gt; get(String name);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>前面在分析 Enviroment 构建中，可以看到整个过程都是以填充 MutablePropertySources 为主线。MutablePropertySources 是 PropertySources 的默认实现，它允许对包含的属性源进行操作，并提供了一个构造函数用于复制现有的 PropertySources 实例。此外，其内部在 addFirst 和 addLast 等方法中提到了 precedence（优先顺序） ，这些将会影响 PropertyResolver 解析给定属性时搜索属性源的顺序。</p><p>MutablePropertySources 内部就是对 propertySourceList 的一系列管理操作（增删改成等），propertySourceList 其实就是整个配置系统最底层的存储容器，所以就很好理解，配置解析为什么都是在填充 MutablePropertySources 这个对象了。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 配置最终都被塞到这里了</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> List&lt;PropertySource&lt;?&gt;&gt; propertySourceList = <span class="keyword">new</span> CopyOnWriteArrayList&lt;&gt;();</span><br></pre></td></tr></table></figure><p>最后我们再来看下，Spring 中 Environment 属性是如何被访问的。</p><h2 id="Environment-属性访问"><a href="#Environment-属性访问" class="headerlink" title="Environment 属性访问"></a>Environment 属性访问</h2><p>单从 Environment 代码来看，其内部并没有提供访问属性的方法，这些访问属性的方法都由其父类接口 PropertyResolver 提供。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">PropertyResolver</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 判断属性是否存在</span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">containsProperty</span><span class="params">(String key)</span></span>;</span><br><span class="line">    <span class="comment">// 获取属性</span></span><br><span class="line"><span class="meta">@Nullable</span></span><br><span class="line"><span class="function">String <span class="title">getProperty</span><span class="params">(String key)</span></span>;</span><br><span class="line">    <span class="comment">// 获取属性，如果没有则提供默认值</span></span><br><span class="line"><span class="function">String <span class="title">getProperty</span><span class="params">(String key, String defaultValue)</span></span>;</span><br><span class="line"><span class="meta">@Nullable</span></span><br><span class="line">&lt;T&gt; <span class="function">T <span class="title">getProperty</span><span class="params">(String key, Class&lt;T&gt; targetType)</span></span>;</span><br><span class="line">&lt;T&gt; <span class="function">T <span class="title">getProperty</span><span class="params">(String key, Class&lt;T&gt; targetType, T defaultValue)</span></span>;</span><br><span class="line">    <span class="comment">// 获取 Required 属性</span></span><br><span class="line"><span class="function">String <span class="title">getRequiredProperty</span><span class="params">(String key)</span> <span class="keyword">throws</span> IllegalStateException</span>;</span><br><span class="line">&lt;T&gt; <span class="function">T <span class="title">getRequiredProperty</span><span class="params">(String key, Class&lt;T&gt; targetType)</span> <span class="keyword">throws</span> IllegalStateException</span>;</span><br><span class="line">    <span class="comment">// 解析占位符</span></span><br><span class="line"><span class="function">String <span class="title">resolvePlaceholders</span><span class="params">(String text)</span></span>;</span><br><span class="line">    <span class="comment">// 解析 Required占位符</span></span><br><span class="line"><span class="function">String <span class="title">resolveRequiredPlaceholders</span><span class="params">(String text)</span> <span class="keyword">throws</span> IllegalArgumentException</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Environment 中提供默认访问属性的对象实现是 PropertySourcesPropertyResolver，其定义在 AbstractEnvironment 这个抽象类中：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> ConfigurablePropertyResolver propertyResolver =</span><br><span class="line"><span class="keyword">new</span> PropertySourcesPropertyResolver(<span class="keyword">this</span>.propertySources);</span><br></pre></td></tr></table></figure><p>那文章最后就来看下 PropertySourcesPropertyResolver 是如何访问配置属性的吧。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> &lt;T&gt; <span class="function">T <span class="title">getProperty</span><span class="params">(String key, Class&lt;T&gt; targetValueType, <span class="keyword">boolean</span> resolveNestedPlaceholders)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.propertySources != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="comment">// 遍历所有的 PropertySource</span></span><br><span class="line">        <span class="keyword">for</span> (PropertySource&lt;?&gt; propertySource : <span class="keyword">this</span>.propertySources) &#123;</span><br><span class="line">            <span class="comment">// 省略日志</span></span><br><span class="line">            <span class="comment">// 从 propertySource 中根据指定的 key 获取值</span></span><br><span class="line">            Object value = propertySource.getProperty(key);</span><br><span class="line">            <span class="comment">// 如果值不为空-&gt;选用第一个不为 null 的匹配 key 的属性值</span></span><br><span class="line">            <span class="keyword">if</span> (value != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="comment">// 解析占位符替换, 如$&#123;server.port&#125;，底层委托到 PropertyPlaceholderHelper 完成</span></span><br><span class="line">                <span class="keyword">if</span> (resolveNestedPlaceholders &amp;&amp; value <span class="keyword">instanceof</span> String) &#123;</span><br><span class="line">                    value = resolveNestedPlaceholders((String) value);</span><br><span class="line">                &#125;</span><br><span class="line">                logKeyFound(key, propertySource, value);</span><br><span class="line">                <span class="comment">// 进行一次类型转换，具体由 DefaultConversionService 处理</span></span><br><span class="line">                <span class="keyword">return</span> convertValueIfNecessary(value, targetValueType);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 省略日志 ...</span></span><br><span class="line">    <span class="comment">// 没有的话就返回 null</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里有一点需要注意，就是如果出现多个 PropertySource 中存在同名的 key，则只会返回第一个 PropertySource 对应 key 的属性值。在实际的业务开发中，如果需要自定义一些环境属性，最好要对各个 PropertySource 的顺序有足够的掌握。</p><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>整体看来，Spring 中对于配置的管理还是比较简单的，从 Environment 到 PropertySource 整个过程没有那么绕，就是单纯的把来自各个地方的配置统一塞到 MutablePropertySources 中，对外又通过 Environment 接口对外提供接口访问。</p><p>最后感谢大家一年来的关注和支持，**和 2019 说声再见，和 2020 说声你好！祝大家元旦快乐。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;注：本文基于 SpringBoot 2.1.11 版本&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;说到配置，你能想到的是什么？&lt;/strong&gt; &lt;/p&gt;
&lt;p&gt;在日常的开发和运维过程中，可以说配置都是及其重要的，因为它可能影响到应
      
    
    </summary>
    
      <category term="springboot" scheme="http://www.glmapper.com/categories/springboot/"/>
    
    
      <category term="springboot" scheme="http://www.glmapper.com/tags/springboot/"/>
    
      <category term="PropertySource" scheme="http://www.glmapper.com/tags/PropertySource/"/>
    
  </entry>
  
  <entry>
    <title>SpringBoot 源码解析系列 &amp; SpringBoot 实践系列综述</title>
    <link href="http://www.glmapper.com/2019/12/24/springboot-series-summary/"/>
    <id>http://www.glmapper.com/2019/12/24/springboot-series-summary/</id>
    <published>2019-12-24T10:55:55.000Z</published>
    <updated>2019-12-26T16:42:42.037Z</updated>
    
    <content type="html"><![CDATA[<ul><li>源码解析系列：<ul><li><a href="http://www.glmapper.com/2019/10/13/springboot-series-fatjar/">SpringBoot 系列-FatJar技术解析</a></li><li><a href="http://www.glmapper.com/2019/12/07/springboot-series-started/">SpringBoot 系列-启动过程解析</a></li><li><a href="http://www.glmapper.com/2019/04/13/springboot-series-event/">SpringBoot 系列-事件机制解析</a></li><li><a href="http://www.glmapper.com/2019/12/14/springboot-series-bean-life/">SpringBoot 系列-Bean 的生命周期与扩展</a></li><li><a href="http://www.glmapper.com/2019/12/14/springboot-series-log/">SpringBoot 系列-日志框架解析</a></li><li><a href="http://www.glmapper.com/2019/12/09/springboot-series-access-resource/">SpringBoot 系列-资源访问解析</a></li><li><a href="http://www.glmapper.com/2019/10/06/springboot-series-server-tomcat/">SpringBoot 系列-内嵌Web容器解析</a></li><li>SpringBoot 系列-自动配置解析</li><li>SpringBoot 系列-外部化配置解析</li><li>SpringBoot 系列-Production-ready 解析</li></ul></li><li>实践系列<ul><li>SpringBoot 实践-集成消息中间件</li><li>SpringBoot 实践-集成 Dubbo</li><li>SpringBoot 实践-集成 REDIS</li><li>SpringBoot 实践-集成 NOSQL</li><li>SpringBoot 实践-集成 Oauth2</li><li>SpringBoot 实践-集成 Quartz Scheduler</li><li>SpringBoot 实践-集成 服务链路跟踪组件</li><li>SpringBoot 实践-镜像化部署</li><li>SpringBoot 实践-使用 K8S 部署 SpringBoot 工程</li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;源码解析系列：&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://www.glmapper.com/2019/10/13/springboot-series-fatjar/&quot;&gt;SpringBoot 系列-FatJar技术解析&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a hre
      
    
    </summary>
    
      <category term="springboot" scheme="http://www.glmapper.com/categories/springboot/"/>
    
    
      <category term="springboot" scheme="http://www.glmapper.com/tags/springboot/"/>
    
  </entry>
  
  <entry>
    <title>git ssh 配置及使用</title>
    <link href="http://www.glmapper.com/2019/12/20/tool-config-git-ssh/"/>
    <id>http://www.glmapper.com/2019/12/20/tool-config-git-ssh/</id>
    <published>2019-12-20T06:50:23.000Z</published>
    <updated>2019-12-20T07:14:55.687Z</updated>
    
    <content type="html"><![CDATA[<p>配置使用 ssh 方式来提交和克隆代码大概可以分为以下几个步骤：</p><ul><li>设置 Git 的 user name 和 email：(如果是第一次的话)</li><li>检查是否已经有 SSH Key。</li><li>生成密钥</li><li>添加密钥到 ssh-agent</li><li>登陆 github, 添加 ssh</li></ul><h2 id="设置-Git-的-user-name-和-email"><a href="#设置-Git-的-user-name-和-email" class="headerlink" title="设置 Git 的 user name 和 email"></a>设置 Git 的 user name 和 email</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 用户名替换成自己的用户名</span></span><br><span class="line">git config --global user.name <span class="string">"glmapper"</span></span><br><span class="line"><span class="comment"># 邮箱替换换成自己的邮箱</span></span><br><span class="line">git config --global user.email  <span class="string">"glmapper_2018@163.com"</span></span><br></pre></td></tr></table></figure><h2 id="检查是否已经有-SSH-Key"><a href="#检查是否已经有-SSH-Key" class="headerlink" title="检查是否已经有 SSH Key"></a>检查是否已经有 SSH Key</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 到 .ssh 目录下</span></span><br><span class="line"><span class="built_in">cd</span> ~/.ssh</span><br></pre></td></tr></table></figure><p>ls 列出所有文件，看是否存在 id_isa 和 id_isa.pub 文件（也可以是别的文件名，只要 yourName 和 yourName.pub 成对存在），如果存在的话，证明已经存在 ssh key了，可以直接跳过 <code>生成密钥</code> 这一步骤</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alipaynet_rsa      alipaynet_rsa.pub  config             id_rsa             id_rsa.pub         known_hosts        ssh-rsa-bridge     ssh-rsa-bridge.pub</span><br></pre></td></tr></table></figure><h2 id="生成秘钥"><a href="#生成秘钥" class="headerlink" title="生成秘钥"></a>生成秘钥</h2><p>上述因为我已经配置过了，如果没有的话，可参考本节进行相关操作</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 生成秘钥</span></span><br><span class="line">ssh-keygen -t rsa -C <span class="string">"glmapper_2018@163.com"</span></span><br></pre></td></tr></table></figure><p>如果不需要密码的话，上述执行过程可以一直回车跳过；执行完成之后将会得到两个文件：id_rsa 和 id_rsa.pub。windows 下默认的路径是 <code>C:\Users\Administrator\.ssh</code> , Mac/Linux 默认是 <code>~/.ssh</code>。</p><h2 id="添加密钥到-ssh-agent"><a href="#添加密钥到-ssh-agent" class="headerlink" title="添加密钥到 ssh-agent"></a>添加密钥到 ssh-agent</h2><p>确保 ssh-agent 是可用的。ssh-agent 是一种控制用来保存公钥身份验证所使用的私钥的程序，ssh-agent 就是一个密钥管理器，运行 ssh-agent 以后，使用ssh-add 将私钥交给 ssh-agent 保管，其他程序需要身份验证的时候可以将验证申请交给 ssh-agent 来完成整个认证过程。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># start the ssh-agent in the background</span></span><br><span class="line"><span class="built_in">eval</span> <span class="string">"<span class="variable">$(ssh-agent -s)</span>"</span></span><br></pre></td></tr></table></figure><p>执行完之后将会输出如下信息：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Agent pid 64345   #  64345 为agent 的进程号</span><br></pre></td></tr></table></figure><p>添加生成的 SSH key 到 ssh-agent：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-add ~/.ssh/id_rsa</span><br></pre></td></tr></table></figure><h2 id="登陆-Github，-添加-ssh"><a href="#登陆-Github，-添加-ssh" class="headerlink" title="登陆 Github， 添加 ssh"></a>登陆 Github， 添加 ssh</h2><p><a href="https://github.com/settings/keys" target="_blank" rel="noopener">https://github.com/settings/keys</a> 添加 SSH key，把 id_rsa.pub 文件里的内容复制到这里即可。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;配置使用 ssh 方式来提交和克隆代码大概可以分为以下几个步骤：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;设置 Git 的 user name 和 email：(如果是第一次的话)&lt;/li&gt;
&lt;li&gt;检查是否已经有 SSH Key。&lt;/li&gt;
&lt;li&gt;生成密钥&lt;/li&gt;
&lt;li&gt;添加密钥
      
    
    </summary>
    
      <category term="git" scheme="http://www.glmapper.com/categories/git/"/>
    
    
      <category term="git" scheme="http://www.glmapper.com/tags/git/"/>
    
      <category term="工具" scheme="http://www.glmapper.com/tags/%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title>SpringBoot 系列-Bean 的生命周期与扩展</title>
    <link href="http://www.glmapper.com/2019/12/14/springboot-series-bean-life/"/>
    <id>http://www.glmapper.com/2019/12/14/springboot-series-bean-life/</id>
    <published>2019-12-14T03:24:14.000Z</published>
    <updated>2019-12-15T15:43:58.150Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>本篇基于 SpringBoot 2.2.2.RELEASE 版本，Spring  各个版本之间多少存在一些差异，不过主流程基本相同；大家在阅读过程中需关注这点。</p></blockquote><p>继续承接上一篇 <a href="http://www.glmapper.com/2019/12/07/springboot-series-started/">SpringBoot 系列-启动过程分析</a>，本篇围绕一个 bean 的生命周期，对 bean 进行一些修改和扩展。本篇将涉及到以下主要内容：</p><ul><li><a href="">阅读之前</a></li><li><a href="">BeanDefinition 解析时机和过程</a><ul><li><a href="">invokeBeanFactoryPostProcessors 执行过程分析</a></li><li><a href="">invokeBeanDefinitionRegistryPostProcessors 执行过程分析</a></li></ul></li><li><a href="">BeanFactoryPostProcessor 对 BeanDefinition 的修改</a><ul><li><a href="">案例工程中 BeanFactoryPostProcessor 的实现</a></li></ul></li><li><a href="">通过监听 ApplicationEnvironmentPreparedEvent 事件修改属性值</a></li><li><a href="">@Value 注入 &amp; @Autowired 注入</a><ul><li><a href="">Bean 属性注入发生的时机</a></li><li><a href="">Bean 属性注入发生的过程</a></li></ul></li><li><a href="">Bean 的实例化过程</a><ul><li><a href="">BeanPostProcessor 的处理时机</a></li><li><a href="">使用 BeanPostProcessor 修改 Bean</a></li><li><a href="">使用 InitializingBean</a></li><li><a href="">指定 Bean 的 init-method 方法</a></li></ul></li><li><a href="">总结</a><ul><li><a href="">BeanFactoryPostProcessor 对于 init-method 的影响</a></li><li><a href="">附：案例工程地址及参考</a></li></ul></li></ul><h2 id="阅读之前"><a href="#阅读之前" class="headerlink" title="阅读之前"></a>阅读之前</h2><p>下面是本篇文章的“主人公” TestBeanService ，定义如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestBeanService</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 依赖注入</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> InjectBeanService injectBeanService;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 属性注入</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;spring.application.name&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> String appName;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> injectBeanService.testInject();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>TestBeanService 里面包括两个属性，一个是 injectBeanService ，另外一个是 appName，分别通过 @Autowired 和 @Value 注入值。本篇最终希望完成的目标是能够完成了解 Bean 属性注入的过程，以及 Bean 的实例化过程；除此之外，从 Spring 扩展的角度，来对 BeanFactoryPostProcess、BeanPostProcess、ApplicationListener、InitializingBean 以及 initMethod 的执行时机和作用进行分析。</p><h2 id="TestBeanService-被解析成-BeanDifinition-的时机与过程"><a href="#TestBeanService-被解析成-BeanDifinition-的时机与过程" class="headerlink" title="TestBeanService 被解析成 BeanDifinition 的时机与过程"></a>TestBeanService 被解析成 BeanDifinition 的时机与过程</h2><blockquote><p>Spring 容器刷新流程非常复杂，当我们想 debug BeanDifinition 加载过程时可能没法很快找到入口，这里可以直接面向 BeanDifinition 的最终去向来 debug。我们知道 BeanFactory 接口本身是不具体注册 BeanDifinition 能力的，这个能力是由 BeanDefinitionRegistry 接口提供。那么就看下 BeanDefinitionRegistry 的 registerBeanDefinition 方法有几个具体的实现，然后在这几个实现出打上断点，执行找到具体的处理入口。</p></blockquote><p>我们将断点打在 DefaultListableBeanFactory#registerBeanDefinition 这个方法入口处，debug 模式运行工程，可以看到断点进入时的情况如下图所示：</p><p><img src="https://glmapper-blog.oss-cn-hangzhou.aliyuncs.com/beanlife/life-one.jpg" alt=""></p><p>这里通过执行堆栈逆向找到 BeanDifinition 的加载入口是容器刷新阶段的 invokeBeanFactoryPostProcessors 方法；这里就详细分析下 testBeanService 这个 beandifition 是怎么被注册到容器中的。</p><h3 id="invokeBeanFactoryPostProcessors-执行过程分析"><a href="#invokeBeanFactoryPostProcessors-执行过程分析" class="headerlink" title="invokeBeanFactoryPostProcessors 执行过程分析"></a>invokeBeanFactoryPostProcessors 执行过程分析</h3><p>invokeBeanFactoryPostProcessors 这个方法实现非常长，但是基本处理过程很简单，存在很多重复的步骤。为了方便理解整个过程，这里还是有必要贴一下代码，代码中会详细标注所做的事情是什么，这个过程是构建 BeanFactory 非常重要一步。掌握这个过程，就可以随意玩转 BeanFactoryPostProcessor 了。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">invokeBeanFactoryPostProcessors</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">ConfigurableListableBeanFactory beanFactory, List&lt;BeanFactoryPostProcessor&gt; beanFactoryPostProcessors)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Invoke BeanDefinitionRegistryPostProcessors first, if any.</span></span><br><span class="line">    Set&lt;String&gt; processedBeans = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">    <span class="comment">// 当前 beanFactory 是否是 BeanDefinitionRegistry 类型</span></span><br><span class="line">    <span class="comment">// 只有是 BeanDefinitionRegistry 类型，才具备注册 beanDefinition 的能力</span></span><br><span class="line">    <span class="keyword">if</span> (beanFactory <span class="keyword">instanceof</span> BeanDefinitionRegistry) &#123;</span><br><span class="line">        BeanDefinitionRegistry registry = (BeanDefinitionRegistry) beanFactory;</span><br><span class="line">        <span class="comment">// 普通的 BeanFactoryPostProcessor 集合</span></span><br><span class="line">        List&lt;BeanFactoryPostProcessor&gt; regularPostProcessors = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="comment">// BeanDefinitionRegistryPostProcessor 类型处理器集合</span></span><br><span class="line">        List&lt;BeanDefinitionRegistryPostProcessor&gt; registryProcessors = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="comment">// 这里 beanFactoryPostProcessors 是在 SharedMetadataReaderFactoryContextInitializer 中加进来的，是 Spring 自己的处理器</span></span><br><span class="line">        <span class="keyword">for</span> (BeanFactoryPostProcessor postProcessor : beanFactoryPostProcessors) &#123;</span><br><span class="line">            <span class="comment">// 如果是 BeanDefinitionRegistryPostProcessor 类型，就加到 registryProcessors</span></span><br><span class="line">            <span class="keyword">if</span> (postProcessor <span class="keyword">instanceof</span> BeanDefinitionRegistryPostProcessor) &#123;</span><br><span class="line">                BeanDefinitionRegistryPostProcessor registryProcessor =</span><br><span class="line">                        (BeanDefinitionRegistryPostProcessor) postProcessor;</span><br><span class="line">                <span class="comment">// 执行 BeanDefinitionRegistryPostProcessor 后置处理</span></span><br><span class="line">                registryProcessor.postProcessBeanDefinitionRegistry(registry);</span><br><span class="line">                registryProcessors.add(registryProcessor);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">// 否则就放到 regularPostProcessors</span></span><br><span class="line">                regularPostProcessors.add(postProcessor);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 不要在这里初始化 FactoryBeans：需要保留所有未初始化的常规bean，以使 beanFacotryPostProcessor 对其处理！</span></span><br><span class="line">        <span class="comment">// 分离实现 PriorityOrdered，Ordered和其余优先级的 BeanDefinitionRegistryPostProcessor。</span></span><br><span class="line">        List&lt;BeanDefinitionRegistryPostProcessor&gt; currentRegistryProcessors = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 首先，调用实现 PriorityOrdered 的 BeanDefinitionRegistryPostProcessors。</span></span><br><span class="line">        String[] postProcessorNames =</span><br><span class="line">                beanFactory.getBeanNamesForType(BeanDefinitionRegistryPostProcessor.class, <span class="keyword">true</span>, <span class="keyword">false</span>);</span><br><span class="line">        <span class="comment">// 遍历 BeanDefinitionRegistryPostProcessors</span></span><br><span class="line">        <span class="keyword">for</span> (String ppName : postProcessorNames) &#123;</span><br><span class="line">            <span class="comment">// 只处理实现 PriorityOrdered 接口的 BeanDefinitionRegistryPostProcessor</span></span><br><span class="line">            <span class="keyword">if</span> (beanFactory.isTypeMatch(ppName, PriorityOrdered.class)) &#123;</span><br><span class="line">                <span class="comment">// 符合上述条件的 BeanDefinitionRegistryPostProcessor 放到 currentRegistryProcessors 中，供后面使用</span></span><br><span class="line">                currentRegistryProcessors.add(beanFactory.getBean(ppName, BeanDefinitionRegistryPostProcessor.class));</span><br><span class="line">                <span class="comment">// 标记当前 postProcessor 已经处理过了</span></span><br><span class="line">                processedBeans.add(ppName);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 排序</span></span><br><span class="line">        sortPostProcessors(currentRegistryProcessors, beanFactory);</span><br><span class="line">        registryProcessors.addAll(currentRegistryProcessors);</span><br><span class="line">        <span class="comment">// 调用 BeanDefinitionRegistryPostProcessor 后置处理器</span></span><br><span class="line">        invokeBeanDefinitionRegistryPostProcessors(currentRegistryProcessors, registry);</span><br><span class="line">        currentRegistryProcessors.clear();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 接下来，调用实现 Ordered的BeanDefinitionRegistryPostProcessors</span></span><br><span class="line">        postProcessorNames = beanFactory.getBeanNamesForType(BeanDefinitionRegistryPostProcessor.class, <span class="keyword">true</span>, <span class="keyword">false</span>);</span><br><span class="line">        <span class="keyword">for</span> (String ppName : postProcessorNames) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!processedBeans.contains(ppName) &amp;&amp; beanFactory.isTypeMatch(ppName, Ordered.class)) &#123;</span><br><span class="line">                currentRegistryProcessors.add(beanFactory.getBean(ppName, BeanDefinitionRegistryPostProcessor.class));</span><br><span class="line">                processedBeans.add(ppName);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        sortPostProcessors(currentRegistryProcessors, beanFactory);</span><br><span class="line">        registryProcessors.addAll(currentRegistryProcessors);</span><br><span class="line">        invokeBeanDefinitionRegistryPostProcessors(currentRegistryProcessors, registry);</span><br><span class="line">        currentRegistryProcessors.clear();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 最后，调用所有其他 BeanDefinitionRegistryPostProcessor，直到不再出现（保证全部处理完）。</span></span><br><span class="line">        <span class="keyword">boolean</span> reiterate = <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">while</span> (reiterate) &#123;</span><br><span class="line">            reiterate = <span class="keyword">false</span>;</span><br><span class="line">            postProcessorNames = beanFactory.getBeanNamesForType(BeanDefinitionRegistryPostProcessor.class, <span class="keyword">true</span>, <span class="keyword">false</span>);</span><br><span class="line">            <span class="keyword">for</span> (String ppName : postProcessorNames) &#123;</span><br><span class="line">                <span class="keyword">if</span> (!processedBeans.contains(ppName)) &#123;</span><br><span class="line">                    currentRegistryProcessors.add(beanFactory.getBean(ppName, BeanDefinitionRegistryPostProcessor.class));</span><br><span class="line">                    processedBeans.add(ppName);</span><br><span class="line">                    reiterate = <span class="keyword">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            sortPostProcessors(currentRegistryProcessors, beanFactory);</span><br><span class="line">            registryProcessors.addAll(currentRegistryProcessors);</span><br><span class="line">            invokeBeanDefinitionRegistryPostProcessors(currentRegistryProcessors, registry);</span><br><span class="line">            currentRegistryProcessors.clear();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 现在，调用到目前为止已处理的所有处理器的 postProcessBeanFactory 回调。</span></span><br><span class="line">        invokeBeanFactoryPostProcessors(registryProcessors, beanFactory);</span><br><span class="line">        invokeBeanFactoryPostProcessors(regularPostProcessors, beanFactory);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 调用在上下文实例中注册的工厂处理器。就是前面提到的 SharedMetadataReaderFactoryContextInitializer 中注册的</span></span><br><span class="line">        invokeBeanFactoryPostProcessors(beanFactoryPostProcessors, beanFactory);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 这里再次拿到所有的 BeanFactoryPostProcessor</span></span><br><span class="line">    String[] postProcessorNames =</span><br><span class="line">            beanFactory.getBeanNamesForType(BeanFactoryPostProcessor.class, <span class="keyword">true</span>, <span class="keyword">false</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 同样将实现 PriorityOrdered、Order 和普通的 BeanFactoryPostProcessor 分离开</span></span><br><span class="line">    List&lt;BeanFactoryPostProcessor&gt; priorityOrderedPostProcessors = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    List&lt;String&gt; orderedPostProcessorNames = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    List&lt;String&gt; nonOrderedPostProcessorNames = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    <span class="keyword">for</span> (String ppName : postProcessorNames) &#123;</span><br><span class="line">        <span class="keyword">if</span> (processedBeans.contains(ppName)) &#123;</span><br><span class="line">            <span class="comment">// 跳过-已在上述第一阶段处理过</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (beanFactory.isTypeMatch(ppName, PriorityOrdered.class)) &#123;</span><br><span class="line">            priorityOrderedPostProcessors.add(beanFactory.getBean(ppName, BeanFactoryPostProcessor.class));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (beanFactory.isTypeMatch(ppName, Ordered.class)) &#123;</span><br><span class="line">            orderedPostProcessorNames.add(ppName);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            nonOrderedPostProcessorNames.add(ppName);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 首先，调用实现PriorityOrdered的BeanFactoryPostProcessors。</span></span><br><span class="line">    sortPostProcessors(priorityOrderedPostProcessors, beanFactory);</span><br><span class="line">    <span class="comment">// 优先执行实现 PriorityOrdered 接口的 BeanFactoryPostProcessor</span></span><br><span class="line">    invokeBeanFactoryPostProcessors(priorityOrderedPostProcessors, beanFactory);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 接下来，调用实现Ordered的BeanFactoryPostProcessors。</span></span><br><span class="line">    List&lt;BeanFactoryPostProcessor&gt; orderedPostProcessors = <span class="keyword">new</span> ArrayList&lt;&gt;(orderedPostProcessorNames.size());</span><br><span class="line">    <span class="keyword">for</span> (String postProcessorName : orderedPostProcessorNames) &#123;</span><br><span class="line">        orderedPostProcessors.add(beanFactory.getBean(postProcessorName, BeanFactoryPostProcessor.class));</span><br><span class="line">    &#125;</span><br><span class="line">    sortPostProcessors(orderedPostProcessors, beanFactory);</span><br><span class="line">    <span class="comment">// 执行实现 Ordered 接口的 BeanFactoryPostProcessor</span></span><br><span class="line">    invokeBeanFactoryPostProcessors(orderedPostProcessors, beanFactory);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 最后，调用所有其他 BeanFactoryPostProcessor</span></span><br><span class="line">    List&lt;BeanFactoryPostProcessor&gt; nonOrderedPostProcessors = <span class="keyword">new</span> ArrayList&lt;&gt;(nonOrderedPostProcessorNames.size());</span><br><span class="line">    <span class="keyword">for</span> (String postProcessorName : nonOrderedPostProcessorNames) &#123;</span><br><span class="line">        nonOrderedPostProcessors.add(beanFactory.getBean(postProcessorName, BeanFactoryPostProcessor.class));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 执行其他没有实现任何优先级接口的 BeanFactoryPostProcessor</span></span><br><span class="line">    invokeBeanFactoryPostProcessors(nonOrderedPostProcessors, beanFactory);</span><br><span class="line">    <span class="comment">// 清除缓存的合并 beanDefinition，因为后处理器可能已经修改了原始元数据</span></span><br><span class="line">    beanFactory.clearMetadataCache();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面代码段中大体就是，先处理 BeanDefinitionRegistryPostProcessor 类型的 BeanFactoryPostProcessor ，然后再处理普通的 BeanFactoryPostProcessor；在这里处理过程中，会根据一些排序规则来调整各个 BeanFactoryPostProcessor 的执行顺序。</p><p>这里先处理 BeanDefinitionRegistryPostProcessor 类型的 BeanFactoryPostProcessor 是一定的，因为需要在这个阶段去注册 BeanDefinition。在 classpath 下的所有 BeanDefinition 都被注册之后，再执行普通 BeanFactoryPostProcessor 的后置回调，这样就可以覆盖所有的 BeanDefinition。</p><h3 id="invokeBeanDefinitionRegistryPostProcessors-执行过程分析"><a href="#invokeBeanDefinitionRegistryPostProcessors-执行过程分析" class="headerlink" title="invokeBeanDefinitionRegistryPostProcessors 执行过程分析"></a>invokeBeanDefinitionRegistryPostProcessors 执行过程分析</h3><p>在第一次调用 invokeBeanDefinitionRegistryPostProcessors 时，当前的 BeanDefinitionRegistryPostProcessor 只有一个，就是 org.springframework.context.annotation.ConfigurationClassPostProcessor 。</p><blockquote><p>在 ConfigurationClassPostProcessor 类中，会解析 @Configuration、@ComponentScan、@ComponentScans、@Import 等注解。ConfigurationClassPostProcessor 实现了 BeanDefinitionRegistryPostProcessor 接口，而 BeanDefinitionRegistryPostProcessor 接口继承了 BeanFactoryPostProcessor 接口，所以 ConfigurationClassPostProcessor 中需要重写 postProcessBeanDefinitionRegistry() 方法和 postProcessBeanFactory() 方法。而 ConfigurationClassPostProcessor 类的作用就是通过这两个方法去实现的。更多细节可以参考 <a href="https://blog.csdn.net/qq_34436819/article/details/100944204" target="_blank" rel="noopener">ConfigurationClassPostProcessor源码解析</a> 这篇文章，写的非常 nice。</p></blockquote><p>invokeBeanDefinitionRegistryPostProcessors 处理的核心过程如下：</p><ul><li>1、ConfigurationClassPostProcessor#postProcessBeanDefinitionRegistry：BeanDefinition 触发加载的入口</li><li>2、ConfigurationClassPostProcessor#processConfigBeanDefinitions：解析配置类，在此处会解析配置类上的注解(ComponentScan扫描出的类，@Import注册的类，以及@Bean方法定义的类)</li><li>3、ComponentScanAnnotationParser#parse：根据注解的属性值来过滤加载 classpath 下的 beanDefinition（默认条件就是 basePackages，默认的 basePackages 为当前启动类的根包）</li><li>4、ClassPathBeanDefinitionScanner#doScan：处理 basePackages 下所以的 beanDefinition，被打了 @Service、@Compoment 等注解的类都会被解析到</li><li>5、DefaultListableBeanFactory#registerBeanDefinition：将 beanDefinition 注册到 BeanFactory 中（beanDefinitionMap 中）</li></ul><p>那么到这里 TestBeanService 的 BeanDefinition 就被注册到 BeanFactory 中了。</p><h2 id="BeanFactoryPostProcessor-对-BeanDefinition-的修改"><a href="#BeanFactoryPostProcessor-对-BeanDefinition-的修改" class="headerlink" title="BeanFactoryPostProcessor 对 BeanDefinition 的修改"></a>BeanFactoryPostProcessor 对 BeanDefinition 的修改</h2><p>在本篇文章所对应的案例工程中，也实现了一个 BeanFactoryPostProcessor ，没有实现任何排序接口。这个 TestBeanServiceBeanFactoryPostProcessor 的作用是将原来的 TestBeanService 修改为 ProxyTestBeanService。代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestBeanServiceBeanFactoryPostProcessor</span> <span class="keyword">implements</span> <span class="title">BeanFactoryPostProcessor</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">postProcessBeanFactory</span><span class="params">(ConfigurableListableBeanFactory beanFactory)</span> <span class="keyword">throws</span> BeansException </span>&#123;</span><br><span class="line">        <span class="comment">// 根据类型拿到所有的 beanNames</span></span><br><span class="line">        Iterable&lt;String&gt; beanNames = getBeanNames(beanFactory, TestBeanService.class);</span><br><span class="line">        <span class="comment">// 这里因为只有一个 TestBeanService ，所以只处理第一个</span></span><br><span class="line">        beanNames.forEach(beanName -&gt; &#123;</span><br><span class="line">            System.out.println(<span class="string">"begin to execute BeanFactoryPostProcessor..."</span>);</span><br><span class="line">            BeanDefinitionRegistry beanDefinitionRegistry = (BeanDefinitionRegistry) beanFactory;</span><br><span class="line">            <span class="comment">// 先从工程中拿到原始 beanDefinition</span></span><br><span class="line">            BeanDefinition beanDefinition = beanFactory.getBeanDefinition(beanName);</span><br><span class="line">            <span class="comment">// 这里构建一个新的 BeanDefinition，类型为 ProxyTestBeanService，ProxyTestBeanService 是 TestBeanService 的子类</span></span><br><span class="line">            RootBeanDefinition proxy = <span class="keyword">new</span> RootBeanDefinition(ProxyTestBeanService.class);</span><br><span class="line">            <span class="comment">// 这里设置指定的initMethod</span></span><br><span class="line">            proxy.setInitMethodName(beanDefinition.getInitMethodName());</span><br><span class="line">            <span class="comment">// 设置一些属性</span></span><br><span class="line">            proxy.setPropertyValues(beanDefinition.getPropertyValues());</span><br><span class="line">            proxy.setPrimary(beanDefinition.isPrimary());</span><br><span class="line">            proxy.setRole(BeanDefinition.ROLE_APPLICATION);</span><br><span class="line">            <span class="comment">// 将原始 beanDefinition 移除掉</span></span><br><span class="line">            beanDefinitionRegistry.removeBeanDefinition(beanName);</span><br><span class="line">            <span class="comment">// 将代理的新的 beanDefinition 注册进去</span></span><br><span class="line">            beanDefinitionRegistry.registerBeanDefinition(beanName,proxy);</span><br><span class="line">            System.out.println(<span class="string">"current bean type is : "</span> + proxy.getBeanClass().getTypeName());</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在 <a href="">invokeBeanFactoryPostProcessors 执行过程分析</a>中已经分析了 BeanFactoryPostProcessor 执行的时机和过程，这里不再赘述。TestBeanServiceBeanFactoryPostProcessor 的作用就是先将原始的 TestBeanService 的 Beandefinition 从容器中移除掉，然后构建一个 ProxyTestBeanService 的 Beandefinition，然后注册到容器中，beanName 没有变，所以通过 BeanFactoryPostProcessor 可以修改最原始的 Bean 信息，也可以通过 BeanFactoryPostProcessor 来动态注册一个新的 Bean。</p><h2 id="通过监听-ApplicationEnvironmentPreparedEvent-事件修改属性值"><a href="#通过监听-ApplicationEnvironmentPreparedEvent-事件修改属性值" class="headerlink" title="通过监听 ApplicationEnvironmentPreparedEvent 事件修改属性值"></a>通过监听 ApplicationEnvironmentPreparedEvent 事件修改属性值</h2><p>上面完成了对 TestBeanService 的 BeanDefinition 的修改，将 TestBeanService 对象换成了 ProxyTestBeanService。前面提到 TestBeanService 中有两个需要注入的值，一个是通过 @Autowired 注入，一个是通过 @Value 注入，先来看 @Value 注入。@Value 注入的值来自 Enviroment，这里关于 Enviroment 和配置解析及构建不多说，本篇中关注的是如何将 @Value 注入的值改变掉。</p><p>ApplicationEnvironmentPreparedEvent 事件是在环境准备完成时发送的事件，此时 Enviroment 已经准备好，可以随时为容器刷新提供环境变量支持。那么既然此时容器中的 Enviroment 对象已经 ready ，说明配置的 application.properties、系统参数等均已经被解析好了，而此时目标 Bean 还没有被刷新，其内部需要被注入的属性值还没有被注入，那么此时就可以通过监听这个事件，来对 Enviroment 中已经准备好的值进行修改，以改变实际被注入的值。代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ChangeAppNameListener</span> <span class="keyword">implements</span> <span class="title">ApplicationListener</span>&lt;<span class="title">ApplicationEnvironmentPreparedEvent</span>&gt; </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onApplicationEvent</span><span class="params">(ApplicationEnvironmentPreparedEvent event)</span> </span>&#123;</span><br><span class="line">        ConfigurableEnvironment environment = event.getEnvironment();</span><br><span class="line">        <span class="comment">// 获取原始 spring.application.name 的值</span></span><br><span class="line">        String applicationName = environment.getProperty(<span class="string">"spring.application.name"</span>);</span><br><span class="line">        System.out.println(<span class="string">"origin applicationName is : "</span> + applicationName);</span><br><span class="line">        <span class="comment">// 修改 spring.application.name</span></span><br><span class="line">        Properties props = <span class="keyword">new</span> Properties();</span><br><span class="line">        props.put(<span class="string">"spring.application.name"</span>, <span class="string">"updateAppName"</span>);</span><br><span class="line">        environment.getPropertySources().addFirst(<span class="keyword">new</span> PropertiesPropertySource(<span class="string">"decrypted_properties"</span>, props));</span><br><span class="line"></span><br><span class="line">        applicationName = environment.getProperty(<span class="string">"spring.application.name"</span>);</span><br><span class="line">        System.out.println(<span class="string">"updated applicationName is : "</span> + applicationName);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Value-注入-amp-Autowired-注入"><a href="#Value-注入-amp-Autowired-注入" class="headerlink" title="@Value 注入 &amp; @Autowired 注入"></a>@Value 注入 &amp; @Autowired 注入</h2><p>在 Spring 中，无论是 @Value 注入还是 @Autowired 注入，都是由 AutowiredAnnotationBeanPostProcessor 这个后置处理器处理的。</p><blockquote><p>在很多开源的框架中，其内部自定义的注解也大都是通过 BeanPostProcessor 这个后置处理器来处理的。</p></blockquote><p>AutowiredAnnotationBeanPostProcessor 中有个 AutowiredFieldElement 内部类，这个内部类的作用就是注入目标 bean 的属性值的。这里就包括 @Value 的注入和 @Autowired 注入。</p><h3 id="Bean-属性注入发生的时机"><a href="#Bean-属性注入发生的时机" class="headerlink" title="Bean 属性注入发生的时机"></a>Bean 属性注入发生的时机</h3><p>容器刷新及属性注入调用堆栈如下：</p><p><img src="https://glmapper-blog.oss-cn-hangzhou.aliyuncs.com/beanlife/life-two.jpg" alt=""></p><p>从堆栈看出，在容器刷新的最后阶段，会通过 finishBeanFactoryInitialization 这个方法实例化所有剩余的（非延迟初始化）单例 bean；这个过程就是绝大多数 bean 实例化的过程。这个过程中会涉及到以下两个比较重要的点：1、BeanPostProcessor 处理，2、依赖注入。从上面其实也可以看出，依赖注入的发生就是通过 BeanPostProcessor 处理完成的。下图为遍历所有目标属性，依次注入属性的过程：</p><p><img src="https://glmapper-blog.oss-cn-hangzhou.aliyuncs.com/beanlife/life-three.jpg" alt=""></p><h3 id="Bean-属性注入发生的过程"><a href="#Bean-属性注入发生的过程" class="headerlink" title="Bean 属性注入发生的过程"></a>Bean 属性注入发生的过程</h3><p>这里以 @Autowired 注入为例，@Value 注入和 @Autowired 注入过程基本是一样的。@Autowired 注入相比于 @Value 注入，会涉及到初始化另外一个 Bean 的过程。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 构建一个依赖描述符对象</span></span><br><span class="line">DependencyDescriptor desc = <span class="keyword">new</span> DependencyDescriptor(field, <span class="keyword">this</span>.required);</span><br><span class="line"><span class="comment">// 设置包含此依赖项的具体类</span></span><br><span class="line">desc.setContainingClass(bean.getClass());</span><br><span class="line"><span class="comment">// 初始化一个注入的 beanName 集合，用于后面注册到容器中</span></span><br><span class="line"><span class="comment">// 这里实际上只有一个，如果有多个实例 bean 存在，则需要通过 Qualifier 指定了</span></span><br><span class="line">Set&lt;String&gt; autowiredBeanNames = <span class="keyword">new</span> LinkedHashSet&lt;&gt;(<span class="number">1</span>);</span><br><span class="line">Assert.state(beanFactory != <span class="keyword">null</span>, <span class="string">"No BeanFactory available"</span>);</span><br><span class="line">TypeConverter typeConverter = beanFactory.getTypeConverter();</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="comment">// 解析依赖，依赖注入</span></span><br><span class="line">    value = beanFactory.resolveDependency(desc, beanName, autowiredBeanNames, typeConverter);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span> (BeansException ex) &#123;</span><br><span class="line">    <span class="comment">// 抛出注入失败异常</span></span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> UnsatisfiedDependencyException(<span class="keyword">null</span>, beanName, <span class="keyword">new</span> InjectionPoint(field), ex);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="keyword">this</span>.cached) &#123;</span><br><span class="line">        <span class="keyword">if</span> (value != <span class="keyword">null</span> || <span class="keyword">this</span>.required) &#123;</span><br><span class="line">            <span class="keyword">this</span>.cachedFieldValue = desc;</span><br><span class="line">            <span class="comment">// 注册依赖的 bean</span></span><br><span class="line">            registerDependentBeans(beanName, autowiredBeanNames);</span><br><span class="line">            <span class="keyword">if</span> (autowiredBeanNames.size() == <span class="number">1</span>) &#123;</span><br><span class="line">                String autowiredBeanName = autowiredBeanNames.iterator().next();</span><br><span class="line">                <span class="comment">// 判断容器中是否存在此依赖 bean,并且校验 bean 的类型是否匹配</span></span><br><span class="line">                <span class="keyword">if</span> (beanFactory.containsBean(autowiredBeanName) &amp;&amp;</span><br><span class="line">                        beanFactory.isTypeMatch(autowiredBeanName, field.getType())) &#123;</span><br><span class="line">                    <span class="comment">// 缓存注入值</span></span><br><span class="line">                    <span class="keyword">this</span>.cachedFieldValue = <span class="keyword">new</span> ShortcutDependencyDescriptor(</span><br><span class="line">                            desc, autowiredBeanName, field.getType());</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 没有找到 依赖bean 实例，且 required 为 false </span></span><br><span class="line">            <span class="keyword">this</span>.cachedFieldValue = <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">this</span>.cached = <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// value 为解析到的属性值，如果不为空，则通过反射设置给目标 Bean，完成属性的注入</span></span><br><span class="line"><span class="keyword">if</span> (value != <span class="keyword">null</span>) &#123;</span><br><span class="line">    ReflectionUtils.makeAccessible(field);</span><br><span class="line">    field.set(bean, value);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>属性注入发生在 populateBean（填充 Bean）的过程，在 Bean 属性填充完成之后就是 Bean 的实例化过程。</p><h2 id="Bean-的实例化过程"><a href="#Bean-的实例化过程" class="headerlink" title="Bean 的实例化过程"></a>Bean 的实例化过程</h2><p>这里截取 AbstractAutowireCapableBeanFactory#doCreateBean 方法中的一小段代码，来承接上下文：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 初始化bean实例。</span></span><br><span class="line">Object exposedObject = bean;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="comment">// 填充 Bean</span></span><br><span class="line">    populateBean(beanName, mbd, instanceWrapper);</span><br><span class="line">    <span class="comment">// 实例化 Bean</span></span><br><span class="line">    exposedObject = initializeBean(beanName, exposedObject, mbd);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span> (Throwable ex) &#123;</span><br><span class="line">    <span class="comment">// 省略异常处理</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里通过代码就很好的和上一小节的内容关联起来了，即填充 Bean -&gt; 实例化 Bean 。在 Bean 的实例化阶段会涉及到两个比较重要的扩展：1、BeanPostProcessor，2、InitializingBean。</p><h3 id="BeanPostProcessor-的处理时机"><a href="#BeanPostProcessor-的处理时机" class="headerlink" title="BeanPostProcessor 的处理时机"></a>BeanPostProcessor 的处理时机</h3><p>BeanPostProcessor 有两个抽象方法，一个是实例化之前调用，一个是实例化之后调用。InitializingBean 接口只有一个 afterPropertiesSet 方法，afterPropertiesSet 方法的执行介于实例化之前实例化之后调用之间。BeanPostProcessor 的处理时机是在调用 initializeBean 方法中触发的，下面为 initializeBean 方法中的部分代码片段： </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">Object wrappedBean = bean;</span><br><span class="line"><span class="keyword">if</span> (mbd == <span class="keyword">null</span> || !mbd.isSynthetic()) &#123;</span><br><span class="line">    <span class="comment">// 实例化之前调用</span></span><br><span class="line">    wrappedBean = applyBeanPostProcessorsBeforeInitialization(wrappedBean, beanName);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="comment">// 调用 InitializingBean 和指定的 init-method 方法</span></span><br><span class="line">    invokeInitMethods(beanName, wrappedBean, mbd);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span> (Throwable ex) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> BeanCreationException(</span><br><span class="line">            (mbd != <span class="keyword">null</span> ? mbd.getResourceDescription() : <span class="keyword">null</span>),</span><br><span class="line">            beanName, <span class="string">"Invocation of init method failed"</span>, ex);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (mbd == <span class="keyword">null</span> || !mbd.isSynthetic()) &#123;</span><br><span class="line">    <span class="comment">// 实例化之后调用</span></span><br><span class="line">    wrappedBean = applyBeanPostProcessorsAfterInitialization(wrappedBean, beanName);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>这里的 bean 对象实际上已经是完整的 bean 了，postProcessBeforeInitialization 和 postProcessAfterInitialization 是相对于是否执行 InitializingBean 的 afterPropertiesSet 和执行 Bean 指定的 initMethod 方法而言的。</p></blockquote><h3 id="使用-BeanPostProcessor-修改-Bean"><a href="#使用-BeanPostProcessor-修改-Bean" class="headerlink" title="使用 BeanPostProcessor 修改 Bean"></a>使用 BeanPostProcessor 修改 Bean</h3><p>从 initializeBean 方法中可以看出，了，postProcessBeforeInitialization 和 postProcessAfterInitialization 两处回调返回放回的是 wrappedBean，也就意味着我们可以在这两个方法中对容器中的原始 Bean 做一些处理，比如代理一层原始的 Bean，或者修改 Bean 中的一些属性等。</p><p>在案例工程中提供了一个 TestBeanServiceProcessor ，其作用是对 TestBeanService 类型的 Bean 做一层代理，使得在执行 TestBeanService 中方法的前后做一些埋点。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// TestBeanServiceProcessor</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestBeanServiceProcessor</span> <span class="keyword">implements</span> <span class="title">BeanPostProcessor</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">postProcessBeforeInitialization</span><span class="params">(Object bean, String beanName)</span> <span class="keyword">throws</span> BeansException </span>&#123;</span><br><span class="line">        <span class="comment">// 如果 bean 的类型是 TestBeanService，则将其包装成 TestBeanWrapperService 并返回</span></span><br><span class="line">        <span class="keyword">if</span> (bean <span class="keyword">instanceof</span> TestBeanService)&#123;</span><br><span class="line">            System.out.println(<span class="string">"begin to execute postProcessBeforeInitialization."</span>);</span><br><span class="line">            TestBeanWrapperService testBeanService = <span class="keyword">new</span> TestBeanWrapperService((TestBeanService)bean);</span><br><span class="line">            <span class="keyword">return</span> testBeanService;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> bean;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">postProcessAfterInitialization</span><span class="params">(Object bean, String beanName)</span> <span class="keyword">throws</span> BeansException </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (bean <span class="keyword">instanceof</span> TestBeanService)&#123;</span><br><span class="line">            System.out.println(<span class="string">"begin to execute postProcessAfterInitialization."</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> bean;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 代理类 TestBeanWrapperService，注意这里代理类也应该是 TestBeanService 类型，否在是后面使用时就会找不到 Bean 实例</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestBeanWrapperService</span> <span class="keyword">extends</span> <span class="title">TestBeanService</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> TestBeanService delegate;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">TestBeanWrapperService</span><span class="params">(TestBeanService delegate)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.delegate = delegate;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 实现对 test 方法执行前后进行拦截</span></span><br><span class="line"><span class="comment">     **/</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            before();</span><br><span class="line">            <span class="keyword">return</span> delegate.test();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            after();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">before</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"before execute test."</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">after</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"after execute test."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="使用-InitializingBean"><a href="#使用-InitializingBean" class="headerlink" title="使用 InitializingBean"></a>使用 InitializingBean</h3><p>如果一个 bean 集成了 InitializingBean 接口，那么就需要重写其 afterPropertiesSet 方法。这里感觉有点漏洞，afterPropertiesSet 动作其实早就完成了，另外因为 afterPropertiesSet  是在 postProcessAfterInitialization 方法之前调用，所以还是可以在 postProcessAfterInitialization 对属性做修改。实际使用过程中需要关注下这个点，一般情况下，我们会在 afterPropertiesSet 中做一些初始化动作，比如启动连接 Zookeeper。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestBeanService</span> <span class="keyword">implements</span> <span class="title">InitializingBean</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 省略其他代码</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterPropertiesSet</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"begin to execute afterPropertiesSet..."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="指定-Bean-的-init-method-方法"><a href="#指定-Bean-的-init-method-方法" class="headerlink" title="指定 Bean 的 init-method 方法"></a>指定 Bean 的 init-method 方法</h3><p>init-method 方法只能通过 @Bean 或者 xml 方式指定，如果是使用 @Component 或者 @Service 注解标准的 Bean ，则可以通过 @PostConstruct 注解标注方法，对应的是 destroy-method 和 @PreDestroy 。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestBeanService</span> <span class="keyword">implements</span> <span class="title">InitializingBean</span></span>&#123;</span><br><span class="line">    <span class="comment">// 省略其他代码</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// init 方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"begin to execute init..."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 在自动配置类或者 xml 文件中指定 initMethod</span></span><br><span class="line"><span class="meta">@Bean</span>(initMethod = <span class="string">"init"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> TestBeanService <span class="title">testBeanService</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> TestBeanService();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>本篇围绕 TestBeanService 这个 Bean 展开，对其生命周期，及其生命周期各个阶段扩展点进行了介绍，包括修改注入的属性值、修改其 BeanDefinition、修改 Bean 实例等等，从扩展点的视角来洞悉一个 Bean 的生命周期。</p><h3 id="BeanFactoryPostProcessor-对于-init-method-的影响"><a href="#BeanFactoryPostProcessor-对于-init-method-的影响" class="headerlink" title="BeanFactoryPostProcessor 对于 init-method 的影响"></a>BeanFactoryPostProcessor 对于 init-method 的影响</h3><p>因为 init-method 这个点是后面想起来加上去的，在实际测试过程中，发现 TestBeanService 中指定的 init 方法没有被执行（正常情况下是在 afterPropertiesSet 之后就会执行的）；对于这个 TestBeanService 在案例工程中有两处对其进行了修改，一个是修改其 BeanDefinition ，一个是修改 其 Bean 实例；最终拿到的 bean 的类型是 TestBeanWrapperService，在此之前 Bean 的类型是 ProxyTestBeanService ，无论是TestBeanWrapperService 还是 ProxyTestBeanService 都是 TestBeanService 的子类，init 方法又是 public 的，所以从这个角度来看，不可能不生效。所以基本可以排除因为访问权限问题导致。最后 debug 下面代码发现，mbd.getInitMethodName() 返回的是 null， mbd 是 RootBeanDefinition；</p><blockquote><p>PS: BeanDefinition 中 getInitMethodName 方法是在 Spring 5.1 版本之后才有的，之前版本都是 在 AbstractBeanDefinition 这个抽象类中定义。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (mbd != <span class="keyword">null</span> &amp;&amp; bean.getClass() != NullBean.class) &#123;</span><br><span class="line">    <span class="comment">// 从当前 bean  的 BeanDefinition 对象中获取 initMethod 方法名</span></span><br><span class="line">    String initMethodName = mbd.getInitMethodName();</span><br><span class="line">    <span class="keyword">if</span> (StringUtils.hasLength(initMethodName) &amp;&amp;</span><br><span class="line">            !(isInitializingBean &amp;&amp; <span class="string">"afterPropertiesSet"</span>.equals(initMethodName)) &amp;&amp;</span><br><span class="line">            !mbd.isExternallyManagedInitMethod(initMethodName)) &#123;</span><br><span class="line">        invokeCustomInitMethod(beanName, bean, mbd);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>问题出在这里，在 TestBeanServiceBeanFactoryPostProcessor 处理时，没有将原始 BeanDefinition 的 initMethod 给新的 ProxyTestBeanService，所以导致后面所有基于此实例化的 bean 的 BeanDefinition 都没有 initMethod 方法。在TestBeanServiceBeanFactoryPostProcessor#postProcessBeanFactory 方法中补充设置 InitMethodName 之后问题解决。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 这里设置指定的initMethod</span></span><br><span class="line">proxy.setInitMethodName(beanDefinition.getInitMethodName());</span><br></pre></td></tr></table></figure><h3 id="附：案例工程地址及参考"><a href="#附：案例工程地址及参考" class="headerlink" title="附：案例工程地址及参考"></a>附：案例工程地址及参考</h3><ul><li>工程地址：<a href="https://github.com/glmapper/glmapper-blog-samples/tree/master/glmapper-blog-bean-lifecycle" target="_blank" rel="noopener">glmapper-blog-bean-lifecycle</a></li><li>参考文档：<a href="https://blog.csdn.net/qq_34436819/article/details/100944204" target="_blank" rel="noopener">ConfigurationClassPostProcessor源码解析</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;本篇基于 SpringBoot 2.2.2.RELEASE 版本，Spring  各个版本之间多少存在一些差异，不过主流程基本相同；大家在阅读过程中需关注这点。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;继续承接上一篇 &lt;a href=&quot;http:
      
    
    </summary>
    
      <category term="springboot" scheme="http://www.glmapper.com/categories/springboot/"/>
    
    
      <category term="springboot" scheme="http://www.glmapper.com/tags/springboot/"/>
    
  </entry>
  
  <entry>
    <title>SpringBoot 系列-日志详解</title>
    <link href="http://www.glmapper.com/2019/12/14/springboot-series-log/"/>
    <id>http://www.glmapper.com/2019/12/14/springboot-series-log/</id>
    <published>2019-12-14T03:17:40.000Z</published>
    <updated>2019-12-26T16:53:13.380Z</updated>
    
    <content type="html"><![CDATA[<p>Spring Boot 使用 Commons Logging 进行所有内部日志记录，但保留底层日志实现。为 Java Util Logging、Log4J2 和 Logback 提供了默认配置。在每种情况下，loggers 都预先配置为使用 console 输出，并且也提供可选的文件输出。</p><p>默认情况下，如果使用 “starters”，则使用 Logback 进行日志记录。还包括适当的 Logback 路由，以确保使用 Java Util 日志记录、Commons 日志记录、Log4J 或 SLF4J 的依赖库都能正常工作。</p><p>下面先来看一个最简单的 SpringBoot demo 工程的日志输出，以此来展开日志格式、控制台输出、日志颜色、日志文件配置、日志体系解析等几个方面的介绍。</p><p>新建一个 SpringBoot 工程，默认在什么都不加的情况下直接启动，其启动日志大概如下：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">2019-12-24 20:41:31.866  INFO 87851 --- [           main] com.glmapper.bridge.boot.BootStrap       : No active profile set, falling back to default profiles: default</span><br><span class="line">2019-12-24 20:41:32.003  INFO 87851 --- [           main] s.c.a.AnnotationConfigApplicationContext : Refreshing org.springframework.context.annotation.AnnotationConfigApplicationContext@314c508a: startup date [Tue Dec 24 20:41:31 CST 2019]; root of context hierarchy</span><br><span class="line">2019-12-24 20:41:32.556  INFO 87851 --- [           main] o.s.j.e.a.AnnotationMBeanExporter        : Registering beans for JMX exposure on startup</span><br><span class="line">2019-12-24 20:41:32.568  INFO 87851 --- [           main] com.glmapper.bridge.boot.BootStrap       : Started BootStrap in 1.035 seconds (JVM running for 2.13)</span><br><span class="line">2019-12-24 20:41:32.569  INFO 87851 --- [       Thread-4] s.c.a.AnnotationConfigApplicationContext : Closing org.springframework.context.annotation.AnnotationConfigApplicationContext@314c508a: startup date [Tue Dec 24 20:41:31 CST 2019]; root of context hierarchy</span><br><span class="line">2019-12-24 20:41:32.571  INFO 87851 --- [       Thread-4] o.s.j.e.a.AnnotationMBeanExporter        : Unregistering JMX-exposed beans on shutdown</span><br><span class="line"></span><br><span class="line">Process finished with exit code 0</span><br></pre></td></tr></table></figure><h2 id="日志格式"><a href="#日志格式" class="headerlink" title="日志格式"></a>日志格式</h2><p>上面是 Spring Boot 的默认日志输出，从日志格式来看，主要包括以下几项：</p><ul><li>日期时间: 例如 2019-12-24 20:41:31.866 (毫秒精度)</li><li>日志级别: 例如 INFO (ERROR, WARN, INFO, DEBUG, or TRACE.)</li><li>当前进程: 例如 87851</li><li>— 分隔符，用于区分实际日志消息的开头。</li><li>线程名称: 例如 Thread-4 (用方括号括起来(为了控制台输出可能被截断)).</li><li>日志名称: 这通常是源类名(通常是缩写)。</li><li>日志信息: 具体的日志消息</li></ul><p>比如这条记录：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">2019-12-24 20:41:31.866  INFO 87851 --- [           main] com.glmapper.bridge.boot.BootStrap       : No active profile set, falling back to default profiles: default</span><br></pre></td></tr></table></figure><p>是在 org.springframework.boot.SpringApplication#logStartupProfileInfo 方法中打印的，日志级别为 INFO。</p><p><img src="https://glmapper-blog.oss-cn-hangzhou.aliyuncs.com/log-boot-print.jpg" alt=""></p><h2 id="Console-输出"><a href="#Console-输出" class="headerlink" title="Console 输出"></a>Console 输出</h2><p>SpringBoot 默认会将日志输出到 Console，默认情况下，会记录 error 级别、warn 级别和 info 级别的消息。还可以通过使用 <code>—-debug</code> 参数启动应用程序来使用 “debug” 级别。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -jar myapp.jar --debug</span><br></pre></td></tr></table></figure><blockquote><p>也可以在 application.properties 中指定 debug=true 来启用 debug 级别</p></blockquote><p>当启用 debug 级别时，将配置一系列核心日志记录器(嵌入式容器、Hibernate 和 Spring Boot) 以输出更多信息。启用 debug 模式并不会将应用程序配置为记录所有具有 debug 级别的消息。同样的，也可以使用 <code>—-trace</code> 标记来启动 trace 级别模式来启动应用程序。</p><h2 id="彩色编码输出"><a href="#彩色编码输出" class="headerlink" title="彩色编码输出"></a>彩色编码输出</h2><p>如果你的终端支持 ANSI，你可以通过设置 “spring.output.ansi.enable“ 配置项值来指定颜色（前提是官方已经支持的颜色）。颜色编码是通过使用 <code>%clr</code> 转换字来配置的，最简单的就是根据日志级别对输出的日志进行着色，如下面的示例所示:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">%clr(%5p)</span><br></pre></td></tr></table></figure><p>下表是官方提供的描述日志级别到颜色的映射关系表:</p><table><thead><tr><th>Level</th><th>Color</th></tr></thead><tbody><tr><td>FATAL</td><td>Red</td></tr><tr><td>ERROR</td><td>Red</td></tr><tr><td>WARN</td><td>Yellow</td></tr><tr><td>INFO</td><td>Green</td></tr><tr><td>DEBUG</td><td>Green</td></tr><tr><td>TRACE</td><td>Green</td></tr></tbody></table><p>如果你想要使文本变成黄色，可以使用以下设置:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">%clr(%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125;)&#123;yellow&#125;</span><br></pre></td></tr></table></figure><p>目前支持的颜色和样式包括 : blue、cyan、faint、green、magenta、red、yellow。</p><h2 id="文件输出"><a href="#文件输出" class="headerlink" title="文件输出"></a>文件输出</h2><p>默认情况下，Spring 引导日志只输出到 Console，不会写入到日志文件中。如果希望在 Console 输出之外还写入到日志文件，则需要设置 logging.file 和 logging.path 属性(在 application.properties 中)。下表显示了 logging.* 属性如何一起使用:</p><table><thead><tr><th>logging.file</th><th>logging.path</th><th>Example</th><th>Description</th></tr></thead><tbody><tr><td>none</td><td>none</td><td></td><td>控制台日志</td></tr><tr><td>指定文件</td><td>none</td><td>my.log</td><td>写入指定的日志文件，名称可以是精确位置或相对于当前目录。</td></tr><tr><td>none</td><td>指定文件</td><td>/var/log</td><td>将 spring.log 写入指定的目录，名称可以是精确位置或相对于当前目录。</td></tr></tbody></table><p>日志文件在达到 10 MB 时会进行 Rolling，与 Console 输出一样，默认情况下会记录 ERROR 级别、WARN 级别和 INFO 级别的消息。可以使用 logging.file.max-size 属性更改大小限制。除非已设置 logging.file.max-history 属性，否则以前 Rolling 的文件将无限期归档。</p><blockquote><p>日志系统在应用程序生命周期的早期初始化。因此，在通过 @PropertySource 注释加载的属性文件中是找不到日志属性的。另外，logging 属性独立于实际的logging 基础结构。所以，Spring Boot 不会管理特定的配置密钥（例如 Logback 的 logback.configurationFile）。</p></blockquote><h2 id="日志级别"><a href="#日志级别" class="headerlink" title="日志级别"></a>日志级别</h2><p>SpringBoot 中所支持的日志系统都可以通过 <code>logging.level.&lt;logger-name&gt;=&lt;level&gt;</code> 在 Spring 环境中设置日志的级别(比如在application.properties 中)。日志级别主要包括 TRACE, DEBUG, INFO, WARN, ERROR, FATAL 和 OFF 几种。除此之外，还可以使用  <code>logging.level.root</code> 配置 root logger 的日志级别。下面的示例展示了如何在 application.properties 中配置日志级别:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">logging.level.root=warn</span><br><span class="line">logging.level.org.springframework.web=debug</span><br><span class="line">logging.level.org.hibernate=error</span><br></pre></td></tr></table></figure><p>除了 application.properties 之外，也可以使用环境变量设置日志级别。例如，LOGGING_LEVEL_ORG_SPRINGFRAMEWORK_WEB=DEBUG 将 org.springframework.web 包下的日志打印级别设置为 DEBUG。</p><blockquote><p>上面的方法只适用于包级别的日志记录。由于 <a href="https://docs.spring.io/spring-boot/docs/2.0.4.RELEASE/reference/htmlsingle/#boot-features-external-config-relaxed-binding" target="_blank" rel="noopener">Relaxed Binding</a> 总是将环境变量转换为小写形式，因此不可能以这种方式为单个类配置日志记录。如果需要为一个类配置日志记录，可以使用 <a href="https://docs.spring.io/spring-boot/docs/2.1.11.RELEASE/reference/html/boot-features-external-config.html#boot-features-external-config-application-json" target="_blank" rel="noopener">SPRING_APPLICATION_JSON</a> 变量。</p></blockquote><h2 id="日志-Groups"><a href="#日志-Groups" class="headerlink" title="日志 Groups"></a>日志 Groups</h2><p>将相关的 loggers 分组在一起通常很有用，这样就可以同时对它们进行配置，Spring Boot 允许在 Spring 环境中定义日志组。例如将 “tomcat” 组添加到 application.properties。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">logging.group.tomcat=org.apache.catalina, org.apache.coyote, org.apache.tomcat</span><br></pre></td></tr></table></figure><p>这样，我们就可以通过一行配置来设置一组日志的日志级别：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">logging.level.tomcat=TRACE</span><br></pre></td></tr></table></figure><p>Spring Boot 包含以下可以开箱即用的预定义日志组:</p><table><thead><tr><th>Name</th><th>Loggers</th></tr></thead><tbody><tr><td>web</td><td>org.springframework.core.codec, org.springframework.http, org.springframework.web, org.springframework.boot.actuate.endpoint.web, org.springframework.boot.web.servlet.ServletContextInitializerBeans</td></tr><tr><td>sql</td><td>org.springframework.jdbc.core, org.hibernate.SQL</td></tr></tbody></table><h2 id="自定义日志配置"><a href="#自定义日志配置" class="headerlink" title="自定义日志配置"></a>自定义日志配置</h2><p>可以通过在类路径中包含适当的库来激活各种日志系统，还可以通过在类路径的根目录中提供适当的配置文件或在 Spring 环境的 <code>logging.config</code> 属性指定的位置提供适当的配置文件来进一步定制日志系统。</p><p>比如可以使用 <code>org.springframework.boot.logging.LoggingSystem</code> 配置属性强制 Spring 引导使用指定的日志系统。该值应该是 LoggingSystem 实现的完全限定类名；如果配置为 none 的话，则表示完全禁用 Spring Boot 的日志配置。下表描述了 SpringBoot 中日志系统所对应的日志配置文件：</p><table><thead><tr><th>Logging System</th><th>Customization</th></tr></thead><tbody><tr><td>Logback</td><td>logback-spring.xml, logback-spring.groovy, logback.xml, or logback.groovy</td></tr><tr><td>Log4j2</td><td>org.springframework.jdbc.core, org.hibernate.SQL</td></tr><tr><td>JDK (Java Util Logging)</td><td>logging.properties</td></tr></tbody></table><blockquote><p>SpringBoot 官方建议在日志配置中使用 <code>-spring</code> 的配置方式(例如，使用 <code>logback-spring.xml</code> 而不是 <code>logback.xml</code>)。如果使用标准配置位置，Spring 无法完全控制日志初始化。</p></blockquote><blockquote><p>另外官方文档中有明确提到，JUL(ava Util Logging) 在 FATJAR 场景下存在一些已知的类加载问题，所以要尽量避免在 FATJAR 场景下使用 JUL。</p></blockquote><p>为了辅助对日志系统进行定制，Spring 会将环境变量属性设置成系统属性，如下表所示:</p><table><thead><tr><th>Spring Environment</th><th>System Property</th><th>Comments</th></tr></thead><tbody><tr><td>logging.exception-conversion-word</td><td>LOG_EXCEPTION_CONVERSION_WORD</td><td>记录异常时使用的 conversion word</td></tr><tr><td>logging.file</td><td>LOG_FILE</td><td>如果已定义，则在默认日志配置中使用。</td></tr><tr><td>logging.file.max-size</td><td>LOG_FILE_MAX_SIZE</td><td>最大日志文件大小(如果启用了LOG_FILE)。(只支持默认的Logback设置)</td></tr><tr><td>logging.file.max-history</td><td>LOG_FILE_MAX_HISTORY</td><td>要保留的归档日志文件的最大数量(如果启用了LOG_FILE)。(只支持默认的Logback设置。)</td></tr><tr><td>logging.path</td><td>LOG_PATH</td><td>如果已定义，则在默认日志配置中使用。</td></tr><tr><td>logging.pattern.console</td><td>CONSOLE_LOG_PATTERN</td><td>要在控制台(stdout)上使用的日志模式。(只支持默认的Logback设置。)</td></tr><tr><td>logging.pattern.dateformat</td><td>LOG_DATEFORMAT_PATTERN</td><td>日志日期格式的附加模式。(只支持默认的 Logback 设置。)</td></tr><tr><td>logging.pattern.file</td><td>FILE_LOG_PATTERN</td><td>最大日志文件大小(如果启用了LOG_FILE)。(只支持默认的Logback设置)</td></tr><tr><td>logging.pattern.level</td><td>LOG_LEVEL_PATTERN</td><td>呈现日志级别时使用的格式(默认%5p)。(只支持默认的Logback设置。)</td></tr><tr><td>PID</td><td>PID</td><td>当前进程ID</td></tr></tbody></table><p>所有支持的日志系统在解析配置文件时都可以参考系统属性进行配置解析。</p><blockquote><p>如果希望在日志属性中使用占位符，应该使用 SpringBoot 的语法，而不是底层框架的语法。需要注意的是，如果使用 Logback，应该使用<code>:</code>作为属性名及其默认值之间的分隔符，而不是使用<code>:-</code>。</p></blockquote><h2 id="springProfile-配置"><a href="#springProfile-配置" class="headerlink" title="springProfile 配置"></a>springProfile 配置</h2><p> <springprofile> 允许用户根据激活的 Spring profiles 选择包含或排除配置部分。profile 文件部分在 <configuration> 元素的任何地方都受支持。可以使用 name 属性指定哪个配置文件接受配置。<springprofile> 可以包含简单的 profile 文件名称(例如 dev )或 profile 文件表达式。profile 文件表达式允许一些比较复杂的 profile 文件逻辑，例如: “production &amp; (eu-central | eu-west)”。下面的显示了三个配置文件示例:</springprofile></configuration></springprofile></p> <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"> <span class="tag">&lt;<span class="name">springProfile</span> <span class="attr">name</span>=<span class="string">"dev"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 激活 dev 环境的配置 --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">springProfile</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">springProfile</span> <span class="attr">name</span>=<span class="string">"dev | pre"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 激活 dev 和 pre 的环境变量 --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">springProfile</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">springProfile</span> <span class="attr">name</span>=<span class="string">"!prod"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 所有非 prod 环境的都激活 --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">springProfile</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="环境属性"><a href="#环境属性" class="headerlink" title="环境属性"></a>环境属性</h2><p> <springproperty> 标记允许用户传递 Spring Environment 中的属性，以便在 Logback 中使用。比如在 Logback 配置中访问 application.properties 文件中的值。<springproperty> 的作用机制与 Logback 的标准 <property> 标签类似。但是，不是指定直接 value，而是指定属性的 source（来自Environment）。如果需要将属性存储在 local 范围以外的其他位置，则可以使用 scope 属性来控制。如果需要默认值（如果未在 Environment 中设置该属性），则可以使用 defaultValue 属性配置。以下示例描述了如何传递在 Logback 中使用的属性：</property></springproperty></springproperty></p> <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">springProperty</span> <span class="attr">scope</span>=<span class="string">"context"</span> <span class="attr">name</span>=<span class="string">"fluentHost"</span> <span class="attr">source</span>=<span class="string">"myapp.fluentd.host"</span></span></span><br><span class="line"><span class="tag"><span class="attr">defaultValue</span>=<span class="string">"localhost"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">"FLUENT"</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.more.appenders.DataFluentAppender"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">remoteHost</span>&gt;</span>$&#123;fluentHost&#125;<span class="tag">&lt;/<span class="name">remoteHost</span>&gt;</span></span><br><span class="line">...</span><br><span class="line"><span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br></pre></td></tr></table></figure><p>前面基于 SpringBoot 官方文档对于 Logger 的支持描述做了简单的介绍，下面将通过分析源码来深入的掌握上述这些特性。本文以 log4j2 为例进行分析。</p><p>在 <a href="http://www.glmapper.com/2019/04/13/springboot-series-event/#SpringBoot-%E5%90%AF%E5%8A%A8%E8%BF%87%E7%A8%8B%E4%B8%AD%E7%9A%84%E4%BA%8B%E4%BB%B6%E9%98%B6%E6%AE%B5">SpringBoot 系列-事件机制详解</a> 文章中其实有提到过 logging 初始化的时机。这里简单回顾下：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># Application Listeners</span><br><span class="line">org.springframework.context.ApplicationListener=\</span><br><span class="line">// 省略其他</span><br><span class="line">org.springframework.boot.context.logging.ClasspathLoggingApplicationListener,\</span><br><span class="line">org.springframework.boot.context.logging.LoggingApplicationListener,\</span><br></pre></td></tr></table></figure><p>这两个 logging 的监听器中，主要作用的是 LoggingApplicationListener ，这个监听器就是 SpringBoot 中日志初始化的入口。</p><h2 id="日志初始化入口"><a href="#日志初始化入口" class="headerlink" title="日志初始化入口"></a>日志初始化入口</h2><p>LoggingApplicationListener 继承了 GenericApplicationListener 这个接口，其父接口是 ApplicationListener，GenericApplicationListener 中扩展了对于事件类型的支持判断。这里主要关心的是 onApplicationEvent 这个回调方法，关于这个方法中所提到的几个事件类型，可以参考 <a href="http://www.glmapper.com/2019/04/13/springboot-series-event">SpringBoot 系列-事件机制详解</a> 这篇文章的介绍。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onApplicationEvent</span><span class="params">(ApplicationEvent event)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// ApplicationStartingEvent </span></span><br><span class="line">    <span class="keyword">if</span> (event <span class="keyword">instanceof</span> ApplicationStartingEvent) &#123;</span><br><span class="line">        onApplicationStartingEvent((ApplicationStartingEvent) event);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// ApplicationEnvironmentPreparedEvent </span></span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (event <span class="keyword">instanceof</span> ApplicationEnvironmentPreparedEvent) &#123;</span><br><span class="line">        onApplicationEnvironmentPreparedEvent((ApplicationEnvironmentPreparedEvent) event);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// ApplicationPreparedEvent</span></span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (event <span class="keyword">instanceof</span> ApplicationPreparedEvent) &#123;</span><br><span class="line">        onApplicationPreparedEvent((ApplicationPreparedEvent) event);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// ContextClosedEvent</span></span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (event <span class="keyword">instanceof</span> ContextClosedEvent</span><br><span class="line">            &amp;&amp; ((ContextClosedEvent) event).getApplicationContext().getParent() == <span class="keyword">null</span>) &#123;</span><br><span class="line">        onContextClosedEvent();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// ApplicationFailedEvent</span></span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (event <span class="keyword">instanceof</span> ApplicationFailedEvent) &#123;</span><br><span class="line">        onApplicationFailedEvent();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="ApplicationStartingEvent-阶段的处理"><a href="#ApplicationStartingEvent-阶段的处理" class="headerlink" title="ApplicationStartingEvent 阶段的处理"></a>ApplicationStartingEvent 阶段的处理</h3><p>在收到 ApplicationStartingEvent 事件时，SpringBoot 将通过当前应用的 classloader 来构建一个 loggingSystem 对象，然后执行初始化之前的一些准备工作。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">onApplicationStartingEvent</span><span class="params">(ApplicationStartingEvent event)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 通过当前应用的 classloader 构建 loggingSystem 对象</span></span><br><span class="line">    <span class="keyword">this</span>.loggingSystem = LoggingSystem.get(event.getSpringApplication().getClassLoader());</span><br><span class="line">    <span class="comment">// loggingSystem 初始化之前准备</span></span><br><span class="line">    <span class="keyword">this</span>.loggingSystem.beforeInitialize();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里可以来看下 loggingSystem 是如何被构建出来的，这个过程可以使得我们非常清楚的了解到，为什么通过引入日志框架依赖或者使用 <code>org.springframework.boot.logging.LoggingSystem</code> 配置能够自动的完成日志框架的选择。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> LoggingSystem <span class="title">get</span><span class="params">(ClassLoader classLoader)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// SYSTEM_PROPERTY=org.springframework.boot.logging.LoggingSystem</span></span><br><span class="line">    <span class="comment">// 这里先从系统变量中获取下 org.springframework.boot.logging.LoggingSystem，看下是否用户自己指定了 LoggingSystem 的类型</span></span><br><span class="line">    String loggingSystem = System.getProperty(SYSTEM_PROPERTY);</span><br><span class="line">    <span class="comment">// 如果 org.springframework.boot.logging.LoggingSystem=xx 有配置值 </span></span><br><span class="line">    <span class="keyword">if</span> (StringUtils.hasLength(loggingSystem)) &#123;</span><br><span class="line">        <span class="comment">// 是否配置的是 none</span></span><br><span class="line">        <span class="keyword">if</span> (NONE.equals(loggingSystem)) &#123;</span><br><span class="line">            <span class="comment">// 如果配置的是 none ，则返回 NoOpLoggingSystem</span></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> NoOpLoggingSystem();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 根据指定的日志类型通过反射创建 loggingSystem 对象</span></span><br><span class="line">        <span class="keyword">return</span> get(classLoader, loggingSystem);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> SYSTEMS.entrySet().stream().filter((entry) -&gt; ClassUtils.isPresent(entry.getKey(), classLoader))</span><br><span class="line">            .map((entry) -&gt; get(classLoader, entry.getValue())).findFirst()</span><br><span class="line">            .orElseThrow(() -&gt; <span class="keyword">new</span> IllegalStateException(<span class="string">"No suitable logging system located"</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面代码的最后基于 SYSTEMS 一个 Map 结构的数据进行一系列的处理，主要就是通过判断 entry.getKey() 是否在当前 classpath 中存在，如果存在则通过反射构建类型为 entry.getValue() 的对象；SYSTEMS 是 LoggingSystem 抽象类中的一个静态的 MAP 结构变量，其初始化是在静态代码块中完成的：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> &#123;</span><br><span class="line">    Map&lt;String, String&gt; systems = <span class="keyword">new</span> LinkedHashMap&lt;&gt;();</span><br><span class="line">    <span class="comment">// 添加 logback 的 LoggingSystem</span></span><br><span class="line">    systems.put(<span class="string">"ch.qos.logback.core.Appender"</span>, <span class="string">"org.springframework.boot.logging.logback.LogbackLoggingSystem"</span>);、</span><br><span class="line">     <span class="comment">// 添加 log4j2 的 LoggingSystem</span></span><br><span class="line">    systems.put(<span class="string">"org.apache.logging.log4j.core.impl.Log4jContextFactory"</span>,</span><br><span class="line">            <span class="string">"org.springframework.boot.logging.log4j2.Log4J2LoggingSystem"</span>);</span><br><span class="line">    <span class="comment">// 添加 JUL 的 LoggingSystem</span></span><br><span class="line">    systems.put(<span class="string">"java.util.logging.LogManager"</span>, <span class="string">"org.springframework.boot.logging.java.JavaLoggingSystem"</span>);</span><br><span class="line">    SYSTEMS = Collections.unmodifiableMap(systems);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样看来就比较清晰，如果当前 classpath 中存在 logback、log4j2 或者 JUL 的依赖，则就构建对应的 LoggingSystem 对象。LoggingSystem 对象构建之后还会调用 beforeInitialize 方法，假设引入的是 log4j2 的依赖，则最后构建的 LoggingSystem 就是 Log4J2LoggingSystem 。beforeInitialize 是 LoggingSystem 提供的抽象方法，其具体实现是由子类实现。下面在源码分析部分会展开分析。</p><h3 id="ApplicationEnvironmentPreparedEvent-阶段的处理"><a href="#ApplicationEnvironmentPreparedEvent-阶段的处理" class="headerlink" title="ApplicationEnvironmentPreparedEvent 阶段的处理"></a>ApplicationEnvironmentPreparedEvent 阶段的处理</h3><p>接收到 ApplicationEnvironmentPreparedEvent 事件说明 Environment 对象已经构建完成，环境变量都已经初始化完成了。所以这里主要的工作就是初始化日志框架。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">onApplicationEnvironmentPreparedEvent</span><span class="params">(ApplicationEnvironmentPreparedEvent event)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 这里会再 check 一次loggingSystem 是否已经被创建</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.loggingSystem == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">this</span>.loggingSystem = LoggingSystem.get(event.getSpringApplication().getClassLoader());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 通过环境和类路径表达的首选项初始化日志系统。</span></span><br><span class="line">    initialize(event.getEnvironment(), event.getSpringApplication().getClassLoader());</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// initialize</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">initialize</span><span class="params">(ConfigurableEnvironment environment, ClassLoader classLoader)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// Spring 环境转移到系统属性</span></span><br><span class="line">    <span class="keyword">new</span> LoggingSystemProperties(environment).apply();</span><br><span class="line">    <span class="comment">// 解析得到 logFile，依赖 logging.file 和 loggin.path 两个配置值</span></span><br><span class="line">    <span class="keyword">this</span>.logFile = LogFile.get(environment);</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.logFile != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="comment">//设置logging.file-&gt;LOG_FILE</span></span><br><span class="line">        <span class="comment">// loggin.path -&gt; LOG_PATH</span></span><br><span class="line">        <span class="keyword">this</span>.logFile.applyToSystemProperties();</span><br><span class="line">    &#125;</span><br><span class="line">    initializeEarlyLoggingLevel(environment);</span><br><span class="line">    <span class="comment">// 根据 log 的配置文件初始化 日志</span></span><br><span class="line">    initializeSystem(environment, <span class="keyword">this</span>.loggingSystem, <span class="keyword">this</span>.logFile);</span><br><span class="line">    <span class="comment">// 绑定 logging.group , 设置 logging.level</span></span><br><span class="line">    initializeFinalLoggingLevels(environment, <span class="keyword">this</span>.loggingSystem);</span><br><span class="line">    <span class="comment">// 注册 logging.register-shutdown-hook 配置的 钩子</span></span><br><span class="line">    registerShutdownHookIfNecessary(environment, <span class="keyword">this</span>.loggingSystem);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个阶段就是根据我们配置的日志相关的属性和配置文件对日志进行一系列的初始化工作，这里所涉及到的属性和配置在文章前面部分均有提及到。</p><h3 id="ApplicationPreparedEvent-阶段的处理"><a href="#ApplicationPreparedEvent-阶段的处理" class="headerlink" title="ApplicationPreparedEvent 阶段的处理"></a>ApplicationPreparedEvent 阶段的处理</h3><p>接收到 ApplicationPreparedEvent 事件表示应用程序已经准备好，这里会注册两个 bean ， 一个是 springBootLoggingSystem，一个是 pringBootLogFile 。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">onApplicationPreparedEvent</span><span class="params">(ApplicationPreparedEvent event)</span> </span>&#123;</span><br><span class="line">    ConfigurableListableBeanFactory beanFactory = event.getApplicationContext().getBeanFactory();</span><br><span class="line">    <span class="comment">// 注册 springBootLoggingSystem bean </span></span><br><span class="line">    <span class="keyword">if</span> (!beanFactory.containsBean(LOGGING_SYSTEM_BEAN_NAME)) &#123;</span><br><span class="line">        beanFactory.registerSingleton(LOGGING_SYSTEM_BEAN_NAME, <span class="keyword">this</span>.loggingSystem);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 注册 pringBootLogFile bean</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.logFile != <span class="keyword">null</span> &amp;&amp; !beanFactory.containsBean(LOGFILE_BEAN_NAME)) &#123;</span><br><span class="line">        beanFactory.registerSingleton(LOGFILE_BEAN_NAME, <span class="keyword">this</span>.logFile);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="ContextClosedEvent-和-ApplicationFailedEvent"><a href="#ContextClosedEvent-和-ApplicationFailedEvent" class="headerlink" title="ContextClosedEvent 和 ApplicationFailedEvent"></a>ContextClosedEvent 和 ApplicationFailedEvent</h3><p>ContextClosedEvent 事件是 Spring 容器关闭时发送的事件，这里主要就是在 Spring 容器关闭时对日志系统做的一些清理操作；ApplicationFailedEvent 是应用启动失败发送的事件，这里也会对日志系统做清理操作。清理方法由各个子 LoggingSystem 提供具体的实现，以 log4j2 为例，log4j2 的清理主要包括注销桥接处理器（前面初始化阶段有提到）、LogContext 置为null、移除 FILTER，基本上就是初始化阶段的逆过程。</p><h2 id="LoggingSystem-分析"><a href="#LoggingSystem-分析" class="headerlink" title="LoggingSystem 分析"></a>LoggingSystem 分析</h2><p>LoggingSystem 是 SpringBoot 对日志框架进行的一层抽象封装，LoggingSystem 使得我们可以很方便地使用一些日志框架，只需要定义对应日志框架的配置文件，比如 Logback、Log4j、Log4j2 等，代码内部便可以直接使用。</p><p><img src="https://glmapper-blog.oss-cn-hangzhou.aliyuncs.com/logging-system.jpg" alt=""></p><p>上图为 LoggingSystem 的类继承结构，可以看到 LoggingSystem 的实现子类有 Logback（LogbackLoggingSystem）、Log4j2（Log4J2LoggingSystem）以及 JDK 内置的 Log (JavaLoggingSystem)。LoggingSystem 是个抽象类，内部有这几个方法：</p><ul><li>beforeInitialize：日志系统初始化之前需要处理的事情</li><li>initialize：初始化日志系统</li><li>cleanUp：日志系统的清除工作</li><li>getShutdownHandler：返回一个 Runnable 用于当 jvm 退出的时候处理日志系统关闭后需要进行的操作，默认返回 null</li><li>setLogLevel：设置 logger 的级别</li></ul><p>这几个方法在上面分析启动入口和日志初始化时都有看到，上述几个方法在 LoggingSystem 要么是抽象方法，要么是空实现，均需要有具体的子类来完成的具体日志框架的处理。从类继承结构图看到有一个 AbstractLoggingSystem，日志实现子类都是继承自这个类，而这个类也是一个抽象类，它又是 LoggingSystem 的子类。所以下面就分别看下 AbstractLoggingSystem 和 Log4J2LoggingSystem 两个类是怎么重写上述几个方法的，这也是 SpringBoot 中日志框架处理的核心逻辑。</p><h3 id="AbstractLoggingSystem-处理逻辑"><a href="#AbstractLoggingSystem-处理逻辑" class="headerlink" title="AbstractLoggingSystem 处理逻辑"></a>AbstractLoggingSystem 处理逻辑</h3><p>beforeInitialize 在 AbstractLoggingSystem 中没有具体的处理逻辑，是个空方法，所以主要是看下 initialize 这个方法.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">initialize</span><span class="params">(LoggingInitializationContext initializationContext, String configLocation, LogFile logFile)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 如果指定了日志配置文件，则通过此配置文件进行初始化</span></span><br><span class="line">    <span class="keyword">if</span> (StringUtils.hasLength(configLocation)) &#123;</span><br><span class="line">        initializeWithSpecificConfig(initializationContext, configLocation, logFile);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 没有指定配置文件，则使用默认的方式查找配置文件并加载</span></span><br><span class="line">    initializeWithConventions(initializationContext, logFile);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 通过指定的配置文件初始化</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">initializeWithSpecificConfig</span><span class="params">(LoggingInitializationContext initializationContext, String configLocation,</span></span></span><br><span class="line"><span class="function"><span class="params">LogFile logFile)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 这里会处理日志配置文件中的占位符</span></span><br><span class="line">    configLocation = SystemPropertyUtils.resolvePlaceholders(configLocation);</span><br><span class="line">    <span class="comment">// 抽象方法，由具体子类实现（不同的日志框架处理配置文件的方式由其自身决定）</span></span><br><span class="line">    loadConfiguration(initializationContext, configLocation, logFile);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 通过默认方式查找配置文件并初始化</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">initializeWithConventions</span><span class="params">(LoggingInitializationContext initializationContext, LogFile logFile)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 查找配置文件，以 log4j2 为例，默认会在 classpath 下查找文件名为 </span></span><br><span class="line">    <span class="comment">// log4j2.properties、log4j2.yaml, log4j2.yml、log4j2.json，log4j2.jsn，log4j2.xml 的文件</span></span><br><span class="line">    String config = getSelfInitializationConfig();</span><br><span class="line">    <span class="keyword">if</span> (config != <span class="keyword">null</span> &amp;&amp; logFile == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="comment">// 发生了自初始化，在属性发生变化时重新初始化</span></span><br><span class="line">        reinitialize(initializationContext);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (config == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="comment">// 查找 Spring 规则方式的配置，</span></span><br><span class="line">        <span class="comment">// log4j2-spring.properties、log4j2-spring.xml 等</span></span><br><span class="line">        config = getSpringInitializationConfig();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (config != <span class="keyword">null</span>) &#123;</span><br><span class="line">        loadConfiguration(initializationContext, config, logFile);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 抽象方法，由具体的日志系统实现</span></span><br><span class="line">    loadDefaults(initializationContext, logFile);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>initialize 里主要就是找配置文件，然后通过配置文件进行日志系统的初始化，如果找不到就使用日志系统提供的默认方式进行初始化。上面代码中关于如何 load 配置文件和 load 默认都是在子类中实现的。所以下面就看下在 log4j2 的情况下，是怎么玩的。</p><h3 id="Log4J2LoggingSystem-处理逻辑"><a href="#Log4J2LoggingSystem-处理逻辑" class="headerlink" title="Log4J2LoggingSystem 处理逻辑"></a>Log4J2LoggingSystem 处理逻辑</h3><p>Log4J2LoggingSystem 并非是 AbstractLoggingSystem 的直接子类，而是 Slf4JLoggingSystem 的直接子类，Slf4JLoggingSystem 这个抽象类从代码来看其实就是为了做一些桥接处理，这里不展开分析。</p><h4 id="beforeInitialize-在-Log4J2LoggingSystem-中的实现"><a href="#beforeInitialize-在-Log4J2LoggingSystem-中的实现" class="headerlink" title="beforeInitialize 在 Log4J2LoggingSystem 中的实现"></a>beforeInitialize 在 Log4J2LoggingSystem 中的实现</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">beforeInitialize</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 创建、获取 LoggerContext 对象</span></span><br><span class="line">    LoggerContext loggerContext = getLoggerContext();</span><br><span class="line">    <span class="comment">// 判断当前 LoggerContext 是否已经初始化过了，如果已经初始化过了则直接返回</span></span><br><span class="line">    <span class="keyword">if</span> (isAlreadyInitialized(loggerContext)) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 调用父类 Slf4JLoggingSystem 的 beforeInitialize 的方法，父类这个方法主要就是配置JDK Logging 的桥接处理器</span></span><br><span class="line">    <span class="keyword">super</span>.beforeInitialize();</span><br><span class="line">    <span class="comment">// 给 loggerContext 添加默认的 FILTER</span></span><br><span class="line">    loggerContext.getConfiguration().addFilter(FILTER);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>getLoggerContext 是 log4j2 自己构建 LoggerContext 的过程，此处就先 pass。</p></blockquote><h4 id="initialize-在-Log4J2LoggingSystem-中的实现"><a href="#initialize-在-Log4J2LoggingSystem-中的实现" class="headerlink" title="initialize 在 Log4J2LoggingSystem 中的实现"></a>initialize 在 Log4J2LoggingSystem 中的实现</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">initialize</span><span class="params">(LoggingInitializationContext initializationContext, String configLocation, LogFile logFile)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 拿到当前 loggerContext</span></span><br><span class="line">    LoggerContext loggerContext = getLoggerContext();</span><br><span class="line">    <span class="comment">// 判断下是否已经初始化过了</span></span><br><span class="line">    <span class="keyword">if</span> (isAlreadyInitialized(loggerContext)) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 移除默认的 FILTER</span></span><br><span class="line">    loggerContext.getConfiguration().removeFilter(FILTER);</span><br><span class="line">    <span class="comment">// 调用父类 initialize，就是在找日志配置文件并且初始化</span></span><br><span class="line">    <span class="keyword">super</span>.initialize(initializationContext, configLocation, logFile);</span><br><span class="line">    <span class="comment">// 标记已经完成初始化</span></span><br><span class="line">    markAsInitialized(loggerContext);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里核心 initialize方法 还是使用的父类的处理逻辑，前面也提到 initialize 在 AbstractLoggingSystem 中最核心的是 load 配置配置文件的过程（loadConfiguration/loadDefaults），而这个 load 的过程是子类实现的。所以下面就看下 log4j2 中 load 配置文件的过程。</p><ul><li>loadConfiguration：有配置文件的情况</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">loadConfiguration</span><span class="params">(String location, LogFile logFile)</span> </span>&#123;</span><br><span class="line">    Assert.notNull(location, <span class="string">"Location must not be null"</span>);</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        LoggerContext ctx = getLoggerContext();</span><br><span class="line">        <span class="comment">// 拿到资源url</span></span><br><span class="line">        URL url = ResourceUtils.getURL(location);</span><br><span class="line">        <span class="comment">// 构建 ConfigurationSource 对象</span></span><br><span class="line">        ConfigurationSource source = getConfigurationSource(url);</span><br><span class="line">        <span class="comment">// 这里会根据配置的类型选择不同的解析器来解析配置文件,比如</span></span><br><span class="line">        <span class="comment">// XmlConfigurationFactory、PropertiesConfigurationFactory...</span></span><br><span class="line">        <span class="comment">// 以指定的 configuration 启动</span></span><br><span class="line">        ctx.start(ConfigurationFactory.getInstance().getConfiguration(ctx, source));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span> (Exception ex) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"Could not initialize Log4J2 logging from "</span> + location, ex);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>简单概括：通过指定的配置文件地址构建 ConfigurationSource 配置资源对象，然后根据配置资源的文件类型选择不同的 ConfigurationFactory 来解析配置文件，最后日志框架根据此配置文件初始化日志系统。</p><ul><li>loadDefaults：没有配置文件的情况</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">loadDefaults</span><span class="params">(LoggingInitializationContext initializationContext, LogFile logFile)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (logFile != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="comment">// 使用 classpath:org/springframework/boot/logging/log4j2/log4j2-file.xml</span></span><br><span class="line">        loadConfiguration(getPackagedConfigFile(<span class="string">"log4j2-file.xml"</span>), logFile);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 使用 classpath:org/springframework/boot/logging/log4j2/log4j2.xml</span></span><br><span class="line">        loadConfiguration(getPackagedConfigFile(<span class="string">"log4j2.xml"</span>), logFile);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>简单概括：在没有指定日志配置文件或者没有在 classpath 下找到符合指定日志系统的配置文件时，则使用 SpringBoot 提供的默认的配置文件进行初始化。</p><h3 id="日志系统的清理逻辑"><a href="#日志系统的清理逻辑" class="headerlink" title="日志系统的清理逻辑"></a>日志系统的清理逻辑</h3><p>cleanUp 方法也是由具体的 LoggingSystem 实现，主要作用就是清理 LoggingSystem 资源。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">cleanUp</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 调用父类，移除桥接器</span></span><br><span class="line">    <span class="keyword">super</span>.cleanUp();</span><br><span class="line">    LoggerContext loggerContext = getLoggerContext();</span><br><span class="line">    <span class="comment">// 标记loggerContext为未初始化状态，并将内部的 externalContext 置为 null</span></span><br><span class="line">    markAsUninitialized(loggerContext);</span><br><span class="line">    <span class="comment">// 移除默认的 FILTER</span></span><br><span class="line">    loggerContext.getConfiguration().removeFilter(FILTER);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="一些场景分析"><a href="#一些场景分析" class="headerlink" title="一些场景分析"></a>一些场景分析</h2><p>这里面包括日常开发工作中使用日志的一些常见场景，比如项目中没有任何日志配置的情况、在 resources 目录下配置日志配置文件的情况、已经使用 SpringBoot 无法识别的日志篇日志文件的情况。</p><h3 id="没有任何配置文件"><a href="#没有任何配置文件" class="headerlink" title="没有任何配置文件"></a>没有任何配置文件</h3><p>没有任何配置，通过前面的分析可知，initialize 方法执行时，是找不到任何资源的，所以会走默认的 loadDefaults 方法进行加载，LogbackLoggingSystem 的loadDefaults 方法，由于 logFile 为 null，所以会使用 <code>classpath:org/springframework/boot/logging/log4j2/log4j2.xml</code> 这份配置文件:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Configuration</span> <span class="attr">status</span>=<span class="string">"WARN"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Properties</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Property</span> <span class="attr">name</span>=<span class="string">"PID"</span>&gt;</span>????<span class="tag">&lt;/<span class="name">Property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Property</span> <span class="attr">name</span>=<span class="string">"LOG_EXCEPTION_CONVERSION_WORD"</span>&gt;</span>%xwEx<span class="tag">&lt;/<span class="name">Property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Property</span> <span class="attr">name</span>=<span class="string">"LOG_LEVEL_PATTERN"</span>&gt;</span>%5p<span class="tag">&lt;/<span class="name">Property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Property</span> <span class="attr">name</span>=<span class="string">"LOG_DATEFORMAT_PATTERN"</span>&gt;</span>yyyy-MM-dd HH:mm:ss.SSS<span class="tag">&lt;/<span class="name">Property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Property</span> <span class="attr">name</span>=<span class="string">"CONSOLE_LOG_PATTERN"</span>&gt;</span>%clr&#123;%d&#123;$&#123;LOG_DATEFORMAT_PATTERN&#125;&#125;&#125;&#123;faint&#125; %clr&#123;$&#123;LOG_LEVEL_PATTERN&#125;&#125; %clr&#123;$&#123;sys:PID&#125;&#125;&#123;magenta&#125; %clr&#123;---&#125;&#123;faint&#125; %clr&#123;[%15.15t]&#125;&#123;faint&#125; %clr&#123;%-40.40c&#123;1.&#125;&#125;&#123;cyan&#125; %clr&#123;:&#125;&#123;faint&#125; %m%n$&#123;sys:LOG_EXCEPTION_CONVERSION_WORD&#125;<span class="tag">&lt;/<span class="name">Property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Property</span> <span class="attr">name</span>=<span class="string">"FILE_LOG_PATTERN"</span>&gt;</span>%d&#123;$&#123;LOG_DATEFORMAT_PATTERN&#125;&#125; $&#123;LOG_LEVEL_PATTERN&#125; $&#123;sys:PID&#125; --- [%t] %-40.40c&#123;1.&#125; : %m%n$&#123;sys:LOG_EXCEPTION_CONVERSION_WORD&#125;<span class="tag">&lt;/<span class="name">Property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Properties</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Appenders</span>&gt;</span></span><br><span class="line">        // 打在控制台</span><br><span class="line"><span class="tag">&lt;<span class="name">Console</span> <span class="attr">name</span>=<span class="string">"Console"</span> <span class="attr">target</span>=<span class="string">"SYSTEM_OUT"</span> <span class="attr">follow</span>=<span class="string">"true"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">PatternLayout</span> <span class="attr">pattern</span>=<span class="string">"$&#123;sys:CONSOLE_LOG_PATTERN&#125;"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Console</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Appenders</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Loggers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Logger</span> <span class="attr">name</span>=<span class="string">"org.apache.catalina.startup.DigesterFactory"</span> <span class="attr">level</span>=<span class="string">"error"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Logger</span> <span class="attr">name</span>=<span class="string">"org.apache.catalina.util.LifecycleBase"</span> <span class="attr">level</span>=<span class="string">"error"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Logger</span> <span class="attr">name</span>=<span class="string">"org.apache.coyote.http11.Http11NioProtocol"</span> <span class="attr">level</span>=<span class="string">"warn"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">"org.apache.sshd.common.util.SecurityUtils"</span> <span class="attr">level</span>=<span class="string">"warn"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Logger</span> <span class="attr">name</span>=<span class="string">"org.apache.tomcat.util.net.NioSelectorPool"</span> <span class="attr">level</span>=<span class="string">"warn"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Logger</span> <span class="attr">name</span>=<span class="string">"org.eclipse.jetty.util.component.AbstractLifeCycle"</span> <span class="attr">level</span>=<span class="string">"error"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Logger</span> <span class="attr">name</span>=<span class="string">"org.hibernate.validator.internal.util.Version"</span> <span class="attr">level</span>=<span class="string">"warn"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">"org.springframework.boot.actuate.endpoint.jmx"</span> <span class="attr">level</span>=<span class="string">"warn"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Root</span> <span class="attr">level</span>=<span class="string">"info"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">AppenderRef</span> <span class="attr">ref</span>=<span class="string">"Console"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Root</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Loggers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这份配置文件中值有一个  Appender，就是默认的 Console，所以没有配置任何日志配置文件时，日志会被打在控制台。</p><h3 id="在-resources-目录下配置-log4j2-xml"><a href="#在-resources-目录下配置-log4j2-xml" class="headerlink" title="在 resources 目录下配置 log4j2.xml"></a>在 resources 目录下配置 log4j2.xml</h3><p>这份配置文件是能够被 SpringBoot 识别的，所以在初始化日志时会使用此份配置文件来进行日志系统的初始化。下面这份配置文件为每种日志级别都配置了一个 appender，所以在使用时，会根据日志级别将日志打在不同的日志目录下。（PS:关于能够识别的日志配置文件参考前面的分析）</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span> <span class="attr">status</span>=<span class="string">"OFF"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">Properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Property</span> <span class="attr">name</span>=<span class="string">"logging.path"</span>&gt;</span>./logs<span class="tag">&lt;/<span class="name">Property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">Properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">appenders</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Console</span> <span class="attr">name</span>=<span class="string">"Console"</span> <span class="attr">target</span>=<span class="string">"SYSTEM_OUT"</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--只接受程序中 INFO 级别的日志进行处理 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">ThresholdFilter</span> <span class="attr">level</span>=<span class="string">"INFO"</span> <span class="attr">onMatch</span>=<span class="string">"ACCEPT"</span> <span class="attr">onMismatch</span>=<span class="string">"DENY"</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">PatternLayout</span> <span class="attr">pattern</span>=<span class="string">"[%d&#123;HH:mm:ss.SSS&#125;] %-5level %class&#123;36&#125; %L %M - %msg%xEx%n"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">Console</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--处理DEBUG级别的日志，并把该日志放到logs/debug.log文件中--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--打印出DEBUG级别日志，每次大小超过size，则这size大小的日志会自动存入按年份-月份建立的文件夹下面并进行压缩，作为存档--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">RollingFile</span> <span class="attr">name</span>=<span class="string">"RollingFileDebug"</span> <span class="attr">fileName</span>=<span class="string">"$&#123;logging.path&#125;/debug.log"</span></span></span><br><span class="line"><span class="tag">                     <span class="attr">filePattern</span>=<span class="string">"logs/$$&#123;date:yyyy-MM&#125;/debug-%d&#123;yyyy-MM-dd&#125;-%i.log.gz"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">Filters</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">ThresholdFilter</span> <span class="attr">level</span>=<span class="string">"DEBUG"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">ThresholdFilter</span> <span class="attr">level</span>=<span class="string">"INFO"</span> <span class="attr">onMatch</span>=<span class="string">"DENY"</span> <span class="attr">onMismatch</span>=<span class="string">"NEUTRAL"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">Filters</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">PatternLayout</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">pattern</span>=<span class="string">"[%d&#123;yyyy-MM-dd HH:mm:ss&#125;] %-5level %class&#123;36&#125; %L %M - %msg%xEx%n"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">Policies</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">SizeBasedTriggeringPolicy</span> <span class="attr">size</span>=<span class="string">"500 MB"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">TimeBasedTriggeringPolicy</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">Policies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">RollingFile</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--处理INFO级别的日志，并把该日志放到logs/info.log文件中--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">RollingFile</span> <span class="attr">name</span>=<span class="string">"RollingFileInfo"</span> <span class="attr">fileName</span>=<span class="string">"$&#123;logging.path&#125;/info.log"</span></span></span><br><span class="line"><span class="tag">                     <span class="attr">filePattern</span>=<span class="string">"logs/$$&#123;date:yyyy-MM&#125;/info-%d&#123;yyyy-MM-dd&#125;-%i.log.gz"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">Filters</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--只接受INFO级别的日志，其余的全部拒绝处理--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">ThresholdFilter</span> <span class="attr">level</span>=<span class="string">"INFO"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">ThresholdFilter</span> <span class="attr">level</span>=<span class="string">"WARN"</span> <span class="attr">onMatch</span>=<span class="string">"DENY"</span> <span class="attr">onMismatch</span>=<span class="string">"NEUTRAL"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">Filters</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">PatternLayout</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">pattern</span>=<span class="string">"[%d&#123;yyyy-MM-dd HH:mm:ss&#125;] %-5level %class&#123;36&#125; %L %M - %msg%xEx%n"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">Policies</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">SizeBasedTriggeringPolicy</span> <span class="attr">size</span>=<span class="string">"500 MB"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">TimeBasedTriggeringPolicy</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">Policies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">RollingFile</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--处理WARN级别的日志，并把该日志放到logs/warn.log文件中--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">RollingFile</span> <span class="attr">name</span>=<span class="string">"RollingFileWarn"</span> <span class="attr">fileName</span>=<span class="string">"$&#123;logging.path&#125;/warn.log"</span></span></span><br><span class="line"><span class="tag">                     <span class="attr">filePattern</span>=<span class="string">"logs/$$&#123;date:yyyy-MM&#125;/warn-%d&#123;yyyy-MM-dd&#125;-%i.log.gz"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">Filters</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">ThresholdFilter</span> <span class="attr">level</span>=<span class="string">"WARN"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">ThresholdFilter</span> <span class="attr">level</span>=<span class="string">"ERROR"</span> <span class="attr">onMatch</span>=<span class="string">"DENY"</span> <span class="attr">onMismatch</span>=<span class="string">"NEUTRAL"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">Filters</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">PatternLayout</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">pattern</span>=<span class="string">"[%d&#123;yyyy-MM-dd HH:mm:ss&#125;] %-5level %class&#123;36&#125; %L %M - %msg%xEx%n"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">Policies</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">SizeBasedTriggeringPolicy</span> <span class="attr">size</span>=<span class="string">"500 MB"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">TimeBasedTriggeringPolicy</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">Policies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">RollingFile</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--处理error级别的日志，并把该日志放到logs/error.log文件中--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">RollingFile</span> <span class="attr">name</span>=<span class="string">"RollingFileError"</span> <span class="attr">fileName</span>=<span class="string">"$&#123;logging.path&#125;/error.log"</span></span></span><br><span class="line"><span class="tag">                     <span class="attr">filePattern</span>=<span class="string">"logs/$$&#123;date:yyyy-MM&#125;/error-%d&#123;yyyy-MM-dd&#125;-%i.log.gz"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">ThresholdFilter</span> <span class="attr">level</span>=<span class="string">"ERROR"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">PatternLayout</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">pattern</span>=<span class="string">"[%d&#123;yyyy-MM-dd HH:mm:ss&#125;] %-5level %class&#123;36&#125; %L %M - %msg%xEx%n"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">Policies</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">SizeBasedTriggeringPolicy</span> <span class="attr">size</span>=<span class="string">"500 MB"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">TimeBasedTriggeringPolicy</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">Policies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">RollingFile</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">appenders</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">loggers</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">root</span> <span class="attr">level</span>=<span class="string">"DEBUG"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"Console"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"RollingFileInfo"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"RollingFileWarn"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"RollingFileError"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"RollingFileDebug"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--log4j2 自带过滤日志--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Logger</span> <span class="attr">name</span>=<span class="string">"org.apache.catalina.startup.DigesterFactory"</span> <span class="attr">level</span>=<span class="string">"error"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Logger</span> <span class="attr">name</span>=<span class="string">"org.apache.catalina.util.LifecycleBase"</span> <span class="attr">level</span>=<span class="string">"error"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Logger</span> <span class="attr">name</span>=<span class="string">"org.apache.coyote.http11.Http11NioProtocol"</span> <span class="attr">level</span>=<span class="string">"warn"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">"org.apache.sshd.common.util.SecurityUtils"</span> <span class="attr">level</span>=<span class="string">"warn"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Logger</span> <span class="attr">name</span>=<span class="string">"org.apache.tomcat.util.net.NioSelectorPool"</span> <span class="attr">level</span>=<span class="string">"warn"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Logger</span> <span class="attr">name</span>=<span class="string">"org.crsh.plugin"</span> <span class="attr">level</span>=<span class="string">"warn"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">"org.crsh.ssh"</span> <span class="attr">level</span>=<span class="string">"warn"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Logger</span> <span class="attr">name</span>=<span class="string">"org.eclipse.jetty.util.component.AbstractLifeCycle"</span> <span class="attr">level</span>=<span class="string">"error"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Logger</span> <span class="attr">name</span>=<span class="string">"org.hibernate.validator.internal.util.Version"</span> <span class="attr">level</span>=<span class="string">"warn"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">"org.thymeleaf"</span> <span class="attr">level</span>=<span class="string">"warn"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Logger</span> <span class="attr">name</span>=<span class="string">"org.springframework"</span> <span class="attr">level</span>=<span class="string">"warn"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">loggers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="在-resources-下配置一个-log4j2-glmapper-xml"><a href="#在-resources-下配置一个-log4j2-glmapper-xml" class="headerlink" title="在 resources 下配置一个 log4j2-glmapper.xml"></a>在 resources 下配置一个 log4j2-glmapper.xml</h3><p>将上面的配置文件重命名为 log4j2-glmapper.xml ，因为这个命名规则是 SpringBoot 无法默认识别的，所以在日志配置文件加载时和场景一是一样的。如果希望这份配置文件能够被识别，可以使用 logging.config 来指定。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">logging.config=classpath:log4j2-glmapper.xml</span><br></pre></td></tr></table></figure><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>本篇对 SpringBoot 中的日志进行了系统的介绍和分析，文章主要是了解 SpringBoot 中对于日志系统的处理，所以不会太关注日志系统自身的一些处理逻辑，有兴趣的读者可以自行研究或者联系作者一起沟通。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Spring Boot 使用 Commons Logging 进行所有内部日志记录，但保留底层日志实现。为 Java Util Logging、Log4J2 和 Logback 提供了默认配置。在每种情况下，loggers 都预先配置为使用 console 输出，并且也提供
      
    
    </summary>
    
      <category term="springboot" scheme="http://www.glmapper.com/categories/springboot/"/>
    
    
      <category term="springboot" scheme="http://www.glmapper.com/tags/springboot/"/>
    
      <category term="log" scheme="http://www.glmapper.com/tags/log/"/>
    
  </entry>
  
  <entry>
    <title>SpringBoot 系列-资源访问</title>
    <link href="http://www.glmapper.com/2019/12/09/springboot-series-access-resource/"/>
    <id>http://www.glmapper.com/2019/12/09/springboot-series-access-resource/</id>
    <published>2019-12-09T14:49:35.000Z</published>
    <updated>2019-12-09T15:03:47.366Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>原文链接：<a href="https://smarterco.de/java-load-file-from-classpath-in-spring-boot/" target="_blank" rel="noopener">https://smarterco.de/java-load-file-from-classpath-in-spring-boot/</a></p></blockquote><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>当我们创建一个 SpringBoot web 应用时，有时候需要从 classpath 去加载一些文件，这里记录下在 war 和 jar 两种不同文件格式下加载文件的解决方案</p><h2 id="The-ResourceLoader"><a href="#The-ResourceLoader" class="headerlink" title="The ResourceLoader"></a>The ResourceLoader</h2><p>在 Java 中 ，我们可以使用当前线程的 classLoader 去尝试加载文件，但是 Spring Framework 为我们提供了更加优雅的解决方案，例如 ResourceLoader。</p><p>使用 ResourceLoader 时，我们只需要使用 @Autowire 自动注入 ResourceLoader，然后调用 getResource(“somePath”) 方法即可。</p><h3 id="在Spring-Boot（WAR）中从资源目录-类路径加载文件的示例"><a href="#在Spring-Boot（WAR）中从资源目录-类路径加载文件的示例" class="headerlink" title="在Spring Boot（WAR）中从资源目录/类路径加载文件的示例"></a>在Spring Boot（WAR）中从资源目录/类路径加载文件的示例</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span>(<span class="string">"geolocationservice"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GeoLocationServiceImpl</span> <span class="keyword">implements</span> <span class="title">GeoLocationService</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger LOGGER = LoggerFactory.getLogger(GeoLocationServiceImpl.class);</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> DatabaseReader reader = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">private</span> ResourceLoader resourceLoader;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">GeoLocationServiceImpl</span><span class="params">(ResourceLoader resourceLoader)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.resourceLoader = resourceLoader;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostConstruct</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            LOGGER.info(<span class="string">"GeoLocationServiceImpl: Trying to load GeoLite2-Country database..."</span>);</span><br><span class="line">            Resource resource = resourceLoader.getResource(<span class="string">"classpath:GeoLite2-Country.mmdb"</span>);</span><br><span class="line">            File dbAsFile = resource.getFile();</span><br><span class="line">            <span class="comment">// Initialize the reader</span></span><br><span class="line">            reader = <span class="keyword">new</span> DatabaseReader</span><br><span class="line">                        .Builder(dbAsFile)</span><br><span class="line">                        .fileMode(Reader.FileMode.MEMORY)</span><br><span class="line">                        .build();</span><br><span class="line">            LOGGER.info(<span class="string">"GeoLocationServiceImpl: Database was loaded successfully."</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException | NullPointerException e) &#123;</span><br><span class="line">            LOGGER.error(<span class="string">"Database reader cound not be initialized. "</span>, e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@PreDestroy</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">preDestroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (reader != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                reader.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                LOGGER.error(<span class="string">"Failed to close the reader."</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="从-SpringBoot-FatJar-中加载资源"><a href="#从-SpringBoot-FatJar-中加载资源" class="headerlink" title="从 SpringBoot FatJar 中加载资源"></a>从 SpringBoot FatJar 中加载资源</h3><p>如果我们想从 Spring Boot JAR 中的类路径加载文件，则必须使用 resource.getInputStream() 方法将其作为 InputStream 检索。 如果尝试使用resource.getFile()，则会收到错误消息，因为 Spring 尝试访问文件系统路径，但它无法访问 JAR 中的路径。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span>(<span class="string">"geolocationservice"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GeoLocationServiceImpl</span> <span class="keyword">implements</span> <span class="title">GeoLocationService</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger LOGGER = LoggerFactory.getLogger(GeoLocationServiceImpl.class);</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> DatabaseReader reader = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">private</span> ResourceLoader resourceLoader;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Inject</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">GeoLocationServiceImpl</span><span class="params">(ResourceLoader resourceLoader)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.resourceLoader = resourceLoader;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostConstruct</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            LOGGER.info(<span class="string">"GeoLocationServiceImpl: Trying to load GeoLite2-Country database..."</span>);</span><br><span class="line">            Resource resource = resourceLoader.getResource(<span class="string">"classpath:GeoLite2-Country.mmdb"</span>);</span><br><span class="line">            InputStream dbAsStream = resource.getInputStream(); <span class="comment">// &lt;-- this is the difference</span></span><br><span class="line">            <span class="comment">// Initialize the reader</span></span><br><span class="line">            reader = <span class="keyword">new</span> DatabaseReader</span><br><span class="line">                        .Builder(dbAsStream)</span><br><span class="line">                        .fileMode(Reader.FileMode.MEMORY)</span><br><span class="line">                        .build();</span><br><span class="line">            LOGGER.info(<span class="string">"GeoLocationServiceImpl: Database was loaded successfully."</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException | NullPointerException e) &#123;</span><br><span class="line">            LOGGER.error(<span class="string">"Database reader cound not be initialized. "</span>, e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PreDestroy</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">preDestroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (reader != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                reader.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                LOGGER.error(<span class="string">"Failed to close the reader."</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;原文链接：&lt;a href=&quot;https://smarterco.de/java-load-file-from-classpath-in-spring-boot/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://sma
      
    
    </summary>
    
      <category term="springboot" scheme="http://www.glmapper.com/categories/springboot/"/>
    
    
      <category term="springboot" scheme="http://www.glmapper.com/tags/springboot/"/>
    
  </entry>
  
  <entry>
    <title>SpringBoot 系列-启动过程分析</title>
    <link href="http://www.glmapper.com/2019/12/07/springboot-series-started/"/>
    <id>http://www.glmapper.com/2019/12/07/springboot-series-started/</id>
    <published>2019-12-07T07:04:28.000Z</published>
    <updated>2020-01-01T14:33:04.944Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>个人博客：<a href="https://juejin.im/user/58fcc0768d6d810058965a06" target="_blank" rel="noopener">glmapper</a><br>更多请关注 <strong><a href="#jump_10">glmapper工作室</a></strong> 微信公众号</p></blockquote><p>SpringBoot 作为目前非常流行的微服务框架，它使得构建独立的 Spring 生产级应用变得非常简单，因此受到很多互联网企业的青睐。</p><p>最近在写 <a href="https://github.com/sofastack/sofa-tracer" target="_blank" rel="noopener">SOFATracer</a> 集成 Spring Cloud Stream RocketMQ 的过程中，遇到了一些问题，比如：BeanPostProcessor 不生效，如何在 BeanPostProcessor 不生效的情况下去修改一个 Bean 等，这些问题其实都是和 Bean 的生命周期有关系的，当然也和容器启动的过程有关系。SpringBoot 的启动过程对于我来说其实不算陌生，也可以说是比较熟悉，但是之前没有完整的梳理过这一块的东西，在实际的应用过程成难免再去踩一些坑。另外想到之前也写过一篇 <a href="http://www.glmapper.com/2019/12/08/springboot-series-fatjar/">SpringBoot系列- FatJar 启动原理</a>，刚好承接上篇，继续来探索 SpringBoot 中的一些知识点。</p><blockquote><p>注：本篇基于 SpringBoot 2.1.0.RELEASE 版本，SpringBoot 各个版本之间可能存在差异，不过大体流程基本差不多，所以各位看官在实际的工作过程中也</p></blockquote><h2 id="从一份配置文件开始说起"><a href="#从一份配置文件开始说起" class="headerlink" title="从一份配置文件开始说起"></a>从一份配置文件开始说起</h2><p>Spring 的启动过程实际上就是 Ioc 容器初始化以及载入 Bean 的过程；SpringBoot 的启动过程最核心的容器刷新流程也是复用了  Spring 容器刷新的逻辑。在分析 SpringBoot 启动过程之前，我们先来简单回顾下 Spring web 应用基于 tomcat 容器部署的启动过程。这就需要从一个大家都熟悉的配置文件开始说起：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">listener</span>&gt;</span>  </span><br><span class="line">     <span class="tag">&lt;<span class="name">listener-class</span>&gt;</span>org.springframework.web.context.ContextLoaderListener<span class="tag">&lt;/<span class="name">listener-class</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">listener</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">context-param</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:applicationContext.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在一般的传统 WEB 项目中，项目的启动一般是从 web.xml 文件的载入开始，如果我们的项目中使用了Spring，那么你肯定会在你的 web.xml 文件中看到上面的配置。Spring 正是通过 ContextLoaderListener 监听器作为容器初始化入口的。</p><p>ContextLoaderListener 继承了 ContextLoader 类和 ServletContextListener 接口，并且重写了 ServletContextListener 中的contextInitialized 和 contextDestroyed 方法。在 contextInitialized 中，通过调用父类（ContextLoader）的 initWebApplicationContext 方法进行容器创建：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">contextInitialized</span><span class="params">(ServletContextEvent event)</span> </span>&#123;</span><br><span class="line">    initWebApplicationContext(event.getServletContext());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对于上述 Spring 容器引导刷新大概可以分为两个点来做简单的归纳：</p><ul><li><p>1、通过监听 ServletContextEvent 事件，为 web 容器提供一个全局的 ServletContext 上下文环境，并作为后面 spring 容器的宿主环境</p></li><li><p>2、在 contextInitialized 方法被调用时，spring 开始初始化一个上下文，这个上下文被称为根上下文，也就是 WebApplicationContext（实际的实现类是 XmlWebApplicationContext ）。这个 WebApplicationContext 就是 spring 的 IoC 容器，其对应的 Bean 定义的配置文件由 web.xml 中的 context-param 指定。</p></li></ul><p>关于依赖监听 ServletContextEvent 事件来引导启动的过程大致可以描述为一下过程：</p><p><img src="https://glmapper-blog.oss-cn-hangzhou.aliyuncs.com/spring-start.png" alt=""></p><p>相对于通过监听 ServletContextEvent 事件方式引导刷新 Spring 上下文，SpringBoot 给我的感觉是回归了 java 的本源，即通过 main 方法方式引导启动。由于 SpringBoot 中对于 web 容器也是使用了嵌入式+自动配置的方式，所以在启动入口上差异还是比较大的，当然 SpringBoot 除了支持 fatjar 方式之外，也提供了 war 包方式来保持对原有 Spring 工程的兼容。</p><p>本篇文章将承接上一篇《SpringBoot FatJar 启动原理》，来分析下 SpringBoot 的启动过程。希望通过本篇文章，能够让大家了解到与传统基于 servlet 事件引导启动和基于 main 方式启动的不同，从而对 SpringBoot 的整体启动过程有比较清楚的认识。</p><h2 id="启动入口"><a href="#启动入口" class="headerlink" title="启动入口"></a>启动入口</h2><p>在这篇<a href="http://www.glmapper.com/2019/12/08/springboot-series-fatjar/">SpringBoot系列- FatJar 启动原理</a> 文章中介绍得到，JarLaunch 最后是构建了一个 MainMethodRunner 实例对象，然后通过反射的方式调用了 BootStrap 类中的 main 方法，这里的 ’BootStrap 类中的 main 方法‘ 实际上就是 SpringBoot 的业务入口，也就是常见的下面的代码片段：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GlmapperApplication</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(GlmapperApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从代码可以非常直观的了解到，启动是通过调用 SpringApplication 的静态方法 run；这个 run 方法内部其实是会构造一个 SpringApplication 的实例，然后再调用这里实例的 run 方法来启动 SpringBoot 的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* Static helper that can be used to run a &#123;<span class="doctag">@link</span> SpringApplication&#125; from the</span></span><br><span class="line"><span class="comment">* specified sources using default settings and user supplied arguments.</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> primarySources the primary sources to load</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> args the application arguments (usually passed from a Java main method)</span></span><br><span class="line"><span class="comment">* <span class="doctag">@return</span> the running &#123;<span class="doctag">@link</span> ApplicationContext&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ConfigurableApplicationContext <span class="title">run</span><span class="params">(Class&lt;?&gt;[] primarySources,</span></span></span><br><span class="line"><span class="function"><span class="params">    String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> SpringApplication(primarySources).run(args);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>因此，如果要分析 SpringBoot 的启动过程，我们需要熟悉 SpringApplication 的构造过程以及 SpringApplication 的 run 方法执行过程即可。</p><h2 id="SpringApplication-实例的构建"><a href="#SpringApplication-实例的构建" class="headerlink" title="SpringApplication 实例的构建"></a>SpringApplication 实例的构建</h2><p>篇幅原因，我们只分析核心的构建流程。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">SpringApplication</span><span class="params">(ResourceLoader resourceLoader, Class&lt;?&gt;... primarySources)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 资源加载器，默认是 null</span></span><br><span class="line">    <span class="keyword">this</span>.resourceLoader = resourceLoader;</span><br><span class="line">    <span class="comment">// 启动类 bean </span></span><br><span class="line">    Assert.notNull(primarySources, <span class="string">"PrimarySources must not be null"</span>);</span><br><span class="line">    <span class="keyword">this</span>.primarySources = <span class="keyword">new</span> LinkedHashSet&lt;&gt;(Arrays.asList(primarySources));</span><br><span class="line">    <span class="comment">// 是否是 web 应用</span></span><br><span class="line">    <span class="keyword">this</span>.webApplicationType = WebApplicationType.deduceFromClasspath();</span><br><span class="line">    <span class="comment">// 设置了 ApplicationContextInitializer</span></span><br><span class="line">    setInitializers((Collection) getSpringFactoriesInstances(</span><br><span class="line">            ApplicationContextInitializer.class));</span><br><span class="line">    <span class="comment">// 设置 ApplicationListener</span></span><br><span class="line">    setListeners((Collection) getSpringFactoriesInstances(ApplicationListener.class));</span><br><span class="line">    <span class="comment">// 启动类</span></span><br><span class="line">    <span class="keyword">this</span>.mainApplicationClass = deduceMainApplicationClass();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面代码段中，需要关注两个点：</p><ul><li>1、初始化 ApplicationContextInitializer；</li><li>2、初始化 ApplicationListener</li></ul><p>要注意的是这里的实例化，并非是通过注解和扫包完成，而是通过一种不依赖 Spring 上下文的加载方法；这种做法是为了能够使得在 Spring 完成启动前做各种配置。Spring 的解决方法是以接口的全限定名作为 key，实现类的全限定名作为 value 记录在项目的 META-INF/spring.factories 文件中，然后通过SpringFactoriesLoader 工具类提供静态方法进行类加载并缓存下来，spring.factories 是 SpringBoot 的核心配置文件。SpringFactoriesLoader 可以理解为 Spring 自己提供的一种 spi 扩展实现。SpringBoot 中提供的默认的 spring.factories 配置如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"># PropertySource Loaders</span><br><span class="line">org.springframework.boot.env.PropertySourceLoader=\</span><br><span class="line">// ..省略</span><br><span class="line"># Run Listeners</span><br><span class="line">org.springframework.boot.SpringApplicationRunListener=\</span><br><span class="line">// ..省略</span><br><span class="line"># Error Reporters</span><br><span class="line">org.springframework.boot.SpringBootExceptionReporter=\</span><br><span class="line">// ..省略</span><br><span class="line"># Application Context Initializers</span><br><span class="line">org.springframework.context.ApplicationContextInitializer=\/</span><br><span class="line">// ..省略</span><br><span class="line"># Application Listeners</span><br><span class="line">org.springframework.context.ApplicationListener=\</span><br><span class="line">// ..省略</span><br><span class="line"># Environment Post Processors</span><br><span class="line">org.springframework.boot.env.EnvironmentPostProcessor=\</span><br><span class="line">// ..省略</span><br><span class="line"># Failure Analyzers</span><br><span class="line">org.springframework.boot.diagnostics.FailureAnalyzer=\</span><br><span class="line">// ..省略</span><br><span class="line"># FailureAnalysisReporters</span><br><span class="line">org.springframework.boot.diagnostics.FailureAnalysisReporter=\</span><br><span class="line">// ..省略</span><br></pre></td></tr></table></figure><p>关于 SpringFactoriesLoader  如何加载这些资源这里就不过多分析，有兴趣的读者可以自行查看相关源码。<a href="">org.springframework.core.io.support.SpringFactoriesLoader#loadSpringFactories</a></p><h2 id="run-方法主流程"><a href="#run-方法主流程" class="headerlink" title="run 方法主流程"></a>run 方法主流程</h2><p>SpringApplication 的 run 方法 SpringBoot 进行 Spring 容器刷新的实际入口方法，这个方法中包括了很多 SpringBoot 自己扩展出来的一些特性机制，比如 SpringApplicationRunListener、打印启动 Banner、统一的异常处理扩展等等。下面就直观的看下代码，然后再逐个分析各个流程的具体细节：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> ConfigurableApplicationContext <span class="title">run</span><span class="params">(String... args)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 开启容器启动计时</span></span><br><span class="line">    StopWatch stopWatch = <span class="keyword">new</span> StopWatch();</span><br><span class="line">    stopWatch.start();</span><br><span class="line">    ConfigurableApplicationContext context = <span class="keyword">null</span>;</span><br><span class="line">    <span class="comment">// SpringBootExceptionReporter 列表，SpringBoot 允许自定义 Reporter</span></span><br><span class="line">    Collection&lt;SpringBootExceptionReporter&gt; exceptionReporters = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    <span class="comment">// 设置java.awt.headless属性为true还是false</span></span><br><span class="line">    <span class="comment">// 可详见解释：https://blog.csdn.net/michaelgo/article/details/81634017</span></span><br><span class="line">    configureHeadlessProperty();</span><br><span class="line">    <span class="comment">// 获取所有 SpringApplicationRunListener ，也是通过 SpringFactoriesLoader 来获取的</span></span><br><span class="line">    SpringApplicationRunListeners listeners = getRunListeners(args);</span><br><span class="line">    <span class="comment">// 发布 starting 事件，在首次启动 run方法时立即调用，可用于非常早的初始化，注意此时容器上下文还没有刷新</span></span><br><span class="line">    listeners.starting();</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// 构建 ApplicationArguments 对象</span></span><br><span class="line">        ApplicationArguments applicationArguments = <span class="keyword">new</span> DefaultApplicationArguments(</span><br><span class="line">                args);</span><br><span class="line">        <span class="comment">// 准备上下文刷新需要的环境属性 -- 详见 prepareEnvironment 过程分析</span></span><br><span class="line">        ConfigurableEnvironment environment = prepareEnvironment(listeners,</span><br><span class="line">                applicationArguments);</span><br><span class="line">        <span class="comment">// spring.beaninfo.ignore，如果为空设置为true</span></span><br><span class="line">        configureIgnoreBeanInfo(environment);</span><br><span class="line">        <span class="comment">// 打印 SpringBoot 启动 Banner</span></span><br><span class="line">        Banner printedBanner = printBanner(environment);</span><br><span class="line">        <span class="comment">// 创建上下文，这里会根据 webApplicationType 类型来创建不同的 ApplicationContext</span></span><br><span class="line">        context = createApplicationContext();</span><br><span class="line">        <span class="comment">// 加载获取 exceptionReporters</span></span><br><span class="line">        exceptionReporters = getSpringFactoriesInstances(</span><br><span class="line">                SpringBootExceptionReporter.class,</span><br><span class="line">                <span class="keyword">new</span> Class[] &#123; ConfigurableApplicationContext.class &#125;, context);</span><br><span class="line">        <span class="comment">// 上下文刷新之前的准备工作 -- 详见 prepareContext 过程分析</span></span><br><span class="line">        prepareContext(context, environment, listeners, applicationArguments,</span><br><span class="line">                printedBanner);</span><br><span class="line">        <span class="comment">// 刷新上下文 -- 详见 refreshContext 过程分析</span></span><br><span class="line">        refreshContext(context);</span><br><span class="line">        <span class="comment">// 刷新之后回调，SpringBoot 中这个方法是空实现，可以自行扩展</span></span><br><span class="line">        afterRefresh(context, applicationArguments);</span><br><span class="line">        <span class="comment">// 停止计时</span></span><br><span class="line">        stopWatch.stop();</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.logStartupInfo) &#123;</span><br><span class="line">            <span class="keyword">new</span> StartupInfoLogger(<span class="keyword">this</span>.mainApplicationClass)</span><br><span class="line">                    .logStarted(getApplicationLog(), stopWatch);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 发布 started 事件 </span></span><br><span class="line">        listeners.started(context);</span><br><span class="line">        <span class="comment">// ApplicationRunner 和 CommandLineRunner 调用</span></span><br><span class="line">        callRunners(context, applicationArguments);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span> (Throwable ex) &#123;</span><br><span class="line">        <span class="comment">// 异常处理</span></span><br><span class="line">        handleRunFailure(context, ex, exceptionReporters, listeners);</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(ex);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// 发布 running 事件 </span></span><br><span class="line">        listeners.running(context);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span> (Throwable ex) &#123;</span><br><span class="line">        <span class="comment">// 异常处理</span></span><br><span class="line">        handleRunFailure(context, ex, exceptionReporters, <span class="keyword">null</span>);</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(ex);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> context;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面对代码基本都做了一些详细的注释，有几个需要关注的点：</p><ul><li>1、prepareEnvironment 的处理过程</li><li>2、prepareContext 的处理过程</li><li>3、refreshContext 的处理过程</li><li>4、listeners 执行时机及顺序</li><li>5、异常处理逻辑</li></ul><p>关于 Listeners 执行时机及顺序在之前的文章中有做过非常详细的分析，详见：<a href="http://www.glmapper.com/2019/04/13/springboot-series-event/">SpringBoot 系列-事件机制详解</a>。下面就对其他的 4 个点做下详细的分析。</p><blockquote><p>分析启动过程，本质上是对其整个容器生命周期有个了解，包括 listeners 执行各个事件的时机、PostProcessor 执行的时机，Enviroment Ready 的时机等等。掌握这些扩展和时机，可以在实际的业务开发中来做很多事情。</p></blockquote><h3 id="prepareEnvironment-的处理过程"><a href="#prepareEnvironment-的处理过程" class="headerlink" title="prepareEnvironment 的处理过程"></a>prepareEnvironment 的处理过程</h3><p>prepareEnvironment 过程相对来说是比较早的，这里主要就是为上下文刷新提供 Environment。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> ConfigurableEnvironment <span class="title">prepareEnvironment</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">SpringApplicationRunListeners listeners,</span></span></span><br><span class="line"><span class="function"><span class="params">ApplicationArguments applicationArguments)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// Create and configure the environment</span></span><br><span class="line">    ConfigurableEnvironment environment = getOrCreateEnvironment();</span><br><span class="line">    <span class="comment">// 配置 PropertySources 和 Profiles</span></span><br><span class="line">    <span class="comment">// 1、将参数和一些默认的属性配置到 environment</span></span><br><span class="line">    <span class="comment">// 2、激活 profiles </span></span><br><span class="line">    configureEnvironment(environment, applicationArguments.getSourceArgs());</span><br><span class="line">    <span class="comment">// 发布 ApplicationEnvironmentPreparedEvent 事件</span></span><br><span class="line">    listeners.environmentPrepared(environment);</span><br><span class="line">    <span class="comment">// 绑定 SpringApplication 环境</span></span><br><span class="line">    bindToSpringApplication(environment);</span><br><span class="line">    <span class="keyword">if</span> (!<span class="keyword">this</span>.isCustomEnvironment) &#123;</span><br><span class="line">        environment = <span class="keyword">new</span> EnvironmentConverter(getClassLoader())</span><br><span class="line">                .convertEnvironmentIfNecessary(environment, deduceEnvironmentClass());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 附加的解析器将动态跟踪底层 Environment 属性源的任何添加或删除</span></span><br><span class="line">    ConfigurationPropertySources.attach(environment);</span><br><span class="line">    <span class="keyword">return</span> environment;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里面做的事情就是将我们的配置，包括系统配置、application.properties、-D 参数等等统统打包给 environment。在 Spring 中，我们最常见的 xml 中使用的 ${xxx} 或者代码中使用的 @Value(“${xxxx}”) 等，最后都是从 environment 中拿值的。</p><p>这里需要关注的一个比较重要的点是<strong>发布 ApplicationEnvironmentPreparedEvent 事件</strong>，我们可以通过监听这个事件来<strong>修改 environment</strong>。这里可以参考下 SOFATracer 中 <a href="https://github.com/sofastack/sofa-tracer/blob/master/tracer-sofa-boot-starter/src/main/java/com/alipay/sofa/tracer/boot/listener/SofaTracerConfigurationListener.java" target="_blank" rel="noopener">SofaTracerConfigurationListener</a> 是如何利用这个事件来做环境配置处理的。</p><h3 id="prepareContext-的处理过程"><a href="#prepareContext-的处理过程" class="headerlink" title="prepareContext 的处理过程"></a>prepareContext 的处理过程</h3><p>prepareContext 的处理过程中可以利用的点是非常多的，比如 ApplicationContextInitializer 的执行、ApplicationContextInitializedEvent 和 ApplicationPreparedEvent 事件发布。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">prepareContext</span><span class="params">(ConfigurableApplicationContext context,</span></span></span><br><span class="line"><span class="function"><span class="params">ConfigurableEnvironment environment, SpringApplicationRunListeners listeners,</span></span></span><br><span class="line"><span class="function"><span class="params">ApplicationArguments applicationArguments, Banner printedBanner)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 设置 environment 给 context，所以需要注意的是，在此之前拿到的 context 中，environment 是没有的。</span></span><br><span class="line">    context.setEnvironment(environment);</span><br><span class="line">    <span class="comment">// 对 ApplicationContext 的后置处理，比如注册 BeanNameGenerator 和 ResourceLoader</span></span><br><span class="line">    postProcessApplicationContext(context);</span><br><span class="line">    <span class="comment">// 这里开始执行所有的 ApplicationContextInitializer</span></span><br><span class="line">    applyInitializers(context);</span><br><span class="line">    <span class="comment">// 发布 ApplicationContextInitializedEvent 事件</span></span><br><span class="line">    listeners.contextPrepared(context);</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.logStartupInfo) &#123;</span><br><span class="line">        logStartupInfo(context.getParent() == <span class="keyword">null</span>);</span><br><span class="line">        logStartupProfileInfo(context);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// Add boot specific singleton beans</span></span><br><span class="line">    ConfigurableListableBeanFactory beanFactory = context.getBeanFactory();</span><br><span class="line">    beanFactory.registerSingleton(<span class="string">"springApplicationArguments"</span>, applicationArguments);</span><br><span class="line">    <span class="keyword">if</span> (printedBanner != <span class="keyword">null</span>) &#123;</span><br><span class="line">        beanFactory.registerSingleton(<span class="string">"springBootBanner"</span>, printedBanner);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (beanFactory <span class="keyword">instanceof</span> DefaultListableBeanFactory) &#123;</span><br><span class="line">        <span class="comment">// 是否允许 bean 覆盖，这里如果是 false ,则可能会导致 BeanDefinitionOverrideException 异常</span></span><br><span class="line">        ((DefaultListableBeanFactory) beanFactory)</span><br><span class="line">                .setAllowBeanDefinitionOverriding(<span class="keyword">this</span>.allowBeanDefinitionOverriding);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// Load the sources</span></span><br><span class="line">    Set&lt;Object&gt; sources = getAllSources();</span><br><span class="line">    Assert.notEmpty(sources, <span class="string">"Sources must not be empty"</span>);</span><br><span class="line">    load(context, sources.toArray(<span class="keyword">new</span> Object[<span class="number">0</span>]));</span><br><span class="line">    <span class="comment">// 发布 ApplicationPreparedEvent 事件</span></span><br><span class="line">    listeners.contextLoaded(context);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ApplicationContextInitializer 是 spring 容器刷新之前初始化 Spring ConfigurableApplicationContext 的回调接口，ApplicationContextInitializer 的 initialize 方法执行之前，context 是还没有刷新的。可以看到在 applyInitializers 之后紧接着发布了 ApplicationContextInitializedEvent 事件。其实这两个点都可以对 context 搞一些事情，ApplicationContextInitializer 更纯粹些，它只关注 context；而 ApplicationContextInitializedEvent 事件源中除了 context 之外，还有 springApplication 对象和参数 args。</p><p>prepareContext 最后阶段是发布了 ApplicationPreparedEvent 事件，表示上下文已经准备好了，可以随时执行 refresh 了。</p><h3 id="refreshContext-的处理过程"><a href="#refreshContext-的处理过程" class="headerlink" title="refreshContext 的处理过程"></a>refreshContext 的处理过程</h3><p>refreshContext 是 Spring 上下文刷新的过程，这里实际调用的是 AbstractApplicationContext 的 refresh 方法；所以 SpringBoot 也是复用了 Spring 上下文刷新的过程。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">refresh</span><span class="params">()</span> <span class="keyword">throws</span> BeansException, IllegalStateException </span>&#123;</span><br><span class="line">    <span class="comment">// 加锁处理</span></span><br><span class="line">    <span class="keyword">synchronized</span> (<span class="keyword">this</span>.startupShutdownMonitor) &#123;</span><br><span class="line">        <span class="comment">// 准备刷新此上下文。主要包括占位符的替换及验证所有的 properties</span></span><br><span class="line">        prepareRefresh();</span><br><span class="line">        <span class="comment">// 这里做了很多事情：</span></span><br><span class="line">        <span class="comment">// 1、让子类刷新内部beanFactory ，创建IoC容器（DefaultListableBeanFactory--ConfigurableListableBeanFactory 的实现类）</span></span><br><span class="line">        <span class="comment">// 2、加载解析XML文件（最终存储到Document对象中）</span></span><br><span class="line">        <span class="comment">// 3、读取Document对象，并完成BeanDefinition的加载和注册工作</span></span><br><span class="line">        ConfigurableListableBeanFactory beanFactory = obtainFreshBeanFactory();</span><br><span class="line">        <span class="comment">// 对 beanFactory 进行一些预处理（设置一些公共属性）</span></span><br><span class="line">        prepareBeanFactory(beanFactory);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 允许在 AbstractApplicationContext的子类中对 BeanFactory 进行后置处理，postProcessBeanFactory()这个方法是个空实现。</span></span><br><span class="line">            postProcessBeanFactory(beanFactory);</span><br><span class="line">            <span class="comment">// 调用 BeanFactoryPostProcessor 后置处理器处理 BeanFactory 实例（BeanDefinition）</span></span><br><span class="line">            invokeBeanFactoryPostProcessors(beanFactory);</span><br><span class="line">            <span class="comment">// 注册BeanPostProcessor后置处理器，BeanPostProcessors后置处理器用于拦截bean的创建</span></span><br><span class="line">            <span class="comment">// 用于对创建后的bean实例进行处理</span></span><br><span class="line">            registerBeanPostProcessors(beanFactory);</span><br><span class="line">            <span class="comment">// 初始化消息资源</span></span><br><span class="line">            initMessageSource();</span><br><span class="line">            <span class="comment">//  初始化应用事件广播器</span></span><br><span class="line">            initApplicationEventMulticaster();</span><br><span class="line">            <span class="comment">// 初始化特殊的bean，这个方法是空实现，让AbstractApplicationContext的子类重写</span></span><br><span class="line">            onRefresh();</span><br><span class="line">            <span class="comment">// 注册监听器（ApplicationListener）</span></span><br><span class="line">            registerListeners();</span><br><span class="line">            <span class="comment">// 实例化剩余的单例bean（非懒加载方式）， Bean的 IoC、DI 和 AOP 都是发生在此步骤</span></span><br><span class="line">            finishBeanFactoryInitialization(beanFactory);</span><br><span class="line">            <span class="comment">// 完成刷新</span></span><br><span class="line">            <span class="comment">// 1、发布 ContextRefreshedEvent 事件</span></span><br><span class="line">            <span class="comment">// 2、处理 LifecycleProcessor</span></span><br><span class="line">            finishRefresh();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (BeansException ex) &#123;</span><br><span class="line">            <span class="keyword">if</span> (logger.isWarnEnabled()) &#123;</span><br><span class="line">                logger.warn(<span class="string">"Exception encountered during context initialization - "</span> +</span><br><span class="line">                        <span class="string">"cancelling refresh attempt: "</span> + ex);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 销毁已经创建的单例以避免资源悬空。</span></span><br><span class="line">            destroyBeans();</span><br><span class="line">            <span class="comment">// 重置 ”active“ 标记</span></span><br><span class="line">            cancelRefresh(ex);</span><br><span class="line">            <span class="keyword">throw</span> ex;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">// 重置Spring内核中的常用自检缓存，清空单例bean内缓存</span></span><br><span class="line">            resetCommonCaches();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个过程涉及到的东西非常多，可扩展的点也非常多，包括 BeanFactoryPostProcessor 处理、BeanPostProcessor 处理、LifecycleProcessor 处理已经 发布 ContextRefreshedEvent 事件等。到这里容器刷新已经完成，容器已经 ready，DI 和 AOP 也已经完成。</p><h4 id="BeanFactoryPostProcessor-处理"><a href="#BeanFactoryPostProcessor-处理" class="headerlink" title="BeanFactoryPostProcessor 处理"></a>BeanFactoryPostProcessor 处理</h4><p> BeanFactoryPostProcessor 可以对我们的 beanFactory 内所有的 beandefinition（未实例化）数据进行修改，这个过程是在 bean 还没有实例化之前做的。所以在这，我们通过自己去注册一些 beandefinition ，也可以对 beandefinition 做一些修改。关于 BeanFactoryPostProcessor 的用法在很多框架中都有体现，这里以 SOFATracer 中修改 Datasource 为例来说明下。</p><blockquote><p>SOFATracer 中为了对有所基于 jdbc 规范的数据源进行埋点，提供了一个 DataSourceBeanFactoryPostProcessor，用于修改原生 DataSource 来实现一层代理。代码详见：<a href="https://github.com/sofastack/sofa-tracer/blob/master/tracer-sofa-boot-starter/src/main/java/com/alipay/sofa/tracer/boot/datasource/processor/DataSourceBeanFactoryPostProcessor.java" target="_blank" rel="noopener">com.alipay.sofa.tracer.boot.datasource.processor.DataSourceBeanFactoryPostProcessor</a></p></blockquote><p> 这里只看核心代码部分，在 postProcessBeanFactory 方法中会根据 Datasource 的类型来创建不同的 DataSourceProxy；创建 DataSourceProxy 的过程就是修改原生 Datasource 的过程。</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">createDataSourceProxy</span><span class="params">(ConfigurableListableBeanFactory beanFactory,</span></span></span><br><span class="line"><span class="function"><span class="params">                                      String beanName, BeanDefinition originDataSource,</span></span></span><br><span class="line"><span class="function"><span class="params">                                      String jdbcUrl)</span> </span>&#123;</span><br><span class="line">   <span class="comment">// re-register origin datasource bean</span></span><br><span class="line">   BeanDefinitionRegistry beanDefinitionRegistry = (BeanDefinitionRegistry) beanFactory;</span><br><span class="line">   <span class="comment">// 先把之前已经存在的 Datasource 的 BeanDefinition 移除</span></span><br><span class="line">   beanDefinitionRegistry.removeBeanDefinition(beanName);</span><br><span class="line">   <span class="keyword">boolean</span> isPrimary = originDataSource.isPrimary();</span><br><span class="line">   originDataSource.setPrimary(<span class="keyword">false</span>);</span><br><span class="line">   <span class="comment">// 换个 beanName ,重新注册到容器中</span></span><br><span class="line">   beanDefinitionRegistry.registerBeanDefinition(transformDatasourceBeanName(beanName),</span><br><span class="line">       originDataSource);</span><br><span class="line">   <span class="comment">// 构建代理的 datasource BeanDefinition，类型为 SmartDataSource</span></span><br><span class="line">   RootBeanDefinition proxiedBeanDefinition = <span class="keyword">new</span> RootBeanDefinition(SmartDataSource.class);</span><br><span class="line">   <span class="comment">// 设置 BeanDefinition 相关属性</span></span><br><span class="line">   proxiedBeanDefinition.setRole(BeanDefinition.ROLE_APPLICATION);</span><br><span class="line">   proxiedBeanDefinition.setPrimary(isPrimary);</span><br><span class="line">   proxiedBeanDefinition.setInitMethodName(<span class="string">"init"</span>);</span><br><span class="line">   proxiedBeanDefinition.setDependsOn(transformDatasourceBeanName(beanName));</span><br><span class="line">   <span class="comment">// 获取原生 datasource 的属性值</span></span><br><span class="line">   MutablePropertyValues originValues = originDataSource.getPropertyValues();</span><br><span class="line">   MutablePropertyValues values = <span class="keyword">new</span> MutablePropertyValues();</span><br><span class="line">   String appName = environment.getProperty(TRACER_APPNAME_KEY);</span><br><span class="line">   <span class="comment">// 修改和新增属性</span></span><br><span class="line">   Assert.isTrue(!StringUtils.isBlank(appName), TRACER_APPNAME_KEY + <span class="string">" must be configured!"</span>);</span><br><span class="line">   values.add(<span class="string">"appName"</span>, appName);</span><br><span class="line">   values.add(<span class="string">"delegate"</span>, <span class="keyword">new</span> RuntimeBeanReference(transformDatasourceBeanName(beanName)));</span><br><span class="line">   values.add(<span class="string">"dbType"</span>,</span><br><span class="line">       DataSourceUtils.resolveDbTypeFromUrl(unwrapPropertyValue(originValues.get(jdbcUrl))));</span><br><span class="line">   values.add(<span class="string">"database"</span>,</span><br><span class="line">       DataSourceUtils.resolveDatabaseFromUrl(unwrapPropertyValue(originValues.get(jdbcUrl))));</span><br><span class="line">   <span class="comment">// 将新的 values 设置给代理 BeanDefinition</span></span><br><span class="line">   proxiedBeanDefinition.setPropertyValues(values);</span><br><span class="line">   <span class="comment">// 将代理的 datasource BeanDefinition 注册到容器中</span></span><br><span class="line">   beanDefinitionRegistry.registerBeanDefinition(beanName, proxiedBeanDefinition);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面这段代码就是 BeanFactoryPostProcessor 一种典型的应用场景，就是修改 BeanDefinition。</p><p>BeanFactoryPostProcessor 处理过程代码比较长，这里就不在具体分析处理的流程。需要关注的点是：1、BeanFactoryPostProcessor 的作用，它能做哪些事情；2、它是在容器启动的哪个阶段执行的。</p><h4 id="registerBeanPostProcessors-的处理过程"><a href="#registerBeanPostProcessors-的处理过程" class="headerlink" title="registerBeanPostProcessors 的处理过程"></a>registerBeanPostProcessors 的处理过程</h4><p>registerBeanPostProcessors 是用于注册 BeanPostProcessor 的。BeanPostProcessor 的作用时机相对于 BeanFactoryPostProcessor 来说要晚一些，BeanFactoryPostProcessor 处理的是 BeanDefinition，Bean 还没有实例化；BeanPostProcessor 处理的是 Bean，BeanPostProcessor 包括两个方法，分别用于在 Bean 实例化之前和实例化之后回调。</p><p>开篇有提到，在某些场景下会出现 BeanPostProcessor 不生效。对于 Spring 来说，BeanPostProcessor 本身也会被注册成一个 Bean，那么自然就可能会出现，BeanPostProcessor  处理的 bean 在 BeanPostProcessor 本身初始化之前就已经完成了的情况。</p><p>registerBeanPostProcessors 大体分为以下几个部分：</p><ul><li>注册 BeanPostProcessorChecker。（当一个 bean 在 BeanPostProcessor 实例化过程中被创建时，即当一个bean没有资格被所有 BeanPostProcessor 处理时，它记录一个信息消息）</li><li>实现优先排序、排序和其他操作的 BeanPostProcessor 之间进行排序</li><li>注册实现 PriorityOrdered 的 BeanPostProcessor</li><li>注册实现 Ordered 的 </li><li>注册所有常规的 BeanPostProcessor</li><li>重新注册所有的内部 BeanPostProcessor</li><li>将后处理器注册为用于检测内部 bean 的 applicationlistener，将其移动到处理器链的末端(用于获取代理等)。</li></ul><blockquote><p>这里还是以扩展时机为主线，Bean 的 IoC、DI 和 AOP 初始化过程不细究。</p></blockquote><h4 id="LifecycleProcessor-的处理过程"><a href="#LifecycleProcessor-的处理过程" class="headerlink" title="LifecycleProcessor 的处理过程"></a>LifecycleProcessor 的处理过程</h4><p>LifecycleProcessor 的处理过程是在 finishRefresh 方法中执行，下面先看下 finishRefresh 方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">finishRefresh</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 清除上下文级的资源缓存(比如扫描的ASM元数据)。</span></span><br><span class="line">    clearResourceCaches();</span><br><span class="line">    <span class="comment">// 为此上下文初始化 LifecycleProcessor。</span></span><br><span class="line">    initLifecycleProcessor();</span><br><span class="line">    <span class="comment">// 首先将 refresh 传播到 LifecycleProcessor。</span></span><br><span class="line">    getLifecycleProcessor().onRefresh();</span><br><span class="line">    <span class="comment">// 发布 ContextRefreshedEvent 事件</span></span><br><span class="line">    publishEvent(<span class="keyword">new</span> ContextRefreshedEvent(<span class="keyword">this</span>));</span><br><span class="line">    <span class="comment">// Participate in LiveBeansView MBean, if active.</span></span><br><span class="line">    LiveBeansView.registerApplicationContext(<span class="keyword">this</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>初始化 initLifecycleProcessor 是从容器中拿到所有的 LifecycleProcessor ，如果业务代码中没有实现 LifecycleProcessor 接口的 bean ，则使用默认的 DefaultLifecycleProcessor。</p><p>onRefresh 过程是 最后会调用到 Lifecycle 接口的 start 方法。LifeCycle 定义 Spring 容器对象的生命周期，任何 spring 管理对象都可以实现该接口。然后，当 ApplicationContext 本身接收启动和停止信号(例如在运行时停止/重启场景)时，spring 容器将在容器上下文中找出所有实现了 LifeCycle 及其子类接口的类，并一一调用它们实现的类。spring 是通过委托给生命周期处理器 LifecycleProcessor 来实现这一点的。Lifecycle 接口定义如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Lifecycle</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 启动当前组件</span></span><br><span class="line"><span class="comment">     * 1、如果组件已经在运行，不应该抛出异常</span></span><br><span class="line"><span class="comment">     * 2、对于容器，这将把开始信号传播到应用的所有组件</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">start</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 通常以同步方式停止该组件，当该方法执行完成后,该组件会被完全停止。当需要异步停止行为时，考虑实现 SmartLifecycle 和它的 stop</span></span><br><span class="line"><span class="comment">     * (Runnable) 方法变体。注意，此停止通知在销毁前不能保证到达:在常规关闭时，&#123;<span class="doctag">@code</span> Lifecycle&#125; bean将首先收到一个停止通知，然后才传播</span></span><br><span class="line"><span class="comment">     * 常规销毁回调;然而，在上下文的生命周期内的热刷新或中止的刷新尝试上，只调用销毁方法。对于容器，这将把停止信号传播到应用的所有组件</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">stop</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">      *  检查此组件是否正在运行。</span></span><br><span class="line"><span class="comment">      *  1. 只有该方法返回 false 时，start方法才会被执行。</span></span><br><span class="line"><span class="comment">      *  2. 只有该方法返回 true 时，stop(Runnable callback) 或 stop() 方法才会被执行。</span></span><br><span class="line"><span class="comment">      */</span></span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">isRunning</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>至此，容器刷新其实已经就完成了。可以看到 Spring 或者 SpringBoot 在整个启动过程中，有非常多的口子暴露出来，供用户使用，非常灵活。</p><h3 id="异常处理逻辑"><a href="#异常处理逻辑" class="headerlink" title="异常处理逻辑"></a>异常处理逻辑</h3><p>与正常流程类似，异常处理流程同样作为 SpringBoot 生命周期的一个环节，在异常发生时，会通过一些机制来处理收尾过程。异常处理部分 SpringBoot 1.x 版本和 SpringBoot 2.x 版本差异还是比较大的。这里只分析 SpringBoot 2.x 的处理过程。这里直接贴一段代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">handleRunFailure</span><span class="params">(ConfigurableApplicationContext context,</span></span></span><br><span class="line"><span class="function"><span class="params">Throwable exception,</span></span></span><br><span class="line"><span class="function"><span class="params">Collection&lt;SpringBootExceptionReporter&gt; exceptionReporters,</span></span></span><br><span class="line"><span class="function"><span class="params">SpringApplicationRunListeners listeners)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// exitCode</span></span><br><span class="line">            handleExitCode(context, exception);</span><br><span class="line">            <span class="keyword">if</span> (listeners != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="comment">// failed</span></span><br><span class="line">                listeners.failed(context, exception);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">// 这里也是扩展的口子</span></span><br><span class="line">            reportFailure(exceptionReporters, exception);</span><br><span class="line">            <span class="keyword">if</span> (context != <span class="keyword">null</span>) &#123;</span><br><span class="line">                context.close();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span> (Exception ex) &#123;</span><br><span class="line">        logger.warn(<span class="string">"Unable to close ApplicationContext"</span>, ex);</span><br><span class="line">    &#125;</span><br><span class="line">    ReflectionUtils.rethrowRuntimeException(exception);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上述代码片段主要做了以下几件事：</p><ul><li>handleExitCode： 这里会拿到异常的 exitCode，随后发布一个 ExitCodeEvent 事件，最后交由 SpringBootExceptionHandler 处理。</li><li>SpringApplicationRunListeners#failed： 循环遍历调用所有 SpringApplicationRunListener 的 failed 方法</li><li>reportFailure：用户可以自定义扩展 SpringBootExceptionReporter 接口来实现定制化的异常上报逻辑</li></ul><p>在 SpringApplicationRunListeners#failed 中，业务产生的异常将直接被抛出，而不会影响异常处理的主流程。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>至此，SpringBoot 启动的主流程已经全部分析完成了。从扩展和扩展时机的角度来看，整个过程中，SpringBoot 提供了非常多的扩展口子，让用户可以在容器启动的各个阶段（无论是启动，环境准备，容器刷新等等）做一些定制化的操作。用户可以利用这些扩展接口来修改 bean 、修改环境变量，给用户极大的空间。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;个人博客：&lt;a href=&quot;https://juejin.im/user/58fcc0768d6d810058965a06&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;glmapper&lt;/a&gt;&lt;br&gt;更多请关注 &lt;strong&gt;
      
    
    </summary>
    
      <category term="springboot" scheme="http://www.glmapper.com/categories/springboot/"/>
    
    
      <category term="springboot" scheme="http://www.glmapper.com/tags/springboot/"/>
    
  </entry>
  
  <entry>
    <title>SpringBoot 系列-FatJar 启动原理</title>
    <link href="http://www.glmapper.com/2019/10/13/springboot-series-fatjar/"/>
    <id>http://www.glmapper.com/2019/10/13/springboot-series-fatjar/</id>
    <published>2019-10-13T14:55:41.000Z</published>
    <updated>2019-12-15T15:49:05.510Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>微信公众号：<strong><a href="#jump_10">glmapper工作室</a></strong><br>掘金专栏：<a href="https://juejin.im/user/58fcc0768d6d810058965a06" target="_blank" rel="noopener">glmapper</a><br>微          博：<a href="https://weibo.com/u/2412872703" target="_blank" rel="noopener">疯狂的石头_henu</a><br>欢迎关注，一起学习、一起分享</p></blockquote><p>之前有写过一篇文章来介绍 JAR 文件和 MENIFEST.MF 文件，详见：<a href="https://juejin.im/post/5d16cc8cf265da1b8d163237" target="_blank" rel="noopener">聊一聊 JAR 文件和 MANIFEST.MF</a>，在这篇文章中介绍了 JAR 文件的内部结构。本篇将继续延续前面的节奏，来介绍下，在 SpringBoot 中，是如何将一个 FatJar 运行起来的。</p><h2 id="FatJar-解压之后的文件目录"><a href="#FatJar-解压之后的文件目录" class="headerlink" title="FatJar 解压之后的文件目录"></a>FatJar 解压之后的文件目录</h2><p>从 <a href="https://start.spring.io/" target="_blank" rel="noopener">Spring 官网</a> 或者通过 Idea 创建一个新的 SpringBoot 工程，方便起见，建议什么依赖都不加，默认带入的空的 SpringBoot 工程即可。</p><p>通过 maven 命令进行打包，打包成功之后得到的构建产物截图如下：</p><p><img src="https://glmapper-blog.oss-cn-hangzhou.aliyuncs.com/jarlaunch/jarlaunch-one.jpg" alt=""></p><p>在前面的文章中有提到，jar 包是zip 包的一种变种，因此也可以通过 unzip 来解压</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">unzip -q guides-for-jarlaunch-0.0.1-SNAPSHOT.jar -d mock</span><br></pre></td></tr></table></figure><p>解压的 mock 目录，使用 tree 指令，看到整个解压之后的 FatJar 的目录结构如下（部分省略）：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">├── BOOT-INF</span><br><span class="line">│   ├── classes</span><br><span class="line">│   │   ├── application.properties  # 用户-配置文件</span><br><span class="line">│   │   └── com</span><br><span class="line">│   │       └── glmapper</span><br><span class="line">│   │           └── bridge</span><br><span class="line">│   │               └── boot</span><br><span class="line">│   │                   └── BootStrap.class  # 用户-启动类</span><br><span class="line">│   └── lib</span><br><span class="line">│       ├── jakarta.annotation-api-1.3.5.jar</span><br><span class="line">│       ├── jul-to-slf4j-1.7.28.jar</span><br><span class="line">│       ├── log4j-xxx.jar # 表示 log4j 相关的依赖简写</span><br><span class="line">│       ├── logback-xxx.jar # 表示 logback 相关的依赖简写</span><br><span class="line">│       ├── slf4j-api-1.7.28.jar</span><br><span class="line">│       ├── snakeyaml-1.25.jar</span><br><span class="line">│       ├── spring-xxx.jar   # 表示 spring 相关的依赖简写</span><br><span class="line">├── META-INF</span><br><span class="line">│   ├── MANIFEST.MF</span><br><span class="line">│   └── maven</span><br><span class="line">│       └── com.glmapper.bridge.boot</span><br><span class="line">│           └── guides-for-jarlaunch</span><br><span class="line">│               ├── pom.properties</span><br><span class="line">│               └── pom.xml</span><br><span class="line">└── org</span><br><span class="line">    └── springframework</span><br><span class="line">        └── boot</span><br><span class="line">            └── loader</span><br><span class="line">                ├── ExecutableArchiveLauncher.class</span><br><span class="line">                ├── JarLauncher.class</span><br><span class="line">                ├── LaunchedURLClassLoader$UseFastConnectionExceptionsEnumeration.class</span><br><span class="line">                ├── LaunchedURLClassLoader.class</span><br><span class="line">                ├── Launcher.class</span><br><span class="line">                ├── MainMethodRunner.class</span><br><span class="line">                ├── PropertiesLauncher$1.class</span><br><span class="line">                ├── PropertiesLauncher$ArchiveEntryFilter.class</span><br><span class="line">                ├── PropertiesLauncher$PrefixMatchingArchiveFilter.class</span><br><span class="line">                ├── PropertiesLauncher.class</span><br><span class="line">                ├── WarLauncher.class</span><br><span class="line">                ├── archive</span><br><span class="line">                │   ├── # 省略</span><br><span class="line">                ├── data</span><br><span class="line">                │   ├── # 省略</span><br><span class="line">                ├── jar</span><br><span class="line">                │   ├── # 省略</span><br><span class="line">                └── util</span><br><span class="line">                    └── SystemPropertyUtils.class</span><br></pre></td></tr></table></figure><p>简单来看，FatJar 解压之后包括三个文件夹：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">├── BOOT-INF # 存放的是业务相关的，包括业务开发的类和配置文件，以及依赖的jar</span><br><span class="line">│   ├── classes</span><br><span class="line">│   └── lib</span><br><span class="line">├── META-INF # 包括 MANIFEST.MF 描述文件和 maven 的构建信息</span><br><span class="line">│   ├── MANIFEST.MF</span><br><span class="line">│   └── maven</span><br><span class="line">└── org # SpringBoot 相关的类</span><br><span class="line">    └── springframework</span><br></pre></td></tr></table></figure><p>我们平时在 debug SpringBoot 工程的启动流程时，一般都是从 SpringApplication#run 方法开始</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BootStrap</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 入口</span></span><br><span class="line">        SpringApplication.run(BootStrap.class,args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对于 java 程序来说，我们知道启动入口必须有 main 函数，这里看起来是符合条件的，但是有一点就是，通过 java 指令执行一个带有 main 函数的类时，是不需要有 -jar 参数的，比如新建一个 BootStrap.java 文件，内容为：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BootStrap</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Hello World"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>通过 javac 编译此文件：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">javac BootStrap.java</span><br></pre></td></tr></table></figure></p><p>然后就可以得到编译之后的 .class 文件 BootStrap.class ，此时可以通过 java 指令直接执行：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java BootStrap  <span class="comment"># 输出 Hello World</span></span><br></pre></td></tr></table></figure></p><p>那么对于 java -jar 呢？这个其实在 <a href="https://docs.oracle.com/javase/8/docs/technotes/tools/windows/java.html" target="_blank" rel="noopener">java 的官方文档</a> 中是有明确描述的：</p><ul><li>-jar filename</li></ul><blockquote><p>Executes a program encapsulated in a JAR file. The filename argument is the name of a JAR file with a manifest that contains a line in the form Main-Class:classname that defines the class with the public static void main(String[] args) method that serves as your application’s starting point.</p></blockquote><blockquote><p>When you use the -jar option, the specified JAR file is the source of all user classes, and other class path settings are ignored.</p></blockquote><p>简单说就是，java -jar 命令引导的具体启动类必须配置在 MANIFEST.MF 资源的 Main-Class 属性中。</p><p>那回过头再去看下之前打包好、解压之后的文件目录，找到 /META-INF/MANIFEST.MF 文件，看下元数据：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Manifest-Version: 1.0</span><br><span class="line">Implementation-Title: guides-for-jarlaunch</span><br><span class="line">Implementation-Version: 0.0.1-SNAPSHOT</span><br><span class="line">Start-Class: com.glmapper.bridge.boot.BootStrap</span><br><span class="line">Spring-Boot-Classes: BOOT-INF/classes/</span><br><span class="line">Spring-Boot-Lib: BOOT-INF/lib/</span><br><span class="line">Build-Jdk-Spec: 1.8</span><br><span class="line">Spring-Boot-Version: 2.2.0.RELEASE</span><br><span class="line">Created-By: Maven Archiver 3.4.0</span><br><span class="line"># Main-Class 在这里，指向的是 JarLauncher</span><br><span class="line">Main-Class: org.springframework.boot.loader.JarLauncher</span><br></pre></td></tr></table></figure><p>org.springframework.boot.loader.JarLauncher 类存放在 org/springframework/boot/loader 下面：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">└── boot</span><br><span class="line">    └── loader</span><br><span class="line">        ├── ExecutableArchiveLauncher.class</span><br><span class="line">        ├── JarLauncher.class  # JarLauncher</span><br><span class="line">        ├── # 省略</span><br></pre></td></tr></table></figure><p>这样就基本理清楚了， FatJar 中，org.springframework.boot.loader 下面的类负责引导启动 SpringBoot 工程，作为入口，BOOT-INF 中存放业务代码和依赖，META-INF 下存在元数据描述。</p><h2 id="JarLaunch-FatJar-的启动器"><a href="#JarLaunch-FatJar-的启动器" class="headerlink" title="JarLaunch - FatJar 的启动器"></a>JarLaunch - FatJar 的启动器</h2><p>在分析 JarLaunch 之前，这里插一下，org.springframework.boot.loader 下的这些类是如何被打包在 FatJar 里面的</p><h3 id="spring-boot-maven-plugin-打包-spring-boot-loader-过程"><a href="#spring-boot-maven-plugin-打包-spring-boot-loader-过程" class="headerlink" title="spring-boot-maven-plugin 打包 spring-boot-loader 过程"></a>spring-boot-maven-plugin 打包 spring-boot-loader 过程</h3><p>因为在新建的空的 SpringBoot 工程中并没有任何地方显示的引入或者编写相关的类。实际上，对于每个新建的 SpringBoot 工程，可以在其 pom.xml 文件中看到如下插件：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>这个是 SpringBoot 官方提供的用于打包 FatJar 的插件，org.springframework.boot.loader 下的类其实就是通过这个插件打进去的；</p><p>下面是此插件将 loader 相关类打入 FatJar 的一个执行流程：</p><blockquote><p>org.springframework.boot.maven#execute-&gt;<br>org.springframework.boot.maven#repackage -&gt; org.springframework.boot.loader.tools.Repackager#repackage-&gt;<br>org.springframework.boot.loader.tools.Repackager#writeLoaderClasses-&gt;<br>org.springframework.boot.loader.tools.JarWriter#writeLoaderClasses</p></blockquote><p>最终的执行方法就是下面这个方法，通过注释可以看出，该方法的作用就是将 spring-boot-loader 的classes 写入到 FatJar 中。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Write the required spring-boot-loader classes to the JAR.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> IOException if the classes cannot be written</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">writeLoaderClasses</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">writeLoaderClasses(NESTED_LOADER_JAR);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="JarLaunch-基本原理"><a href="#JarLaunch-基本原理" class="headerlink" title="JarLaunch 基本原理"></a>JarLaunch 基本原理</h3><p>基于前面的分析，这里考虑一个问题，能否直接通过 java BootStrap 来直接运行 SpringBoot 工程呢？这样在不需要 -jar 参数和 JarLaunch 引导的情况下，直接使用最原始的 java 指令理论上是不是也可以，因为有 main 方法。</p><h4 id="通过-java-BootStrap-方式启动"><a href="#通过-java-BootStrap-方式启动" class="headerlink" title="通过 java BootStrap 方式启动"></a>通过 <code>java BootStrap</code> 方式启动</h4><p>BootStrap 类的如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BootStrap</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(BootStrap.class,args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编译之后，执行 <code>java com.glmapper.bridge.boot.BootStrap</code>，然后抛出异常了：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Exception in thread &quot;main&quot; java.lang.NoClassDefFoundError: org/springframework/boot/SpringApplication</span><br><span class="line">        at com.glmapper.bridge.boot.BootStrap.main(BootStrap.java:13)</span><br><span class="line">Caused by: java.lang.ClassNotFoundException: org.springframework.boot.SpringApplication</span><br><span class="line">        at java.net.URLClassLoader.findClass(URLClassLoader.java:381)</span><br><span class="line">        at java.lang.ClassLoader.loadClass(ClassLoader.java:424)</span><br><span class="line">        at sun.misc.Launcher$AppClassLoader.loadClass(Launcher.java:338)</span><br><span class="line">        at java.lang.ClassLoader.loadClass(ClassLoader.java:357)</span><br><span class="line">        ... 1 more</span><br></pre></td></tr></table></figure><p>从异常堆栈来看，是因为找不到 SpringApplication 这个类；这里其实还是比较好理解的，BootStrap 类中引入了 SpringApplication，但是这个类是在 BOOT-INF/lib 下的，而 java 指令在启动时也没有指定 class path 。</p><blockquote><p>这里不再赘述，通过 -classpath + -Xbootclasspath 的方式尝试了下，貌似也不行，如果有通过 java 指令直接运行成功的，欢迎留言沟通。</p></blockquote><h4 id="通过-java-JarLaunch-启动"><a href="#通过-java-JarLaunch-启动" class="headerlink" title="通过 java JarLaunch 启动"></a>通过 <code>java JarLaunch 启动</code></h4><p>再通过 <code>java org.springframework.boot.loader.JarLauncher</code> 方式启动，可以看到是可以的。</p><p><img src="https://glmapper-blog.oss-cn-hangzhou.aliyuncs.com/jarlaunch/jarlaunch-two.jpg" alt=""></p><p>那这里基本可以猜到，JarLauncher 方式启动时，一定会通过某种方式将所需要依赖的 JAR 文件作为 BootStrap 的依赖引入进来。下面就来简单分析下 JarLauncher 启动时，作为启动引导类，它做了哪些事情。</p><h4 id="基本原理分析"><a href="#基本原理分析" class="headerlink" title="基本原理分析"></a>基本原理分析</h4><p>JarLaunch 类的定义如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JarLauncher</span> <span class="keyword">extends</span> <span class="title">ExecutableArchiveLauncher</span> </span>&#123;</span><br><span class="line">    <span class="comment">// BOOT-INF/classes/</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> String BOOT_INF_CLASSES = <span class="string">"BOOT-INF/classes/"</span>;</span><br><span class="line">    <span class="comment">// BOOT-INF/lib/</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> String BOOT_INF_LIB = <span class="string">"BOOT-INF/lib/"</span>;</span><br><span class="line">    <span class="comment">// 空构造函数</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">JarLauncher</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 带有指定 Archive 的构造函数</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="title">JarLauncher</span><span class="params">(Archive archive)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>(archive);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 是否是可嵌套的对象</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">boolean</span> <span class="title">isNestedArchive</span><span class="params">(Archive.Entry entry)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (entry.isDirectory()) &#123;</span><br><span class="line">    <span class="keyword">return</span> entry.getName().equals(BOOT_INF_CLASSES);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> entry.getName().startsWith(BOOT_INF_LIB);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// main 函数</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    <span class="keyword">new</span> JarLauncher().launch(args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>通过代码，我们很明显可以看到几个关键的信息点：</p><ul><li><code>BOOT_INF_CLASSES</code> 和 <code>BOOT_INF_LIB</code>  两个常量对应的是前面解压之后的两个文件目录</li><li>JarLaunch 中包含一个 main 函数，作为启动入口</li></ul><p>但是单从 main 来看，只是构造了一个 JarLaunch 对象，然后执行其 launch 方法，并没有我们期望看到的构建所需依赖的地方。实际上这部分是在 JarLaunch 的父类 ExecutableArchiveLauncher 的构造函数中来完成的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ExecutableArchiveLauncher</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// 构建 archive </span></span><br><span class="line">    <span class="keyword">this</span>.archive = createArchive();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span> (Exception ex) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(ex);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 构建 Archive</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">final</span> Archive <span class="title">createArchive</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    ProtectionDomain protectionDomain = getClass().getProtectionDomain();</span><br><span class="line">    CodeSource codeSource = protectionDomain.getCodeSource();</span><br><span class="line">    URI location = (codeSource != <span class="keyword">null</span>) ? codeSource.getLocation().toURI() : <span class="keyword">null</span>;</span><br><span class="line">    <span class="comment">// 这里就是拿到当前的 classpath </span></span><br><span class="line">    <span class="comment">// /Users/xxx/Documents/test/glmapper-springboot-study-guides/guides-for-jarlaunch/target/mock/</span></span><br><span class="line">    String path = (location != <span class="keyword">null</span>) ? location.getSchemeSpecificPart() : <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">if</span> (path == <span class="keyword">null</span>) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"Unable to determine code source archive"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    File root = <span class="keyword">new</span> File(path);</span><br><span class="line">    <span class="keyword">if</span> (!root.exists()) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"Unable to determine code source archive from "</span> + root);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 构建 Archive </span></span><br><span class="line">    <span class="keyword">return</span> (root.isDirectory() ? <span class="keyword">new</span> ExplodedArchive(root) : <span class="keyword">new</span> JarFileArchive(root));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>PS: 关于 Archive 的概念这里由于篇幅有限，不再展开说明。</p></blockquote><p>通过上面构建了一个 Archive ，然后继续执行 launch 方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">launch</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    <span class="comment">// 注册协议，利用了 java.net.URLStreamHandler 的扩展机制，SpringBoot</span></span><br><span class="line">    <span class="comment">// 扩展出了一种可以解析 jar in jar 的协议</span></span><br><span class="line">    JarFile.registerUrlProtocolHandler();</span><br><span class="line">    <span class="comment">// 通过 classpath 来构建一个 ClassLoader</span></span><br><span class="line">    ClassLoader classLoader = createClassLoader(getClassPathArchives());</span><br><span class="line">    <span class="comment">// launch </span></span><br><span class="line">    launch(args, getMainClass(), classLoader);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>下面值需要关注下 getMainClass() 方法即可，这里就是获取 MENIFEST.MF 中指定的 Start-Class ，实际上就是我们的工程里面的 BootStrap 类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> String <span class="title">getMainClass</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    <span class="comment">// 从 archive 中拿到 Manifest</span></span><br><span class="line">    Manifest manifest = <span class="keyword">this</span>.archive.getManifest();</span><br><span class="line">    String mainClass = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">if</span> (manifest != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="comment">// 获取 Start-Class</span></span><br><span class="line">    mainClass = manifest.getMainAttributes().getValue(<span class="string">"Start-Class"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (mainClass == <span class="keyword">null</span>) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(</span><br><span class="line">    <span class="string">"No 'Start-Class' manifest entry specified in "</span> + <span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 返回 mainClass</span></span><br><span class="line">    <span class="keyword">return</span> mainClass;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最终是通过构建了一个 MainMethodRunner 实例对象，然后通过反射的方式调用了 BootStrap 类中的 main 方法：</p><p><img src="https://glmapper-blog.oss-cn-hangzhou.aliyuncs.com/jarlaunch/jarlaunch-three.jpg" alt=""></p><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>本文主要从 JarLaunch 的角度分析了下 SpringBoot 的启动方式，对常规 java 方式和 java -jar 等启动方式进行了简单的演示；同时简单阐述了下 JarLaunch 启动的基本工作原理。对于其中 构建 Archive 、自定义协议 Handler 等未做深入探究，后面也会针对相关点再做单独分析。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;微信公众号：&lt;strong&gt;&lt;a href=&quot;#jump_10&quot;&gt;glmapper工作室&lt;/a&gt;&lt;/strong&gt;&lt;br&gt;掘金专栏：&lt;a href=&quot;https://juejin.im/user/58fcc0768d6d810058965a06&quot; 
      
    
    </summary>
    
      <category term="springboot" scheme="http://www.glmapper.com/categories/springboot/"/>
    
    
      <category term="springboot" scheme="http://www.glmapper.com/tags/springboot/"/>
    
  </entry>
  
  <entry>
    <title>SpringBoot 系列-内嵌 Tomcat 的实现原理解析</title>
    <link href="http://www.glmapper.com/2019/10/06/springboot-series-server-tomcat/"/>
    <id>http://www.glmapper.com/2019/10/06/springboot-series-server-tomcat/</id>
    <published>2019-10-06T07:57:26.000Z</published>
    <updated>2019-12-15T15:31:46.430Z</updated>
    
    <content type="html"><![CDATA[<p>对于一个 SpringBoot web 工程来说，一个主要的依赖标志就是有 spring-boot-starter-web 这个 starter ，spring-boot-starter-web 模块在 spring boot 中其实并没有代码存在，只是在 pom.xml 中携带了一些依赖，包括 web、webmvc、tomcat 等：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-json<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-tomcat<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.hibernate.validator<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hibernate-validator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>Spring Boot 默认的 web 服务容器是 tomcat ，如果想使用 Jetty 等来替换 Tomcat ，可以自行参考官方文档来解决。</p></blockquote><p>web、webmvc、tomcat 等提供了 web 应用的运行环境，那 spring-boot-starter 则是让这些运行环境工作的开关（因为 spring-boot-starter 中会间接引入 spring-boot-autoconfigure ）。</p><h2 id="WebServer-自动配置"><a href="#WebServer-自动配置" class="headerlink" title="WebServer 自动配置"></a>WebServer 自动配置</h2><p>在 spring-boot-autoconfigure 模块中，有处理关于 WebServer 的自动配置类 ServletWebServerFactoryAutoConfiguration 。</p><h3 id="ServletWebServerFactoryAutoConfiguration"><a href="#ServletWebServerFactoryAutoConfiguration" class="headerlink" title="ServletWebServerFactoryAutoConfiguration"></a>ServletWebServerFactoryAutoConfiguration</h3><p>代码片段如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@AutoConfigureOrder</span>(Ordered.HIGHEST_PRECEDENCE)</span><br><span class="line"><span class="meta">@ConditionalOnClass</span>(ServletRequest.class)</span><br><span class="line"><span class="meta">@ConditionalOnWebApplication</span>(type = Type.SERVLET)</span><br><span class="line"><span class="meta">@EnableConfigurationProperties</span>(ServerProperties.class)</span><br><span class="line"><span class="meta">@Import</span>(&#123; ServletWebServerFactoryAutoConfiguration.BeanPostProcessorsRegistrar.class,</span><br><span class="line">ServletWebServerFactoryConfiguration.EmbeddedTomcat.class,</span><br><span class="line">ServletWebServerFactoryConfiguration.EmbeddedJetty.class,</span><br><span class="line">ServletWebServerFactoryConfiguration.EmbeddedUndertow.class &#125;)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ServletWebServerFactoryAutoConfiguration</span></span></span><br></pre></td></tr></table></figure><p><br></p><p>两个 Condition 表示当前运行环境是基于 servlet 标准规范的 web 服务：</p><ul><li>ConditionalOnClass(ServletRequest.class) ： 表示当前必须有 servlet-api 依赖存在</li><li>ConditionalOnWebApplication(type = Type.SERVLET) ：仅基于servlet的Web应用程序</li></ul><p>@EnableConfigurationProperties(ServerProperties.class)：ServerProperties 配置中包括了常见的 server.port 等配置属性。</p><p>通过 <a href="#">@Import</a> 导入嵌入式容器相关的自动配置类，有 EmbeddedTomcat、EmbeddedJetty 和EmbeddedUndertow。</p><p><strong>综合来看，ServletWebServerFactoryAutoConfiguration 自动配置类中主要做了以下几件事情：</strong></p><ul><li>导入了内部类 BeanPostProcessorsRegistrar，它实现了 ImportBeanDefinitionRegistrar，可以实现ImportBeanDefinitionRegistrar 来注册额外的 BeanDefinition。</li><li>导入了 ServletWebServerFactoryConfiguration.EmbeddedTomcat 等嵌入容器先关配置（我们主要关注tomcat 相关的配置）。</li><li>注册了ServletWebServerFactoryCustomizer、TomcatServletWebServerFactoryCustomizer 两个WebServerFactoryCustomizer 类型的 bean。</li></ul><p>下面就针对这几个点，做下详细的分析。</p><h3 id="BeanPostProcessorsRegistrar"><a href="#BeanPostProcessorsRegistrar" class="headerlink" title="BeanPostProcessorsRegistrar"></a>BeanPostProcessorsRegistrar</h3><p>BeanPostProcessorsRegistrar 这个内部类的代码如下(省略了部分代码)：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">BeanPostProcessorsRegistrar</span></span></span><br><span class="line"><span class="class">    <span class="keyword">implements</span> <span class="title">ImportBeanDefinitionRegistrar</span>, <span class="title">BeanFactoryAware</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 省略代码</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">registerBeanDefinitions</span><span class="params">(AnnotationMetadata importingClassMetadata,</span></span></span><br><span class="line"><span class="function"><span class="params">                                        BeanDefinitionRegistry registry)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.beanFactory == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 注册 WebServerFactoryCustomizerBeanPostProcessor</span></span><br><span class="line">        registerSyntheticBeanIfMissing(registry,</span><br><span class="line">                                       <span class="string">"webServerFactoryCustomizerBeanPostProcessor"</span>,</span><br><span class="line">                                       WebServerFactoryCustomizerBeanPostProcessor.class);</span><br><span class="line">        <span class="comment">// 注册 errorPageRegistrarBeanPostProcessor</span></span><br><span class="line">        registerSyntheticBeanIfMissing(registry,</span><br><span class="line">                                       <span class="string">"errorPageRegistrarBeanPostProcessor"</span>,</span><br><span class="line">                                       ErrorPageRegistrarBeanPostProcessor.class);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 省略代码</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面这段代码中，注册了两个 bean，一个 WebServerFactoryCustomizerBeanPostProcessor，一个 errorPageRegistrarBeanPostProcessor；这两个都实现类 BeanPostProcessor 接口，属于 bean 的后置处理器，作用是在 bean 初始化前后加一些自己的逻辑处理。</p><ul><li>WebServerFactoryCustomizerBeanPostProcessor：作用是在 WebServerFactory 初始化时调用上面自动配置类注入的那些 WebServerFactoryCustomizer ，然后调用 WebServerFactoryCustomizer 中的 customize 方法来 处理 WebServerFactory。</li><li>errorPageRegistrarBeanPostProcessor：和上面的作用差不多，不过这个是处理 ErrorPageRegistrar 的。</li></ul><p>下面简单看下 WebServerFactoryCustomizerBeanPostProcessor 中的代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebServerFactoryCustomizerBeanPostProcessor</span></span></span><br><span class="line"><span class="class"><span class="keyword">implements</span> <span class="title">BeanPostProcessor</span>, <span class="title">BeanFactoryAware</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 省略部分代码</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 在 postProcessBeforeInitialization 方法中，如果当前 bean 是 WebServerFactory，则进行</span></span><br><span class="line">    <span class="comment">// 一些后置处理</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">postProcessBeforeInitialization</span><span class="params">(Object bean, String beanName)</span></span></span><br><span class="line"><span class="function"><span class="keyword">throws</span> BeansException </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (bean <span class="keyword">instanceof</span> WebServerFactory) &#123;</span><br><span class="line">postProcessBeforeInitialization((WebServerFactory) bean);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> bean;</span><br><span class="line">&#125;</span><br><span class="line">    <span class="comment">// 这段代码就是拿到所有的 Customizers ，然后遍历调用这些 Customizers 的 customize 方法</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">postProcessBeforeInitialization</span><span class="params">(WebServerFactory webServerFactory)</span> </span>&#123;</span><br><span class="line">LambdaSafe</span><br><span class="line">.callbacks(WebServerFactoryCustomizer.class, getCustomizers(),</span><br><span class="line">webServerFactory)</span><br><span class="line">.withLogger(WebServerFactoryCustomizerBeanPostProcessor.class)</span><br><span class="line">.invoke((customizer) -&gt; customizer.customize(webServerFactory));</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 省略部分代码</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="自动配置类中注册的两个-Customizer-Bean"><a href="#自动配置类中注册的两个-Customizer-Bean" class="headerlink" title="自动配置类中注册的两个 Customizer Bean"></a>自动配置类中注册的两个 Customizer Bean</h2><p>这两个 Customizer 实际上就是去处理一些配置值，然后绑定到 各自的工厂类的。</p><h3 id="WebServerFactoryCustomizer"><a href="#WebServerFactoryCustomizer" class="headerlink" title="WebServerFactoryCustomizer"></a>WebServerFactoryCustomizer</h3><p>将 serverProperties 配置值绑定给 ConfigurableServletWebServerFactory 对象实例上。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">customize</span><span class="params">(ConfigurableServletWebServerFactory factory)</span> </span>&#123;</span><br><span class="line">    PropertyMapper map = PropertyMapper.get().alwaysApplyingWhenNonNull();</span><br><span class="line">    <span class="comment">// 端口</span></span><br><span class="line">    map.from(<span class="keyword">this</span>.serverProperties::getPort).to(factory::setPort);</span><br><span class="line">    <span class="comment">// address</span></span><br><span class="line">    map.from(<span class="keyword">this</span>.serverProperties::getAddress).to(factory::setAddress);</span><br><span class="line">    <span class="comment">// contextPath</span></span><br><span class="line">    map.from(<span class="keyword">this</span>.serverProperties.getServlet()::getContextPath)</span><br><span class="line">        .to(factory::setContextPath);</span><br><span class="line">    <span class="comment">// displayName</span></span><br><span class="line">    map.from(<span class="keyword">this</span>.serverProperties.getServlet()::getApplicationDisplayName)</span><br><span class="line">        .to(factory::setDisplayName);</span><br><span class="line">    <span class="comment">// session 配置</span></span><br><span class="line">    map.from(<span class="keyword">this</span>.serverProperties.getServlet()::getSession).to(factory::setSession);</span><br><span class="line">    <span class="comment">// ssl</span></span><br><span class="line">    map.from(<span class="keyword">this</span>.serverProperties::getSsl).to(factory::setSsl);</span><br><span class="line">    <span class="comment">// jsp</span></span><br><span class="line">    map.from(<span class="keyword">this</span>.serverProperties.getServlet()::getJsp).to(factory::setJsp);</span><br><span class="line">    <span class="comment">// 压缩配置策略实现</span></span><br><span class="line">    map.from(<span class="keyword">this</span>.serverProperties::getCompression).to(factory::setCompression);</span><br><span class="line">    <span class="comment">// http2 </span></span><br><span class="line">    map.from(<span class="keyword">this</span>.serverProperties::getHttp2).to(factory::setHttp2);</span><br><span class="line">    <span class="comment">// serverHeader</span></span><br><span class="line">    map.from(<span class="keyword">this</span>.serverProperties::getServerHeader).to(factory::setServerHeader);</span><br><span class="line">    <span class="comment">// contextParameters</span></span><br><span class="line">    map.from(<span class="keyword">this</span>.serverProperties.getServlet()::getContextParameters)</span><br><span class="line">        .to(factory::setInitParameters);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="TomcatServletWebServerFactoryCustomizer"><a href="#TomcatServletWebServerFactoryCustomizer" class="headerlink" title="TomcatServletWebServerFactoryCustomizer"></a>TomcatServletWebServerFactoryCustomizer</h3><p>相比于上面那个，这个 customizer 主要处理 Tomcat 相关的配置值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">customize</span><span class="params">(TomcatServletWebServerFactory factory)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 拿到 tomcat 相关的配置</span></span><br><span class="line">    ServerProperties.Tomcat tomcatProperties = <span class="keyword">this</span>.serverProperties.getTomcat();</span><br><span class="line">    <span class="comment">// server.tomcat.additional-tld-skip-patterns</span></span><br><span class="line">    <span class="keyword">if</span> (!ObjectUtils.isEmpty(tomcatProperties.getAdditionalTldSkipPatterns())) &#123;</span><br><span class="line">        factory.getTldSkipPatterns()</span><br><span class="line">            .addAll(tomcatProperties.getAdditionalTldSkipPatterns());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// server.redirectContextRoot</span></span><br><span class="line">    <span class="keyword">if</span> (tomcatProperties.getRedirectContextRoot() != <span class="keyword">null</span>) &#123;</span><br><span class="line">        customizeRedirectContextRoot(factory,</span><br><span class="line">                                     tomcatProperties.getRedirectContextRoot());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// server.useRelativeRedirects</span></span><br><span class="line">    <span class="keyword">if</span> (tomcatProperties.getUseRelativeRedirects() != <span class="keyword">null</span>) &#123;</span><br><span class="line">        customizeUseRelativeRedirects(factory,</span><br><span class="line">                                      tomcatProperties.getUseRelativeRedirects());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="WebServerFactory"><a href="#WebServerFactory" class="headerlink" title="WebServerFactory"></a>WebServerFactory</h2><p>用于创建 WebServer 的工厂的标记接口。</p><h3 id="类体系结构"><a href="#类体系结构" class="headerlink" title="类体系结构"></a>类体系结构</h3><p><img src="https://glmapper-blog.oss-cn-hangzhou.aliyuncs.com/tomcat-boot-one.jpg" alt=""></p><p>上图为 WebServerFactory -&gt; TomcatServletWebServerFactory 的整个类结构关系。</p><h3 id="TomcatServletWebServerFactory"><a href="#TomcatServletWebServerFactory" class="headerlink" title="TomcatServletWebServerFactory"></a>TomcatServletWebServerFactory</h3><p>TomcatServletWebServerFactory 是用于获取 Tomcat 作为 WebServer 的工厂类实现，其中最核心的方法就是 getWebServer，获取一个 WebServer 对象实例。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> WebServer <span class="title">getWebServer</span><span class="params">(ServletContextInitializer... initializers)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 创建一个 Tomcat 实例</span></span><br><span class="line">    Tomcat tomcat = <span class="keyword">new</span> Tomcat();</span><br><span class="line">    <span class="comment">// 创建一个 Tomcat 实例工作空间目录</span></span><br><span class="line">    File baseDir = (<span class="keyword">this</span>.baseDirectory != <span class="keyword">null</span>) ? <span class="keyword">this</span>.baseDirectory</span><br><span class="line">        : createTempDir(<span class="string">"tomcat"</span>);</span><br><span class="line">    tomcat.setBaseDir(baseDir.getAbsolutePath());</span><br><span class="line">    <span class="comment">// 创建连接对象</span></span><br><span class="line">    Connector connector = <span class="keyword">new</span> Connector(<span class="keyword">this</span>.protocol);</span><br><span class="line">    tomcat.getService().addConnector(connector);</span><br><span class="line">    <span class="comment">// 1</span></span><br><span class="line">    customizeConnector(connector);</span><br><span class="line">    tomcat.setConnector(connector);</span><br><span class="line">    tomcat.getHost().setAutoDeploy(<span class="keyword">false</span>);</span><br><span class="line">    <span class="comment">// 配置 Engine，没有什么实质性的操作，可忽略</span></span><br><span class="line">    configureEngine(tomcat.getEngine());</span><br><span class="line">    <span class="comment">// 一些附加链接，默认是 0 个</span></span><br><span class="line">    <span class="keyword">for</span> (Connector additionalConnector : <span class="keyword">this</span>.additionalTomcatConnectors) &#123;</span><br><span class="line">        tomcat.getService().addConnector(additionalConnector);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 2</span></span><br><span class="line">    prepareContext(tomcat.getHost(), initializers);</span><br><span class="line">    <span class="comment">// 返回 webServer</span></span><br><span class="line">    <span class="keyword">return</span> getTomcatWebServer(tomcat);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>1、customizeConnector ： 给 Connector 设置 port、protocolHandler、uriEncoding 等。Connector 构造的逻辑主要是在NIO和APR选择中选择一个协议，然后反射创建实例并强转为 ProtocolHandler</li><li>2、prepareContext 这里并不是说准备当前 Tomcat 运行环境的上下文信息，而是准备一个 StandardContext ，也就是准备一个 web app。</li></ul><h3 id="准备-Web-App-Context-容器"><a href="#准备-Web-App-Context-容器" class="headerlink" title="准备 Web App Context 容器"></a>准备 Web App Context 容器</h3><p>对于 Tomcat 来说，每个 context 就是映射到 一个 web app 的，所以 prepareContext 做的事情就是将 web 应用映射到一个 TomcatEmbeddedContext ，然后加入到 Host 中。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">prepareContext</span><span class="params">(Host host, ServletContextInitializer[] initializers)</span> </span>&#123;</span><br><span class="line">    File documentRoot = getValidDocumentRoot();</span><br><span class="line">    <span class="comment">// 创建一个 TomcatEmbeddedContext 对象</span></span><br><span class="line">    TomcatEmbeddedContext context = <span class="keyword">new</span> TomcatEmbeddedContext();</span><br><span class="line">    <span class="keyword">if</span> (documentRoot != <span class="keyword">null</span>) &#123;</span><br><span class="line">        context.setResources(<span class="keyword">new</span> LoaderHidingResourceRoot(context));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 设置描述此容器的名称字符串。在属于特定父项的子容器集内，容器名称必须唯一。</span></span><br><span class="line">    context.setName(getContextPath());</span><br><span class="line">    <span class="comment">// 设置此Web应用程序的显示名称。</span></span><br><span class="line">    context.setDisplayName(getDisplayName());</span><br><span class="line">    <span class="comment">// 设置 webContextPath  默认是   /</span></span><br><span class="line">    context.setPath(getContextPath());</span><br><span class="line">    File docBase = (documentRoot != <span class="keyword">null</span>) ? documentRoot</span><br><span class="line">        : createTempDir(<span class="string">"tomcat-docbase"</span>);</span><br><span class="line">    context.setDocBase(docBase.getAbsolutePath());</span><br><span class="line">    <span class="comment">// 注册一个FixContextListener监听，这个监听用于设置context的配置状态以及是否加入登录验证的逻辑</span></span><br><span class="line">    context.addLifecycleListener(<span class="keyword">new</span> FixContextListener());</span><br><span class="line">    <span class="comment">// 设置 父 ClassLoader</span></span><br><span class="line">    context.setParentClassLoader(</span><br><span class="line">        (<span class="keyword">this</span>.resourceLoader != <span class="keyword">null</span>) ? <span class="keyword">this</span>.resourceLoader.getClassLoader()</span><br><span class="line">        : ClassUtils.getDefaultClassLoader());</span><br><span class="line">    <span class="comment">// 覆盖Tomcat的默认语言环境映射以与其他服务器对齐。</span></span><br><span class="line">    resetDefaultLocaleMapping(context);</span><br><span class="line">    <span class="comment">// 添加区域设置编码映射（请参阅Servlet规范2.4的5.4节）</span></span><br><span class="line">    addLocaleMappings(context);</span><br><span class="line">    <span class="comment">// 设置是否使用相对地址重定向</span></span><br><span class="line">    context.setUseRelativeRedirects(<span class="keyword">false</span>);</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        context.setCreateUploadTargets(<span class="keyword">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span> (NoSuchMethodError ex) &#123;</span><br><span class="line">        <span class="comment">// Tomcat is &lt; 8.5.39. Continue.</span></span><br><span class="line">    &#125;</span><br><span class="line">    configureTldSkipPatterns(context);</span><br><span class="line">    <span class="comment">// 设置 WebappLoader ，并且将 父 classLoader 作为构建参数</span></span><br><span class="line">    WebappLoader loader = <span class="keyword">new</span> WebappLoader(context.getParentClassLoader());</span><br><span class="line">    <span class="comment">// 设置 WebappLoader 的 loaderClass 值</span></span><br><span class="line">    loader.setLoaderClass(TomcatEmbeddedWebappClassLoader.class.getName());</span><br><span class="line">    <span class="comment">// 会将加载类向上委托</span></span><br><span class="line">    loader.setDelegate(<span class="keyword">true</span>);</span><br><span class="line">    context.setLoader(loader);</span><br><span class="line">    <span class="keyword">if</span> (isRegisterDefaultServlet()) &#123;</span><br><span class="line">        addDefaultServlet(context);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 是否注册 jspServlet</span></span><br><span class="line">    <span class="keyword">if</span> (shouldRegisterJspServlet()) &#123;</span><br><span class="line">        addJspServlet(context);</span><br><span class="line">        addJasperInitializer(context);</span><br><span class="line">    &#125;</span><br><span class="line">    context.addLifecycleListener(<span class="keyword">new</span> StaticResourceConfigurer(context));</span><br><span class="line">    ServletContextInitializer[] initializersToUse = mergeInitializers(initializers);</span><br><span class="line">    <span class="comment">// 在 host 中 加入一个 context 容器</span></span><br><span class="line">    <span class="comment">// add时给context注册了个内存泄漏跟踪的监听MemoryLeakTrackingListener,详见 addChild 方法</span></span><br><span class="line">    host.addChild(context);</span><br><span class="line">    <span class="comment">//对context做了些设置工作，包括TomcatStarter(实例化并set给context),</span></span><br><span class="line">    <span class="comment">// LifecycleListener,contextValue,errorpage,Mime,session超时持久化等以及一些自定义工作</span></span><br><span class="line">    configureContext(context, initializersToUse);</span><br><span class="line">    <span class="comment">// postProcessContext 方法是空的，留给子类重写用的</span></span><br><span class="line">    postProcessContext(context);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从上面可以看下，WebappLoader 可以通过 setLoaderClass 和 getLoaderClass 这两个方法可以更改loaderClass 的值。所以也就意味着，我们可以自己定义一个继承 webappClassLoader 的类，来更换系统自带的默认实现。</p><h3 id="初始化-TomcatWebServer"><a href="#初始化-TomcatWebServer" class="headerlink" title="初始化 TomcatWebServer"></a>初始化 TomcatWebServer</h3><p>在 getWebServer 方法的最后就是构建一个 TomcatWebServer。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// org.springframework.boot.web.embedded.tomcat.TomcatServletWebServerFactory</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> TomcatWebServer <span class="title">getTomcatWebServer</span><span class="params">(Tomcat tomcat)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// new 一个 TomcatWebServer</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> TomcatWebServer(tomcat, getPort() &gt;= <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// org.springframework.boot.web.embedded.tomcat.TomcatWebServer</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">TomcatWebServer</span><span class="params">(Tomcat tomcat, <span class="keyword">boolean</span> autoStart)</span> </span>&#123;</span><br><span class="line">    Assert.notNull(tomcat, <span class="string">"Tomcat Server must not be null"</span>);</span><br><span class="line">    <span class="keyword">this</span>.tomcat = tomcat;</span><br><span class="line">    <span class="keyword">this</span>.autoStart = autoStart;</span><br><span class="line">    <span class="comment">// 初始化</span></span><br><span class="line">    initialize();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里主要是 initialize 这个方法，这个方法中将会启动 tomcat 服务</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">initialize</span><span class="params">()</span> <span class="keyword">throws</span> WebServerException </span>&#123;</span><br><span class="line">    logger.info(<span class="string">"Tomcat initialized with port(s): "</span> + getPortsDescription(<span class="keyword">false</span>));</span><br><span class="line">    <span class="keyword">synchronized</span> (<span class="keyword">this</span>.monitor) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 对全局原子变量 containerCounter+1，由于初始值是-1，</span></span><br><span class="line">    <span class="comment">// 所以 addInstanceIdToEngineName 方法内后续的获取引擎并设置名字的逻辑不会执行</span></span><br><span class="line">            addInstanceIdToEngineName();</span><br><span class="line"><span class="comment">// 获取 Context </span></span><br><span class="line">            Context context = findContext();</span><br><span class="line">            <span class="comment">// 给 Context 对象实例生命周期监听器</span></span><br><span class="line">            context.addLifecycleListener((event) -&gt; &#123;</span><br><span class="line">                <span class="keyword">if</span> (context.equals(event.getSource())</span><br><span class="line">                    &amp;&amp; Lifecycle.START_EVENT.equals(event.getType())) &#123;</span><br><span class="line">                    <span class="comment">// 将上面new的connection以service（这里是StandardService[Tomcat]）做key保存到</span></span><br><span class="line">                    <span class="comment">// serviceConnectors中，并将 StandardService 中的connectors 与 service 解绑(connector.setService((Service)null);)，</span></span><br><span class="line">                    <span class="comment">// 解绑后下面利用LifecycleBase启动容器就不会启动到Connector了</span></span><br><span class="line">                    removeServiceConnectors();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">            <span class="comment">// 启动服务器以触发初始化监听器</span></span><br><span class="line">            <span class="keyword">this</span>.tomcat.start();</span><br><span class="line">            <span class="comment">// 这个方法检查初始化过程中的异常，如果有直接在主线程抛出，</span></span><br><span class="line">            <span class="comment">// 检查方法是TomcatStarter中的 startUpException，这个值是在 Context 启动过程中记录的</span></span><br><span class="line">            rethrowDeferredStartupExceptions();</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">// 绑定命名的上下文和classloader，</span></span><br><span class="line">                ContextBindings.bindClassLoader(context, context.getNamingToken(),</span><br><span class="line">                                                getClass().getClassLoader());</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">catch</span> (NamingException ex) &#123;</span><br><span class="line">                <span class="comment">// 设置失败不需要关心</span></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ：与Jetty不同，Tomcat所有的线程都是守护线程，所以创建一个非守护线程</span></span><br><span class="line">            <span class="comment">// （例：Thread[container-0,5,main]）来避免服务到这就shutdown了</span></span><br><span class="line">            startDaemonAwaitThread();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (Exception ex) &#123;</span><br><span class="line">            stopSilently();</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> WebServerException(<span class="string">"Unable to start embedded Tomcat"</span>, ex);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>查找 Context ，实际上就是查找一个Tomcat 中的一个 web 应用，SpringBoot 中默认启动一个 Tomcat ，并且一个 Tomcat 中只有一个 Web 应用（FATJAR 模式下，应用与 Tomcat 是 1：1 关系），所有在遍历 Host 下的 Container 时，如果 Container 类型是 Context ，就直接返回了。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> Context <span class="title">findContext</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (Container child : <span class="keyword">this</span>.tomcat.getHost().findChildren()) &#123;</span><br><span class="line">        <span class="keyword">if</span> (child <span class="keyword">instanceof</span> Context) &#123;</span><br><span class="line">            <span class="keyword">return</span> (Context) child;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"The host does not contain a Context"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Tomcat-启动过程"><a href="#Tomcat-启动过程" class="headerlink" title="Tomcat 启动过程"></a>Tomcat 启动过程</h2><p>在 TomcatWebServer 的 initialize 方法中会执行 tomcat 的启动。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Start the server to trigger initialization listeners</span></span><br><span class="line"><span class="keyword">this</span>.tomcat.start();</span><br></pre></td></tr></table></figure><p>org.apache.catalina.startup.Tomcat 的 start 方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">start</span><span class="params">()</span> <span class="keyword">throws</span> LifecycleException </span>&#123;</span><br><span class="line">    <span class="comment">// 初始化 server</span></span><br><span class="line">    getServer();</span><br><span class="line">    <span class="comment">// 启动 server</span></span><br><span class="line">    server.start();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="初始化-Server"><a href="#初始化-Server" class="headerlink" title="初始化 Server"></a>初始化 Server</h3><p>初始化 server 实际上就是构建一个 StandardServer 对象实例，关于 Tomcat 中的 Server 可以参考附件中的说明。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Server <span class="title">getServer</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">// 如果已经存在的话就直接返回</span></span><br><span class="line">    <span class="keyword">if</span> (server != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> server;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">// 设置系统属性 catalina.useNaming</span></span><br><span class="line">    System.setProperty(<span class="string">"catalina.useNaming"</span>, <span class="string">"false"</span>);</span><br><span class="line"><span class="comment">// 直接 new 一个 StandardServer</span></span><br><span class="line">    server = <span class="keyword">new</span> StandardServer();</span><br><span class="line"><span class="comment">// 初始化 baseDir （catalina.base、catalina.home、 ~/tomcat.&#123;port&#125;）</span></span><br><span class="line">    initBaseDir();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Set configuration source</span></span><br><span class="line">    ConfigFileLoader.setSource(<span class="keyword">new</span> CatalinaBaseConfigurationSource(<span class="keyword">new</span> File(basedir), <span class="keyword">null</span>));</span><br><span class="line"></span><br><span class="line">    server.setPort( -<span class="number">1</span> );</span><br><span class="line"></span><br><span class="line">    Service service = <span class="keyword">new</span> StandardService();</span><br><span class="line">    service.setName(<span class="string">"Tomcat"</span>);</span><br><span class="line">    server.addService(service);</span><br><span class="line">    <span class="keyword">return</span> server;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>上面对 SpringBoot 中内嵌 Tomcat 的过程做了分析，这个过程实际上并不复杂，就是在刷新 Spring 上下文的过程中将 Tomcat 容器启动起来，并且将当前应用绑定到一个 Context ，然后添加了 Host。下图是程序的执行堆栈和执行内嵌 Tomcat 初始化和启动的时机。</p><p><img src="https://glmapper-blog.oss-cn-hangzhou.aliyuncs.com/tomcat-boot-two.jpg" alt=""></p><p>下面总结下整个过程：</p><ul><li>通过自定配置注册相关的 Bean ，包括一些 Factory 和 后置处理器等</li><li>上下文刷新阶段，执行创建 WebServer，这里需要用到前一个阶段所注册的 Bean <ul><li>包括创建 ServletContext</li><li>实例化 webServer</li></ul></li><li>创建 Tomcat 实例、创建 Connector 连接器</li><li>绑定 应用到 ServletContext，并添加相关的生命周期范畴内的监听器，然后将 Context 添加到 host 中</li><li>实例化 webServer 并且启动 Tomcat 服务</li></ul><p>SpringBoot 的 Fatjar 方式没有提供共享 Tomcat 的实现逻辑，就是两个 FATJAT 启动可以只实例化一个 Tomcat 实例（包括 Connector 和 Host ），从前面的分析知道，每个 web 应用（一个 FATJAT 对应的应用）实例上就是映射到一个 Context ；而对于 war 方式，一个 Host 下面是可以挂载多个 Context 的。</p><h1 id="附：Tomcat-组件说明"><a href="#附：Tomcat-组件说明" class="headerlink" title="附：Tomcat 组件说明"></a>附：Tomcat 组件说明</h1><table><thead><tr><th>组件名称</th><th>说明</th></tr></thead><tbody><tr><td>Server</td><td>表示整个Servlet 容器，因此 Tomcat 运行环境中只有唯一一个 Server 实例</td></tr><tr><td>Service</td><td>Service 表示一个或者多个 Connector 的集合，这些 Connector 共享同一个 Container 来处理其请求。在同一个 Tomcat 实例内可以包含任意多个 Service 实例，他们彼此独立。</td></tr><tr><td>Connector</td><td>Tomcat 连接器，用于监听和转化 Socket 请求，同时将读取的 Socket 请求交由 Container 处理，支持不同协议以及不同的 I/O 方式。</td></tr><tr><td>Container</td><td>Container 表示能够执行客户端请求并返回响应的一类对象，在 Tomcat 中存在不同级别的容器：Engine、Host、Context、Wrapper</td></tr><tr><td>Engine</td><td>Engine 表示整个 Servlet 引擎。在 Tomcat 中，Engine 为最高层级的容器对象，虽然 Engine 不是直接处理请求的容器，确是获取目标容器的入口</td></tr><tr><td>Host</td><td>Host 作为一类容器，表示 Servlet 引擎（即Engine）中的虚拟机，与一个服务器的网络名有关，如域名等。客户端可以使用这个网络名连接服务器，这个名称必须要在 DNS 服务器上注册</td></tr><tr><td>Context</td><td>Context 作为一类容器，用于表示 ServletContext，在 Servlet 规范中，一个 ServletContext 即表示一个独立的 web 应用</td></tr><tr><td>Wrapper</td><td>Wrapper 作为一类容器，用于表示 Web 应用中定义的 Servlet</td></tr><tr><td>Executor</td><td>表示 Tomcat 组件间可以共享的线程池</td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;对于一个 SpringBoot web 工程来说，一个主要的依赖标志就是有 spring-boot-starter-web 这个 starter ，spring-boot-starter-web 模块在 spring boot 中其实并没有代码存在，只是在 pom.xml 
      
    
    </summary>
    
      <category term="springboot" scheme="http://www.glmapper.com/categories/springboot/"/>
    
    
      <category term="springboot" scheme="http://www.glmapper.com/tags/springboot/"/>
    
      <category term="Tomcat" scheme="http://www.glmapper.com/tags/Tomcat/"/>
    
  </entry>
  
  <entry>
    <title>ARK 插件基本规则及注意事项</title>
    <link href="http://www.glmapper.com/2019/08/28/sofa-ark-plugin-rule/"/>
    <id>http://www.glmapper.com/2019/08/28/sofa-ark-plugin-rule/</id>
    <published>2019-08-28T12:20:46.000Z</published>
    <updated>2019-08-28T12:23:53.612Z</updated>
    
    <content type="html"><![CDATA[<p>SOFAARK 是一个轻量级的类隔离框架，其有两个基本的能力：解决依赖包冲突和多应用(模块)合并部署。本篇将从解决依赖角度来说明下 SOFARK 插件的基本使用规则。</p><p>下图是官方文档中提供的用于描述依赖包冲突的一个场景：</p><p><img src="https://oscimg.oschina.net/oscnet/3d88c00093b96901187532a351c69ab8a91.jpg" alt=""></p><p>这里通过一个工程来模拟这种场景，然后通过将其中一个打包成插件的方式来解决。</p><h2 id="案例工程"><a href="#案例工程" class="headerlink" title="案例工程"></a>案例工程</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">├── ark-main-project</span><br><span class="line">├── dependency-one</span><br><span class="line">├── dependency-two</span><br><span class="line">├── dependency-two-plugin</span><br></pre></td></tr></table></figure><ul><li>ark-main-project 为一个 简单的springboot 工程</li><li>dependency-one 依赖1，可以对应到图中的 dependency A</li><li>dependency-two 依赖2，可以对应到图中的 dependency B</li><li>dependency-two-plugin ，dependency-two 的插件包</li></ul><p>另外还有一个 dependency-incompatible 工程，用于描述冲突的依赖。</p><h3 id="dependency-incompatible"><a href="#dependency-incompatible" class="headerlink" title="dependency-incompatible"></a>dependency-incompatible</h3><p>dependency-incompatible 有两个版本 1.0 和 2.0 ，1.0 和 2.0 是不兼容的。</p><p><strong>1.0 版本中提供了两个方法：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IncompatibleUtil</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">test1</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"test1"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">test2</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"test2"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>2.0 版本中提供了两个方法：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IncompatibleUtil</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">test1</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"test1"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">test3</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Incompatible.test();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Incompatible</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"test"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="dependency-one"><a href="#dependency-one" class="headerlink" title="dependency-one"></a>dependency-one</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestOneUtil</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">testOne</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> IncompatibleUtil.test1()+IncompatibleUtil.test2();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="dependency-two"><a href="#dependency-two" class="headerlink" title="dependency-two"></a>dependency-two</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// import org.springframework.util.StringUtils;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestTwoUtil</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">testTwo</span><span class="params">(String param)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (StringUtils.isEmpty(param))&#123;</span><br><span class="line">            <span class="keyword">return</span> IncompatibleUtil.test1() + IncompatibleUtil.test3();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> IncompatibleUtil.test1() + IncompatibleUtil.test3();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>这里引入 spring 的依赖查看是否会引入异常</p></blockquote><h3 id="ark-main-project"><a href="#ark-main-project" class="headerlink" title="ark-main-project"></a>ark-main-project</h3><p>ark-main-project 引入了 dependency-one 和 dependency-two 两个依赖，然后在启动类中分别调用 dependency-one 和 dependency-two  中提供的 api 。 <br></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainApplication</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(MainApplication.class,args);</span><br><span class="line">        test(<span class="string">"test"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">(String param)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!StringUtils.isEmpty(param))&#123;</span><br><span class="line">            TestOneUtil testOneUtil = <span class="keyword">new</span> TestOneUtil();</span><br><span class="line">            System.out.println(testOneUtil.testOne());</span><br><span class="line">            TestTwoUtil testTwoUtil = <span class="keyword">new</span> TestTwoUtil();</span><br><span class="line">            System.out.println(testTwoUtil.testTwo(param));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">"no params"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>由于 dependency-one 和 dependency-two 底层都都依赖了 dependency-incompatible ，且 dependency-incompatible 的两个版本不兼容，所以在启动时会报错。</p><p><img src="https://oscimg.oschina.net/oscnet/46005bbbf37f7063b90ff6a0bb4c46671bd.jpg" alt=""></p><h3 id="dependency-two-插件改造"><a href="#dependency-two-插件改造" class="headerlink" title="dependency-two 插件改造"></a>dependency-two 插件改造</h3><p>根据文档前面那张图的描述，这里需要将其中一个改造成插件的方式，使用独立的 classloader 来加载，从而达到版本兼容。这里改造 dependency-two 。</p><p>新建一个 dependency-two-plugin 模块，然后引入 dependency-two 依赖，并且将 冲突的 api 包导出</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>dependency-two<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.glmapper.bridge.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alipay.sofa<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>sofa-ark-plugin-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.6.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">executions</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">id</span>&gt;</span>default-cli<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">goal</span>&gt;</span>ark-plugin<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                        <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">exported</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;<span class="name">packages</span>&gt;</span></span><br><span class="line">                                <span class="comment">&lt;!--导出冲突的 api --&gt;</span></span><br><span class="line">                                    <span class="tag">&lt;<span class="name">package</span>&gt;</span>com.glmapper.bridge.boot.two<span class="tag">&lt;/<span class="name">package</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;/<span class="name">packages</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;/<span class="name">exported</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">executions</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure><p> <br><strong>关于插件的导出，对于 dependency-two 中，ark-main-projet 中使用到的是 TestTwoUtil 这里类，因此仅需要将这个类导出即可。</strong></p><p>mvn clean install 安装到本地仓库，然后在 ark-main-project 中引用。</p><p>将 ark-main-project 中的 dependency-two 依赖修改为 dependency-two-plugin 。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.glmapper.bridge.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>dependency-two-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>因为插件是运行在容器上的，所以也需要将 ark-main-project 改造成 ark 工程，具体可以参考官方文档。改造完成之后，打包 ark-main-project 工程，然后通过 java -jar 启动，运行结果如下，实现了类隔离。</p><p><img src="https://oscimg.oschina.net/oscnet/eb97a874c46677d31478c55b0dfde41e636.jpg" alt=""></p><h2 id="NoClassDefFoundError-异常的发生"><a href="#NoClassDefFoundError-异常的发生" class="headerlink" title="NoClassDefFoundError 异常的发生"></a>NoClassDefFoundError 异常的发生</h2><p>关于上面 SpringUtils 工具类在插件中和 BIZ 中均加载并且不会报错的解释是，SpringUtils 虽然在插件中和 BIZ 中都被加载了，但是没有报错，是因为没有触发 java 的 type check 机制。</p><p>那么还有一种情况会导致出现 java.lang.NoClassDefFoundError 异常，这种情况是在插件中将 spring 相关的包指定不打入插件了，配置如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">exported</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">packages</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">package</span>&gt;</span>com.glmapper.bridge.boot.two.*<span class="tag">&lt;/<span class="name">package</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">packages</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">exported</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--不将 spring 的包打进去--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">excludeGroupIds</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">excludeGroupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">excludeGroupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">excludeGroupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">excludeGroupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">excludeGroupId</span>&gt;</span>org.apache.tomcat.embed<span class="tag">&lt;/<span class="name">excludeGroupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">excludeGroupIds</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><p>那么这样打出的包实际上包的大小会非常小，但是问题在于运行时，插件从当前 /iib 目录下找不到 spring 相关的依赖，就会报  java.lang.NoClassDefFoundError 。</p><p><img src="https://oscimg.oschina.net/oscnet/0c05a61d784d74023cde395c1e098bc5282.jpg" alt=""></p><h2 id="LinkageError-异常的发生"><a href="#LinkageError-异常的发生" class="headerlink" title="LinkageError 异常的发生"></a><strong>LinkageError 异常的发生</strong></h2><p>ark-main-project 中</p><p><img src="https://oscimg.oschina.net/oscnet/f95211cb4c5e0051cc5ef4b314ae0e240e3.jpg" alt=""></p><p>dependency-two 中</p><p><img src="https://oscimg.oschina.net/oscnet/ae46e12edbee7e3a23a1504b7aa4cdbe1aa.jpg" alt=""></p><p>重新打包，然后执行</p><p><img src="https://oscimg.oschina.net/oscnet/2ef11727076f1b3e502ef59507bc820e040.jpg" alt=""></p><p>没有报错。此时插件中的类和 biz 中的类完全都是独立的。但是会存在一种情况，比如插件中有一个日志工具类，然后在 Biz 使用了这个工具类，则会报错。</p><p>在 dependency-two 中增加一个 LoggerUtil 的类，</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoggerUtil</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger LOGGER = LoggerFactory.getLogger(LoggerUtil.class);</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">info</span><span class="params">(String message)</span></span>&#123;</span><br><span class="line">        LOGGER.info(message);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Logger <span class="title">getLogger</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> LOGGER;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后在 ark-main-project 中这样使用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainApplication</span> </span>&#123;</span><br><span class="line"><span class="comment">// 使用 LoggerUtil 获取日志对象实例</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger LOGGER = LoggerUtil.getLogger();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(MainApplication.class,args);</span><br><span class="line">        test(<span class="string">"test"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">(String param)</span> </span>&#123;</span><br><span class="line"><span class="comment">// 记录日志</span></span><br><span class="line">        LOGGER.info(<span class="string">"test in biz."</span>);</span><br><span class="line">        <span class="keyword">if</span> (!StringUtils.isEmpty(param))&#123;</span><br><span class="line">            TestOneUtil testOneUtil = <span class="keyword">new</span> TestOneUtil();</span><br><span class="line">            System.out.println(testOneUtil.testOne());</span><br><span class="line">            TestTwoUtil testTwoUtil = <span class="keyword">new</span> TestTwoUtil();</span><br><span class="line">            System.out.println(testTwoUtil.testTwo(param));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">"no params"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这种情况下就会导致报错</p><p><strong>Caused by: java.lang.LinkageError: loader constraint violation: loader (instance of com/alipay/sofa/ark/container/service/classloader/BizClassLoader) previously initiated loading for a different type with name “org/slf4j/Logger”</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger LOGGER = LoggerUtil.getLogger();</span><br></pre></td></tr></table></figure><p>单从这段代码来看，报错的原因在于，Logger LOGGER 的对象加载是被 BizClassLoader 加载的，但是 LoggerUtil.getLogger() 返回的对象是由 PluginClassLoader 加载的。</p><p>所以在构建插件时，需要尽可能的去规避可能出现引起类型检查的地方：</p><ul><li>方法参数检验</li><li>变量赋值</li><li>方法返回值</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;SOFAARK 是一个轻量级的类隔离框架，其有两个基本的能力：解决依赖包冲突和多应用(模块)合并部署。本篇将从解决依赖角度来说明下 SOFARK 插件的基本使用规则。&lt;/p&gt;
&lt;p&gt;下图是官方文档中提供的用于描述依赖包冲突的一个场景：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;ht
      
    
    </summary>
    
    
      <category term="sofa-ark" scheme="http://www.glmapper.com/tags/sofa-ark/"/>
    
  </entry>
  
  <entry>
    <title>响应式编程 Reactor 小记</title>
    <link href="http://www.glmapper.com/2019/08/24/base-java-reacotr/"/>
    <id>http://www.glmapper.com/2019/08/24/base-java-reacotr/</id>
    <published>2019-08-24T00:59:26.000Z</published>
    <updated>2019-12-15T16:06:01.826Z</updated>
    
    <content type="html"><![CDATA[<h2 id="从响应式编程说起"><a href="#从响应式编程说起" class="headerlink" title="从响应式编程说起"></a>从响应式编程说起</h2><p>响应式编程是一种关注于数据流（data streams）和变化传递（propagation of change）的异步编程方式。 这意味着它可以用既有的编程语言表达静态（如数组）或动态（如事件源）的数据流。</p><p>在响应式编程方面，微软跨出了第一步，它在 .NET 生态中创建了响应式扩展库（Reactive Extensions library, Rx）。接着 RxJava 在 JVM 上实现了响应式编程。后来，在 JVM 平台出现了一套标准的响应式 编程规范，它定义了一系列标准接口和交互规范。并整合到 Java 9 中（Flow 类）。</p><p>响应式编程通常作为面向对象编程中的“观察者模式”（Observer design pattern）的一种扩展。 响应式流（reactive streams）与“迭代子模式”（Iterator design pattern）也有相通之处， 因为其中也有 Iterable-Iterator 这样的对应关系。主要的区别在于，Iterator 是基于 “拉取”（pull）方式的，而响应式流是基于“推送”（push）方式的。</p><ul><li>iterator 是一种“命令式”（imperative）编程范式，即使访问元素的方法是 Iterable 的唯一职责。关键在于，什么时候执行 next() 获取元素取决于开发者。</li><li>响应式流中，相对应的角色是 Publisher-Subscriber，但是当有新的值到来的时候 ，却反过来由发布者（Publisher） 通知订阅者（Subscriber），这种“推送”模式是响应式的关键</li></ul><p>此外，对推送来的数据的操作是通过一种声明式（declaratively）而不是命令式（imperatively）的方式表达的：开发者通过描述“控制流程”来定义对数据流的处理逻辑。</p><p>除了数据推送，对错误处理（error handling）和完成（completion）信号的定义也很完善。一个 Publisher 可以推送新的值到它的 Subscriber（调用 onNext 方法）， 同样也可以推送错误（调用 onError 方法）和完成（调用 onComplete 方法）信号。 错误和完成信号都可以终止响应式流。可以用下边的表达式描述：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">onNext x <span class="number">0</span>..N [onError | onComplete]</span><br></pre></td></tr></table></figure><p>这种方式非常灵活，无论是有/没有值，还是 n 个值（包括有无限个值的流，比如时钟的持续读秒），都可处理。</p><blockquote><p>以上来自 <a href="https://projectreactor.io/docs/core/release/reference/" target="_blank" rel="noopener">https://projectreactor.io/docs/core/release/reference/</a> 翻译</p></blockquote><h2 id="Reactive-Streams"><a href="#Reactive-Streams" class="headerlink" title="Reactive Streams"></a>Reactive Streams</h2><p>Reactive Streams 是上面提到的一套标准的响应式编程规范。它由四个核心概念构成：</p><ul><li><p>消息发布者：只有一个 subscribe 接口，是订阅者调用的，用来订阅发布者的消息。发布者在订阅者调用 request 之后把消息 push 给订阅者。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Publisher</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">subscribe</span><span class="params">(Subscriber&lt;? <span class="keyword">super</span> T&gt; s)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>订阅者：订阅者包括四个接口，这些接口都由 Publisher 触发调用的。onSubscribe 告诉订阅者订阅成功，并返回了一个 Subscription ；通过 Subscription 订阅者可以告诉发布者发送指定数量的消息（request 完成） ；onNext 是发布者有消息时，调用订阅者这个接口来达到发布消息的目的；onError 通知订阅者，发布者出现了错误；onComplete 通知订阅者消息发送完毕。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Subscriber</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onSubscribe</span><span class="params">(Subscription s)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onNext</span><span class="params">(T t)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onError</span><span class="params">(Throwable t)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onComplete</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>订阅：包括两个接口，请求 n 个消息和取消此次订阅。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Subscription</span> </span>&#123;</span><br><span class="line">    <span class="comment">// request(n)用来发起请求数据,其中n表示请求数据的数量,它必须大于0,</span></span><br><span class="line">    <span class="comment">// 否则会抛出IllegalArgumentException,并触发onError,request的调用会</span></span><br><span class="line">    <span class="comment">// 累加,如果没有终止,最后会触发相应次数的onNext方法.</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">request</span><span class="params">(<span class="keyword">long</span> n)</span></span>;</span><br><span class="line">    <span class="comment">// cancel相当于取消订阅,调用之后,后续不会再收到订阅,onError 和 </span></span><br><span class="line">    <span class="comment">// onComplete也不会被触发</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">cancel</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>处理器：Processor 同时继承了 Subscriber 和 Publisher；其代表一个处理阶段。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Processor</span>&lt;<span class="title">T</span>, <span class="title">R</span>&gt; <span class="keyword">extends</span> <span class="title">Subscriber</span>&lt;<span class="title">T</span>&gt;, <span class="title">Publisher</span>&lt;<span class="title">R</span>&gt; </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>Reactive Streams 通过上面的四个核心概念和相关的函数，对响应式流进行了一个框架性的约定，它没有具体实现。简单来说，它只提供通用的、合适的解决方案，大家都按照这个规约来实现就好了。</p><p>Java 的 Reactive Programming 类库主要有三个，分别是 Akka-Streams ，RxJava 和 Project Reactor。Spring 5 开始支持 Reactive Programming，其底层使用的是 Project Reactor。本篇主要是对 Project Reactor 中的一些点进行学习总结。</p><h2 id="Project-Reactor"><a href="#Project-Reactor" class="headerlink" title="Project Reactor"></a>Project Reactor</h2><p>Project Reactor 是一个基于 Java 8 的实现了响应式流规范 （Reactive Streams specification）的响应式库。</p><p>Reactor 引入了实现 Publisher 的响应式类 Flux 和 Mono，以及丰富的操作方式。 一个 Flux 对象代表一个包含 0..N 个元素的响应式序列，而一个 Mono 对象代表一个包含零或者一个（0..1）元素的结果。</p><h3 id="Flux-和-Mono"><a href="#Flux-和-Mono" class="headerlink" title="Flux 和 Mono"></a>Flux 和 Mono</h3><p>Flux 是生产者，即我们上面提到的 Publisher，它代表的是一个包含 0-N 个元素的异步序列，Mono可以看做 Flux 的有一个特例，代表 0-1 个元素，如果不需要生产任何元素，只是需要一个完成任务的信号，可以使用 Mono。</p><h4 id="Flux-包含-0-N-个元素的异步序列"><a href="#Flux-包含-0-N-个元素的异步序列" class="headerlink" title="Flux-包含 0-N 个元素的异步序列"></a>Flux-包含 0-N 个元素的异步序列</h4><p><img src="https://glmapper-blog.oss-cn-hangzhou.aliyuncs.com/reactor/reactor-flux.jpg" alt="Flux"></p><p>先来看这张图，这里是直接从官方文档上贴过来的。就这张图做下说明，先来关注几个点：</p><ul><li>从左到右的时间序列轴</li><li>1-6 为 Flux enitted（发射）的元素</li><li>上面 6 后面的竖线标识已经成功完成了</li><li>下面的 1-3 表示转换的结果</li><li>❌  表示出现了error，对应的是执行了onError</li><li>operator : 操作符，声明式的可组装的响应式方法，其组装成的链称为“操作链”</li></ul><p>那整体来看就是 Flux 产生元数据，通过一系列 operator 操作得到转换结果，正常成功就是 onCompleted，出现错误就是 onError。看下面的一个小例子：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">Flux.just(<span class="string">"glmapper"</span>,<span class="string">"leishu"</span>).subscribe(<span class="keyword">new</span> Subscriber&lt;String&gt;() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onSubscribe</span><span class="params">(Subscription subscription)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// subscription 表示订阅关系</span></span><br><span class="line">        System.out.println(<span class="string">"onSubscribe,"</span>+ subscription.getClass());</span><br><span class="line">        <span class="comment">// subscription 通过 request 来触发 onNext</span></span><br><span class="line">        subscription.request(<span class="number">2</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onNext</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"currrent value is = "</span> + s);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onError</span><span class="params">(Throwable throwable)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"it's error."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onComplete</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"it's completed."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><p>执行结果:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">onSubscribe,class reactor.core.publisher.StrictSubscriber</span><br><span class="line">currrent value is = glmapper</span><br><span class="line">currrent value is = leishu</span><br><span class="line">it&apos;s completed.</span><br></pre></td></tr></table></figure><p>如果在 onSubscribe 方法中我们不执行 request，则不会有后续任何操作。关于 request 下面看。</p><blockquote><p>Flux<t> 是一个能够发出 0 到 N 个元素的标准的 Publisher<t>，它会被一个 “error”  或 “completion” 信号终止。因此，一个 Flux 的结果可能是一个 value、completion 或 error。 就像在响应式流规范中规定的那样，这三种类型的信号被翻译为面向下游的 <code>onNext</code>，<code>onComplete</code>和<code>onError</code>方法。</t></t></p></blockquote><h4 id="Mono-异步的-0-1-结果"><a href="#Mono-异步的-0-1-结果" class="headerlink" title="Mono-异步的 0-1 结果"></a>Mono-异步的 0-1 结果</h4><p><img src="https://glmapper-blog.oss-cn-hangzhou.aliyuncs.com/reactor/reactor-mono.jpg" alt="Mono"></p><p>这张图也来自官方文档，和上面 Flux 的区别就是，Mono 最多只能 emitted 一个元素。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Mono.just(<span class="string">"glmapper"</span>).subscribe(System.out::println);</span><br></pre></td></tr></table></figure></p><h4 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h4><p>通过上面两段小的代码来看，最直观的感受是，Flux 相当于一个 List，Mono 相当于 Optional。其实在编程中所有的结果我们都可以用 List 来 表示，但是当只返回一个或者没有结果时，用 Optional 可能会更精确些。</p><blockquote><p>Optional 相关概念可自行搜索 jdk Optional</p></blockquote><p>另外，Mono 和 Flux 都提供了一些工厂方法，用于创建相关的实例，这里简单罗列一下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 可以指定序列中包含的全部元素。创建出来的 Flux </span></span><br><span class="line"><span class="comment">// 序列在发布这些元素之后会自动结束。</span></span><br><span class="line">Flux.just(<span class="string">"glmapper"</span>, <span class="string">"leishu"</span>);</span><br><span class="line"><span class="comment">// 从一个Iterable 对象中创建 Flux 对象,当然还可以是数组、Stream对象等</span></span><br><span class="line">Flux.fromIterable(Arrays.asList(<span class="string">"glmapper"</span>,<span class="string">"leishu"</span>));</span><br><span class="line"><span class="comment">// 创建一个只包含错误消息的序列。</span></span><br><span class="line">Flux.error(<span class="keyword">new</span> IllegalStateException());</span><br><span class="line"><span class="comment">// 创建一个包含了从 0 开始递增的 Long 对象的序列。其中包含的元素按照指定的间</span></span><br><span class="line"><span class="comment">// 隔来发布。除了间隔时间之外，还可以指定起始元素发布之前的延迟时间。</span></span><br><span class="line">Flux.interval(Duration.ofMillis(<span class="number">100</span>)).take(<span class="number">10</span>);</span><br><span class="line"><span class="comment">// 创建一个不包含任何消息通知的序列。</span></span><br><span class="line">Flux.never();</span><br><span class="line"><span class="comment">// 创建一个不包含任何元素，只发布结束消息的序列。</span></span><br><span class="line">Flux.empty(); </span><br><span class="line"><span class="comment">// 创建包含从 start 起始的 count 个数量的 Integer 对象的序列</span></span><br><span class="line">Flux.range(<span class="keyword">int</span> start, <span class="keyword">int</span> count);</span><br><span class="line"><span class="comment">// Mono 同上</span></span><br><span class="line">Mono.empty();</span><br><span class="line">Mono.never();</span><br><span class="line">Mono.just(<span class="string">"glmapper"</span>);</span><br><span class="line">Mono.error(<span class="keyword">new</span> IllegalStateException());</span><br></pre></td></tr></table></figure></p><p>上面的这些静态方法适合于简单的序列生成，当序列的生成需要复杂的逻辑时，则应该使用 generate() 或 create() 方法。</p><h3 id="一些概念"><a href="#一些概念" class="headerlink" title="一些概念"></a>一些概念</h3><ul><li>Operator：Operator 是一系列函数式的便捷操作，可以链式调用。所有函数调用基本都 是 Reactor 的 Operator ，比如 just，map，flatMap，filter 等。</li><li>Processor：上面从 Processor 的接口定义可以看出，它既是一个 Subscriber，又是一个 Publisher；Processor 夹在第一个 Publisher 和最后一个 Subscriber 中间，对数据进行处理。有点类似 stream 里的 map，filter 等方法。具体在数据流转中， Processor 以 Subscriber 的身份订阅 Publisher 接受数据，又以 Publisher 的方式接受其它 Subscriber 的订阅，它从自己订阅的 Publisher 收到数据后，做一些处理，然后转发给订阅它的 Subscriber。</li><li>back pressure：背压。对 MQ 有了解的应该清楚，消息积压一般是在消费端，也就是说生产端只负责生产，并不会关心消费端的消费能力，这样就到导致 pressure 积压在消费端，这个是正向的。从上面对 Reactor 中的一些了解，Subscriber 是主动向 Publisher 请求的，这样当消费端消费的速度没有生产者快时，这些消息还是积压在生产端；这种好处就是生产者可以根据实际情况适当的调整生产消息的速度。</li><li>Hot VS Cold ：参考 <a href="https://htmlpreview.github.io/?https://github.com/get-set/reactor-core/blob/master-zh/src/docs/index.html#reactor.hotCold" target="_blank" rel="noopener">Hot VS Cold</a></li></ul><h3 id="核心调用过程"><a href="#核心调用过程" class="headerlink" title="核心调用过程"></a>核心调用过程</h3><p>Reactor 的核心调用过程大致可以分为图中的几个阶段<br><img src="https://glmapper-blog.oss-cn-hangzhou.aliyuncs.com/reactor/reactor-processor.jpg" alt=""></p><ul><li>声明：无论是使用 just 或者其他什么方式创建反应式流，这个过程都可以称之为声明，因为此时这些代码不会被实际的执行。</li><li>subscribe：当调用 subscribe 时，整个执行过程便进入 subscribe 阶段，经过一系列的调用之后，subscribe 动作会代理给具体的 Flux 来实现。</li><li>onSubscribe：onSubscribe 阶段指的是 Subscriber#onSubscribe 方法被依次调用的阶段。这个阶段会让各 Subscriber 知道 subscribe 方法已被触发，真正的处理流程马上就要开始。</li><li>request：onSubscribe 阶段是表示订阅动作的方式，让各 Subscriber 知悉，准备开始处理数据。当最终的 Subscriber 做好处理数据的准备之后，它便会调用 Subscription 的 request 方法请求数据。</li><li>onNext：通过调用 Subscriber 的 onNext 方法，进行真正的响应式的数据处理。</li><li>onComplete：成功的终端状态，没有进一步的事件将被发送。</li><li>onError：错误的终端状态（和 onComplete 一样，当发生时，后面的将不会在继续执行）。</li></ul><h3 id="消息处理"><a href="#消息处理" class="headerlink" title="消息处理"></a>消息处理</h3><p>当需要处理 Flux 或 Mono 中的消息时，可以通过 subscribe 方法来添加相应的订阅逻辑。在调用 subscribe 方法时可以指定需要处理的消息类型。可以只处理其中包含的正常消息，也可以同时处理错误消息和完成消息。</p><h4 id="通过-subscribe-方法处理正常和错误消息"><a href="#通过-subscribe-方法处理正常和错误消息" class="headerlink" title="通过 subscribe() 方法处理正常和错误消息"></a>通过 subscribe() 方法处理正常和错误消息</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Flux.just(<span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line">   .concatWith(Mono.error(<span class="keyword">new</span> IllegalStateException()))</span><br><span class="line">   .subscribe(System.out::println, System.err::println);</span><br></pre></td></tr></table></figure><p>结果：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">java.lang.IllegalStateException</span><br></pre></td></tr></table></figure></p><p>正常的消息处理相对简单。当出现错误时，有多种不同的处理策略:</p><ul><li>通过 onErrorReturn() 方法返回一个默认值<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Flux.just(<span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line">    .concatWith(Mono.error(<span class="keyword">new</span> IllegalStateException()))</span><br><span class="line">    .onErrorReturn(<span class="number">0</span>)</span><br><span class="line">    .subscribe(System.out::println);</span><br></pre></td></tr></table></figure></li></ul><p>结果：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">0</span><br></pre></td></tr></table></figure></p><ul><li>通过 onErrorResume()方法来根据不同的异常类型来选择要使用的产生元素的流<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Flux.just(<span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line">       .concatWith(Mono.error(<span class="keyword">new</span> IllegalArgumentException()))</span><br><span class="line">       .onErrorResume(e -&gt; &#123;</span><br><span class="line">           <span class="keyword">if</span> (e <span class="keyword">instanceof</span> IllegalStateException) &#123;</span><br><span class="line">               <span class="keyword">return</span> Mono.just(<span class="number">0</span>);</span><br><span class="line">           &#125; <span class="keyword">else</span> <span class="keyword">if</span> (e <span class="keyword">instanceof</span> IllegalArgumentException) &#123;</span><br><span class="line">               <span class="keyword">return</span> Mono.just(-<span class="number">1</span>);</span><br><span class="line">           &#125;</span><br><span class="line">           <span class="keyword">return</span> Mono.empty();</span><br><span class="line">           &#125;).subscribe(System.out::println);</span><br></pre></td></tr></table></figure></li></ul><p>结果：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">-1</span><br></pre></td></tr></table></figure></p><ul><li>通过 retry 操作符来进行重试，重试的动作是通过重新订阅序列来实现的。在使用 retry 操作符时可以指定重试的次数。<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Flux.just(<span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line">    .concatWith(Mono.error(<span class="keyword">new</span> IllegalStateException()))</span><br><span class="line">    .retry(<span class="number">1</span>)</span><br><span class="line">    .subscribe(System.out::println);</span><br></pre></td></tr></table></figure></li></ul><p>结果：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">1</span><br><span class="line">2</span><br><span class="line">Exception in thread &quot;main&quot; reactor.core.Exceptions$ErrorCallbackNotImplemented: java.lang.IllegalStateException</span><br><span class="line">Caused by: java.lang.IllegalStateException</span><br><span class="line">at com.glmapper.bridge.boot.reactor.SimpleTest.testFluxSub(SimpleTest.java:75)</span><br><span class="line">at com.glmapper.bridge.boot.reactor.SimpleTest.main(SimpleTest.java:23)</span><br></pre></td></tr></table></figure></p><h3 id="调度器-Scheduler"><a href="#调度器-Scheduler" class="headerlink" title="调度器 Scheduler"></a>调度器 Scheduler</h3><p>在 Reactor 中，执行模式以及执行过程取决于所使用的 Scheduler，Scheduler 是一个拥有广泛实现类的抽象接口，Schedulers 类提供的静态方法用于达成如下的执行环境：</p><ul><li><p>当前线程（Schedulers.immediate()）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Schedulers.immediate().schedule(()-&gt;&#123;</span><br><span class="line">   System.out.println(Thread.currentThread().getName()+<span class="string">"-"</span>+<span class="number">11</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// main-11</span></span><br></pre></td></tr></table></figure></li><li><p>可重用的单线程（Schedulers.single()）。注意，这个方法对所有调用者都提供同一个线程来使用， 直到该调度器（Scheduler）被废弃。如果你想使用专一的线程，就对每一个调用使用 Schedulers.newSingle()。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Schedulers.single().schedule(()-&gt;&#123;</span><br><span class="line">    System.out.println(Thread.currentThread().getName()+<span class="string">"-"</span>+<span class="number">11</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// single-1-11</span></span><br></pre></td></tr></table></figure></li><li><p>弹性线程池（Schedulers.elastic()。它根据需要创建一个线程池，重用空闲线程。线程池如果空闲时间过长 （默认为 60s）就会被废弃。对于 I/O 阻塞的场景比较适用。 Schedulers.elastic() 能够方便地给一个阻塞 的任务分配它自己的线程，从而不会妨碍其他任务和资源。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Schedulers.elastic().schedule(()-&gt;&#123;</span><br><span class="line">    System.out.println(Thread.currentThread().getName()+<span class="string">"-"</span>+<span class="number">11</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// elastic-2-11</span></span><br></pre></td></tr></table></figure></li><li><p>固定大小线程池（Schedulers.parallel()）。所创建线程池的大小与 CPU 个数等同</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Schedulers.parallel().schedule(()-&gt;&#123;</span><br><span class="line">    System.out.println(Thread.currentThread().getName()+<span class="string">"-"</span>+<span class="number">11</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// parallel-1-11</span></span><br></pre></td></tr></table></figure></li><li><p>基于现有的 ExecutorService 创建 Scheduler</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">ExecutorService executorService = Executors.newSingleThreadExecutor();</span><br><span class="line">Schedulers.fromExecutorService(executorService).schedule(()-&gt;&#123;</span><br><span class="line">    System.out.println(Thread.currentThread().getName()+<span class="string">"-"</span>+<span class="number">11</span>);</span><br><span class="line">&#125;);</span><br><span class="line">        </span><br><span class="line"><span class="comment">// pool-4-thread-1-11</span></span><br></pre></td></tr></table></figure></li><li><p>基于 newXXX 方法来创建调度器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Schedulers.newElastic(<span class="string">"test-elastic"</span>).schedule(()-&gt;&#123;</span><br><span class="line">    System.out.println(Thread.currentThread().getName()+<span class="string">"-"</span>+<span class="number">11</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// test-elastic-4-11</span></span><br></pre></td></tr></table></figure></li></ul><p>一些操作符默认会使用一个指定的调度器（通常也允许开发者调整为其他调度器）例如， 通过工厂方法 Flux.interval(Duration.ofMillis(100)) 生成的每 100ms 打点一次的 Flux<long>， 默认情况下使用的是 Schedulers.parallel()，下边的代码演示了如何将其装换为 Schedulers.single()<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Flux&lt;String&gt; intervalResult = Flux.interval(Duration.ofMillis(<span class="number">100</span>),</span><br><span class="line">        Schedulers.newSingle(<span class="string">"test"</span>))</span><br><span class="line">        .map(i -&gt; Thread.currentThread().getName() +<span class="string">"@"</span>+i);</span><br><span class="line">        intervalResult.subscribe(System.out::println);</span><br></pre></td></tr></table></figure></long></p><p>结果：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">test-1@0</span><br><span class="line">test-1@1</span><br><span class="line">test-1@2</span><br><span class="line">test-1@3</span><br><span class="line">test-1@4</span><br><span class="line">// 省略</span><br></pre></td></tr></table></figure></p><h3 id="publishOn-和-subscribeOn"><a href="#publishOn-和-subscribeOn" class="headerlink" title="publishOn 和 subscribeOn"></a>publishOn 和 subscribeOn</h3><p>Reactor 提供了两种在响应式链中调整调度器 Scheduler 的方法：publishOn 和 subscribeOn。 它们都接受一个 Scheduler 作为参数，从而可以改变调度器。但是 publishOn 在链中出现的位置是有讲究的，而 subscribeOn 则无所谓。</p><ul><li>publishOn 的用法和处于订阅链（subscriber chain）中的其他操作符一样。它将上游 信号传给下游，同时执行指定的调度器 Scheduler 的某个工作线程上的回调。 它会 改变后续的操作符的执行所在线程 （直到下一个 publishOn 出现在这个链上）</li><li>subscribeOn 用于订阅（subscription）过程，作用于那个向上的订阅链（发布者在被订阅 时才激活，订阅的传递方向是向上游的）。所以，无论你把 subscribeOn 至于操作链的什么位置， 它都会影响到源头的线程执行环境（context）。 但是，它不会影响到后续的 publishOn，后者仍能够切换其后操作符的线程执行环境。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Flux.create(sink -&gt; &#123;</span><br><span class="line">        sink.next(Thread.currentThread().getName());</span><br><span class="line">        sink.complete();</span><br><span class="line">    &#125;)</span><br><span class="line">    .publishOn(Schedulers.single())</span><br><span class="line">    .map(x -&gt; String.format(<span class="string">"[%s] %s"</span>, Thread.currentThread().getName(), x))</span><br><span class="line">    .publishOn(Schedulers.elastic())</span><br><span class="line">    .map(x -&gt; String.format(<span class="string">"[%s] %s"</span>, Thread.currentThread().getName(), x))</span><br><span class="line">    .subscribeOn(Schedulers.parallel())</span><br><span class="line">    .toStream()</span><br><span class="line">    .forEach(System.out::println);</span><br></pre></td></tr></table></figure><p>结果：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[elastic-<span class="number">2</span>] [single-<span class="number">1</span>] parallel-<span class="number">1</span></span><br></pre></td></tr></table></figure></p><p>上面这段代码使用 create() 方法创建一个新的 Flux 对象，其中包含唯一的元素是当前线程的名称。</p><p>接着是两对 publishOn() 和 map()方法，其作用是先切换执行时的调度器，再把当前的线程名称作为前缀添加。</p><p>最后通过 subscribeOn()方法来改变流产生时的执行方式。</p><p>最内层的线程名字 parallel-1 来自产生流中元素时使用的 Schedulers.parallel()调度器，中间的线程名称 single-1 来自第一个 map 操作之前的 Schedulers.single() 调度器，最外层的线程名字 elastic-2 来自第二个 map 操作之前的 Schedulers.elastic()调度器。</p><blockquote><p>先到这里，剩下的想到再补充…</p></blockquote><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://projectreactor.io/docs/core/release/reference/" target="_blank" rel="noopener">https://projectreactor.io/docs/core/release/reference/</a></li><li><a href="https://htmlpreview.github.io/?https://github.com/get-set/reactor-core/blob/master-zh/src/docs/index.html#about-doc" target="_blank" rel="noopener">https://htmlpreview.github.io/?https://github.com/get-set/reactor-core/blob/master-zh/src/docs/index.html#about-doc</a></li><li><a href="https://www.ibm.com/developerworks/cn/java/j-cn-with-reactor-response-encode/index.html?lnk=hmhm" target="_blank" rel="noopener">https://www.ibm.com/developerworks/cn/java/j-cn-with-reactor-response-encode/index.html?lnk=hmhm</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;从响应式编程说起&quot;&gt;&lt;a href=&quot;#从响应式编程说起&quot; class=&quot;headerlink&quot; title=&quot;从响应式编程说起&quot;&gt;&lt;/a&gt;从响应式编程说起&lt;/h2&gt;&lt;p&gt;响应式编程是一种关注于数据流（data streams）和变化传递（propagation 
      
    
    </summary>
    
      <category term="java" scheme="http://www.glmapper.com/categories/java/"/>
    
    
      <category term="java" scheme="http://www.glmapper.com/tags/java/"/>
    
      <category term="Reactor" scheme="http://www.glmapper.com/tags/Reactor/"/>
    
  </entry>
  
  <entry>
    <title>聊一聊-JAVA 泛型中的通配符 T，E，K，V，？</title>
    <link href="http://www.glmapper.com/2019/08/19/base-java-generics/"/>
    <id>http://www.glmapper.com/2019/08/19/base-java-generics/</id>
    <published>2019-08-19T07:20:35.000Z</published>
    <updated>2019-12-15T16:12:01.051Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>Java 泛型（generics）是 JDK 5 中引入的一个新特性, 泛型提供了编译时类型安全检测机制，该机制允许开发者在编译时检测到非法的类型。</p><p>泛型的本质是参数化类型，也就是说所操作的数据类型被指定为一个参数。</p><h2 id="泛型带来的好处"><a href="#泛型带来的好处" class="headerlink" title="泛型带来的好处"></a>泛型带来的好处</h2><p>在没有泛型的情况的下，通过对类型 Object 的引用来实现参数的“任意化”，“任意化”带来的缺点是要做显式的强制类型转换，而这种转换是要求开发者对实际参数类型可以预知的情况下进行的。对于强制类型转换错误的情况，编译器可能不提示错误，在运行的时候才出现异常，这是本身就是一个安全隐患。</p><p>那么泛型的好处就是在编译的时候能够检查类型安全，并且所有的强制转换都是自动和隐式的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GlmapperGeneric</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line"><span class="keyword">private</span> T t;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">set</span><span class="params">(T t)</span> </span>&#123; <span class="keyword">this</span>.t = t; &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> T <span class="title">get</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> t; &#125;</span><br><span class="line">  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// do nothing</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 不指定类型</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">noSpecifyType</span><span class="params">()</span></span>&#123;</span><br><span class="line">    GlmapperGeneric glmapperGeneric = <span class="keyword">new</span> GlmapperGeneric();</span><br><span class="line">    glmapperGeneric.set(<span class="string">"test"</span>);</span><br><span class="line">    <span class="comment">// 需要强制类型转换</span></span><br><span class="line">    String test = (String) glmapperGeneric.get();</span><br><span class="line">    System.out.println(test);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 指定类型</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">specifyType</span><span class="params">()</span></span>&#123;</span><br><span class="line">    GlmapperGeneric&lt;String&gt; glmapperGeneric = <span class="keyword">new</span> GlmapperGeneric();</span><br><span class="line">    glmapperGeneric.set(<span class="string">"test"</span>);</span><br><span class="line">    <span class="comment">// 不需要强制类型转换</span></span><br><span class="line">    String test = glmapperGeneric.get();</span><br><span class="line">    System.out.println(test);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面这段代码中的 specifyType 方法中 省去了强制转换，可以在编译时候检查类型安全，可以用在类，方法，接口上。</p><h2 id="泛型中通配符"><a href="#泛型中通配符" class="headerlink" title="泛型中通配符"></a>泛型中通配符</h2><p>我们在定义泛型类，泛型方法，泛型接口的时候经常会碰见很多不同的通配符，比如 T，E，K，V 等等，这些通配符又都是什么意思呢？</p><h3 id="常用的-T，E，K，V，？"><a href="#常用的-T，E，K，V，？" class="headerlink" title="常用的 T，E，K，V，？"></a>常用的 T，E，K，V，？</h3><p>本质上这些个都是通配符，没啥区别，只不过是编码时的一种约定俗成的东西。比如上述代码中的 T ，我们可以换成 A-Z 之间的任何一个 字母都可以，并不会影响程序的正常运行，但是如果换成其他的字母代替 T ，在可读性上可能会弱一些。<strong>通常情况下，T，E，K，V，？ 是这样约定的：</strong></p><ul><li>？ 表示不确定的 java 类型</li><li>T (type) 表示具体的一个java类型</li><li>K V (key value) 分别代表java键值中的Key Value</li><li>E (element) 代表Element</li></ul><h3 id="？-无界通配符"><a href="#？-无界通配符" class="headerlink" title="？ 无界通配符"></a>？ <strong>无界通配符</strong></h3><p>先从一个小例子看起，原文在 <a href="https://codeday.me/bug/20180113/116421.html" target="_blank" rel="noopener">这里</a> 。</p><p>我有一个父类 Animal 和几个子类，如狗、猫等，现在我需要一个动物的列表，我的第一个想法是像这样的：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">List&lt;Animal&gt; listAnimals</span><br></pre></td></tr></table></figure><p>但是老板的想法确实这样的：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">List&lt;? extends Animal&gt; listAnimals</span><br></pre></td></tr></table></figure><p>为什么要使用通配符而不是简单的泛型呢？通配符其实在声明局部变量时是没有什么意义的，但是当你为一个方法声明一个参数时，它是非常重要的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">countLegs</span> <span class="params">(List&lt;? extends Animal &gt; animals )</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> retVal = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> ( Animal animal : animals )</span><br><span class="line">    &#123;</span><br><span class="line">        retVal += animal.countLegs();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> retVal;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">countLegs1</span> <span class="params">(List&lt; Animal &gt; animals )</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> retVal = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> ( Animal animal : animals )</span><br><span class="line">    &#123;</span><br><span class="line">        retVal += animal.countLegs();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> retVal;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    List&lt;Dog&gt; dogs = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"> <span class="comment">// 不会报错</span></span><br><span class="line">    countLegs( dogs );</span><br><span class="line"><span class="comment">// 报错</span></span><br><span class="line">    countLegs1(dogs);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当调用 countLegs1 时，就会飘红，提示的错误信息如下：</p><p><img src="https://glmapper-blog.oss-cn-hangzhou.aliyuncs.com/generics/generics-1.jpg" alt=""></p><p>所以，对于不确定或者不关心实际要操作的类型，可以使用无限制通配符（尖括号里一个问号，即 &lt;?&gt; ），表示可以持有任何类型。像 countLegs 方法中，限定了上届，但是不关心具体类型是什么，所以对于传入的 Animal 的所有子类都可以支持，并且不会报错。而 countLegs1 就不行。</p><h3 id="上界通配符-lt-extends-E-gt"><a href="#上界通配符-lt-extends-E-gt" class="headerlink" title="上界通配符 &lt; ? extends E&gt;"></a>上界通配符 &lt; ? extends E&gt;</h3><blockquote><p>上届：用 extends 关键字声明，表示参数化的类型可能是所指定的类型，或者是此类型的子类。</p></blockquote><p>在类型参数中使用 extends 表示这个泛型中的参数必须是 E 或者 E 的子类，这样有两个好处：</p><ul><li>如果传入的类型不是 E 或者 E 的子类，编译不成功</li><li>泛型中可以使用 E 的方法，要不然还得强转成 E 才能使用</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> &lt;K extends A, E extends B&gt; <span class="function">E <span class="title">test</span><span class="params">(K arg1, E arg2)</span></span>&#123;</span><br><span class="line">    E result = arg2;</span><br><span class="line">    arg2.compareTo(arg1);</span><br><span class="line">    <span class="comment">//.....</span></span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>类型参数列表中如果有多个类型参数上限，用逗号分开</p></blockquote><h3 id="下界通配符-lt-super-E-gt"><a href="#下界通配符-lt-super-E-gt" class="headerlink" title="下界通配符 &lt; ? super E&gt;"></a>下界通配符 &lt; ? super E&gt;</h3><blockquote><p>下界: 用 super 进行声明，表示参数化的类型可能是所指定的类型，或者是此类型的父类型，直至 Object</p></blockquote><p>在类型参数中使用 super 表示这个泛型中的参数必须是 E 或者 E 的父类。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> &lt;T&gt; <span class="function"><span class="keyword">void</span> <span class="title">test</span><span class="params">(List&lt;? <span class="keyword">super</span> T&gt; dst, List&lt;T&gt; src)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (T t : src) &#123;</span><br><span class="line">        dst.add(t);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    List&lt;Dog&gt; dogs = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    List&lt;Animal&gt; animals = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    <span class="keyword">new</span> Test3().test(animals,dogs);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Dog 是 Animal 的子类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span> <span class="keyword">extends</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>dst 类型 “大于等于” src 的类型，这里的“大于等于”是指 dst 表示的范围比 src 要大，因此装得下 dst 的容器也就能装 src 。</p><h3 id="？-和-T-的区别"><a href="#？-和-T-的区别" class="headerlink" title="？ 和 T 的区别"></a>？ 和 T 的区别</h3><p><img src="https://glmapper-blog.oss-cn-hangzhou.aliyuncs.com/generics/generics-2.jpg" alt=""></p><p>？和 T 都表示不确定的类型，区别在于我们可以对 T 进行操作，但是对 ？ 不行，比如如下这种 ：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 可以</span></span><br><span class="line">T t = operate();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 不可以</span></span><br><span class="line">？ car = operate();</span><br></pre></td></tr></table></figure><p>简单总结下：</p><p>T 是一个 确定的 类型，通常用于泛型类和泛型方法的定义，？是一个 不确定 的类型，通常用于泛型方法的调用代码和形参，不能用于定义类和泛型方法。</p><h4 id="区别1：通过-T-来-确保-泛型参数的一致性"><a href="#区别1：通过-T-来-确保-泛型参数的一致性" class="headerlink" title="区别1：通过 T 来 确保 泛型参数的一致性"></a>区别1：通过 T 来 确保 泛型参数的一致性</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 通过 T 来 确保 泛型参数的一致性</span></span><br><span class="line"><span class="keyword">public</span> &lt;T extends Number&gt; <span class="keyword">void</span></span><br><span class="line">test(List&lt;T&gt; dest, List&lt;T&gt; src)</span><br><span class="line"></span><br><span class="line"><span class="comment">//通配符是 不确定的，所以这个方法不能保证两个 List 具有相同的元素类型</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span></span><br><span class="line">test(List&lt;? extends Number&gt; dest, List&lt;? extends Number&gt; src)</span><br></pre></td></tr></table></figure><p>像下面的代码中，约定的 T 是 Number 的子类才可以，但是申明时是用的 String ，所以就会飘红报错。</p><p><img src="https://glmapper-blog.oss-cn-hangzhou.aliyuncs.com/generics/generics-3.jpg" alt=""></p><p>不能保证两个 List 具有相同的元素类型的情况</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">GlmapperGeneric&lt;String&gt; glmapperGeneric = new GlmapperGeneric&lt;&gt;();</span><br><span class="line">List&lt;String&gt; dest = new ArrayList&lt;&gt;();</span><br><span class="line">List&lt;Number&gt; src = new ArrayList&lt;&gt;();</span><br><span class="line">glmapperGeneric.testNon(dest,src);</span><br></pre></td></tr></table></figure><p>上面的代码在编译器并不会报错，但是当进入到 testNon 方法内部操作时（比如赋值），对于 dest 和 src 而言，就还是需要进行类型转换。</p><h4 id="区别2：类型参数可以多重限定而通配符不行"><a href="#区别2：类型参数可以多重限定而通配符不行" class="headerlink" title="区别2：类型参数可以多重限定而通配符不行"></a>区别2：类型参数可以多重限定而通配符不行</h4><p><img src="https://glmapper-blog.oss-cn-hangzhou.aliyuncs.com/generics/generics-4.jpg" alt=""></p><p>使用 &amp; 符号设定多重边界（Multi Bounds)，指定泛型类型 T 必须是 MultiLimitInterfaceA 和 MultiLimitInterfaceB 的共有子类型，此时变量 t 就具有了所有限定的方法和属性。对于通配符来说，因为它不是一个确定的类型，所以不能进行多重限定。</p><h4 id="区别3：通配符可以使用超类限定而类型参数不行"><a href="#区别3：通配符可以使用超类限定而类型参数不行" class="headerlink" title="区别3：通配符可以使用超类限定而类型参数不行"></a>区别3：通配符可以使用超类限定而类型参数不行</h4><p>类型参数 T 只具有 一种 类型限定方式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">T extends A</span><br></pre></td></tr></table></figure><p>但是通配符 ? 可以进行 两种限定：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">? extends A</span><br><span class="line">? <span class="keyword">super</span> A</span><br></pre></td></tr></table></figure><h2 id="Class-lt-T-gt-和-Class-lt-gt-区别"><a href="#Class-lt-T-gt-和-Class-lt-gt-区别" class="headerlink" title="Class&lt;T&gt; 和 Class&lt;?&gt; 区别"></a><code>Class&lt;T&gt;</code> 和 <code>Class&lt;?&gt;</code> 区别</h2><p>前面介绍了 ？ 和 T 的区别，那么对于，<code>Class&lt;T&gt;</code> 和 <code>&lt;Class&lt;?&gt;</code> 又有什么区别呢？<br><code>Class&lt;T&gt;</code> 和 <code>Class&lt;?&gt;</code></p><p>最常见的是在反射场景下的使用，这里以用一段发射的代码来说明下。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 通过反射的方式生成  multiLimit </span></span><br><span class="line"><span class="comment">// 对象，这里比较明显的是，我们需要使用强制类型转换</span></span><br><span class="line">MultiLimit multiLimit = (MultiLimit)</span><br><span class="line">Class.forName(<span class="string">"com.glmapper.bridge.boot.generic.MultiLimit"</span>).newInstance();</span><br></pre></td></tr></table></figure><p>对于上述代码，在运行期，如果反射的类型不是 MultiLimit 类，那么一定会报 java.lang.ClassCastException 错误。</p><p>对于这种情况，则可以使用下面的代码来代替，使得在在编译期就能直接 检查到类型的问题：</p><p><img src="https://glmapper-blog.oss-cn-hangzhou.aliyuncs.com/generics/generics-5.jpg" alt=""></p><p><code>Class&lt;T&gt;</code> 在实例化的时候，T 要替换成具体类。<code>Class&lt;?&gt;</code> 它是个通配泛型，? 可以代表任何类型，所以主要用于声明时的限制情况。比如，我们可以这样做申明：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 可以</span></span><br><span class="line"><span class="keyword">public</span> Class&lt;?&gt; clazz;</span><br><span class="line"><span class="comment">// 不可以，因为 T 需要指定类型</span></span><br><span class="line"><span class="keyword">public</span> Class&lt;T&gt; clazzT;</span><br></pre></td></tr></table></figure><p>所以当不知道定声明什么类型的 Class 的时候可以定义一 个Class&lt;?&gt;。</p><p><img src="https://glmapper-blog.oss-cn-hangzhou.aliyuncs.com/generics/generics-6.jpg" alt=""></p><p>那如果也想 <code>public Class&lt;T&gt; clazzT;</code> 这样的话，就必须让当前的类也指定 T ，</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test3</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> Class&lt;?&gt; clazz;</span><br><span class="line">    <span class="comment">// 不会报错</span></span><br><span class="line">    <span class="keyword">public</span> Class&lt;T&gt; clazzT;</span><br></pre></td></tr></table></figure><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>本文零碎整理了下 JAVA 泛型中的一些点，不是很全，仅供参考。如果文中有不当的地方，欢迎指正。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://www.toutiao.com/a6694132392728199683" target="_blank" rel="noopener">JAVA泛型通配符T，E，K，V区别，网友回复：一文秒懂</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;Java 泛型（generics）是 JDK 5 中引入的一个新特性, 泛型提供了编译时类型安全检测机制，该机制允许开发者在编译时检测到非法
      
    
    </summary>
    
      <category term="java" scheme="http://www.glmapper.com/categories/java/"/>
    
    
      <category term="java" scheme="http://www.glmapper.com/tags/java/"/>
    
      <category term="泛型" scheme="http://www.glmapper.com/tags/%E6%B3%9B%E5%9E%8B/"/>
    
  </entry>
  
  <entry>
    <title>shell 脚本简单归纳和实践</title>
    <link href="http://www.glmapper.com/2019/08/01/seiri-shell-record/"/>
    <id>http://www.glmapper.com/2019/08/01/seiri-shell-record/</id>
    <published>2019-08-01T14:14:25.000Z</published>
    <updated>2019-12-14T03:14:28.455Z</updated>
    
    <content type="html"><![CDATA[<h2 id="if-条件-OPTION"><a href="#if-条件-OPTION" class="headerlink" title="if 条件 OPTION"></a>if 条件 OPTION</h2><table><thead><tr><th>OPTION</th><th>解释</th></tr></thead><tbody><tr><td>[-a file]</td><td>如果file存在则为真 ，也可以表示为 and: 条件与<br>if [ -z “condition1” -a -z “condition2” ]</td></tr><tr><td>[-b file]</td><td>如果file存在且是一个<strong>块</strong>特殊文件则为真</td></tr><tr><td>[-c file]</td><td>如果file存在且是一个<strong>字</strong>特殊文件则为真</td></tr><tr><td>[-d file]</td><td>如果 file 文件存在且是一个目录则为真，d前的!是逻辑非 <br>#表示目录不存在，则执行后面的 then 操作 <br>if [ ! -d lcd_path/par_date ]</td></tr><tr><td>[-e file]</td><td>如果 file文件存在则为真</td></tr><tr><td>[-f file]</td><td>如果 file 存在且是一个普通文件则为真</td></tr><tr><td>[-g file]</td><td>如果 file 存在且已经设置了SGID则为真（SUID 是 Set User ID, SGID 是 Set Group ID的意思）</td></tr><tr><td>[-h file]</td><td>如果 file 存在且是一个符号连接则为真</td></tr><tr><td>[-k file]</td><td>如果 file 存在且已经设置粘制位则为真</td></tr><tr><td>[-p file]</td><td>如果file存在且是一个名字管道（F如果O）则为真。管道是linux里面进程间通信的一种方式，<br>其他的还有像信号（signal）、信号量、消息队列、共享内存、套接字（socket）等</td></tr><tr><td>[-r file]</td><td>如果file存在且是可读的则为真</td></tr><tr><td>[-s file]</td><td>如果file存在且大小不为0则为真</td></tr><tr><td>[-t FD]</td><td>如果文件描述符FD打开且指向一个终端则为真</td></tr><tr><td>[-u file]</td><td>如果file存在且设置了SUID（set userID）则为真</td></tr><tr><td>[-w file</td><td>如果file存在且是可写的则为真</td></tr><tr><td>[-x file]</td><td>如果file存在且是可执行的则为真</td></tr><tr><td>[-O file]</td><td>如果file存在且属有效用户ID则为真</td></tr><tr><td>[-G file]</td><td>如果file存在且属有效用户组则为真</td></tr><tr><td>[-L file]</td><td>如果file存在且是一个符号连接则为真</td></tr><tr><td>[-N file]</td><td>如果file存在and has been mod如果ied since it was last read则为真</td></tr><tr><td>[-S file]</td><td>如果file存在且是一个套接字则为真</td></tr><tr><td>[-o optionname]</td><td>如果shell选项“optionname”开启则为真</td></tr><tr><td>[-z string]</td><td>“string”的长度为零则为真</td></tr><tr><td>[-n string] or [string]</td><td>“string”的长度为非零non-zero则为真</td></tr></tbody></table><p><a name="hMvnK"></a></p><h2 id="if-基本判断"><a href="#if-基本判断" class="headerlink" title="if 基本判断"></a>if 基本判断</h2><ul><li>[file1 –nt file2] 如果file1 has been changed more recently than file2或者file1 exists and file2 does not则为真 </li><li>[file1 –ot file2] 如果file1比file2要老，或者file2存在且file1不存在则为真 </li><li>[file1 –ef file2] 如果file1和file2指向相同的设备和节点号则为真 </li><li>[sting1==string2] 如果2个字符串相同。“=”may be used instead of “==”for strict posix compliance则为真 </li><li>[string1!=string2] 如果字符串不相等则为真 </li><li>[string1&lt;string2] 如果“string1”sorts before“string2”lexicographically in the current locale则为真 </li><li>[arg1 OP arg2]  “OP”is one of –eq,-ne,-lt,-le,-gt or –ge</li></ul><h2 id="截取字符串"><a href="#截取字符串" class="headerlink" title="截取字符串"></a>截取字符串</h2><ul><li><strong># 号截取，删除左边字符，保留右边字符。 （非贪婪匹配）</strong></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">var=http://www.glmapper.com</span><br><span class="line"><span class="comment"># # 号是运算符，*/ 表示从左边开始删除第一个 / 号及左边的所有字符,即删除 http://</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;var#*//&#125;</span></span><br><span class="line"><span class="comment">#结果 www.glmapper.com</span></span><br></pre></td></tr></table></figure><ul><li><strong>## 号截取，删除左边字符，保留右边字符。</strong>（贪婪匹配）<em>**</em></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">var=http://www.glmapper.com</span><br><span class="line"><span class="comment"># ##*/ 表示从左边开始删除最后（最右边）一个 / 号及左边的所有字符</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;var##*//&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 结果 www.glmapper.com</span></span><br></pre></td></tr></table></figure><ul><li><strong>%号截取，删除右边字符，保留左边字符 </strong>（非贪婪匹配）<em>**</em></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">var=http://www.glmapper.com</span><br><span class="line"><span class="comment"># %/* 表示从右边开始，删除第一个 / 号及右边的字符</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;var%/*&#125;</span></span><br><span class="line"><span class="comment"># 结果是：http:/</span></span><br></pre></td></tr></table></figure><ul><li><strong>%% 号截取，删除右边字符，保留左边字符  </strong>（贪婪匹配）<em>**</em></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">var=http://www.glmapper.com</span><br><span class="line"><span class="comment"># %%/* 表示从右边开始，删除最后（最左边）一个 / 号及右边的字符</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;var%%/*&#125;</span></span><br><span class="line"><span class="comment"># 结果 ：http:</span></span><br></pre></td></tr></table></figure><ul><li><strong>从左边第几个字符开始，及字符的个数</strong></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">var=http://www.glmapper.com</span><br><span class="line"><span class="comment"># 其中的 0 表示左边第一个字符开始，5 表示字符的总个数</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;var:0:5&#125;</span></span><br><span class="line"><span class="comment"># 结果 http:</span></span><br></pre></td></tr></table></figure><ul><li><strong>从左边第几个字符开始，一直到结束</strong></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">var=http://www.glmapper.com</span><br><span class="line"><span class="comment"># 其中的 7 表示左边第8个字符开始，一直到结束。</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;var:7&#125;</span></span><br><span class="line"><span class="comment"># 结果 www.glmapper.com</span></span><br></pre></td></tr></table></figure><ul><li><strong>从右边第几个字符开始，及字符的个数</strong></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">var=http://www.glmapper.com</span><br><span class="line"><span class="comment"># 其中的 0-3 表示右边算起第3个字符开始，3 表示字符的个数</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;var:0-3:3&#125;</span></span><br><span class="line"><span class="comment"># 结果 com</span></span><br></pre></td></tr></table></figure><ul><li><strong>从右边第几个字符开始，一直到结束</strong></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">var=http://www.glmapper.com</span><br><span class="line"><span class="comment"># 表示从右边第 3 个字符开始，一直到结束</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;var:0-3&#125;</span></span><br><span class="line"><span class="comment"># 结果 com</span></span><br></pre></td></tr></table></figure><blockquote><p>左边的第一个字符是用 0 表示，右边的第一个字符用 0-1 表示</p></blockquote><p><a name="j4jqy"></a></p><h2 id="basename"><a href="#basename" class="headerlink" title="basename"></a>basename</h2><p><a name="N5taV"></a></p><h3 id="basename-命令简介"><a href="#basename-命令简介" class="headerlink" title="basename 命令简介"></a>basename 命令简介</h3><p>去除文件名的目录部分和后缀部分。basename 命令读取 String 参数，删除以 /(斜杠) 结尾的前缀以及任何指定的 Suffix 参数，并将剩余的基本文件名称写至标准输出。basename 和 dirname 命令通常用于 shell 脚本中的命令<strong>替换来指定和指定的输入文件名称有所差异的输出文件名称。</strong><br>**<br>基本语法如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">basename NAME [SUFFIX]</span><br><span class="line">basename OPTION</span><br></pre></td></tr></table></figure><p><a name="rCZMr"></a></p><h3 id="基本示例"><a href="#基本示例" class="headerlink" title="基本示例"></a>基本示例</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">basename /usr/bin/sort</span><br><span class="line"><span class="comment"># 返回 sort</span></span><br><span class="line"></span><br><span class="line">basename /usr/bin/sort/glmapper.txt</span><br><span class="line"><span class="comment"># 返回 glmapper.txt</span></span><br></pre></td></tr></table></figure><p><a name="pjCcq"></a></p><h3 id="创建基本文件名称的规则"><a href="#创建基本文件名称的规则" class="headerlink" title="创建基本文件名称的规则"></a>创建基本文件名称的规则</h3><ul><li>如果 String 参数是 //(双斜杠) 或如果 String 参数包含的都是斜杠字符，则将字符串更改为单个 /(斜杠)</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">basename //usr//bin//sort//glmapper.txt</span><br><span class="line"><span class="comment"># 返回 glmapper.txt</span></span><br><span class="line"></span><br><span class="line">basename ////</span><br><span class="line"><span class="comment"># 返回 /</span></span><br></pre></td></tr></table></figure><ul><li>从指定字符串除去任何拖尾的 / 字符。</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">basename /usr/bin/sort/</span><br><span class="line"><span class="comment"># 返回 sort</span></span><br></pre></td></tr></table></figure><ul><li>如果在 String 参数中剩余任何 / 字符，则除去字符串的前缀直到（包含）最后一个 / 字符。</li><li>如果指定 Suffix 参数，且它和字符串中的剩余的字符相同，则不修改此字符串</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">basename /usr/bin/sort/glmapper.txt glmapper.txt </span><br><span class="line"><span class="comment"># 返回glmapper.txt </span></span><br><span class="line"></span><br><span class="line">basename /usr/bin/sort/glmapper.txt .txt </span><br><span class="line"><span class="comment"># 返回 glmapper</span></span><br></pre></td></tr></table></figure><p><a name="EBlrQ"></a></p><h2 id="shell-查看当前目录下文件的个数"><a href="#shell-查看当前目录下文件的个数" class="headerlink" title="shell 查看当前目录下文件的个数"></a>shell 查看当前目录下文件的个数</h2><p>测试准备，test 目录下有 test1、test2 两个文件夹和一个 1.txt 文件。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">-<span class="built_in">test</span></span><br><span class="line">├── 1.txt</span><br><span class="line">├── test1</span><br><span class="line">│   └── test1_1.txt</span><br><span class="line">└── test2</span><br></pre></td></tr></table></figure><ul><li>查看当前目录下文件的个数</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">➜  <span class="built_in">test</span> ls -l | grep <span class="string">"^-"</span> | wc -l</span><br><span class="line">   1 <span class="comment"># 1.txt</span></span><br></pre></td></tr></table></figure><ul><li>查看当前目录下文件的个数，包括子目录里的</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">➜  <span class="built_in">test</span> ls -lR| grep <span class="string">"^-"</span> | wc -l</span><br><span class="line">   2 <span class="comment"># 1.txt  test1_1.txt</span></span><br></pre></td></tr></table></figure><ul><li>查看某目录下文件夹（目录）的个数，包括子目录里的</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">➜  <span class="built_in">test</span> ls -lR| grep <span class="string">"^d"</span> | wc -l</span><br><span class="line"> 2 <span class="comment"># test1 test2</span></span><br></pre></td></tr></table></figure><ul><li>说明：</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1、ls -l ：长列表输出该目录下文件信息(注意这里的文件,不同于一般的文件,可能是目录、链接、设备文件等)</span><br><span class="line">2、grep <span class="string">"^-"</span> ：这里将长列表输出信息过滤一部分,只保留一般文件,如果只保留目录就是 ^d</span><br><span class="line">3、wc -l ： 统计输出信息的行数,已经过滤得只剩一般文件了,统计结果就是一般文件信息的行数,</span><br><span class="line">又一行信息对应一个文件,也就是文件的个数</span><br></pre></td></tr></table></figure><p><a name="cOjDe"></a></p><h2 id="利用简单的命令组合实现配置文件的获取"><a href="#利用简单的命令组合实现配置文件的获取" class="headerlink" title="利用简单的命令组合实现配置文件的获取"></a>利用简单的命令组合实现配置文件的获取</h2><p>测试准备，在 1.txt 中 增加两个属性：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">name=glmapper</span><br><span class="line">age=26</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">cat /Users/guolei/logs/<span class="built_in">test</span>/1.txt | sed <span class="string">'s|[[:blank:]]||g'</span> | grep <span class="string">"^name="</span> | cut -d= -f2</span><br><span class="line"><span class="comment"># 返回 glmapper </span></span><br><span class="line"></span><br><span class="line">cat /Users/guolei/logs/<span class="built_in">test</span>/1.txt | sed <span class="string">'s|[[:blank:]]||g'</span> | grep <span class="string">"^age="</span> | cut -d= -f2</span><br><span class="line"><span class="comment"># 返回 26</span></span><br></pre></td></tr></table></figure><p><a name="ok2lo"></a></p><h2 id="函数封装与返回"><a href="#函数封装与返回" class="headerlink" title="函数封装与返回"></a>函数封装与返回</h2><p>以上面的解析配置文件为例，将其封装成一个函数</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> load_param()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment"># 接受的第一个参数是文件地址</span></span><br><span class="line">    <span class="built_in">local</span> properties_file=<span class="variable">$1</span></span><br><span class="line">    <span class="comment"># 接受的第二个参数是属性名</span></span><br><span class="line">    <span class="built_in">local</span> param=<span class="variable">$2</span></span><br><span class="line">    RESULT=`cat <span class="variable">$properties_file</span> | sed <span class="string">'s|[[:blank:]]||g'</span> | grep <span class="string">"^<span class="variable">$param</span>="</span> | cut -d= -f2`</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>调用函数并且获取返回值</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">load_param 1.txt name</span><br><span class="line">PROP_VAL=<span class="variable">$RESULT</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$PROP_VAL</span></span><br><span class="line"><span class="comment"># 返回 glmapper</span></span><br></pre></td></tr></table></figure><p><a name="QhWTo"></a></p><h2 id="shell-实现日志文件的归档处理"><a href="#shell-实现日志文件的归档处理" class="headerlink" title="shell 实现日志文件的归档处理"></a>shell 实现日志文件的归档处理</h2><p>日志归档简单来说就是，每次希望启动，会将前一次程序运行产生的日志和本地运行产生的日志隔离开来，归档结果就是产生类似于如下的日志文件：</p><ul><li>stdout.log.20170909</li><li>stdout.log.20170709</li><li>stdout</li></ul><p>所以日志文件的归档在生产脚本中是必须要考虑的，否则就到导致每次产生的文件都会被写入同一份日志文件中。下面是实践过程中归纳的一个日志归档函数：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># archive log</span></span><br><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">archive_log</span></span>() &#123;</span><br><span class="line">    <span class="built_in">local</span> FILE_STDOUT_LOG=<span class="variable">$LOG_ROOT</span>/stdout.log</span><br><span class="line">    <span class="built_in">local</span> FILE_STDERR_LOG=<span class="variable">$LOG_ROOT</span>/stderr.log</span><br><span class="line">    <span class="keyword">if</span> [ ! -e <span class="variable">$LOG_ROOT</span> ] ; <span class="keyword">then</span></span><br><span class="line">        mkdir -p <span class="variable">$LOG_ROOT</span></span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line">    NOW=`date +%Y%m%d.%H%M%S`</span><br><span class="line">    <span class="comment"># scroll SOFABoot STDOUT log</span></span><br><span class="line">    <span class="keyword">if</span> [ -e <span class="variable">$FILE_STDOUT_LOG</span> ] ; <span class="keyword">then</span></span><br><span class="line">        mv <span class="variable">$FILE_STDOUT_LOG</span> <span class="variable">$FILE_STDOUT_LOG</span>.<span class="variable">$NOW</span></span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># scroll SOFABoot STDERR log</span></span><br><span class="line">    <span class="keyword">if</span> [ -e <span class="variable">$FILE_STDERR_LOG</span> ] ; <span class="keyword">then</span></span><br><span class="line">        mv <span class="variable">$FILE_STDERR_LOG</span> <span class="variable">$FILE_STDERR_LOG</span>.<span class="variable">$NOW</span></span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line">    FILE_STDOUT_LOG_GLOBAL=<span class="variable">$FILE_STDOUT_LOG</span>;</span><br><span class="line">    FILE_STDERR_LOG_GLOBAL=<span class="variable">$FILE_STDERR_LOG</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a name="ctqA0"></a></p><h2 id="一个简单的-SOFABoot-启动脚本"><a href="#一个简单的-SOFABoot-启动脚本" class="headerlink" title="一个简单的 SOFABoot 启动脚本"></a>一个简单的 SOFABoot 启动脚本</h2><p>deploy.sh  简单的启动脚本：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">LOG_ROOT= <span class="variable">$1</span>;</span><br><span class="line">APP_PATH= <span class="variable">$2</span>;</span><br><span class="line"><span class="comment"># 检查 JAVA_HOME</span></span><br><span class="line"><span class="keyword">if</span> [ -z <span class="string">"<span class="variable">$JAVA_HOME</span>"</span> ]; <span class="keyword">then</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">"JAVA_HOME not set, exit"</span></span><br><span class="line">  <span class="built_in">exit</span> 1</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"><span class="comment"># 使用前面的那个日志归档函数</span></span><br><span class="line">archive_log</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动 java 程序</span></span><br><span class="line">java -jar <span class="variable">$APP_PATH</span> &gt;&gt; <span class="variable">$FILE_STDOUT_LOG_GLOBAL</span> 2&gt;&gt; <span class="variable">$FILE_STDOUT_LOG_GLOBAL</span> &amp;</span><br></pre></td></tr></table></figure><p>运行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sh deploy.sh ./logs app.jar</span><br></pre></td></tr></table></figure><p><a name="B97pL"></a></p><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>本文记录日常中常遇到的 shell 命令，基础知识部分零碎的参考了网上一些同学的博客，在此做了归纳。也欢迎大家指正。如果你有比较骚气的操作，也欢迎评论席留言，我会验证后更新到文章中来。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;if-条件-OPTION&quot;&gt;&lt;a href=&quot;#if-条件-OPTION&quot; class=&quot;headerlink&quot; title=&quot;if 条件 OPTION&quot;&gt;&lt;/a&gt;if 条件 OPTION&lt;/h2&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;OPTION&lt;/
      
    
    </summary>
    
      <category term="运维" scheme="http://www.glmapper.com/categories/%E8%BF%90%E7%BB%B4/"/>
    
    
      <category term="linux" scheme="http://www.glmapper.com/tags/linux/"/>
    
      <category term="shell" scheme="http://www.glmapper.com/tags/shell/"/>
    
  </entry>
  
  <entry>
    <title>一个 maven 插件打包问题的排查</title>
    <link href="http://www.glmapper.com/2019/07/23/maven-debug/"/>
    <id>http://www.glmapper.com/2019/07/23/maven-debug/</id>
    <published>2019-07-23T11:12:48.000Z</published>
    <updated>2019-12-15T16:01:16.766Z</updated>
    
    <content type="html"><![CDATA[<p>最近研究 <a href="https://github.com/sofastack/sofa-ark" target="_blank" rel="noopener">sofa-ark</a> 的插件机制时，发现当执行完 <code>maven clean install -DskipTests</code> 时，打在 target 目录下的 <code>xxx.jar</code> 与安装到本地仓库的 <code>xxx.jar</code> 大小不一致。</p><ul><li><p>target 目录下的插件大小<br>  <img src="https://glmapper-blog.oss-cn-hangzhou.aliyuncs.com/maven-pack/maven-pack-one.jpg" alt=""></p></li><li><p>.m2 下的插件大小</p><p>  <img src="https://glmapper-blog.oss-cn-hangzhou.aliyuncs.com/maven-pack/maven-pack-two.jpg" alt=""></p></li></ul><p>其实一开始看到这种现象也是懵逼，同一个工程，同一次命令执行，但是得到的两个 jar 包大小差距巨大。那么对于这种问题，我想到的有两点：</p><ul><li>debug 打包插件执行过程</li><li>了解 maven 插件的生命周期</li></ul><h2 id="debug-打包插件执行过程"><a href="#debug-打包插件执行过程" class="headerlink" title="debug 打包插件执行过程"></a>debug 打包插件执行过程</h2><p>这里需要借助 IDEA 中的远程 debug 能力来完成。目前有两个工程，一个是我们的主工程，工程名为上面截图中的 mq-client-ark-plugin ，另一个是打包插件的源码工程，如下图所示：</p><p><img src="https://glmapper-blog.oss-cn-hangzhou.aliyuncs.com/maven-pack/maven-pack-three.jpg" alt=""></p><p>那么下面就一步一步来完成远程 <code>debug</code> 的配置。</p><h3 id="1、使用-mvnDebug-命令开启-debug-模式"><a href="#1、使用-mvnDebug-命令开启-debug-模式" class="headerlink" title="1、使用 mvnDebug 命令开启 debug 模式"></a>1、使用 mvnDebug 命令开启 debug 模式</h3><p>在主工程 <code>mq-client-ark-plugin</code> 的根目录下执行  <code>mvnDebug install</code>（当然除了 <code>install</code> 之外，也可以是 <code>compile</code>、<code>package</code>、<code>test</code>、<code>deploy</code> 等）。</p><p><img src="https://glmapper-blog.oss-cn-hangzhou.aliyuncs.com/maven-pack/maven-pack-four.jpg" alt=""></p><p>当执行完 <code>mvnDebug install</code> 后，可以看到这个阻塞监听 8000 端口了。</p><h3 id="2、源码工程配置远程-debug"><a href="#2、源码工程配置远程-debug" class="headerlink" title="2、源码工程配置远程 debug"></a>2、源码工程配置远程 debug</h3><p>在 <code>idea</code> 主界面找下下图的工具菜单，选择 <code>Edit Configurations...</code><br><img src="https://glmapper-blog.oss-cn-hangzhou.aliyuncs.com/maven-pack/maven-pack-five.jpg" alt=""><br>打开配置面板之后，左上角 <code>+</code> 选择 <code>Remote</code><br><img src="https://glmapper-blog.oss-cn-hangzhou.aliyuncs.com/maven-pack/maven-pack-six.jpg" alt=""><br>填写相关远程 debug 参数</p><p><img src="https://glmapper-blog.oss-cn-hangzhou.aliyuncs.com/maven-pack/maven-pack-seven.jpg" alt=""></p><ul><li><code>Host</code> : 远程目标主机地址，因为之前 主工程也是本地启动的，所以这里就是 <code>localhost</code></li><li><code>Port</code> : 远程目标主机开启的远程 <code>debug</code> 端口</li><li>开启远程 <code>debug</code> 参数：<code>-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=8000</code></li></ul><p>配置完成之后，执行 <code>debug</code> ，可以看下已经连接到了目标机器：</p><p><img src="https://glmapper-blog.oss-cn-hangzhou.aliyuncs.com/maven-pack/maven-pack-eight.jpg" alt=""></p><p>在来看主工程这里，在源码工程没有执行上面的 <code>debug</code> 按钮之前，一直都是阻塞的，执行之后 <code>maven</code> 执行的生命周期开始了:<br><img src="https://glmapper-blog.oss-cn-hangzhou.aliyuncs.com/maven-pack/maven-pack-nine.jpg" alt=""></p><p>如上图，因为在源码工程中打了断点，所以当执行到 <code>sofa-ark-maven-plugin</code> 插件时阻塞了。</p><h2 id="从-maven-执行的生命周期找出问题根源"><a href="#从-maven-执行的生命周期找出问题根源" class="headerlink" title="从 maven 执行的生命周期找出问题根源"></a>从 maven 执行的生命周期找出问题根源</h2><p>上面已经搞定了对目标插件源码的 <code>debug</code> 模式的开启，那么下面就是对插件代码进行 <code>debug</code> 操作。节省篇幅，这里直接将断点放在目标代码行位置：</p><p><img src="https://glmapper-blog.oss-cn-hangzhou.aliyuncs.com/maven-pack/maven-pack-ten.jpg" alt=""></p><p>分析这段代码</p><p><img src="https://glmapper-blog.oss-cn-hangzhou.aliyuncs.com/maven-pack/maven-pack-11.jpg" alt=""></p><ul><li>1、获取到项目的 <code>Artifact</code> ,此时 <code>Artifact</code> 的 <code>file</code> 为：<br><img src="https://glmapper-blog.oss-cn-hangzhou.aliyuncs.com/maven-pack/maven-pack-12.jpg" alt=""></li><li>2、重新设置的 <code>File</code></li><li>3、重新设置了 <code>artifact</code></li></ul><p><img src="https://glmapper-blog.oss-cn-hangzhou.aliyuncs.com/maven-pack/maven-pack-13.jpg" alt=""></p><p>如果单从上面 <code>debug</code> 来看，其实很难解释开篇的那个问题。那么这里在回过头来看下 主工程的 <code>maven</code> 执行日志：</p><p><img src="https://glmapper-blog.oss-cn-hangzhou.aliyuncs.com/maven-pack/maven-pack-14.jpg" alt=""></p><p>如上图中圈红的部分，代表 <code>maven install</code> 所经历的所有阶段。可以看到 <code>sofa-ark-plugin-maven-plugin</code> 是在  <code>maven-install-plugin</code> 后面，那这意味着什么呢？</p><p><strong>我们知道在 target 目录下得到的 xxx.jar 是打包阶段的产物，而 .m2 下面的是 install 的产物。</strong></p><blockquote><p>当然这里没有涉及到 <code>deploy</code> ，<code>deploy</code> 是 <code>install</code> 之后的操作，比如发布到远程仓库。</p></blockquote><p>现在再来看，因为 <code>sofa-ark-plugin-maven-plugin</code> 在执行 <code>install</code> 插件之前将 目标文件给替换了，所以导致打包生成的 <code>target</code> 目录下的 <code>xxx.jar</code> 和 安装到本地仓库的 <code>xxx.jar</code> 不一致。</p><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>本文记录了日常的一个问题排查过程，包括两个小点，一个是如何去 debug maven 的插件，另外一个是简单了解下 maven 打包的生命周期。</p><blockquote><p>关于 maven 打包的生命周期的代码没有具体研究过，不过这里可以大概猜测下，就是 maven 在执行命令时，有个类似于中央控制器的东西，通过解析 maven 命令得到一个 LifeCycle 或者 一个 Pipeline （LifeCycle 或者 Pipeline 实际上就是组装了一系列的插件）。然后 LifeCycle 或者 Pipeline 启动执行，遍历插件，依次执行插件的 execute 方法。</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;最近研究 &lt;a href=&quot;https://github.com/sofastack/sofa-ark&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;sofa-ark&lt;/a&gt; 的插件机制时，发现当执行完 &lt;code&gt;maven clean install 
      
    
    </summary>
    
      <category term="maven" scheme="http://www.glmapper.com/categories/maven/"/>
    
    
      <category term="java" scheme="http://www.glmapper.com/tags/java/"/>
    
      <category term="maven" scheme="http://www.glmapper.com/tags/maven/"/>
    
  </entry>
  
  <entry>
    <title>聊一聊 JAR 文件和 MANIFEST.MF</title>
    <link href="http://www.glmapper.com/2019/06/30/topic-jar-manifest-intro/"/>
    <id>http://www.glmapper.com/2019/06/30/topic-jar-manifest-intro/</id>
    <published>2019-06-30T01:54:03.000Z</published>
    <updated>2019-12-14T03:09:39.706Z</updated>
    
    <content type="html"><![CDATA[<p>在 JAVA 语言这个圈子里面摸爬滚打，除了对于语言层面和框架层面的学习之外，有一些东西它一直存在，但是确没有对它们有足够的重视，因为都觉得它是理所当然，比如 JAR 是个什么？</p><p>提到 JAR，最先可能想到的就是依赖，比如 fastjson.jar ，它可以作为依赖在项目中来引用，但是不能通过 java -jar 来执行，这种就是非可执行的 JAR。另外一种，比如我们项目打包之后生成的 JAR （当然也可能是 war），我们可以通过 java -jar 来运行程序，我们把它称之为可执行的 JAR。</p><p>JAR 作用大体可以分为以下几种：</p><ul><li>用于发布和使用类库</li><li>作为应用程序和扩展的构建单元</li><li>作为组件、applet 或者插件程序的部署单位</li><li>用于打包与组件相关联的辅助资源</li></ul><h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><p>JAR 文件是一种归档文件，以 ZIP 格式构建，以 .jar 为文件扩展名。用户可以使用 JDK 自带的 jar 命令创建或提取 JAR 文件。也可以使用其他 zip 压缩工具，不过压缩时 zip 文件头里的条目顺序很重要，因为 MANIFEST 文件常需放在首位。JAR 文件内的文件名是 Unicode 文本。</p><p>JAR 文件（Java 归档，英语：Java Archive）是一种软件包文件格式，通常用于聚合大量的 Java 类文件、相关的元数据和资源（文本、图片等）文件到一个文件，以便分发 Java 平台应用软件或库。</p><blockquote><p>以上来自维基百科 </p></blockquote><p>JAR 文件格式提供了许多优势和功能，其中很多是传统的压缩格式如 ZIP 或者 TAR 所没有提供的。它们包括：</p><ul><li>安全性：可以对 JAR 文件内容加上数字化签名。这样，能够识别签名的工具就可以有选择地为您授予软件安全特权，这是其他文件做不到的，它还可以检测代码是否被篡改过。</li><li>减少下载时间：如果一个 applet 捆绑到一个 JAR 文件中，那么浏览器就可以在一个 HTTP 事务中下载这个 applet 的类文件和相关的资源，而不是对每一个文件打开一个新连接。</li><li>压缩：JAR 格式允许您压缩文件以提高存储效率。</li><li>传输平台扩展。Java 扩展框架 (Java Extensions Framework) 提供了向 Java 核心平台添加功能的方法，这些扩展是用 JAR 文件打包的 (Java 3D 和 JavaMail 就是由 Sun 开发的扩展例子 )。</li><li>包密封：存储在 JAR 文件中的包可以选择进行 密封，以增强版本一致性和安全性。密封一个包意味着包中的所有类都必须在同一 JAR 文件中找到。</li><li>包版本控制：一个 JAR 文件可以包含有关它所包含的文件的数据，如厂商和版本信息。</li><li>可移植性：处理 JAR 文件的机制是 Java 平台核心 API 的标准部分。</li></ul><h2 id="JAR-文件格式"><a href="#JAR-文件格式" class="headerlink" title="JAR 文件格式"></a>JAR 文件格式</h2><p>这里分别给出两个 JAR 的解压之后的示例</p><h3 id="普通的-JAR-解压之后的文件目录"><a href="#普通的-JAR-解压之后的文件目录" class="headerlink" title="普通的 JAR 解压之后的文件目录"></a>普通的 JAR 解压之后的文件目录</h3><p>以 fastjson 为例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">├── META-INF</span><br><span class="line">│   ├── LICENSE.txt</span><br><span class="line">│   ├── MANIFEST.MF</span><br><span class="line">│   ├── NOTICE.txt</span><br><span class="line">│   ├── maven</span><br><span class="line">│   │   └── com.alibaba</span><br><span class="line">│   │       └── fastjson</span><br><span class="line">│   │           ├── pom.properties</span><br><span class="line">│   │           └── pom.xml</span><br><span class="line">│   └── services</span><br><span class="line">│       ├── javax.ws.rs.ext.MessageBodyReader</span><br><span class="line">│       ├── javax.ws.rs.ext.MessageBodyWriter</span><br><span class="line">│       ├── javax.ws.rs.ext.Providers</span><br><span class="line">│       └── org.glassfish.jersey.internal.spi.AutoDiscoverable</span><br><span class="line">└── com</span><br><span class="line">    └── alibaba</span><br><span class="line">        └── fastjson</span><br><span class="line">            ├── JSON.class</span><br><span class="line">            ├── JSONArray.class</span><br><span class="line">            ├── JSONAware.class</span><br><span class="line">            ├── JSONException.class</span><br><span class="line">            ├── JSONObject.class</span><br><span class="line">            ....省略</span><br></pre></td></tr></table></figure></p><h3 id="可执行的-jar-以-SpringBoot-的-FAT-JAR-为例）"><a href="#可执行的-jar-以-SpringBoot-的-FAT-JAR-为例）" class="headerlink" title="可执行的 jar (以 SpringBoot 的 FAT JAR 为例）"></a>可执行的 jar (以 SpringBoot 的 FAT JAR 为例）</h3><p>这个 jar 是从 start.spring.io 上下载下来的一个最简单的 demo 打包来的</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line">├── BOOT-INF</span><br><span class="line">│   ├── classes</span><br><span class="line">│   │   ├── application.properties</span><br><span class="line">│   │   └── com</span><br><span class="line">│   │       └── example   # 应用的.class 文件目录</span><br><span class="line">│   │           └── demo</span><br><span class="line">│   │               └── DemoApplication.class</span><br><span class="line">│   └── lib # 这里存放的是应用的 Maven 依赖的jar包文件</span><br><span class="line">│       ├── javax.annotation-api-1.3.2.jar</span><br><span class="line">│       ├── jul-to-slf4j-1.7.26.jar</span><br><span class="line">│       ├── log4j-api-2.11.2.jar</span><br><span class="line">│       ├── log4j-to-slf4j-2.11.2.jar</span><br><span class="line">│       ├── logback-classic-1.2.3.jar</span><br><span class="line">│       ├── logback-core-1.2.3.jar</span><br><span class="line">│       ├── slf4j-api-1.7.26.jar</span><br><span class="line">│       ├── snakeyaml-1.23.jar</span><br><span class="line">│       ├── spring-aop-5.1.8.RELEASE.jar</span><br><span class="line">│       ├── spring-beans-5.1.8.RELEASE.jar</span><br><span class="line">│       ├── spring-boot-2.1.6.RELEASE.jar</span><br><span class="line">│       ├── spring-boot-autoconfigure-2.1.6.RELEASE.jar</span><br><span class="line">│       ├── spring-boot-starter-2.1.6.RELEASE.jar</span><br><span class="line">│       ├── spring-boot-starter-logging-2.1.6.RELEASE.jar</span><br><span class="line">│       ├── spring-context-5.1.8.RELEASE.jar</span><br><span class="line">│       ├── spring-core-5.1.8.RELEASE.jar</span><br><span class="line">│       ├── spring-expression-5.1.8.RELEASE.jar</span><br><span class="line">│       └── spring-jcl-5.1.8.RELEASE.jar</span><br><span class="line">├── META-INF</span><br><span class="line">│   ├── MANIFEST.MF</span><br><span class="line">│   └── maven</span><br><span class="line">│       └── com.example</span><br><span class="line">│           └── demo</span><br><span class="line">│               ├── pom.properties</span><br><span class="line">│               └── pom.xml</span><br><span class="line">└── org</span><br><span class="line">    └── springframework</span><br><span class="line">        └── boot</span><br><span class="line">            └── loader #存放的是 Spring boot loader 的 class 文件</span><br><span class="line">                ├── ExecutableArchiveLauncher.class</span><br><span class="line">                ├── JarLauncher.class</span><br><span class="line">                ├── LaunchedURLClassLoader$UseFastConnectionExceptionsEnumeration.class</span><br><span class="line">                ├── LaunchedURLClassLoader.class</span><br><span class="line">                ├── Launcher.class</span><br><span class="line">                ├── MainMethodRunner.class</span><br><span class="line">                ├── PropertiesLauncher$1.class</span><br><span class="line">                ├── PropertiesLauncher$ArchiveEntryFilter.class</span><br><span class="line">                ├── PropertiesLauncher$PrefixMatchingArchiveFilter.class</span><br><span class="line">                ├── PropertiesLauncher.class</span><br><span class="line">                ├── WarLauncher.class</span><br><span class="line">                ├── archive</span><br><span class="line">                │   ├── Archive$Entry.class</span><br><span class="line">                │   ├── ...</span><br><span class="line">                ├── data</span><br><span class="line">                │   ├── RandomAccessData.class</span><br><span class="line">                │   ├── ...</span><br><span class="line">                ├── jar</span><br><span class="line">                │   ├── AsciiBytes.class</span><br><span class="line">                │   ├── ...</span><br><span class="line">                └── util</span><br><span class="line">                    └── SystemPropertyUtils.class</span><br></pre></td></tr></table></figure><h2 id="META-INF"><a href="#META-INF" class="headerlink" title="META-INF"></a>META-INF</h2><p>大多数 JAR 文件包含一个 META-INF 目录，它用于存储包和扩展的配置数据，如安全性和版本信息。Java 2 平台（标准版【J2SE】）识别并解释 META-INF 目录中的下述文件和目录，以便配置应用程序、扩展和类装载器：</p><ul><li>MANIFEST.MF：这个 manifest 文件定义了与扩展和包相关的数据。</li><li>通过 MAVEN 插件打包进来的文件比如：<ul><li>maven</li><li>services ： 存储所有服务提供程序配置文件</li></ul></li><li>其他的还有一些不常看到的：<ul><li>INDEX.LIST ：这个文件由 jar工具的新选项 -i生成，它包含在应用程序或者扩展中定义的包的位置信息。它是 JarIndex 实现的一部分，并由类装载器用于加速类装载过程。 </li><li>.SF：这是 JAR 文件的签名文件</li><li>.DSA：与签名文件相关联的签名程序块文件，它存储了用于签名 JAR 文件的公共签名。</li><li>LICENSE.txt ：证书信息</li><li>NOTICE.txt ： 公告信息</li></ul></li></ul><h2 id="可执行的-JAR"><a href="#可执行的-JAR" class="headerlink" title="可执行的 JAR"></a>可执行的 JAR</h2><p> 可以执行的 JAR 与 普通的 JAR 最直接的区别就是能否通过 java -jar 来执行。</p><blockquote><p>一个 可执行的 jar文件是一个自包含的 Java 应用程序，它存储在特别配置的 JAR 文件中，可以由 JVM 直接执行它而无需事先提取文件或者设置类路径。要运行存储在非可执行的 JAR 中的应用程序，必须将它加入到您的类路径中，并用名字调用应用程序的主类。但是使用可执行的 JAR 文件，我们可以不用提取它或者知道主要入口点就可以运行一个应用程序。可执行 JAR 有助于方便发布和执行 Java 应用程序</p></blockquote><p> 一个可执行的 JAR 必须通过 menifest 文件的头引用它所需要的所有其他从属 JAR。如果使用了 -jar选项，那么环境变量 CLASSPATH 和在命令行中指定的所有类路径都被 JVM 所忽略。</p><h3 id="MANIFEST-MF-文件"><a href="#MANIFEST-MF-文件" class="headerlink" title="MANIFEST.MF 文件"></a>MANIFEST.MF 文件</h3><p>当我们用 JAR 命令打完包后，会在根目录下面创建 META-INF 目录，该目录下面会有一些对该 JAR 包信息的描述，其中肯定会有一个 MANIFEST.MF 文件，该文件包含了该 JAR 包的版本、创建人和类搜索路径等信息。</p><ul><li><p>FASTJSON jar 中的 MANIFEST.MF 文件</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Manifest-Version: 1.0              # 用来定义manifest文件的版本</span><br><span class="line">Archiver-Version: Plexus Archiver  # 详见 http://codehaus-plexus.github.io/plexus-archiver/</span><br><span class="line">Built-By: wenshao                  # 构建者</span><br><span class="line">Created-By: Apache Maven 3.5.0  #  # 声明该文件的生成者，一般该属性是由 jar 命令行工具生成的</span><br><span class="line">Build-Jdk: 1.8.0_162               # 基于构建的 JDK 版本</span><br></pre></td></tr></table></figure></li><li><p>SpringBoot demo 的 MANIFEST.MF 文件</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Manifest-Version: 1.0</span><br><span class="line">Implementation-Title: demo                     # 定义了扩展实现的标题</span><br><span class="line">Implementation-Version: 0.0.1-SNAPSHOT         # 定义扩展实现的版本</span><br><span class="line">Start-Class: com.example.demo.DemoApplication  # 启动类</span><br><span class="line">Spring-Boot-Classes: BOOT-INF/classes/         # 编译之后的 class 文件目录</span><br><span class="line">Spring-Boot-Lib: BOOT-INF/lib/                 # 当前工程依赖的 jar 包目录</span><br><span class="line">Build-Jdk-Spec: 1.8                            # 指定的 JDK 版本</span><br><span class="line">Spring-Boot-Version: 2.1.6.RELEASE             # SpringBoot 版本</span><br><span class="line">Created-By: Maven Archiver 3.4.0             </span><br><span class="line">Main-Class: org.springframework.boot.loader.JarLauncher  # Main 函数</span><br></pre></td></tr></table></figure></li></ul><p>在 Java 平台中， MANIFEST 文件是 JAR 归档中所包含的特殊文件，MANIFEST 文件被用来定义扩展或文件打包相关数据。</p><p>MANIFEST 文件作为一个元数据文件，它包含了不同部分中的 k-v 对数据。</p><p>如果一个 JAR 文件被当作可执行文件，则其中的 MANIFEST 文件需要指出该程序的主类文件，如上面案例中的 SpringBoot demo 的那个 jar 中的MANIFEST 文件所示 </p><h3 id="MANIFEST-作用"><a href="#MANIFEST-作用" class="headerlink" title="MANIFEST 作用"></a>MANIFEST 作用</h3><p>从 MANIFEST 文件中提供的信息大概可以了解到其基本作用</p><ul><li>JAR 包基本信息描述</li><li>Main-Class 指定程序的入口，这样可以直接用java -jar xxx.jar来运行程序</li><li>Class-Path 指定jar包的依赖关系，class loader会依据这个路径来搜索class</li></ul><h3 id="获取-MANIFEST-MF"><a href="#获取-MANIFEST-MF" class="headerlink" title="获取 MANIFEST.MF"></a>获取 MANIFEST.MF</h3><p>JDK 中提供了可以获取 jar 包中 MANIFEST.MF 文件信息的工具，可以通过 java.util.jar 这个类库来获取。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">JarFile jar = <span class="keyword">new</span> JarFile(<span class="keyword">new</span> File(<span class="string">"/Users/glmapper/Documents/test/demo/target/demo-0.0.1-SNAPSHOT.jar"</span>));</span><br><span class="line">Manifest manifest = jar.getManifest();</span><br><span class="line">Attributes mainAttributes = manifest.getMainAttributes();</span><br><span class="line"><span class="keyword">for</span>(Map.Entry&lt;Object, Object&gt; attrEntry : mainAttributes.entrySet())&#123;</span><br><span class="line">    System.out.println(<span class="string">"main\t"</span>+attrEntry.getKey()+<span class="string">":"</span>+attrEntry.getValue());</span><br><span class="line">&#125;</span><br><span class="line">Map&lt;String, Attributes&gt; entries = manifest.getEntries();</span><br><span class="line"><span class="keyword">for</span>(Map.Entry&lt;String, Attributes&gt; entry : entries.entrySet()) &#123;</span><br><span class="line">    Attributes values = entry.getValue();</span><br><span class="line">    <span class="keyword">for</span> (Map.Entry&lt;Object, Object&gt; attrEntry : values.entrySet()) &#123;</span><br><span class="line">        System.out.println(attrEntry.getKey() + <span class="string">":"</span> + attrEntry.getValue());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行结果为：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">mainImplementation-Title:demo</span><br><span class="line">mainImplementation-Version:0.0.1-SNAPSHOT</span><br><span class="line">mainStart-Class:com.example.demo.DemoApplication</span><br><span class="line">mainSpring-Boot-Classes:BOOT-INF/classes/</span><br><span class="line">mainSpring-Boot-Lib:BOOT-INF/lib/</span><br><span class="line">mainBuild-Jdk-Spec:1.8</span><br><span class="line">mainSpring-Boot-Version:2.1.6.RELEASE</span><br><span class="line">mainCreated-By:Maven Archiver 3.4.0</span><br><span class="line">mainManifest-Version:1.0</span><br><span class="line">mainMain-Class:org.springframework.boot.loader.JarLauncher</span><br></pre></td></tr></table></figure></p><h2 id="Jar-文件和-Manifest-在-java-中的定义"><a href="#Jar-文件和-Manifest-在-java-中的定义" class="headerlink" title="Jar 文件和 Manifest 在 java 中的定义"></a>Jar 文件和 Manifest 在 java 中的定义</h2><p>下面为 JarFile 的定义，从代码就可以看出，前面我们所介绍的 Jar 是以 ZIP 格式构建一种归档文件，因为它是 ZipFile 的子类。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JarFile</span> <span class="keyword">extends</span> <span class="title">ZipFile</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> SoftReference&lt;Manifest&gt; manRef;</span><br><span class="line">    <span class="keyword">private</span> JarEntry manEntry;</span><br><span class="line">    <span class="keyword">private</span> JarVerifier jv;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> jvInitialized;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> verify;</span><br><span class="line">    <span class="comment">//指示是否存在Class-Path属性（仅当hasCheckedSpecialAttributes为true时才有效）</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> hasClassPathAttribute;</span><br><span class="line">    <span class="comment">// 如果清单检查特殊属性，则为 true</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">boolean</span> hasCheckedSpecialAttributes;</span><br><span class="line">    <span class="comment">// 在SharedSecrets中设置JavaUtilJarAccess</span></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        SharedSecrets.setJavaUtilJarAccess(<span class="keyword">new</span> JavaUtilJarAccessImpl());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * The JAR manifest file name.（JAR清单文件名）</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String MANIFEST_NAME = <span class="string">"META-INF/MANIFEST.MF"</span>;</span><br><span class="line">    <span class="comment">// 省略其他</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>下面是 Manifest 类的定义，用来描述 JAR 的 清单文件。从其属性中也很好的观察到，其存储的就是 K-V 键值对数据。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Manifest</span> <span class="keyword">implements</span> <span class="title">Cloneable</span> </span>&#123;</span><br><span class="line">    <span class="comment">// manifest main attributes</span></span><br><span class="line">    <span class="keyword">private</span> Attributes attr = <span class="keyword">new</span> Attributes();</span><br><span class="line">    <span class="comment">// manifest entries</span></span><br><span class="line">    <span class="keyword">private</span> Map&lt;String, Attributes&gt; entries = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">    <span class="comment">// 省略其他</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>JAR 格式远远超出了一种压缩格式，它有许多可以改进效率、安全性和组织 Java 应用程序的功能。因为这些功能已经建立在核心平台 – 包括编译器和类装载器 – 中了，所以开发人员可以利用 JAR 文件格式的能力简化和改进开发和部署过程。</p><h2 id="附：常见的-jar工具用法"><a href="#附：常见的-jar工具用法" class="headerlink" title="附：常见的 jar工具用法"></a>附：常见的 jar工具用法</h2><table><thead><tr><th style="text-align:left">功能</th><th style="text-align:left">命令</th></tr></thead><tbody><tr><td style="text-align:left">用一个单独的文件创建一个 JAR 文件</td><td style="text-align:left">jar cf jar-file input-file…</td></tr><tr><td style="text-align:left">用一个目录创建一个 JAR 文件</td><td style="text-align:left">jar cf jar-file dir-name</td></tr><tr><td style="text-align:left">创建一个未压缩的 JAR 文件</td><td style="text-align:left">jar cf0 jar-file dir-name</td></tr><tr><td style="text-align:left">更新一个 JAR 文件</td><td style="text-align:left">jar uf jar-file input-file…</td></tr><tr><td style="text-align:left">查看一个 JAR 文件的内容</td><td style="text-align:left">jar tf jar-file</td></tr><tr><td style="text-align:left">提取一个 JAR 文件的内容</td><td style="text-align:left">jar xf jar-file</td></tr><tr><td style="text-align:left">从一个 JAR 文件中提取特定的文件</td><td style="text-align:left">jar xf jar-file archived-file…</td></tr><tr><td style="text-align:left">运行一个打包为可执行 JAR 文件的应用程序</td><td style="text-align:left">java -jar app.jar</td></tr></tbody></table><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://www.ibm.com/developerworks/cn/java/j-jar/index.html" target="_blank" rel="noopener">JAR 文件揭密</a></li><li><a href="https://zh.wikipedia.org/wiki/JAR_(%E6%96%87%E4%BB%B6%E6%A0%BC%E5%BC%8F" target="_blank" rel="noopener">JAR</a>)</li><li><a href="https://docs.oracle.com/javase/6/docs/technotes/guides/jar/jar.html" target="_blank" rel="noopener">JAR File Specification</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在 JAVA 语言这个圈子里面摸爬滚打，除了对于语言层面和框架层面的学习之外，有一些东西它一直存在，但是确没有对它们有足够的重视，因为都觉得它是理所当然，比如 JAR 是个什么？&lt;/p&gt;
&lt;p&gt;提到 JAR，最先可能想到的就是依赖，比如 fastjson.jar ，它可以作
      
    
    </summary>
    
      <category term="java 基础" scheme="http://www.glmapper.com/categories/java-%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="java" scheme="http://www.glmapper.com/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>并发编程-关于 CAS 的几个问题</title>
    <link href="http://www.glmapper.com/2019/04/29/cas-several-qa/"/>
    <id>http://www.glmapper.com/2019/04/29/cas-several-qa/</id>
    <published>2019-04-29T02:25:57.000Z</published>
    <updated>2019-04-29T02:28:01.035Z</updated>
    
    <content type="html"><![CDATA[<h2 id="CAS-相关基础知识"><a href="#CAS-相关基础知识" class="headerlink" title="CAS 相关基础知识"></a>CAS 相关基础知识</h2><p>CAS的全称是Compare And Swap ,即比较交换。CAS 中一般会设计到3个参数:</p><ul><li>内存值 V</li><li>旧的预期值A</li><li>要修改的新值B</li></ul><p>当且仅当预期值 A 和内存值 V 相同时，将内存值V修改为 B，否则什么都不做。</p><blockquote><p>这里关于 CPU 指令对于 CAS 的支持不深入研究,有兴趣的可以自行了解。</p></blockquote><h2 id="CAS-几个问题"><a href="#CAS-几个问题" class="headerlink" title="CAS 几个问题"></a>CAS 几个问题</h2><p>很多书籍和文章中都有提出它存在的几个问题：</p><ul><li>1、循环时间长开销很大</li><li>2、只能保证一个共享变量的原子操作</li><li>3、ABA 问题</li></ul><p>下面就这三个问题展开来聊一下。</p><h3 id="1、关于“循环时间长开销很大”的疑惑与验证"><a href="#1、关于“循环时间长开销很大”的疑惑与验证" class="headerlink" title="1、关于“循环时间长开销很大”的疑惑与验证"></a>1、关于“循环时间长开销很大”的疑惑与验证</h3><p>自旋 CAS 如果长时间不成功，会给 CPU 带来非常大的开销。但是真的是这样吗？到底多大的并发量才造成 CAS 的自旋次数会增加呢？另外，对于当前的机器及JDK，在无锁，无CAS 的情况下，是否对于结果的影响是真的那么明显呢？对于这个问题，下面做了一个简单的测试，但是测试结果也只是针对在我本地环境下，各位看官可以拉一下代码，在自己电脑上 run 一下，把机器信息、JDK版本以及测试结果留言到评论区。</p><blockquote><p>本文案例可以这里获取：<a href="https://github.com/glmapper/glmapper-blog-samples/tree/master/glmapper-blog-sample-cas" target="_blank" rel="noopener">glmapper-blog-sample-cas</a></p></blockquote><p>这里我是用了一个很简单的案例，就是整数自增。使用了两种方式去测试的，一种是无锁，也不用 CAS 操作，另外一种是基于 CAS 的方式。（关于加锁的方式没有验证，有时间再补充吧~）</p><h4 id="计数器类"><a href="#计数器类" class="headerlink" title="计数器类"></a>计数器类</h4><p>计数器里面有两个方法，一种是CAS 自旋方式，一种是直接自增。代码如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Counter</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> AtomicInteger safeCount = <span class="keyword">new</span> AtomicInteger(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> unsafe = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">// 使用自旋的方式</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">safeCount</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (;;)&#123;</span><br><span class="line">            <span class="keyword">int</span> i = safeCount.get();</span><br><span class="line">            <span class="keyword">boolean</span> success = safeCount.compareAndSet(i,++i);</span><br><span class="line">            <span class="keyword">if</span> (success)&#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 普通方式自增</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">unsafeCount</span><span class="params">()</span></span>&#123;</span><br><span class="line">        unsafe++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="模拟并发"><a href="#模拟并发" class="headerlink" title="模拟并发"></a>模拟并发</h4><p>这里我们模拟使用 1000 个线程，执行 30 次来看下结果，包括总耗时和结果的正确性。</p><ul><li><p>CAS 方式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">testSafe</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">    <span class="comment">// 记录开始时间</span></span><br><span class="line">    <span class="keyword">long</span> start = System.currentTimeMillis();</span><br><span class="line">    <span class="comment">// 实例化一个 Counter 计数器对象</span></span><br><span class="line">    Counter counter = <span class="keyword">new</span> Counter();</span><br><span class="line">    CountDownLatch countDownLatch = <span class="keyword">new</span> CountDownLatch(testCounts);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i =<span class="number">0</span> ;i &lt; testCounts;i++)&#123;</span><br><span class="line">        <span class="keyword">new</span> Thread(()-&gt;&#123;</span><br><span class="line">                <span class="comment">// 调用 safeCount 方法</span></span><br><span class="line">                counter. safeCount();</span><br><span class="line">                countDownLatch.countDown();</span><br><span class="line">        &#125;).start();</span><br><span class="line">    &#125;</span><br><span class="line">    countDownLatch.await();</span><br><span class="line">    <span class="comment">// 结束时间</span></span><br><span class="line">    <span class="keyword">long</span> end = System.currentTimeMillis();</span><br><span class="line">    safeTotalCostTime += (end-start);</span><br><span class="line">    <span class="keyword">return</span> counter.safeCount.get();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>普通方式</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">testUnSafe</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">    <span class="comment">// 记录开始时间</span></span><br><span class="line">    <span class="keyword">long</span> start = System.currentTimeMillis();</span><br><span class="line">    <span class="comment">// 实例化一个 Counter 计数器对象</span></span><br><span class="line">    Counter counter = <span class="keyword">new</span> Counter();</span><br><span class="line">    CountDownLatch countDownLatch = <span class="keyword">new</span> CountDownLatch(testCounts);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i =<span class="number">0</span> ;i&lt; testCounts;i++)&#123;</span><br><span class="line">        <span class="keyword">new</span> Thread(()-&gt;&#123;</span><br><span class="line">            <span class="comment">// 调用 unsafeCount 方法</span></span><br><span class="line">            counter.unsafeCount();</span><br><span class="line">            countDownLatch.countDown();</span><br><span class="line">        &#125;).start();</span><br><span class="line">    &#125;</span><br><span class="line">    countDownLatch.await();</span><br><span class="line">    <span class="comment">// 结束时间</span></span><br><span class="line">    <span class="keyword">long</span> end = System.currentTimeMillis();</span><br><span class="line">    unsafeTotalCostTime += (end-start);</span><br><span class="line">    <span class="keyword">return</span> counter.unsafe;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>main 方法</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">public static void main(String[] args) throws InterruptedException &#123;</span><br><span class="line">    // 执行 300 次</span><br><span class="line">    for (int i =0 ;i&lt; 300;i++)&#123;</span><br><span class="line">        // 普通方式</span><br><span class="line">        int unSafeResult = testUnSafe();</span><br><span class="line">        // cas 方式</span><br><span class="line">        int safeResult = testSafe();</span><br><span class="line">        // 结果验证，若果正确就将成功次数增加</span><br><span class="line">        if (unSafeResult == testCounts)&#123;</span><br><span class="line">            totalUnSafeCount++;</span><br><span class="line">        &#125;</span><br><span class="line">        // 同上</span><br><span class="line">        if (safeResult == testCounts)&#123;</span><br><span class="line">            totalSafeCount++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(&quot;test count = &quot; + testCounts);</span><br><span class="line">    System.out.println(&quot;非安全计数器正确个数 = &quot; + totalUnSafeCount);</span><br><span class="line">    System.out.println(&quot;非安全计数器耗时 = &quot; + unsafeTotalCostTime);</span><br><span class="line">    System.out.println(&quot;安全计数器正确个数 = &quot; + totalSafeCount);</span><br><span class="line">    System.out.println(&quot;安全计数器耗时 = &quot; + safeTotalCostTime);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我的机器信息如下：</p><ul><li>MacBook Pro (Retina, 15-inch, Mid 2015)</li><li>处理器：2.2 GHz Intel Core i7</li><li>内存：16 GB 1600 MHz DDR3</li></ul><p>下面是一些测试数据。</p><h4 id="1000-线程数-300-次数"><a href="#1000-线程数-300-次数" class="headerlink" title="1000(线程数) * 300(次数)"></a>1000(线程数) * 300(次数)</h4><p>测试结果如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">test count = 1000</span><br><span class="line">非安全计数器正确个数 = 300</span><br><span class="line">非安全计数器耗时 = 27193</span><br><span class="line">安全计数器正确个数 = 300</span><br><span class="line">安全计数器耗时 = 26337</span><br></pre></td></tr></table></figure></p><p>居然发现不使用 CAS 的方式居然比使用自旋 CAS 的耗时要高出将近 1s。另外一个意外的点，我尝试了好几次，不使用 CAS 的情况得到的结果正确率基本也是 4 个 9  以上的比率，极少数会出现计算结果错误的情况。</p><h4 id="3000-线程数-30-次数"><a href="#3000-线程数-30-次数" class="headerlink" title="3000(线程数) * 30(次数)"></a>3000(线程数) * 30(次数)</h4><p>测试结果如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">test count = 3000</span><br><span class="line">非安全计数器正确个数 = 30</span><br><span class="line">非安全计数器耗时 = 7816</span><br><span class="line">安全计数器正确个数 = 30</span><br><span class="line">安全计数器耗时 = 8073</span><br></pre></td></tr></table></figure></p><p>这里看到在耗时上已经很接近了。这里需要考虑另外一个可能影响的点是，因为 testUnSafe 是 testSafe 之前执行的，“JVM 和 机器本身热身” 影响耗时虽然很小，但是也存在一定的影响。</p><h4 id="5000-线程数-30-次数"><a href="#5000-线程数-30-次数" class="headerlink" title="5000(线程数) * 30(次数)"></a>5000(线程数) * 30(次数)</h4><p>测试结果如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">test count = 5000</span><br><span class="line">非安全计数器正确个数 = 30</span><br><span class="line">非安全计数器耗时 = 23213</span><br><span class="line">安全计数器正确个数 = 30</span><br><span class="line">安全计数器耗时 = 14161</span><br></pre></td></tr></table></figure></p><p>随着并发量的增加，这里奇怪的是，普通自增方式所消耗的时间要高于CAS方式消耗的时间将近 8-9s 。</p><p>当尝试 10000 次时，是的你没猜错，抛出了 OOM 。但是从执行的结果来看，并没有说随着并发量的增大，普通方式错误的概率会增加，也没有出现预想的 CAS 方式的耗时要比 普通模式耗时多。</p><blockquote><p>由于测试样本数据比较单一，对于测试结果没法做结论，欢迎大家将各自机器的结果提供出来，以供参考。另外就是，最近看到很多面试的同学，如果有被问道这个问题，还是需要谨慎考虑下。关于是否“打脸”还是“被打脸”还需要更多的测试结果。</p></blockquote><h3 id="CAS-到底是怎么操作的"><a href="#CAS-到底是怎么操作的" class="headerlink" title="CAS 到底是怎么操作的"></a>CAS 到底是怎么操作的</h3><ul><li>CPU 指令</li><li>Unsafe 类 </li></ul><h3 id="2、ABA-问题的简单复现"><a href="#2、ABA-问题的简单复现" class="headerlink" title="2、ABA 问题的简单复现"></a>2、ABA 问题的简单复现</h3><p>网上关于 CAS 讨论另外一个点就是 CAS 中的 ABA 问题，相信大多数同学在面试时如果被问到 CAS ，那么 ABA 问题也会被问到，然后接着就是怎么避免这个问题，是的套路就是这么一环扣一环的。</p><p>我相信 90% 以上的开发人员在实际的工程中是没有遇到过这个问题的，即使遇到过，在特定的情况下也是不会影响到计算结果。但是既然这个问题会被反复提到，那就一定有它导致 bug 的场景，找了一个案例供大家参考：<a href="https://blog.csdn.net/wufaliang003/article/details/78797203" target="_blank" rel="noopener">CAS下ABA问题及优化方案</a> 。</p><p>这里先不去考虑怎么去规避这个问题，我们想怎么去通过简单的模拟先来复现这个 ABA 问题。其实这个也很简单，如果你对线程交叉、顺序执行了解的话。</p><h3 id="如何实现多线程的交叉执行"><a href="#如何实现多线程的交叉执行" class="headerlink" title="如何实现多线程的交叉执行"></a>如何实现多线程的交叉执行</h3><p>这个点实际上也是一个在面试过程中很常见的一个基础问题，我在提供的代码中给了三种实现方式，有兴趣的同学可以拉代码看下。</p><p>下面以 lock 的方式来模拟下这个场景，代码如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConditionAlternateTest</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">// 计数器</span></span><br><span class="line">    <span class="keyword">public</span> AtomicInteger safeCount = <span class="keyword">new</span> AtomicInteger(<span class="number">0</span>);</span><br><span class="line">    <span class="comment">// lock</span></span><br><span class="line">    <span class="keyword">private</span> Lock lock = <span class="keyword">new</span> ReentrantLock();</span><br><span class="line">    <span class="comment">// condition 1/2/3 用于三个线程触发执行的条件</span></span><br><span class="line">    Condition c1 = lock.newCondition();</span><br><span class="line">    Condition c2 = lock.newCondition();</span><br><span class="line">    Condition c3 = lock.newCondition();</span><br><span class="line">    <span class="comment">// 模拟并发执行</span></span><br><span class="line">    CountDownLatch countDownLatch = <span class="keyword">new</span> CountDownLatch(<span class="number">1</span>);</span><br><span class="line">    <span class="comment">// 线程1 ，A </span></span><br><span class="line">    Thread t1 = <span class="keyword">new</span> Thread(()-&gt; &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            lock.lock();</span><br><span class="line">            <span class="keyword">while</span> (count % <span class="number">3</span> != <span class="number">0</span>)&#123;</span><br><span class="line">                c1.await();</span><br><span class="line">            &#125;</span><br><span class="line">            safeCount.compareAndSet(<span class="number">0</span>, <span class="number">1</span>);</span><br><span class="line">            System.out.println(<span class="string">"thread1:"</span>+safeCount.get());</span><br><span class="line">            count++;</span><br><span class="line">            <span class="comment">// 唤醒条件2</span></span><br><span class="line">            c2.signal();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            lock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">     <span class="comment">// 线程2 ，B </span></span><br><span class="line">    Thread t2 = <span class="keyword">new</span> Thread(()-&gt; &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            lock.lock();</span><br><span class="line">            <span class="keyword">while</span> (count % <span class="number">3</span> != <span class="number">1</span>)&#123;</span><br><span class="line">                c2.await();</span><br><span class="line">            &#125;</span><br><span class="line">            safeCount.compareAndSet(<span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">            System.out.println(<span class="string">"thread2:"</span>+safeCount.get());</span><br><span class="line">            count++;</span><br><span class="line">            <span class="comment">// 唤醒条件3</span></span><br><span class="line">            c3.signal();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            lock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="comment">// 线程2 ，A</span></span><br><span class="line">    Thread t3 = <span class="keyword">new</span> Thread(()-&gt; &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            lock.lock();</span><br><span class="line">            <span class="keyword">while</span> (count % <span class="number">3</span> != <span class="number">2</span>)&#123;</span><br><span class="line">                c3.await();</span><br><span class="line">            &#125;</span><br><span class="line">            safeCount.compareAndSet(<span class="number">0</span>, <span class="number">1</span>);</span><br><span class="line">            System.out.println(<span class="string">"thread3:"</span>+safeCount.get());</span><br><span class="line">            count++;</span><br><span class="line">            <span class="comment">// 唤醒条件1</span></span><br><span class="line">            c1.signal();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            lock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="comment">// 启动启动线程</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">threadStart</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        t3.start();</span><br><span class="line">        t1.start();</span><br><span class="line">        t2.start();</span><br><span class="line">        countDownLatch.countDown();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        ConditionAlternateTest test = <span class="keyword">new</span> ConditionAlternateTest();</span><br><span class="line">        test.threadStart();</span><br><span class="line">        test.countDownLatch.await();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>执行结果：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">thread1:<span class="number">1</span></span><br><span class="line">thread2:<span class="number">0</span></span><br><span class="line">thread3:<span class="number">1</span></span><br></pre></td></tr></table></figure><p>上面线程交叉的案例实际上并不是严格意义上的 ABA 问题的复现，这里仅是模拟下产生的一个最简单的过程。如果大家有好的案例，也可以分享一下。</p><h3 id="ABA-问题解决"><a href="#ABA-问题解决" class="headerlink" title="ABA 问题解决"></a>ABA 问题解决</h3><p>常见实践：“版本号”的比对，一个数据一个版本，版本变化，即使值相同，也不应该修改成功。</p><p>java 中提供了 AtomicStampedReference 这个类来解决这个 ABA 问题。<br>AtomicStampedReference 原子类是一个带有时间戳的对象引用，在每次修改后，AtomicStampedReference 不仅会设置新值而且还会记录更改的时间。当 AtomicStampedReference 设置对象值时，对象值以及时间戳都必须满足期望值才能写入成功，这也就解决了反复读写时，无法预知值是否已被修改的窘境。</p><p>实现代码这里就不贴了，基于前面的代码改造，下面贴一下运行结果：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">thread1,第一次修改;值为=1</span><br><span class="line">thread2,已经改回为原始值;值为=0</span><br><span class="line">thread3,第二次修改;值为=1</span><br></pre></td></tr></table></figure></p><h3 id="3、只能保证一个共享变量的原子操作"><a href="#3、只能保证一个共享变量的原子操作" class="headerlink" title="3、只能保证一个共享变量的原子操作"></a>3、只能保证一个共享变量的原子操作</h3><p>当对一个共享变量执行操作时，我们可以使用 CAS 的方式来保证原子操作，但是对于对多个变量操作时，循环 CAS 就无法保证操作的原子性了，那么这种场景下，我们就需要使用加锁的方式来解决。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;CAS-相关基础知识&quot;&gt;&lt;a href=&quot;#CAS-相关基础知识&quot; class=&quot;headerlink&quot; title=&quot;CAS 相关基础知识&quot;&gt;&lt;/a&gt;CAS 相关基础知识&lt;/h2&gt;&lt;p&gt;CAS的全称是Compare And Swap ,即比较交换。CAS 中一般
      
    
    </summary>
    
      <category term="java 基础" scheme="http://www.glmapper.com/categories/java-%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="java" scheme="http://www.glmapper.com/tags/java/"/>
    
      <category term="cas" scheme="http://www.glmapper.com/tags/cas/"/>
    
  </entry>
  
</feed>
