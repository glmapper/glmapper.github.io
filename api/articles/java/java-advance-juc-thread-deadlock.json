{"title":"怎么写一个死锁？","uid":"f1ca72d2339ef0d0df0ca0f7ea0b32bd","slug":"java/java-advance-juc-thread-deadlock","date":"2018-11-10T05:55:55.000Z","updated":"2024-07-05T04:09:05.762Z","comments":true,"path":"api/articles/java/java-advance-juc-thread-deadlock.json","keywords":null,"cover":[],"content":"<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>原文：<a href=\"https://juejin.cn/post/6844903520886325255\">https://juejin.cn/post/6844903520886325255</a></p></blockquote>\n<p>看着看着就想着怎么能写一个死锁呢，打开 eclipse，突然感觉无从下手；之前都是一直在解决阻塞、死锁这些问题，现在反过来去写一个死锁感觉有点莫名奇妙。。。</p>\n<p>ok, 写一个死锁就要有一种场景，并且满足死锁的条件。</p>\n<ul>\n<li>互斥条件：一个资源每次只能被一个进程使用。</li>\n<li>请求与保持条件：一个进程因请求资源而阻塞时，对已获得的资源保持不放</li>\n<li>不剥夺条件:进程已获得的资源，在末使用完之前，不能强行剥夺。</li>\n<li>循环等待条件:若干进程之间形成一种头尾相接的循环等待资源关系。</li>\n</ul>\n<span id=\"more\"></span>\n\n<p>首先要有竞争的资源，并且两个线程要同时都在等待对方释放资源。那我们先弄两个资源：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Object lock=<span class=\"keyword\">new</span> <span class=\"title class_\">Object</span>();</span><br><span class=\"line\">Object lock2=<span class=\"keyword\">new</span> <span class=\"title class_\">Object</span>();</span><br></pre></td></tr></table></figure>\n<p>然后有两个线程：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Tr1 tr1=<span class=\"keyword\">new</span> <span class=\"title class_\">Tr1</span>(lock, lock2);</span><br><span class=\"line\">Tr2 tr2=<span class=\"keyword\">new</span> <span class=\"title class_\">Tr2</span>(lock, lock2);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">Thread t1=<span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(tr1);</span><br><span class=\"line\">Thread t2=<span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(tr2);</span><br></pre></td></tr></table></figure>\n<p>启动：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">t1.start();</span><br><span class=\"line\">t2.start();</span><br></pre></td></tr></table></figure>\n<p>那么对于lock，lock2怎么再线程内部产生竞争关系呢？来看代码：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.glmapper.base.synchronize;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Tr1</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">Runnable</span> &#123;</span><br><span class=\"line\">\tObject lock;</span><br><span class=\"line\">\tObject lock2;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"title function_\">Tr1</span><span class=\"params\">(Object lock,Object lock2)</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">this</span>.lock= lock;</span><br><span class=\"line\">\t\t<span class=\"built_in\">this</span>.lock2= lock2;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">run</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">\t    <span class=\"comment\">//获取lock</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">synchronized</span> (lock) &#123;</span><br><span class=\"line\">\t\t\tSystem.out.println(Thread.currentThread().getName()+<span class=\"string\">&quot;获取了lock锁&quot;</span>);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t\t\t\tThread.sleep(<span class=\"number\">3000</span>);</span><br><span class=\"line\">\t\t\t&#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">//获取lock2</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">synchronized</span> (lock2) &#123;</span><br><span class=\"line\">\t\t\t\tSystem.out.println(Thread.currentThread().getName()+<span class=\"string\">&quot;获取了lock2锁&quot;</span>);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Tr2</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">Runnable</span> &#123;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tObject lock;</span><br><span class=\"line\">\tObject lock2;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"title function_\">Tr2</span><span class=\"params\">(Object lock,Object lock2)</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">this</span>.lock= lock;</span><br><span class=\"line\">\t\t<span class=\"built_in\">this</span>.lock2= lock2;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">run</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">\t    <span class=\"comment\">//获取lock2</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">synchronized</span> (lock2) &#123;</span><br><span class=\"line\">\t\t\tSystem.out.println(Thread.currentThread().getName()+<span class=\"string\">&quot;获取了lock2锁&quot;</span>);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t\t\t\tThread.sleep(<span class=\"number\">3000</span>);</span><br><span class=\"line\">\t\t\t&#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">//获取lock</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">synchronized</span> (lock) &#123;</span><br><span class=\"line\">\t\t\t\tSystem.out.println(Thread.currentThread().getName()+<span class=\"string\">&quot;获取了lock锁&quot;</span>);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>分析一下：当线程1获取lock时，线程2获取了lock2锁；然后线程1继续执行，到这里，</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">synchronized</span> (lock2) &#123;</span><br><span class=\"line\">\tSystem.out.println(Thread.currentThread().getName()+<span class=\"string\">&quot;获取了lock2锁&quot;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>此时需要获取到lock2这个锁，但是lock2现在被线程2持有；同时，线程2也开始执行到：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">synchronized</span> (lock) &#123;</span><br><span class=\"line\">\tSystem.out.println(Thread.currentThread().getName()+<span class=\"string\">&quot;获取了lock锁&quot;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>此时线程2也在尝试获取lock这把锁，但是lock又被线程1持有了。两个线程都在等待对方释放资源，造成了死锁。OK，完成了。。。<br><br>当我准备关机时，发现还在等呢？<br><img src=\"https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2017/12/11/16045832711bea87~tplv-t2oaga2asx-image.image\"><br>？？那为什么呢？？<br>我们开看下发生了什么….</p>\n<ul>\n<li>通过jps来看下我们程序进程<br><img src=\"https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2017/12/11/16045865f54208b5~tplv-t2oaga2asx-image.image\"></li>\n<li>使用jstack -l 【pid】 来看下信息</li>\n</ul>\n<p><img src=\"https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2017/12/11/16045874f9e2c635~tplv-t2oaga2asx-image.image\"><br>两个线程都处于BLOCKED状态了…,继续往下看<br><img src=\"https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2017/12/11/1604587202fa162d~tplv-t2oaga2asx-image.image\"><br>found 1 deadlock.如我们所愿，死锁发生了！</p>\n","text":" 原文：https://juejin.cn/post/6844903520886325255 看着看着就想着怎么能写一个死锁呢，打开 eclipse，突然感觉无...","permalink":"/post/java/java-advance-juc-thread-deadlock","photos":[],"count_time":{"symbolsCount":"2.3k","symbolsTime":"2 mins."},"categories":[{"name":"JAVA","slug":"JAVA","count":12,"path":"api/categories/JAVA.json"}],"tags":[{"name":"thread","slug":"thread","count":2,"path":"api/tags/thread.json"},{"name":"lock","slug":"lock","count":1,"path":"api/tags/lock.json"},{"name":"并发编程","slug":"并发编程","count":5,"path":"api/tags/并发编程.json"}],"toc":"","author":{"name":"glmapper","slug":"blog-author","avatar":"https://glmapper-blog.oss-cn-hangzhou.aliyuncs.com/common/favicon.ico","link":"/","description":"开放，开源，分享，共享","socials":{"github":"https://github.com/glmapper","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/2412872703","zhihu":"","csdn":"","juejin":"https://juejin.cn/user/3227821827961806","customs":{"sofastack":{"icon":"https://glmapper-blog.oss-cn-hangzhou.aliyuncs.com/common/sofastack.svg","link":"https://www.sofastack.tech/"}}}},"mapped":true,"hidden":false,"prev_post":{"title":"JUC·Executor 框架","uid":"ea749b0e098fcfc64d921f856c074bce","slug":"java/java-advance-juc-executor","date":"2018-11-10T06:16:22.000Z","updated":"2024-07-05T04:09:05.762Z","comments":true,"path":"api/articles/java/java-advance-juc-executor.json","keywords":null,"cover":[],"text":" 原文：https://juejin.cn/post/6844903560371503112 前言多线程和并发这两个东西真的是向往已久，总是有一种神秘的感觉，想...","permalink":"/post/java/java-advance-juc-executor","photos":[],"count_time":{"symbolsCount":"4.1k","symbolsTime":"4 mins."},"categories":[{"name":"JAVA","slug":"JAVA","count":12,"path":"api/categories/JAVA.json"}],"tags":[{"name":"并发编程","slug":"并发编程","count":5,"path":"api/tags/并发编程.json"},{"name":"JUC","slug":"JUC","count":3,"path":"api/tags/JUC.json"},{"name":"Executor","slug":"Executor","count":1,"path":"api/tags/Executor.json"}],"author":{"name":"glmapper","slug":"blog-author","avatar":"https://glmapper-blog.oss-cn-hangzhou.aliyuncs.com/common/favicon.ico","link":"/","description":"开放，开源，分享，共享","socials":{"github":"https://github.com/glmapper","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/2412872703","zhihu":"","csdn":"","juejin":"https://juejin.cn/user/3227821827961806","customs":{"sofastack":{"icon":"https://glmapper-blog.oss-cn-hangzhou.aliyuncs.com/common/sofastack.svg","link":"https://www.sofastack.tech/"}}}}},"next_post":{"title":"并发编程---进程、线程安全","uid":"9c34f2d9e4aaac9e5f4272c83ef2d6d2","slug":"java/java-advance-juc-thread-process","date":"2018-11-10T05:39:42.000Z","updated":"2024-07-05T04:09:05.763Z","comments":true,"path":"api/articles/java/java-advance-juc-thread-process.json","keywords":null,"cover":null,"text":" 原文：https://juejin.cn/post/6844903502154563597 在 java 中，所有的变量（实例字段，静态字段，构成数组的元素，...","permalink":"/post/java/java-advance-juc-thread-process","photos":[],"count_time":{"symbolsCount":"3.9k","symbolsTime":"4 mins."},"categories":[{"name":"JAVA","slug":"JAVA","count":12,"path":"api/categories/JAVA.json"}],"tags":[{"name":"thread","slug":"thread","count":2,"path":"api/tags/thread.json"},{"name":"并发编程","slug":"并发编程","count":5,"path":"api/tags/并发编程.json"}],"author":{"name":"glmapper","slug":"blog-author","avatar":"https://glmapper-blog.oss-cn-hangzhou.aliyuncs.com/common/favicon.ico","link":"/","description":"开放，开源，分享，共享","socials":{"github":"https://github.com/glmapper","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/2412872703","zhihu":"","csdn":"","juejin":"https://juejin.cn/user/3227821827961806","customs":{"sofastack":{"icon":"https://glmapper-blog.oss-cn-hangzhou.aliyuncs.com/common/sofastack.svg","link":"https://www.sofastack.tech/"}}}}}}