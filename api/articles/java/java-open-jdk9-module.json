{"title":"New Features Of JDK - JDK9 Modular System","uid":"679bdcba368529704928bcc9f610db76","slug":"java/java-open-jdk9-module","date":"2022-12-04T07:45:44.000Z","updated":"2024-07-05T04:09:05.764Z","comments":true,"path":"api/articles/java/java-open-jdk9-module.json","keywords":"宋国磊, glmapper, 卫恒, 分享, 开源","cover":null,"content":"<p>Modular System 是 JAVA9 中提供的新特性，它从一个独立的开源项目而来，名为 <a href=\"https://openjdk.org/projects/jigsaw/\">Jigsaw Project</a>。在此之前，我们对于 Java 技术栈中模块化的认知是基于 OSGI 的，实际上 OSGI 也确实形成了它自己独有的体系，并且是一定程度上的行业标准。</p>\n<span id=\"more\"></span>\n\n<h2 id=\"JAVA-模块化发展\"><a href=\"#JAVA-模块化发展\" class=\"headerlink\" title=\"JAVA 模块化发展\"></a>JAVA 模块化发展</h2><p>JAVA 从没有停止过在模块化事情上的努力，比如 <a href=\"https://jcp.org/en/jsr/detail?id=294\">JSR 294</a> 提出的 superpackages，<a href=\"https://jcp.org/en/jsr/detail?id=277\">JSR 277</a> 中的 Java Module System（后来被 <a href=\"https://jcp.org/en/jsr/detail?id=376\">JSR 376</a> 替换掉了）；直到 Jigsaw 这个原型项目的出现，这个原本计划在 Java7 一起交付的功能，也一直被推迟到 Java9 才提供出来；作为原型项目，Jigsaw 提供了 JPMS（Java Platform Module System） 规范的参考实现。</p>\n<p>另一个是独立于 Java 社区发展的 OGSI。到目前为止，OSGi 已经发展超过 20 年，OSGi 是应用程序模块化的事实标准。一方面 OGSI 不是 Java 平台的直接组成部分，所以它不会影响平台本身的模块化发展，另一个重要的因素则是 <strong>OSGi 使用的是类加载器实现的模块化隔离，这与 Jigsaw 基于可访问性规则实现的隔离机制完全不同。</strong></p>\n<p>话说回来，为什么模块化会如此的重要呢？</p>\n<p>首先是 JAVA 自身的不断臃肿，从 JAVA 1.1 的小于 10M 到 JAVA 8 的 200M+，不管是安装占用空间还是内存要求都有相应增加，这个增加虽说是由新功能的迭代带来的，并且这些新功能中的绝大部分是受欢迎的；但是换个角度说，每一项新功能都会为不需要它的用户造成膨胀，可以肯定的是，不会有哪个工程师或者哪个团队会使用到 Java 提供的所有能力(比如你做 web 项目，还不得不带上 swing)。</p>\n<p>另一点，也是 OSGI 能够发展的原因，依托类加载器来实现业务层面的隔离，并且具备动态载入的能力，这也使得 plugin 机制或者热加载机制能够有非常大的发挥空间。</p>\n<h2 id=\"Java-9-中的-Module-System\"><a href=\"#Java-9-中的-Module-System\" class=\"headerlink\" title=\"Java 9 中的 Module System\"></a>Java 9 中的 Module System</h2><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>模块化的前提是模块划分，JDK 自身也进行了模块化的处理，具体可以见 <a href=\"https://openjdk.org/jeps/200\">https://openjdk.org/jeps/200</a></p></blockquote>\n<p>Java 9 的 Module System 到底是什么？官方说法是：<strong>模块化在包之上增加了更高级别的聚合，它包括一组密切相关的包和资源以及一个新的模块描述符文件</strong>。简单点说，它是一个 <code>Java 包的包</code> 抽象。</p>\n<p>目前 Module System 有 4 种类型的模块，如下表所示</p>\n<table>\n<thead>\n<tr>\n<th>类型</th>\n<th>说明</th>\n<th>备注</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>系统模块</td>\n<td>Java SE 和 JDK 模块，通过 <em>list-modules</em> 可以看到完整列表</td>\n<td>&#x2F;</td>\n</tr>\n<tr>\n<td>应用程序模块</td>\n<td>业务自己定义的模块</td>\n<td>&#x2F;</td>\n</tr>\n<tr>\n<td>自动模块</td>\n<td>当将非模块 jar 添加到模块路径时，会创建具有 jar 名称的模块</td>\n<td>1、默认导出所有包 2、默认情况下可以访问所有其他模块的类</td>\n</tr>\n<tr>\n<td>未命名模块</td>\n<td>当将 jar 或类添加到类路径时，所有这些类都会添加到未命名的模块中</td>\n<td>1、只导出到其他未命名的模块和自动模块。这意味着，应用程序模块无法访问这些类 2、它可以访问所有模块的类</td>\n</tr>\n</tbody></table>\n<p>下面我们通过一个小案例来直观的体验下模块化，也就是上表中的 <code>应用程序模块</code>。</p>\n<h2 id=\"模块案例\"><a href=\"#模块案例\" class=\"headerlink\" title=\"模块案例\"></a>模块案例</h2><p>这个案例中包含两个模块，glmapper.modules 模块用于导出自己的服务，test.modules 模块用来测试引用第一个模块。</p>\n<h3 id=\"模块1-glmapper-modules\"><a href=\"#模块1-glmapper-modules\" class=\"headerlink\" title=\"模块1 - glmapper.modules\"></a>模块1 - glmapper.modules</h3><ul>\n<li>创建项目文件夹</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir my-project</span><br><span class=\"line\">cd my-project</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>创建模块目录</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir my-module </span><br></pre></td></tr></table></figure>\n<ul>\n<li>在 my-module 目录下创建 <em>glmapper.modules</em> <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir glmapper.modules </span><br></pre></td></tr></table></figure></li>\n<li>在模块下创建 package<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">com.glmapper.bridge.boot</span><br></pre></td></tr></table></figure></li>\n<li>包中创建一个名为 <em>HelloModules.java</em>的新类<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.glmapper.bridge.boot;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">HelloModules</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">sayHello</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;Hello, Glmapper Modules!&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li>在<em>glmapper.modules</em>根目录中添加模块描述符 module-info.java<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">module</span> glmapper.modules &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 导出 com.glmapper.bridge.boot 包的所有公共成员</span></span><br><span class=\"line\">    <span class=\"keyword\">exports</span> com.glmapper.bridge.boot;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<p>此时的文件目录大致如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">└── my-module</span><br><span class=\"line\">    └── glmapper.modules</span><br><span class=\"line\">        ├── com</span><br><span class=\"line\">        │   └── glmapper</span><br><span class=\"line\">        │       └── bridge</span><br><span class=\"line\">        │           └── boot</span><br><span class=\"line\">        │               └── HelloModules.java</span><br><span class=\"line\">        └── module-info.java</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"模块2-test-modules\"><a href=\"#模块2-test-modules\" class=\"headerlink\" title=\"模块2 - test.modules\"></a>模块2 - test.modules</h3><ul>\n<li>在 my-module 下创建 test.modules 模块<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir test.modules</span><br></pre></td></tr></table></figure></li>\n<li>创建模块描述符文件 module-info.java<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">module</span> test.modules &#123;</span><br><span class=\"line\">    <span class=\"keyword\">requires</span> glmapper.modules;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li>创建 com.glmapper.bridge.main 包，并创建一个 TestMain.java 文件<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.glmapper.bridge.main;</span><br><span class=\"line\"><span class=\"comment\">// 导入 glmapper.modules 的类依赖</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> com.glmapper.bridge.boot.HelloModules;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">TestMain</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 调用依赖类的静态方法</span></span><br><span class=\"line\">        HelloModules.sayHello();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<p>此时的目录结构如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">└── my-module</span><br><span class=\"line\">    ├── glmapper.modules</span><br><span class=\"line\">    │   ├── com</span><br><span class=\"line\">    │   │   └── glmapper</span><br><span class=\"line\">    │   │       └── bridge</span><br><span class=\"line\">    │   │           └── boot</span><br><span class=\"line\">    │   │               └── HelloModules.java</span><br><span class=\"line\">    │   └── module-info.java</span><br><span class=\"line\">    └── test.modules</span><br><span class=\"line\">        ├── com</span><br><span class=\"line\">        │   └── glmapper</span><br><span class=\"line\">        │       └── bridge</span><br><span class=\"line\">        │           └── main</span><br><span class=\"line\">        │               └── TestMain.java</span><br><span class=\"line\">        └── module-info.java</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"构建运行模块\"><a href=\"#构建运行模块\" class=\"headerlink\" title=\"构建运行模块\"></a>构建运行模块</h3><ul>\n<li><p>构建模块()</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// modules 是构建产物的输出目录</span><br><span class=\"line\">javac -d modules --module-source-path my-module $(find my-module -name &quot;*.java&quot;)</span><br></pre></td></tr></table></figure></li>\n<li><p>构建之后的目录结构如下</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">├── modules // 构建产物所在的目录</span><br><span class=\"line\">│   ├── glmapper.modules</span><br><span class=\"line\">│   │   ├── com</span><br><span class=\"line\">│   │   │   └── glmapper</span><br><span class=\"line\">│   │   │       └── bridge</span><br><span class=\"line\">│   │   │           └── boot</span><br><span class=\"line\">│   │   │               └── HelloModules.class</span><br><span class=\"line\">│   │   └── module-info.class</span><br><span class=\"line\">│   └── test.modules</span><br><span class=\"line\">│       ├── com</span><br><span class=\"line\">│       │   └── glmapper</span><br><span class=\"line\">│       │       └── bridge</span><br><span class=\"line\">│       │           └── main</span><br><span class=\"line\">│       │               └── TestMain.class</span><br><span class=\"line\">│       └── module-info.class</span><br><span class=\"line\">└── my-module</span><br><span class=\"line\">    ├── glmapper.modules</span><br><span class=\"line\">    │   ├── com</span><br><span class=\"line\">    │   │   └── glmapper</span><br><span class=\"line\">    │   │       └── bridge</span><br><span class=\"line\">    │   │           └── boot</span><br><span class=\"line\">    │   │               └── HelloModules.java</span><br><span class=\"line\">    │   └── module-info.java</span><br><span class=\"line\">    └── test.modules</span><br><span class=\"line\">        ├── com</span><br><span class=\"line\">        │   └── glmapper</span><br><span class=\"line\">        │       └── bridge</span><br><span class=\"line\">        │           └── main</span><br><span class=\"line\">        │               └── TestMain.java</span><br><span class=\"line\">        └── module-info.java</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>运行代码</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 运行模块需要指定 模块路径和主类 </span><br><span class=\"line\">&gt; java --module-path modules -m test.modules/com.glmapper.bridge.main.TestMain</span><br><span class=\"line\">&gt; Hello, Glmapper Modules!</span><br></pre></td></tr></table></figure>\n<p>可以看到，我们得到了正确的结果。</p>\n</li>\n</ul>\n<p>那么我们再来测试一种场景，就是在 glmapper.modules 中不导出包，重新构建时得到的结果如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">my-module/test.modules/com/glmapper/bridge/main/TestMain.java:3: 错误: 程序包 </span><br><span class=\"line\">com.glmapper.bridge.boot 不可见</span><br><span class=\"line\">import com.glmapper.bridge.boot.HelloModules;</span><br><span class=\"line\">                          ^</span><br><span class=\"line\">  (程序包 com.glmapper.bridge.boot 已在模块 glmapper.modules 中声明, 但该模块未导出它)</span><br><span class=\"line\">1 个错误</span><br></pre></td></tr></table></figure>\n<p>可以看到，当编译 test.modules 时，会检测出它所依赖的模块中的 package 是否被导出，如果没有导出那么就无法通过编译。</p>\n<h3 id=\"接口使用\"><a href=\"#接口使用\" class=\"headerlink\" title=\"接口使用\"></a>接口使用</h3><p>上面案例中，为了便于测试，是在模块中提供了一个可访问的静态方法；下面我们继续改造，在 glmapper.modules 中提供 interface 以及 interface 的实现，并通过使用 <em>provides…with</em> 和 <em>uses</em> 指令来实现和 test.modules 模块的交互引用。</p>\n<ul>\n<li>在 glmapper.modules 中提供一个 HelloService 接口<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.glmapper.bridge.boot;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">HelloService</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title function_\">helloWorld</span><span class=\"params\">()</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li>HelloService 接口实现类 HelloServiceImpl<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.glmapper.bridge.boot.impl;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> com.glmapper.bridge.boot.HelloService;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">HelloServiceImpl</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">HelloService</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">helloWorld</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;Hello World...&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li>修改 glmapper.modules&#x2F;module-info.java<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">module</span> glmapper.modules &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 导出 com.glmapper.bridge.boot 包的所有公共成员</span></span><br><span class=\"line\">    <span class=\"keyword\">exports</span> com.glmapper.bridge.boot;</span><br><span class=\"line\">    provides com.glmapper.bridge.boot.HelloService with com.glmapper.bridge.boot.impl.HelloServiceImpl;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li>修改 test.modules&#x2F;module-info.java<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">module</span> test.modules &#123;</span><br><span class=\"line\">    <span class=\"keyword\">requires</span> glmapper.modules;</span><br><span class=\"line\">    uses com.glmapper.bridge.boot.HelloService;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li>修改 TestMain<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.glmapper.bridge.main;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> com.glmapper.bridge.boot.HelloModules;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.glmapper.bridge.boot.HelloService;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.glmapper.bridge.boot.impl.HelloServiceImpl;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.ServiceLoader;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">TestMain</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        HelloModules.sayHello();</span><br><span class=\"line\">        <span class=\"comment\">// 这里可以通过 ServiceLoader SPI 方式来调用的</span></span><br><span class=\"line\">        Iterable&lt;HelloService&gt; services = ServiceLoader.load(HelloService.class);</span><br><span class=\"line\">        <span class=\"type\">HelloService</span> <span class=\"variable\">service</span> <span class=\"operator\">=</span> services.iterator().next();</span><br><span class=\"line\">        service.helloWorld();</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">// 通过实例化对象调用</span></span><br><span class=\"line\">        <span class=\"type\">HelloService</span> <span class=\"variable\">helloService</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">HelloServiceImpl</span>();</span><br><span class=\"line\">        helloService.helloWorld();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li>重新编译并执行<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; java --module-path modules -m test.modules/com.glmapper.bridge.main.TestMain    </span><br><span class=\"line\">&gt; Hello, Glmapper Modules!</span><br><span class=\"line\">  Hello World...</span><br><span class=\"line\">  Hello World...</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"小坑\"><a href=\"#小坑\" class=\"headerlink\" title=\"小坑\"></a>小坑</h3><p> module-info.java 中导出包不能支持对其子包的导出</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">module glmapper.modules &#123;</span><br><span class=\"line\">    // 导出 com.glmapper.bridge.boot 包的所有公共成员</span><br><span class=\"line\">    exports com.glmapper.bridge.boot;</span><br><span class=\"line\">    // 这里需要 com.glmapper.bridge.boot.impl，否则 impl 子包中的内容对 test.modules 不可用</span><br><span class=\"line\">    exports com.glmapper.bridge.boot.impl;</span><br><span class=\"line\">    provides com.glmapper.bridge.boot.HelloService with</span><br><span class=\"line\">    com.glmapper.bridge.boot.impl.HelloServiceImpl;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>本文对 Java 模块化进行了介绍，通过本文你可以大体了解到 Java 模块化发展的基本情况，了解 Java 9 提供的模块化能力和 OSGI 模块化能力的差异。然后我通过一个案例向你介绍了 Java 模块化的基本使用方式，希望对你能够有所帮助。</p>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><p><a href=\"https://www.infoq.com/articles/java9-osgi-future-modularity/\">https://www.infoq.com/articles/java9-osgi-future-modularity/</a><br><a href=\"https://www.oracle.com/corporate/features/understanding-java-9-modules.html\">https://www.oracle.com/corporate/features/understanding-java-9-modules.html</a><br><a href=\"https://www.baeldung.com/java-9-modularity#3-module-descriptor\">https://www.baeldung.com/java-9-modularity#3-module-descriptor</a></p>\n","text":"Modular System 是 JAVA9 中提供的新特性，它从一个独立的开源项目而来，名为 Jigsaw Project。在此之前，我们对于 Java 技术...","permalink":"/post/java/java-open-jdk9-module","photos":[],"count_time":{"symbolsCount":"7.3k","symbolsTime":"7 mins."},"categories":[{"name":"JAVA","slug":"JAVA","count":12,"path":"api/categories/JAVA.json"}],"tags":[{"name":"openjdk","slug":"openjdk","count":1,"path":"api/tags/openjdk.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#JAVA-%E6%A8%A1%E5%9D%97%E5%8C%96%E5%8F%91%E5%B1%95\"><span class=\"toc-text\">JAVA 模块化发展</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Java-9-%E4%B8%AD%E7%9A%84-Module-System\"><span class=\"toc-text\">Java 9 中的 Module System</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%A8%A1%E5%9D%97%E6%A1%88%E4%BE%8B\"><span class=\"toc-text\">模块案例</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%A8%A1%E5%9D%971-glmapper-modules\"><span class=\"toc-text\">模块1 - glmapper.modules</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%A8%A1%E5%9D%972-test-modules\"><span class=\"toc-text\">模块2 - test.modules</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%9E%84%E5%BB%BA%E8%BF%90%E8%A1%8C%E6%A8%A1%E5%9D%97\"><span class=\"toc-text\">构建运行模块</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%8E%A5%E5%8F%A3%E4%BD%BF%E7%94%A8\"><span class=\"toc-text\">接口使用</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%B0%8F%E5%9D%91\"><span class=\"toc-text\">小坑</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%80%BB%E7%BB%93\"><span class=\"toc-text\">总结</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%8F%82%E8%80%83\"><span class=\"toc-text\">参考</span></a></li></ol>","author":{"name":"glmapper","slug":"blog-author","avatar":"https://glmapper-blog.oss-cn-hangzhou.aliyuncs.com/common/favicon.ico","link":"/","description":"开放，开源，分享，共享","socials":{"github":"https://github.com/glmapper","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/2412872703","zhihu":"","csdn":"","juejin":"https://juejin.cn/user/3227821827961806","customs":{"sofastack":{"icon":"https://glmapper-blog.oss-cn-hangzhou.aliyuncs.com/common/sofastack.svg","link":"https://www.sofastack.tech/"}}}},"mapped":true,"hidden":false,"prev_post":{"title":"K8S system OOM 和资源配置实践","uid":"6732a7abc9d37de3b0905738d2c701f5","slug":"solutions/solution-series-k8s-resources-request-limit","date":"2022-12-04T07:49:37.000Z","updated":"2024-07-05T04:09:05.811Z","comments":true,"path":"api/articles/solutions/solution-series-k8s-resources-request-limit.json","keywords":"宋国磊, glmapper, 卫恒, 分享, 开源","cover":null,"text":"背景我们目前服务是托管在 Aws K8S 的，近期出现了一次由于生产环境流量增大而导致的 system OOM 问题，进而导致了部分核心业务受损。在此之前，团队...","permalink":"/post/solutions/solution-series-k8s-resources-request-limit","photos":[],"count_time":{"symbolsCount":"1.9k","symbolsTime":"2 mins."},"categories":[{"name":"解决方案","slug":"解决方案","count":5,"path":"api/categories/解决方案.json"}],"tags":[{"name":"kubernetes","slug":"kubernetes","count":4,"path":"api/tags/kubernetes.json"}],"author":{"name":"glmapper","slug":"blog-author","avatar":"https://glmapper-blog.oss-cn-hangzhou.aliyuncs.com/common/favicon.ico","link":"/","description":"开放，开源，分享，共享","socials":{"github":"https://github.com/glmapper","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/2412872703","zhihu":"","csdn":"","juejin":"https://juejin.cn/user/3227821827961806","customs":{"sofastack":{"icon":"https://glmapper-blog.oss-cn-hangzhou.aliyuncs.com/common/sofastack.svg","link":"https://www.sofastack.tech/"}}}}},"next_post":{"title":"Mysql - 从一个小 case 理解 MVCC","uid":"6c139a1ec6733d215aeb28747f12a741","slug":"db/mysql-transaction-mvcc-case","date":"2022-11-12T03:23:22.000Z","updated":"2024-07-05T04:09:05.751Z","comments":true,"path":"api/articles/db/mysql-transaction-mvcc-case.json","keywords":"宋国磊, glmapper, 卫恒, 分享, 开源","cover":[],"text":" 原文链接： https://juejin.cn/post/7163934829984088095 从 innoDB 的一致性非锁定读说起非锁定读和行快照数据一...","permalink":"/post/db/mysql-transaction-mvcc-case","photos":[],"count_time":{"symbolsCount":"4.1k","symbolsTime":"4 mins."},"categories":[{"name":"数据库","slug":"数据库","count":1,"path":"api/categories/数据库.json"}],"tags":[{"name":"mysql","slug":"mysql","count":4,"path":"api/tags/mysql.json"},{"name":"mvcc","slug":"mvcc","count":1,"path":"api/tags/mvcc.json"}],"author":{"name":"glmapper","slug":"blog-author","avatar":"https://glmapper-blog.oss-cn-hangzhou.aliyuncs.com/common/favicon.ico","link":"/","description":"开放，开源，分享，共享","socials":{"github":"https://github.com/glmapper","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/2412872703","zhihu":"","csdn":"","juejin":"https://juejin.cn/user/3227821827961806","customs":{"sofastack":{"icon":"https://glmapper-blog.oss-cn-hangzhou.aliyuncs.com/common/sofastack.svg","link":"https://www.sofastack.tech/"}}}}}}