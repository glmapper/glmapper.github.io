{"title":"JUC·Executor 框架","uid":"ea749b0e098fcfc64d921f856c074bce","slug":"java/java-advance-juc-executor","date":"2018-11-10T06:16:22.000Z","updated":"2024-07-05T04:09:05.762Z","comments":true,"path":"api/articles/java/java-advance-juc-executor.json","keywords":null,"cover":[],"content":"<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>原文：<a href=\"https://juejin.cn/post/6844903560371503112\">https://juejin.cn/post/6844903560371503112</a></p></blockquote>\n<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>多线程和并发这两个东西真的是向往已久，总是有一种神秘的感觉，想去探索一波，又担心水平不够无法驾驭。想以读书笔记的方式来写，但是又觉得缺少自己的一些思考；但是在没有足够并发编程经验的情况下又没法去写出很深刻的东西，毕竟没有踩过坑。所以在阅读spring源码的同时，也想抽点时间来看一看JUC的东西，关于这块只能说是记录自己学习JUC的一个过程，尝试用一些具体的代码demo来加深理解。所以就把本系列写成《【 初识】-JUC·XXXX》，用来让自己打开并发编程的大门。</p>\n<span id=\"more\"></span>\n\n<h2 id=\"JUC\"><a href=\"#JUC\" class=\"headerlink\" title=\"JUC\"></a>JUC</h2><p>JUC即java.util.concurrent；也就是java提供的并发包。JUC中从包结构上来看主要是：</p>\n<ul>\n<li><p>java.util.concurrent</p>\n<p>  在这个包下面主要是线程池、并发集合以及一些并发工具类。线程池相关是围绕Excetor框架来构建；这也是本文下面部分的重点。</p>\n</li>\n<li><p>java.util.concurrent.atomic</p>\n<p>  这个包下面是一些原子操作类，算是并发辅助工具类，基本实现依赖于CAS；</p>\n</li>\n<li><p>java.util.concurrent.locks</p>\n<p>  这个从名字就可以知道它的作用，就是提供锁。</p>\n</li>\n</ul>\n<h2 id=\"JUC各个模块的类\"><a href=\"#JUC各个模块的类\" class=\"headerlink\" title=\"JUC各个模块的类\"></a>JUC各个模块的类</h2><ul>\n<li>整体框架</li>\n</ul>\n<p><img src=\"https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2018/2/6/16169e20a66c9495~tplv-t2oaga2asx-image.image\"></p>\n<ul>\n<li>atomic</li>\n</ul>\n<p><img src=\"https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2018/2/6/16169e2d7ef5a81d~tplv-t2oaga2asx-image.image\"></p>\n<ul>\n<li>locks</li>\n</ul>\n<p><img src=\"https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2018/2/6/16169e3528be1404~tplv-t2oaga2asx-image.image\"></p>\n<ul>\n<li>并发集合</li>\n</ul>\n<p><img src=\"https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2018/2/6/16169e3a4b53404b~tplv-t2oaga2asx-image.image\"></p>\n<ul>\n<li>并发工具</li>\n</ul>\n<p><img src=\"https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2018/2/6/16169e3eca541b38~tplv-t2oaga2asx-image.image\"></p>\n<ul>\n<li><p>forkJoin</p>\n<p>  fork-join在JUC中有下面三个类：</p>\n  <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ForkJoinPool</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">AbstractExecutorService</span></span><br></pre></td></tr></table></figure>\n  <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ForkJoinTask</span>&lt;V&gt; <span class=\"keyword\">implements</span> <span class=\"title class_\">Future</span>&lt;V&gt;, Serializable</span><br></pre></td></tr></table></figure>\n  <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ForkJoinWorkerThread</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">Thread</span></span><br></pre></td></tr></table></figure></li>\n</ul>\n<h2 id=\"Future\"><a href=\"#Future\" class=\"headerlink\" title=\"Future\"></a>Future</h2><p>Future提供了可以获取异步执行结果的方法，区别于Runnable的run方法，run是不提供返回结果的。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">Future</span>&lt;V&gt; &#123;</span><br><span class=\"line\">    <span class=\"comment\">//取消</span></span><br><span class=\"line\">    <span class=\"type\">boolean</span> <span class=\"title function_\">cancel</span><span class=\"params\">(<span class=\"type\">boolean</span> mayInterruptIfRunning)</span>;</span><br><span class=\"line\">    <span class=\"comment\">//如果任务完成前被取消，则返回true。</span></span><br><span class=\"line\">    <span class=\"type\">boolean</span> <span class=\"title function_\">isCancelled</span><span class=\"params\">()</span>;</span><br><span class=\"line\">    <span class=\"comment\">//如果任务执行结束，无论是正常结束或是中途取消还是发生异常，都返回true。</span></span><br><span class=\"line\">    <span class=\"type\">boolean</span> <span class=\"title function_\">isDone</span><span class=\"params\">()</span>;</span><br><span class=\"line\">    <span class=\"comment\">//获取异步执行的结果，如果没有结果可用，此方法会阻塞直到异步计算完成。</span></span><br><span class=\"line\">    V <span class=\"title function_\">get</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> InterruptedException, ExecutionException;</span><br><span class=\"line\">    <span class=\"comment\">//获取异步执行结果，如果没有结果可用，此方法会阻塞，但是会有时间限制，</span></span><br><span class=\"line\">    <span class=\"comment\">//如果阻塞时间超过设定的timeout时间，该方法将抛出异常。</span></span><br><span class=\"line\">    V <span class=\"title function_\">get</span><span class=\"params\">(<span class=\"type\">long</span> timeout, TimeUnit unit)</span> <span class=\"keyword\">throws</span> InterruptedException, </span><br><span class=\"line\">    ExecutionException, TimeoutException;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Callable\"><a href=\"#Callable\" class=\"headerlink\" title=\"Callable\"></a>Callable</h2><p>声明了一个名称为call()的方法，同时这个方法可以有返回值V，也可以抛出异常</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">Callable</span>&lt;V&gt; &#123; </span><br><span class=\"line\">  V   <span class=\"title function_\">call</span><span class=\"params\">()</span>   <span class=\"keyword\">throws</span> Exception; </span><br><span class=\"line\">&#125; </span><br></pre></td></tr></table></figure>\n\n<p>关于Callable和Future的使用一般情况下都是结合我们的线程池来使用的。</p>\n<h2 id=\"Executor\"><a href=\"#Executor\" class=\"headerlink\" title=\"Executor\"></a>Executor</h2><p>Executor接口是线程池实现的顶级接口，其和spring中的BeanFactory所承担的角色差不多，就是提供顶级的功能约束，具体实现交于不同子类来完成。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">Executor</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Executes the given command at some time in the future.  The command</span></span><br><span class=\"line\"><span class=\"comment\">     * may execute in a new thread, in a pooled thread, or in the calling</span></span><br><span class=\"line\"><span class=\"comment\">     * thread, at the discretion of the &lt;tt&gt;Executor&lt;/tt&gt; implementation.</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> command the runnable task</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@throws</span> RejectedExecutionException if this task cannot be</span></span><br><span class=\"line\"><span class=\"comment\">     * accepted for execution.</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@throws</span> NullPointerException if command is null</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title function_\">execute</span><span class=\"params\">(Runnable command)</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>下面是JUC中Executor框架的整体结构：</p>\n<p><img src=\"https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2018/2/6/16169fcf02873970~tplv-t2oaga2asx-image.image\"></p>\n<h2 id=\"ExecutorService\"><a href=\"#ExecutorService\" class=\"headerlink\" title=\"ExecutorService\"></a>ExecutorService</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">ExecutorService</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">Executor</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">//关闭线程池</span></span><br><span class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title function_\">shutdown</span><span class=\"params\">()</span>;</span><br><span class=\"line\">    </span><br><span class=\"line\">    List&lt;Runnable&gt; <span class=\"title function_\">shutdownNow</span><span class=\"params\">()</span>;</span><br><span class=\"line\">    <span class=\"comment\">//是否为Shutdown状态</span></span><br><span class=\"line\">    <span class=\"type\">boolean</span> <span class=\"title function_\">isShutdown</span><span class=\"params\">()</span>;</span><br><span class=\"line\">    <span class=\"comment\">//是否为Terminated状态</span></span><br><span class=\"line\">    <span class=\"type\">boolean</span> <span class=\"title function_\">isTerminated</span><span class=\"params\">()</span>;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//超过超时时间时，会监测ExecutorService是否已经关闭</span></span><br><span class=\"line\">    <span class=\"comment\">//若关闭则返回true，否则返回false。</span></span><br><span class=\"line\">    <span class=\"comment\">//一般情况下会和shutdown方法组合使用。</span></span><br><span class=\"line\">    <span class=\"type\">boolean</span> <span class=\"title function_\">awaitTermination</span><span class=\"params\">(<span class=\"type\">long</span> timeout, TimeUnit unit)</span></span><br><span class=\"line\">        <span class=\"keyword\">throws</span> InterruptedException;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//返回一个Future对象，参数接收的是一个Callable的实现</span></span><br><span class=\"line\">    <span class=\"comment\">//Callable接口中的call()方法有一个返回值，可以返回任务的执行结果</span></span><br><span class=\"line\">    <span class=\"comment\">//区别于Runnable接口中的run()方法（void修饰，没有返回值）。</span></span><br><span class=\"line\">    &lt;T&gt; Future&lt;T&gt; <span class=\"title function_\">submit</span><span class=\"params\">(Callable&lt;T&gt; task)</span>;</span><br><span class=\"line\">    </span><br><span class=\"line\">    &lt;T&gt; Future&lt;T&gt; <span class=\"title function_\">submit</span><span class=\"params\">(Runnable task, T result)</span>;</span><br><span class=\"line\">    <span class=\"comment\">//返回一个Future对象，通过返回的Future对象，我们可以检查提交的任务是否执行完成了。 </span></span><br><span class=\"line\">    Future&lt;?&gt; submit(Runnable task);</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//返回一个Future的List，其中对应着每个Callable任务执行后的Future对象。</span></span><br><span class=\"line\">    &lt;T&gt; List&lt;Future&lt;T&gt;&gt; <span class=\"title function_\">invokeAll</span><span class=\"params\">(Collection&lt;? extends Callable&lt;T&gt;&gt; tasks)</span></span><br><span class=\"line\">        <span class=\"keyword\">throws</span> InterruptedException;</span><br><span class=\"line\">    <span class=\"comment\">//增加了超时控制    </span></span><br><span class=\"line\">    &lt;T&gt; List&lt;Future&lt;T&gt;&gt; <span class=\"title function_\">invokeAll</span><span class=\"params\">(Collection&lt;? extends Callable&lt;T&gt;&gt; tasks,</span></span><br><span class=\"line\"><span class=\"params\">                                  <span class=\"type\">long</span> timeout, TimeUnit unit)</span></span><br><span class=\"line\">        <span class=\"keyword\">throws</span> InterruptedException;</span><br><span class=\"line\">        </span><br><span class=\"line\">        </span><br><span class=\"line\">    <span class=\"comment\">//接收参数是一个Callable的集合，</span></span><br><span class=\"line\">    <span class=\"comment\">//返回的是所有Callable集合任务中某一个任务的执行结果</span></span><br><span class=\"line\">    &lt;T&gt; T <span class=\"title function_\">invokeAny</span><span class=\"params\">(Collection&lt;? extends Callable&lt;T&gt;&gt; tasks)</span></span><br><span class=\"line\">        <span class=\"keyword\">throws</span> InterruptedException, ExecutionException;</span><br><span class=\"line\">    <span class=\"comment\">//增加了超时控制</span></span><br><span class=\"line\">    &lt;T&gt; T <span class=\"title function_\">invokeAny</span><span class=\"params\">(Collection&lt;? extends Callable&lt;T&gt;&gt; tasks,</span></span><br><span class=\"line\"><span class=\"params\">                    <span class=\"type\">long</span> timeout, TimeUnit unit)</span></span><br><span class=\"line\">        <span class=\"keyword\">throws</span> InterruptedException, ExecutionException, TimeoutException;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>ExecutorService 再Executor接口的基础上扩展了对线程池状态的控制以及提交任务执行的超时控制。线程池的基本功能还不够完善，不能真正的具备处理具体业务的能力（毕竟是个接口，O(∩_∩)O哈哈~）。</p>\n","text":" 原文：https://juejin.cn/post/6844903560371503112 前言多线程和并发这两个东西真的是向往已久，总是有一种神秘的感觉，想...","permalink":"/post/java/java-advance-juc-executor","photos":[],"count_time":{"symbolsCount":"4.1k","symbolsTime":"4 mins."},"categories":[{"name":"JAVA","slug":"JAVA","count":12,"path":"api/categories/JAVA.json"}],"tags":[{"name":"并发编程","slug":"并发编程","count":5,"path":"api/tags/并发编程.json"},{"name":"JUC","slug":"JUC","count":3,"path":"api/tags/JUC.json"},{"name":"Executor","slug":"Executor","count":1,"path":"api/tags/Executor.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%89%8D%E8%A8%80\"><span class=\"toc-text\">前言</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#JUC\"><span class=\"toc-text\">JUC</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#JUC%E5%90%84%E4%B8%AA%E6%A8%A1%E5%9D%97%E7%9A%84%E7%B1%BB\"><span class=\"toc-text\">JUC各个模块的类</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Future\"><span class=\"toc-text\">Future</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Callable\"><span class=\"toc-text\">Callable</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Executor\"><span class=\"toc-text\">Executor</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#ExecutorService\"><span class=\"toc-text\">ExecutorService</span></a></li></ol>","author":{"name":"glmapper","slug":"blog-author","avatar":"https://glmapper-blog.oss-cn-hangzhou.aliyuncs.com/common/favicon.ico","link":"/","description":"开放，开源，分享，共享","socials":{"github":"https://github.com/glmapper","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/2412872703","zhihu":"","csdn":"","juejin":"https://juejin.cn/user/3227821827961806","customs":{"sofastack":{"icon":"https://glmapper-blog.oss-cn-hangzhou.aliyuncs.com/common/sofastack.svg","link":"https://www.sofastack.tech/"}}}},"mapped":true,"hidden":false,"prev_post":{"title":"看完这个不会配置 logback ，请你吃瓜！","uid":"ffd243d8ccdbdfb51e5fe7667716827d","slug":"middleware/middleware-log-logback-config","date":"2018-11-10T13:24:52.000Z","updated":"2024-07-05T04:09:05.789Z","comments":true,"path":"api/articles/middleware/middleware-log-logback-config.json","keywords":null,"cover":[],"text":" 原文: https://juejin.cn/post/6844903641535479821 之前在 日志？聊一聊 slf4j 这篇文章中聊了下 slf4j。...","permalink":"/post/middleware/middleware-log-logback-config","photos":[],"count_time":{"symbolsCount":"22k","symbolsTime":"20 mins."},"categories":[{"name":"Middleware","slug":"Middleware","count":13,"path":"api/categories/Middleware.json"}],"tags":[{"name":"log","slug":"log","count":5,"path":"api/tags/log.json"},{"name":"logback","slug":"logback","count":1,"path":"api/tags/logback.json"}],"author":{"name":"glmapper","slug":"blog-author","avatar":"https://glmapper-blog.oss-cn-hangzhou.aliyuncs.com/common/favicon.ico","link":"/","description":"开放，开源，分享，共享","socials":{"github":"https://github.com/glmapper","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/2412872703","zhihu":"","csdn":"","juejin":"https://juejin.cn/user/3227821827961806","customs":{"sofastack":{"icon":"https://glmapper-blog.oss-cn-hangzhou.aliyuncs.com/common/sofastack.svg","link":"https://www.sofastack.tech/"}}}}},"next_post":{"title":"怎么写一个死锁？","uid":"f1ca72d2339ef0d0df0ca0f7ea0b32bd","slug":"java/java-advance-juc-thread-deadlock","date":"2018-11-10T05:55:55.000Z","updated":"2024-07-05T04:09:05.762Z","comments":true,"path":"api/articles/java/java-advance-juc-thread-deadlock.json","keywords":null,"cover":[],"text":" 原文：https://juejin.cn/post/6844903520886325255 看着看着就想着怎么能写一个死锁呢，打开 eclipse，突然感觉无...","permalink":"/post/java/java-advance-juc-thread-deadlock","photos":[],"count_time":{"symbolsCount":"2.3k","symbolsTime":"2 mins."},"categories":[{"name":"JAVA","slug":"JAVA","count":12,"path":"api/categories/JAVA.json"}],"tags":[{"name":"thread","slug":"thread","count":2,"path":"api/tags/thread.json"},{"name":"lock","slug":"lock","count":1,"path":"api/tags/lock.json"},{"name":"并发编程","slug":"并发编程","count":5,"path":"api/tags/并发编程.json"}],"author":{"name":"glmapper","slug":"blog-author","avatar":"https://glmapper-blog.oss-cn-hangzhou.aliyuncs.com/common/favicon.ico","link":"/","description":"开放，开源，分享，共享","socials":{"github":"https://github.com/glmapper","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/2412872703","zhihu":"","csdn":"","juejin":"https://juejin.cn/user/3227821827961806","customs":{"sofastack":{"icon":"https://glmapper-blog.oss-cn-hangzhou.aliyuncs.com/common/sofastack.svg","link":"https://www.sofastack.tech/"}}}}}}