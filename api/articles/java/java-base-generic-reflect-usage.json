{"title":"一个朋友圈泛型问题引发的“案子”","uid":"d76bc5d4a8a8d04159939df448b6792a","slug":"java/java-base-generic-reflect-usage","date":"2017-11-26T05:11:42.000Z","updated":"2024-07-05T04:09:05.763Z","comments":true,"path":"api/articles/java/java-base-generic-reflect-usage.json","keywords":"宋国磊, glmapper, 卫恒, 分享, 开源","cover":null,"content":"<p><strong>昨天朋友圈问了一个问题：</strong></p>\n<p>对于下面的 list，何如在 list 添加一个 Integer 型整数？</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ArrayList&lt;String&gt; list = new ArrayList&lt;String&gt;();</span><br></pre></td></tr></table></figure>\n\n<span id=\"more\"></span>\n\n<p>有这样几种回答：</p>\n<ul>\n<li>1.不知道（非专业回答）</li>\n<li>2.硬塞（非专业回答）</li>\n<li>3.把String 改成Integer再添加（违背了问题初衷）</li>\n<li>4.把String改成Object，可以加任意类型（违背了问题初衷）</li>\n<li>5.String换成通配符</li>\n<li>6.反射</li>\n</ul>\n<p>对于 1、2 就不说了，属于搞事情的！3、4、5 三种方式违背了问题的初衷，如果可以改，那我们直接 new 三个 ArrayList 就可以了。6 反射，这个是无限接近的，那么这个和反射有什么关系呢？下来看下下面几个例子：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">    ArrayList list=<span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>();</span><br><span class=\"line\">    ArrayList&lt;String&gt; str_list=<span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;String&gt;();</span><br><span class=\"line\">    ArrayList&lt;Integer&gt; int_list=<span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;Integer&gt;();</span><br><span class=\"line\">    ArrayList&lt;Object&gt; obj_list=<span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;Object&gt;();</span><br><span class=\"line\">    <span class=\"comment\">//对象比较</span></span><br><span class=\"line\">    System.out.println(list == str_list);</span><br><span class=\"line\">    System.out.println(list == int_list);</span><br><span class=\"line\">    System.out.println(list == obj_list);</span><br><span class=\"line\">    <span class=\"comment\">//对象的运行时class比较</span></span><br><span class=\"line\">    System.out.println(list.getClass() == str_list.getClass());</span><br><span class=\"line\">    System.out.println(list.getClass() == int_list.getClass());</span><br><span class=\"line\">    System.out.println(list.getClass() == obj_list.getClass());</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>结果：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">false</span><br><span class=\"line\">false</span><br><span class=\"line\">false</span><br><span class=\"line\">true</span><br><span class=\"line\">true</span><br><span class=\"line\">true</span><br></pre></td></tr></table></figure>\n<p>其实上面三个很容易理解，不同对象在内存中的地址肯定是不同的，因此均为false;下面三个均为true?是的，确实为true,这就引出了朋友圈的那个问题。为什么不同的三个对象，他们的getClass是一样的，不应该是有三个不同的hashCode吗？这个其实就是<strong>泛型编译时和运行时的问题</strong>。<br>对于泛型来说，<strong>泛型只在编译阶段有效，编译之后，集合的泛型是去泛型化的；原因：由于JVM泛型的擦除机制，在运行时JVM是不知道泛型信息的</strong>。<br>因此：java集合中的泛型，是来约束用户的错误输入的，只在编译时有效；<br>在回到问题最初，我们怎么才能将一个Integer对像放入上面定义的list中呢？既然集合中的泛型是编译时有效的，那我我们就可以通过绕过编译的方式进行插入。那么如何绕过编译时的校验呢？答案就是用反射；我们知道JAVA反射机制是指：<br><strong>“在运行状态中，对于任意一个类，都能够知道这个类的所有属性和方法；对于任意一个对象，都能够调用它的任意方法和属性；这种动态获取信息以及动态调用对象方法的功能称为java语言的反射机制。</strong><br>OK，再来看程序：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ArrayList&lt;String&gt; str_list=<span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;String&gt;();</span><br><span class=\"line\"><span class=\"comment\">//获取类信息</span></span><br><span class=\"line\">Class c=str_list.getClass();</span><br><span class=\"line\"><span class=\"comment\">//获取add方法</span></span><br><span class=\"line\">Method m=c.getMethod(<span class=\"string\">&quot;add&quot;</span>, Object.class);</span><br><span class=\"line\"><span class=\"comment\">//运行时调用add方法</span></span><br><span class=\"line\">m.invoke(str_list, <span class=\"number\">20</span>);</span><br><span class=\"line\"><span class=\"comment\">//输出当前str_list</span></span><br><span class=\"line\">System.out.println(str_list);</span><br></pre></td></tr></table></figure>\n<p>结果：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[20]</span><br></pre></td></tr></table></figure>\n\n<p>从结果可以看出，我们完成了在 list 中添加 Integer 的任务。【泛型、反射、编译时、运行时】</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>大家周末愉快！</p></blockquote>\n","text":"昨天朋友圈问了一个问题： 对于下面的 list，何如在 list 添加一个 Integer 型整数？ 1ArrayList<String> list = new...","permalink":"/post/java/java-base-generic-reflect-usage","photos":[],"count_time":{"symbolsCount":"1.8k","symbolsTime":"2 mins."},"categories":[{"name":"JAVA","slug":"JAVA","count":12,"path":"api/categories/JAVA.json"}],"tags":[{"name":"泛型","slug":"泛型","count":2,"path":"api/tags/泛型.json"},{"name":"java","slug":"java","count":5,"path":"api/tags/java.json"},{"name":"反射","slug":"反射","count":1,"path":"api/tags/反射.json"}],"toc":"","author":{"name":"glmapper","slug":"blog-author","avatar":"https://glmapper-blog.oss-cn-hangzhou.aliyuncs.com/common/favicon.ico","link":"/","description":"开放，开源，分享，共享","socials":{"github":"https://github.com/glmapper","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/2412872703","zhihu":"","csdn":"","juejin":"https://juejin.cn/user/3227821827961806","customs":{"sofastack":{"icon":"https://glmapper-blog.oss-cn-hangzhou.aliyuncs.com/common/sofastack.svg","link":"https://www.sofastack.tech/"}}}},"mapped":true,"hidden":false,"prev_post":{"title":"Spring 源码系列-BeanWrapper","uid":"670500c2d4f523a72ee6e1b2edadead0","slug":"spring/spring-ioc-bean-wrapper","date":"2018-02-07T02:24:10.000Z","updated":"2024-07-05T04:09:05.817Z","comments":true,"path":"api/articles/spring/spring-ioc-bean-wrapper.json","keywords":"宋国磊, glmapper, 卫恒, 分享, 开源","cover":null,"text":"BeanWrapper 是 Spring 提供的一个用来操作javaBean 属性的工具，使用它可以直接修改一个对象的属性。 对于 bean 属性的操作，大家熟...","permalink":"/post/spring/spring-ioc-bean-wrapper","photos":[],"count_time":{"symbolsCount":"2.3k","symbolsTime":"2 mins."},"categories":[{"name":"spring","slug":"spring","count":15,"path":"api/categories/spring.json"}],"tags":[{"name":"spring","slug":"spring","count":11,"path":"api/tags/spring.json"},{"name":"依赖注入","slug":"依赖注入","count":3,"path":"api/tags/依赖注入.json"},{"name":"Ioc","slug":"Ioc","count":3,"path":"api/tags/Ioc.json"},{"name":"BeanWrapper","slug":"BeanWrapper","count":1,"path":"api/tags/BeanWrapper.json"}],"author":{"name":"glmapper","slug":"blog-author","avatar":"https://glmapper-blog.oss-cn-hangzhou.aliyuncs.com/common/favicon.ico","link":"/","description":"开放，开源，分享，共享","socials":{"github":"https://github.com/glmapper","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/2412872703","zhihu":"","csdn":"","juejin":"https://juejin.cn/user/3227821827961806","customs":{"sofastack":{"icon":"https://glmapper-blog.oss-cn-hangzhou.aliyuncs.com/common/sofastack.svg","link":"https://www.sofastack.tech/"}}}}},"next_post":{}}