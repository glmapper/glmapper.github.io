{"title":"测试 Test Double","uid":"9706f0d2ad5a1a3cd4e67af63c8aabab","slug":"tests/test-test-double","date":"2021-06-01T03:07:53.000Z","updated":"2024-07-05T04:09:05.845Z","comments":true,"path":"api/articles/tests/test-test-double.json","keywords":"宋国磊, glmapper, 卫恒, 分享, 开源","cover":[],"content":"<p>TestDouble 简单理解就是测试替身，在多数情况下，我们的系统能够正常运行，不仅仅依托系统本身，还需要依赖一些外部服务，比如其他系统提供的 http、rpc 服务，系统自身以来的像 redis 缓存服务或者 mysql 这类数据库服务。在微服务场景下，业务按照业务领域将一个系统拆分为多个系统，系统之间的交互不仅仅是简单的 A-&gt;B，可能是 A -&gt;B -&gt; C -&gt;D，对于编写单元测试的开发者来说，当我需要编写系统A 的测试用例时，不可能去构建完整的调用链路，那么在测试工程中，通常会以 “测试替身” 来解决外部依赖所带来的测试复杂性问题。</p>\n<span id=\"more\"></span>\n\n<table>\n<thead>\n<tr>\n<th>术语</th>\n<th>解释</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>SUT（System Under Test）</td>\n<td>被测系统</td>\n</tr>\n<tr>\n<td>DOC（depended-on component）</td>\n<td>第三方依赖组件</td>\n</tr>\n</tbody></table>\n<p>在进行单元测试时，使用 Test Double 最主要的目的就是减少被测试对象的依赖，使得测试更加单一，只需要关注在被测系统本身的一些测试场景；除此之外， Test Double 从某种角度来说，可以让测试案例执行的测试时间更短，运行也更稳定（替代了真实的外部依赖）。</p>\n<p>Test Double 和实际交付使用的实际对象还是存在本质差别的，所以在实际的测试过程中，不建议 Test Double 的过度使用，因为可能会造成测试场景和实际场景脱节。</p>\n<h2 id=\"测试替身类型\"><a href=\"#测试替身类型\" class=\"headerlink\" title=\"测试替身类型\"></a>测试替身类型</h2><p>测试替身主要包括以下几种类型：</p>\n<ol>\n<li>Dummy Object</li>\n<li>Test Stub</li>\n<li>Test Spy</li>\n<li>Mock Object</li>\n<li>Fake Object</li>\n</ol>\n<p><img src=\"https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/30308c7c1ff541b6a88d1ffbe1fafe3b~tplv-k3u1fbpfcp-watermark.image\" alt=\"image.png\"></p>\n<h3 id=\"Dummy-Object\"><a href=\"#Dummy-Object\" class=\"headerlink\" title=\"Dummy Object\"></a>Dummy Object</h3><p>虚拟对象，本质上不会对测试产生任何影响，实际上只作为类似参数填充类角色存在。</p>\n<h3 id=\"Test-Stub\"><a href=\"#Test-Stub\" class=\"headerlink\" title=\"Test Stub\"></a>Test Stub</h3><p>测试桩是用来接受SUT内部的间接输入(indirect inputs)，并返回特定的值给SUT。可以理解 Test Stub 是在SUT 内部打的一个桩，可以按照我们的要求返回特定的内容给 SUT，Test Stub 的交互完全在 SUT 内部，因此，它不会返回内容给测试案例，也不会对 SUT 内部的输入进行验证。</p>\n<p><img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/5727229c63514358b7ea4617d16c120d~tplv-k3u1fbpfcp-watermark.image\" alt=\"image.png\"></p>\n<p>Test Stub 是指一个完全代替待测系统依赖组件的对象，这个对象按照我们设计的输出与待测系统进行交互，可以理解是在待测系统内部打的一个桩。这个桩既不会与测试用例(代码)交互，也不会在待测系统内部进行验证。Test Stub常用于响应待测系统的请求，然后返回特定的值。接下来，这个值会对待测系统产生影响，然后我们就在测试用例里面去验证这个影响。</p>\n<p>Test Stub的实现方式一般有两种：</p>\n<ol>\n<li>Hard-Coded Test Stub - 会返回固定 response 的 Test Stub</li>\n<li>Configurable Test Stub - 会根据测试需求返回相应 response 的 Test Stub，可配置化<br> 当我们遇到下面场景时，Test Stub就可以派上用场</li>\n</ol>\n<ul>\n<li>依赖组件无法使用，影响测试结果</li>\n<li>依赖组件运行太慢，影响测试速度</li>\n<li>成为Responder响应者，当需要给待测系统注入特定数据，从而对待测系统产生影响</li>\n<li>成为Saboteur破坏者，当需要给待测系统注入无效数据，从而对待测系统产生异常影响，观察待测系统如何处理错误情况</li>\n</ul>\n<h3 id=\"Test-Spy\"><a href=\"#Test-Spy\" class=\"headerlink\" title=\"Test Spy\"></a>Test Spy</h3><p>Test Spy像一个间谍，安插在了 SUT 内部，专门负责将 SUT 内部的间接输出(indirect outputs)传到外部。它的特点是将内部的间接输出返回给测试案例，由测试案例进行验证，Test Spy 只负责获取内部情报，并把情报发出去，不负责验证情报的正确性。</p>\n<p><img src=\"https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/16456a55617246c0b4ed3dd6fd184e02~tplv-k3u1fbpfcp-watermark.image\" alt=\"image.png\"></p>\n<p>Test Spy 是指一个待测系统依赖组件的替身，并且会捕捉和保存待测对象对依赖系统的输出，这个输出会用于测试代码中的验证。Test Spy 主要用于记录和验证待测对象对依赖系统的输出。</p>\n<p>Test Spy 是把待测对象对依赖系统的输出拿到了测试代码里面进行验证，这样的话，如果 SUT 的输出不符合期望，Test Spy 并不像 Mock Object 那样第一时间让测试失败，而是可以在测试代码中加入更多判断信息，让验证和测试结果更加可控和可视化。</p>\n<h3 id=\"Mock-Object\"><a href=\"#Mock-Object\" class=\"headerlink\" title=\"Mock Object\"></a>Mock Object</h3><p>Mock Object 和 Test Spy 有类似的地方，它也是安插在 SUT 内部，获取到 SUT 内部的间接输出(indirect outputs)，不同的是，Mock Object 还负责对情报(indirect outputs)进行验证，总部(外部的测试案例)信任 Mock Object 的验证结果。</p>\n<p><img src=\"https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/5f6bce888cb442dab12d8bcd10e0362a~tplv-k3u1fbpfcp-watermark.image\" alt=\"image.png\"></p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>Mock 更像是行为既定，通过 mock 对象预期输入产生预期输出。</p></blockquote>\n<p>Mock Object 一个重要的特点是它可以对无法在待测系统上直接被观察到的行为或输出进行验证。无法观察到的系统行为或输出可以是数据插入数据库，可以是数据写入文件，也可以是对其他组件的调用。以数据库类型 Mock Object 举例，这个 Mock 的数据库会去接受待测系统发过来的数据，并且对这个数据进行验证，一旦验证通过就会对数据进行处理(插入或更新操作)，然后测试代码会去验证插入是否成功。</p>\n<h3 id=\"Fake-Object\"><a href=\"#Fake-Object\" class=\"headerlink\" title=\"Fake Object\"></a>Fake Object</h3><p>Fake Object 并不关注 SUT 内部的间接输入(indirect inputs)或间接输出(indirect outputs)，它仅仅是用来替代一个实际的对象，并且拥有几乎和实际对象一样的功能，保证 SUT 能够正常工作。实际对象过分依赖外部环境，Fake Object 可以减少这样的依赖。这也是 Fake 和 Test Stub 最主要的区别。</p>\n<p>简单说就是采用更加简单的方法实现依赖组件的功能，典型的例子就是使用 H2 来代替 Mysql 的测试。</p>\n<h2 id=\"参考文档\"><a href=\"#参考文档\" class=\"headerlink\" title=\"参考文档\"></a>参考文档</h2><ul>\n<li><a href=\"https://martinfowler.com/bliki/TestDouble.html\">bliki: TestDouble</a></li>\n<li><a href=\"https://martinfowler.com/articles/mocksArentStubs.html\">Mocks Aren’t Stubs</a></li>\n<li><a href=\"https://www.jianshu.com/p/7a04f28b08a6\">Test Double</a></li>\n</ul>\n","text":"TestDouble 简单理解就是测试替身，在多数情况下，我们的系统能够正常运行，不仅仅依托系统本身，还需要依赖一些外部服务，比如其他系统提供的 http、rp...","permalink":"/post/tests/test-test-double","photos":[],"count_time":{"symbolsCount":"2.4k","symbolsTime":"2 mins."},"categories":[{"name":"test","slug":"test","count":5,"path":"api/categories/test.json"}],"tags":[{"name":"test","slug":"test","count":5,"path":"api/tags/test.json"},{"name":"TestDouble","slug":"TestDouble","count":1,"path":"api/tags/TestDouble.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%B5%8B%E8%AF%95%E6%9B%BF%E8%BA%AB%E7%B1%BB%E5%9E%8B\"><span class=\"toc-text\">测试替身类型</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Dummy-Object\"><span class=\"toc-text\">Dummy Object</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Test-Stub\"><span class=\"toc-text\">Test Stub</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Test-Spy\"><span class=\"toc-text\">Test Spy</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Mock-Object\"><span class=\"toc-text\">Mock Object</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Fake-Object\"><span class=\"toc-text\">Fake Object</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%8F%82%E8%80%83%E6%96%87%E6%A1%A3\"><span class=\"toc-text\">参考文档</span></a></li></ol>","author":{"name":"glmapper","slug":"blog-author","avatar":"https://glmapper-blog.oss-cn-hangzhou.aliyuncs.com/common/favicon.ico","link":"/","description":"开放，开源，分享，共享","socials":{"github":"https://github.com/glmapper","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/2412872703","zhihu":"","csdn":"","juejin":"https://juejin.cn/user/3227821827961806","customs":{"sofastack":{"icon":"https://glmapper-blog.oss-cn-hangzhou.aliyuncs.com/common/sofastack.svg","link":"https://www.sofastack.tech/"}}}},"mapped":true,"hidden":false,"prev_post":{"title":"你知道 Junit 是怎么跑的吗？","uid":"0092fc26e9bf86d6199cb316ea25f766","slug":"tests/test-junit-run-principle","date":"2021-07-02T13:47:16.000Z","updated":"2024-07-05T04:09:05.845Z","comments":true,"path":"api/articles/tests/test-junit-run-principle.json","keywords":"宋国磊, glmapper, 卫恒, 分享, 开源","cover":[],"text":"Junit 是由 Kent Beck 和 Erich Gamma 于 1995 年底着手编写的框架，自此以后，Junit 框架日益普及，现在已经成为单元测试 J...","permalink":"/post/tests/test-junit-run-principle","photos":[],"count_time":{"symbolsCount":"12k","symbolsTime":"11 mins."},"categories":[{"name":"test","slug":"test","count":5,"path":"api/categories/test.json"}],"tags":[{"name":"test","slug":"test","count":5,"path":"api/tags/test.json"},{"name":"junit","slug":"junit","count":2,"path":"api/tags/junit.json"}],"author":{"name":"glmapper","slug":"blog-author","avatar":"https://glmapper-blog.oss-cn-hangzhou.aliyuncs.com/common/favicon.ico","link":"/","description":"开放，开源，分享，共享","socials":{"github":"https://github.com/glmapper","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/2412872703","zhihu":"","csdn":"","juejin":"https://juejin.cn/user/3227821827961806","customs":{"sofastack":{"icon":"https://glmapper-blog.oss-cn-hangzhou.aliyuncs.com/common/sofastack.svg","link":"https://www.sofastack.tech/"}}}}},"next_post":{"title":"聊一聊 maven 生命周期和 maven 插件编写","uid":"366cd935770e27ff74dc4ef2425c6648","slug":"maven/maven-plugin-lifecycle-program","date":"2021-01-19T03:05:33.000Z","updated":"2024-07-05T04:09:05.782Z","comments":true,"path":"api/articles/maven/maven-plugin-lifecycle-program.json","keywords":"宋国磊, glmapper, 卫恒, 分享, 开源","cover":[],"text":" 原文：https://juejin.cn/post/6919490393893502984 最近接到一个业务同学的诉求：用户会在他们大数据平台新建很多模型表，...","permalink":"/post/maven/maven-plugin-lifecycle-program","photos":[],"count_time":{"symbolsCount":"5.3k","symbolsTime":"5 mins."},"categories":[{"name":"maven","slug":"maven","count":4,"path":"api/categories/maven.json"}],"tags":[{"name":"maven","slug":"maven","count":4,"path":"api/tags/maven.json"},{"name":"maven plugin","slug":"maven-plugin","count":3,"path":"api/tags/maven-plugin.json"}],"author":{"name":"glmapper","slug":"blog-author","avatar":"https://glmapper-blog.oss-cn-hangzhou.aliyuncs.com/common/favicon.ico","link":"/","description":"开放，开源，分享，共享","socials":{"github":"https://github.com/glmapper","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/2412872703","zhihu":"","csdn":"","juejin":"https://juejin.cn/user/3227821827961806","customs":{"sofastack":{"icon":"https://glmapper-blog.oss-cn-hangzhou.aliyuncs.com/common/sofastack.svg","link":"https://www.sofastack.tech/"}}}}}}