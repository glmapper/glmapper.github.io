{"title":"如何编写测试用例","uid":"ddb33e3231bb937dcbd835cfc8516ae1","slug":"tests/test-about-write-test","date":"2023-09-08T09:15:51.000Z","updated":"2024-07-05T04:09:05.844Z","comments":true,"path":"api/articles/tests/test-about-write-test.json","keywords":null,"cover":[],"content":"<p>代码质量管理是软件开发过程中的关键组成部分，比如我们常说的<strong>代码规范</strong>、代码可读性、<strong>单元测试和测试覆盖率</strong>等，对于研发人员来说<strong>单元测试和测试覆盖率</strong>是保障自己所编写代码的质量的重要手段；好的用例可以帮助研发人员<strong>确保代码质量和稳定性</strong>、<strong>减少维护成本</strong>、<strong>提高开发效率</strong>以及<strong>促进团队合作</strong>。之前看过一篇关于 OceanBase 质量之道的文章，文章中提到的工程理念就把测试作为非常重要的组成部分，是和研发同样重要的组成部分；也听过内部的同学说过，OB 最核心的是用例。</p>\n<span id=\"more\"></span>\n\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>OceanBase工程理念：经过多年的摸索，OceanBase团队打造了独特的工程文化。测试和开发同时进行，功能测试不再是一个独立分开的过程，而是融入到开发环节，从源端控制引入bug的概率。资深测试人员的精力主要放在难度较大的bug的发现，测试体系建设和相关技术钻研、测试自动化实施。我们建立了一套高效的代码准入流程，防范了许多初级的问题，提升了团队整体的研发效率。</p></blockquote>\n<p>由此可见，测试用例对于项目的重要性。从实际的工作中，也会发现大多数的同学对于如何编写测试用例其实是比较模糊的，在以项目交付为核心思路的工程实践中，测试用例往往只占整个工程周期相当小的一部分，更多时候是依赖测试团队进行功能测试，属于纯黑盒测试。那么这种测试对于业务常规流程可以起到一定的作用，但是对于一些边界问题其实很难 cover 住；另外，基于黑盒模式的功能性测试对于研发团队本身来说，除了拿到准入的测试报告之外，并无其他帮助，当研发需要对代码进行重构或者升级某部分组件时，没有用例的保障，则会将风险直接带到线上环境去。</p>\n<h2 id=\"常见的测试方式\"><a href=\"#常见的测试方式\" class=\"headerlink\" title=\"常见的测试方式\"></a>常见的测试方式</h2><p>在既往的工作团队中，关于测试方式，包括我自己在内，在没系统了解过测试理论之前，对于各种测试方式也是模棱两可；因为测试方式的种类实在是多又杂。下面是梳理的常见的测试方式，按照不同的维度进行了分类。</p>\n<table>\n<thead>\n<tr>\n<th>分类维度</th>\n<th>测试方式</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>测试目标</td>\n<td>功能测试</td>\n<td>验证系统是否按照规格说明的功能需求进行操作和响应。</td>\n</tr>\n<tr>\n<td></td>\n<td>性能测试</td>\n<td>评估系统在不同负载条件下的性能表现。</td>\n</tr>\n<tr>\n<td></td>\n<td>安全性测试</td>\n<td>发现系统的安全漏洞和弱点，以确保系统不容易受到攻击。</td>\n</tr>\n<tr>\n<td></td>\n<td>回归测试</td>\n<td>确保在对系统进行修改后，没有引入新的错误或破坏已有功能。</td>\n</tr>\n<tr>\n<td></td>\n<td>可用性测试</td>\n<td>评估系统的用户界面和用户体验。</td>\n</tr>\n<tr>\n<td></td>\n<td>兼容性测试</td>\n<td>验证系统在不同浏览器、操作系统和设备上的兼容性。</td>\n</tr>\n<tr>\n<td>测试层次</td>\n<td>单元测试</td>\n<td>验证单个代码单元（通常是函数、方法、类等）的正确性。</td>\n</tr>\n<tr>\n<td></td>\n<td>组件测试</td>\n<td>验证单个软件组件的功能性和正确性。</td>\n</tr>\n<tr>\n<td></td>\n<td>集成测试</td>\n<td>验证不同组件、模块或服务之间的接口和协同工作。</td>\n</tr>\n<tr>\n<td></td>\n<td>系统测试</td>\n<td>验证整个系统是否按照需求规格正常运行。</td>\n</tr>\n<tr>\n<td></td>\n<td>验收测试</td>\n<td>由最终用户或客户进行的测试，以验证系统是否满足其需求和期望。</td>\n</tr>\n<tr>\n<td>测试方法</td>\n<td>手动测试</td>\n<td>测试人员手动执行测试用例，模拟用户的操作。</td>\n</tr>\n<tr>\n<td></td>\n<td>自动化测试</td>\n<td>使用自动化测试工具和脚本来执行测试用例，提高测试效率和一致性。</td>\n</tr>\n<tr>\n<td></td>\n<td>白盒测试</td>\n<td>关注内部代码逻辑，通常由开发人员执行。</td>\n</tr>\n<tr>\n<td></td>\n<td>黑盒测试</td>\n<td>关注输入和输出，不关心内部代码逻辑。</td>\n</tr>\n<tr>\n<td></td>\n<td>灰盒测试</td>\n<td>结合了白盒测试和黑盒测试的特点。</td>\n</tr>\n<tr>\n<td>执行时机</td>\n<td>静态测试</td>\n<td>在代码编写之前或编译之后执行，包括静态代码分析、代码审查等。</td>\n</tr>\n<tr>\n<td></td>\n<td>动态测试</td>\n<td>在运行时执行，包括各种类型的功能测试、性能测试等。</td>\n</tr>\n<tr>\n<td>测试对象</td>\n<td>功能测试</td>\n<td>测试系统的功能性。</td>\n</tr>\n<tr>\n<td></td>\n<td>非功能测试</td>\n<td>测试系统的非功能性特征，如性能、安全性、可用性等。</td>\n</tr>\n<tr>\n<td></td>\n<td>白盒测试</td>\n<td>测试代码的内部逻辑和结构。</td>\n</tr>\n<tr>\n<td></td>\n<td>黑盒测试</td>\n<td>测试系统的输入和输出，不考虑内部实现。</td>\n</tr>\n</tbody></table>\n<p>每种测试方式都有其独特的目标和方法，可以在软件开发生命周期的不同阶段进行。不同的测试方式在不同的测试维度分类下会有一些重叠，这是正常的，但是他们的关注点是一致的。</p>\n<p>在本篇文章中，主要更偏向于研发侧，所以从测试层次角度来看，更多的是关注单元测试(UT)、组件测试(CT)以及集成测试(IT)。总体来说，UT 关注代码单元的正确性，CT关注组件的功能性，IT关注不同组件的集成和协同工作。这些测试层次通常是渐进的，从UT开始，然后是CT，最后是IT。不同的测试方式在软件测试策略中起着不同的作用，这些测试手段的目的就是共同确保软件在各个层次上的质量和稳定性。</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>下面会通过一个具体的例子来阐述不同的测试方式，主要是针对单元测试、组件测试和集成测试；项目基于 Spingboot 2.4.12 版本，使用 Junit4 和 Mockito 两种测试工具包。</p></blockquote>\n<h2 id=\"UT、CT-和-IT\"><a href=\"#UT、CT-和-IT\" class=\"headerlink\" title=\"UT、CT 和 IT\"></a>UT、CT 和 IT</h2><p>在具体看案例之前，先把几个测试工具跑出来，做个简单了解。</p>\n<h3 id=\"测试工具\"><a href=\"#测试工具\" class=\"headerlink\" title=\"测试工具\"></a>测试工具</h3><p>下面的案例中主要涉及到的测试工具和框架包括：<code>spring-boot-starter-test</code>、<code>junit4</code>和<code>Mockito</code>。</p>\n<h4 id=\"spring-boot-starter-test\"><a href=\"#spring-boot-starter-test\" class=\"headerlink\" title=\"spring-boot-starter-test\"></a>spring-boot-starter-test</h4><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>官方文档：<a href=\"https://docs.spring.io/spring-boot/docs/1.5.7.RELEASE/reference/html/boot-features-testing.html\">https://docs.spring.io/spring-boot/docs/1.5.7.RELEASE/reference/html/boot-features-testing.html</a> </p></blockquote>\n<p>spring-boot-starter-test 是 Spring Boot 提供的一个用于测试的依赖库，它简化了 Spring Boot 应用程序的测试过程，提供了许多有用的工具和类，帮助开发人员编写高效、可靠的单元测试和集成测试。就目前而言，JAVA 技术栈的项目是绕不开 Spring 这套体系的，而绝大多数情况下，在 spring 或者 springBoot 项目中，我们需要依赖 spring 容器刷新之后去测试相应的逻辑，spring-boot-starter-test 就是做这个事情的。</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-test<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">scope</span>&gt;</span>test<span class=\"tag\">&lt;/<span class=\"name\">scope</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"junit4\"><a href=\"#junit4\" class=\"headerlink\" title=\"junit4\"></a>junit4</h4><p>JUnit 4 是一个用于 Java 编程语言的单元测试框架。目前版本是 JUnit 5，目前我们项目中使用的是 JUnit4。以下是 JUnit 4 中一些常用的特性和概念：</p>\n<ul>\n<li><strong>注解驱动的测试</strong>：JUnit 4使用注解来标记测试方法，以指定哪些方法应该被运行为测试。常见的测试注解包括 @Test 用于标记测试方法、@Before 用于标记在每个测试方法之前运行的方法、@After 用于标记在每个测试方法之后运行的方法等。对于全局资源的初始化和释放可以通过 @BeforeClass 和 @AfterClass 来搞定。</li>\n<li><strong>测试套件</strong>：JUnit 4允许你将多个测试类组合在一起，形成一个测试套件，然后可以一次运行所有测试类。这对于组织和管理测试非常有用。</li>\n<li><strong>断言</strong>：JUnit 4提供了一系列的断言方法，用于验证测试中的条件是否为真。如果条件不满足，断言将引发测试失败。常见的断言方法包括 assertEquals、assertTrue、assertFalse、assertNull、assertNotNull 等。</li>\n<li><strong>运行器（Runners）</strong>：JUnit 4引入了运行器的概念，允许你扩展测试的执行方式。JUnit 4提供了一些内置的运行器，例如 BlockJUnit4ClassRunner 用于普通的 JUnit 测试类，还有一些用于特定用途的运行器，如 Parameterized 用于参数化测试。目前在 springboot 中，使用了 SpringRunner 其实也是 BlockJUnit4ClassRunner 的子类。</li>\n</ul>\n<p>关于 Junit 的运行机制可以参考我之前写的一篇文章：<a href=\"http://www.glmapper.com/2021/07/02/tests/test-junit-run-principle/\">你知道 Junit 是怎么跑的吗？</a></p>\n<h4 id=\"Mockito\"><a href=\"#Mockito\" class=\"headerlink\" title=\"Mockito\"></a>Mockito</h4><p>Mockito 是一个用于模拟对象的框架，用于创建和配置模拟对象，以模拟外部依赖。Mockito 的主要焦点是模拟外部依赖，以便在单元测试中隔离被测试的代码，并确保它与外部依赖正确交互。和 JUnit 4 的区别在于，JUnit 4  是一个单元测试框架，用于编写和运行测试用例，JUnit 4 的主要焦点是定义和执行测试，以及管理测试生命周期。<br>关于 Mockito 的运行机制可以参考我之前写的一篇文章：<a href=\"http://www.glmapper.com/2021/11/06/tests/test-mock-mockito/\">聊一聊 Mockito</a></p>\n<h3 id=\"单元测试（UT）\"><a href=\"#单元测试（UT）\" class=\"headerlink\" title=\"单元测试（UT）\"></a>单元测试（UT）</h3><p>在前面的测试分类中，单元测试主要是验证单个代码单元（通常是函数、方法、类等）的正确性；在实际的项目中，单元测试主要是对于一个封装好的工具类的测试。如在 DateUtil 工具类中有一个方法：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> String <span class=\"title function_\">getDate</span><span class=\"params\">(Date date, String pattern)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"literal\">null</span> == date) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"type\">SimpleDateFormat</span> <span class=\"variable\">sdf</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">SimpleDateFormat</span>(pattern);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> sdf.format(date);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>右击选中方法，goto -&gt; test，也可以通过相应的快捷键直接创建当前选中方法的测试用例。<br><img src=\"https://vspicgo.oss-cn-shanghai.aliyuncs.com/1694157296144-c2212622-587c-4714-a1bf-b908fed5909d.png\" alt=\"image.png\"><br>相应的测试代码如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">DateUtilTest</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">test_getDate</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">dateYear</span> <span class=\"operator\">=</span> DateUtil.getDateYear(<span class=\"keyword\">new</span> <span class=\"title class_\">Date</span>());</span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">yyyy</span> <span class=\"operator\">=</span> DateUtil.getDate(<span class=\"keyword\">new</span> <span class=\"title class_\">Date</span>(), <span class=\"string\">&quot;YYYY&quot;</span>);</span><br><span class=\"line\">        Assert.assertEquals(String.valueOf(dateYear), yyyy);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这里覆盖了正常的情况，对于传入 date 为 null 的分支并未覆盖到；所以对于强调覆盖率必须满足一定阈值的情况(之前的一个项目中，在 CI 流程中会对当前提供的代码覆盖率进行严格把控，比如行覆盖率比如达到 75% 才能被 merge)，则对于不同分支逻辑也需要提供对应的用例。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 当date 为 null 时，期望返回 null</span></span><br><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">test_getDate_when_date_null_thenReturn_null</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">String</span> <span class=\"variable\">result</span> <span class=\"operator\">=</span> DateUtil.getDate(<span class=\"literal\">null</span>, <span class=\"string\">&quot;YYYY&quot;</span>);</span><br><span class=\"line\">    Assert.assertEquals(<span class=\"literal\">null</span>, result);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"组件测试（CT）-集成测试（IT）\"><a href=\"#组件测试（CT）-集成测试（IT）\" class=\"headerlink\" title=\"组件测试（CT）&#x2F;集成测试（IT）\"></a>组件测试（CT）&#x2F;集成测试（IT）</h3><p>我们目前基于 SpringBoot test 的测试，大体可以归类于组件测试；这种情况只需要针对当前服务自己的组件进行设计用例；对于可能涉及到的上下游依赖，一般可以通过 mock 的方式来绕过，从而使得当前应用的用例 focus 在自己的业务逻辑上。</p>\n<h4 id=\"使用-mock-代替实际请求\"><a href=\"#使用-mock-代替实际请求\" class=\"headerlink\" title=\"使用 mock 代替实际请求\"></a>使用 mock 代替实际请求</h4><p>场景描述：<code>UserCaseService 中有个 getUserCaseList 方法，通过传入一个 UserCaseRequest 参数，然后去另一个服务拉取当前用户的事件列表</code>；代码如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> Response&lt;CaseResponse&gt; <span class=\"title function_\">getUserCaseList</span><span class=\"params\">(UserCaseRequest request)</span> &#123;</span><br><span class=\"line\">    Map&lt;String, Object&gt; param = <span class=\"keyword\">new</span> <span class=\"title class_\">HashMap</span>&lt;&gt;();</span><br><span class=\"line\">    param.put(<span class=\"string\">&quot;phone&quot;</span>,request.getPhone());</span><br><span class=\"line\">    param.put(<span class=\"string\">&quot;pageNo&quot;</span>,request.getPageNo());</span><br><span class=\"line\">    param.put(<span class=\"string\">&quot;pageSize&quot;</span>,request.getPageSize());</span><br><span class=\"line\">    <span class=\"type\">JSONObject</span> <span class=\"variable\">result</span> <span class=\"operator\">=</span> HttpUtils.useHHMApi(<span class=\"string\">&quot;/miniapp/user/case&quot;</span>, param);</span><br><span class=\"line\">    Response&lt;CaseResponse&gt; response = result.toJavaObject(result, Response.class);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> response;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在 HttpUtils 中，底层是对 RestTemplate 的封装：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> JSONObject <span class=\"title function_\">request</span><span class=\"params\">(String url, Map&lt;String, Object&gt; headers, Map&lt;String, Object&gt; param)</span> &#123;</span><br><span class=\"line\"><span class=\"type\">HttpHeaders</span> <span class=\"variable\">head</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">HttpHeaders</span>();</span><br><span class=\"line\"><span class=\"keyword\">if</span> (!ObjectUtils.isNull(headers)) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (String h : headers.keySet()) &#123;</span><br><span class=\"line\">        head.add(h, String.valueOf(headers.get(h)));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// HttpUtils.useHHMApi 底层实际发起拉取数据的地方</span></span><br><span class=\"line\"><span class=\"type\">String</span> <span class=\"variable\">entity</span> <span class=\"operator\">=</span> restTemplate.postForObject(url, <span class=\"keyword\">new</span> <span class=\"title class_\">HttpEntity</span>&lt;Map&gt;(param, head), String.class);</span><br><span class=\"line\"><span class=\"keyword\">return</span> JSONObject.parseObject(entity);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在上面那段代码中，会具体发送 http 请求到另一个服务去拉取数据。对于这种场景：</p>\n<ul>\n<li>1、需要保障用例不会受到对方服务的影响都能顺利执行。</li>\n<li>2、关注的是 getUserCaseList 这个方法本身的逻辑（这里举例，代码做了相应的简化）</li>\n</ul>\n<p>因此，和实际运行的逻辑不同在于，在编写测试用例时，对于底层发起的 http 调用其实不是主要关注的，可以基于约定好的成功&#x2F;失败的数据报文结构，通过 mock 的方式来代替实际 http 请求发送。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">test_getUserCaseList</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 提供 mock 条件</span></span><br><span class=\"line\">    Mockito.when(restTemplate.postForObject(Mockito.any(String.class), Mockito.any(HttpEntity.class), Mockito.any(Class.class))).thenReturn(MockData.mockMiniAppUserCaseResponseData(<span class=\"literal\">true</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">UserCaseRequest</span> <span class=\"variable\">request</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">UserCaseRequest</span>();</span><br><span class=\"line\">    request.setPhone(<span class=\"string\">&quot;15215608668&quot;</span>);</span><br><span class=\"line\">    request.setPageNo(<span class=\"number\">1</span>);</span><br><span class=\"line\">    request.setPageSize(<span class=\"number\">10</span>);</span><br><span class=\"line\">    Response&lt;UserCaseResponse&gt; response = naturalService.getUserCaseList(request);</span><br><span class=\"line\">    Assert.assertEquals(<span class=\"string\">&quot;200&quot;</span>, response.getCode());</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>通过这种形式，则可以有效屏蔽因为三方服务对于我们自己当前用例的影响（核心的还是要关注在自己的业务逻辑上）；</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>准备条件可以在 @Before 中体现<br>@Before<br>public void before() {<br>    RestTemplate restTemplate &#x3D; Mockito.mock(RestTemplate.class);<br>    HttpUtils.setRestTemplate(restTemplate);<br>}</p></blockquote>\n<h4 id=\"SpringBootTest-说明\"><a href=\"#SpringBootTest-说明\" class=\"headerlink\" title=\"SpringBootTest 说明\"></a>SpringBootTest 说明</h4><p>在 test_getUserCaseList 中，naturalService 是一个spring bean，因此执行此用例我们需要依赖 spring 容器环境。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT, </span></span><br><span class=\"line\"><span class=\"meta\">                classes = ServerApplication.class)</span></span><br><span class=\"line\"><span class=\"meta\">@RunWith(SpringRunner.class)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">UserCaseTest</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> NaturalService naturalService;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// your test case </span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><a href=\"%5Bhttps://docs.spring.io/spring-boot/docs/current/api/org/springframework/boot/test/context/SpringBootTest.html%5D(https://docs.spring.io/spring-boot/docs/current/api/org/springframework/boot/test/context/SpringBootTest.html)\">@SpringBootTest</a> 在官文档中被描述用于 integration testing 使用的注解，<strong>其目的是用于启动一个 ApplicationContext，达到在无需部署应用程序或连接到其他基础设施即可执行集成测试</strong>。已上面的代码为例，其中：</p>\n<ul>\n<li><p>webEnvironment 用于描述运行环境，主要包括以下几种类型：</p>\n<table>\n<thead>\n<tr>\n<th>类型</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>MOCK</td>\n<td>这个选项不启动真正的 Web 服务器，而是使用模拟的 Servlet 上下文来运行测试。这意味着你的应用程序的 Web 层（控制器、过滤器等）将在一个模拟的环境中运行，不会实际处理 HTTP 请求和响应。这种环境适用于单元测试和切片测试，通常用于测试应用程序的业务逻辑。</td>\n</tr>\n<tr>\n<td>RANDOM_PORT</td>\n<td>这个选项会启动一个嵌入式的 Web 服务器，并随机选择一个可用的端口。测试将通过实际的 HTTP 请求和响应与应用程序的 Web 层交互。这种环境适用于端到端测试，可以测试整个 Web 栈，包括控制器、服务、数据访问等。</td>\n</tr>\n<tr>\n<td>DEFINED_PORT</td>\n<td>这个选项也会启动嵌入式的 Web 服务器，但它会使用一个预定义的端口号。你可以通过 server.port 配置属性来指定端口号。与 WebEnvironment.RANDOM_PORT 不同，这个选项的端口号是固定的。这对于需要在已知端口上运行测试的情况很有用。</td>\n</tr>\n<tr>\n<td>NONE</td>\n<td>这个选项完全不启动 Web 服务器。它用于纯粹的单元测试，不涉及任何 Web 层的逻辑。在这种环境中，通常只测试应用程序的业务逻辑和服务层，不测试与 HTTP 请求和响应相关的内容。</td>\n</tr>\n</tbody></table>\n</li>\n<li><p>classes 属性用于指定要加载的配置类，这些配置类将用于初始化 Spring Boot 应用程序上下文。通过 classes 属性，可以控制在测试中加载的 Spring Bean 配置，以适应不同的测试需求。在上述案例中，ServerApplication.class 是当前项目的启动类，表示在测试中加载整个应用程序上下文。</p>\n</li>\n<li><p>@RunWith 用于指定测试运行器（Runner），JUnit 4 默认运行器是 BlockJUnit4ClassRunner ，在 Spring 中对应的是 BlockJUnit4ClassRunner 的子类 SpringJUnit4ClassRunner，而上述代码中的 SpringRunner 和  SpringJUnit4ClassRunner 是一样的，从 SpringRunner 类的源码注释中可以看到，SpringRunner是 SpringJUnit4ClassRunner 的别名(<code>SpringRunner is an alias for the SpringJUnit4ClassRunner</code>)。</p>\n</li>\n</ul>\n<h4 id=\"使用-H2-内存数据库来代替实际库\"><a href=\"#使用-H2-内存数据库来代替实际库\" class=\"headerlink\" title=\"使用 H2 内存数据库来代替实际库\"></a>使用 H2 内存数据库来代替实际库</h4><p>在编写用例时，大多数情况下，我们需要依赖数据库的数据进行场景描述；但是一般情况下，即使是测试库，用于作为测试用例的依赖也是不合适的。因此在实践过程中，一般会使用 H2 来代替实际使用的类似 Mysql 数据库来进行测试，实现数据层面的环境隔离。使用 H2 作为测试用例依赖数据库也比较简答，在 pom 中引入如下 H2 的依赖。然后在测试时指定对应 H2 的配置文件代替 Mysql 的配置文件即可。制定配置参考下一小节。</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.h2database<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>h2<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">scope</span>&gt;</span>test<span class=\"tag\">&lt;/<span class=\"name\">scope</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"使用指定的测试配置文件\"><a href=\"#使用指定的测试配置文件\" class=\"headerlink\" title=\"使用指定的测试配置文件\"></a>使用指定的测试配置文件</h4><p>如前面提到，如何我们期望测试用例的环境和实际的环境隔离，则可以使用一个单独的配置文件来描述。比如使用 H2 代替实际的数据库。</p>\n<ul>\n<li><p>测试配置文件 application-test.yaml</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">spring:</span></span><br><span class=\"line\">  <span class=\"comment\"># 使用 H2 作为数据源</span></span><br><span class=\"line\">  <span class=\"attr\">datasource:</span></span><br><span class=\"line\">    <span class=\"attr\">url:</span> <span class=\"string\">jdbc:h2:mem:customdb</span></span><br><span class=\"line\">    <span class=\"attr\">driverClassName:</span> <span class=\"string\">org.h2.Driver</span></span><br><span class=\"line\">    <span class=\"attr\">username:</span> <span class=\"string\">root</span></span><br><span class=\"line\">    <span class=\"attr\">password:</span> <span class=\"string\">password</span></span><br><span class=\"line\"><span class=\"comment\"># 省略其他配置</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>指定配置文件</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT, </span></span><br><span class=\"line\"><span class=\"meta\">                classes = ServerApplication.class)</span></span><br><span class=\"line\"><span class=\"meta\">@RunWith(SpringRunner.class)</span></span><br><span class=\"line\"><span class=\"meta\">@PropertySource(value = &#123;&quot;classpath:application-test.yaml&quot;&#125;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">UserCaseTest</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> NaturalService naturalService;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// your test case </span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h4 id=\"做好测试资源的清理\"><a href=\"#做好测试资源的清理\" class=\"headerlink\" title=\"做好测试资源的清理\"></a>做好测试资源的清理</h4><p>做好测试资源清理是一个好用例具备的基本前提；如何两个研发同事需要依赖某一个表的数据进行用例设计，如果每个人都没有做好自己用例的资源清理，则在实际的用例执行过程中则会出现用例之间的相互干扰。另外，如过对于一些团队，没有使用 H2 来代替实际的测试库，那么在用例不断执行的过程中，会给测试库产生相当于的测试脏数据。基于上面两个前提，所以我们在设计用例时，特别是涉及到数据或者状态变更的场景时，一定要做好相应的资源清理。如：用户注册的场景逻辑：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">test_register</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">    <span class=\"type\">UserDto</span> <span class=\"variable\">userDto</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">UserDto</span>();</span><br><span class=\"line\">    userDto.setPhone(<span class=\"string\">&quot;test number&quot;</span>);</span><br><span class=\"line\">    userDto.setName(<span class=\"string\">&quot;test&quot;</span>);</span><br><span class=\"line\">    userDto.setNickName(<span class=\"string\">&quot;test&quot;</span>);</span><br><span class=\"line\">    userDto.setPassword(<span class=\"string\">&quot;test pwd&quot;</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 注册用户</span></span><br><span class=\"line\">    <span class=\"type\">bool</span> <span class=\"variable\">success</span> <span class=\"operator\">=</span> userService.register(userDto);</span><br><span class=\"line\">    Assert.assertTrue(success);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在上面这段用例，可能会出现的情况：</p>\n<ul>\n<li>如果用户表中没有做基于名字或者手机号的唯一性校验，则在我们的表中可能会出现很多 name 为 test 的用户。（每执行一次，则产生一条记录）</li>\n<li>如果用户表做了唯一性约束，那么当第一次执行完之后，第二次执行时则可能会报错，当前用例会执行失败。</li>\n</ul>\n<p>所以，在优化这个用例时，就可以将用例执行完之后的数据清除掉。具体做法有两种：</p>\n<ul>\n<li>1、在当前用例中执行，比如通过 try finally，在 finally 块中执行删除插入的数据</li>\n<li>2、在 @After 中执行删除插入的数据（@After 注解描述的方法，会在每个用例执行完之后执行，通过用于做资源清理）</li>\n</ul>\n<h2 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h2><p>本篇主要针对如何编写测试用例进行了简单的介绍；包括场景的测试方式分类、测试工具；并通过几个小的测试用例对单元测试、组件测试和集成测试做了分析。最后针对日常研发中，如何做好测试编写和如何做好测试资源释放给了目前主流方案的建议和使用说明。</p>\n","text":"代码质量管理是软件开发过程中的关键组成部分，比如我们常说的代码规范、代码可读性、单元测试和测试覆盖率等，对于研发人员来说单元测试和测试覆盖率是保障自己所编写代码...","permalink":"/post/tests/test-about-write-test","photos":[],"count_time":{"symbolsCount":"10k","symbolsTime":"10 mins."},"categories":[{"name":"test","slug":"test","count":5,"path":"api/categories/test.json"}],"tags":[{"name":"test","slug":"test","count":5,"path":"api/tags/test.json"},{"name":"junit","slug":"junit","count":2,"path":"api/tags/junit.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%B8%B8%E8%A7%81%E7%9A%84%E6%B5%8B%E8%AF%95%E6%96%B9%E5%BC%8F\"><span class=\"toc-text\">常见的测试方式</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#UT%E3%80%81CT-%E5%92%8C-IT\"><span class=\"toc-text\">UT、CT 和 IT</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%B5%8B%E8%AF%95%E5%B7%A5%E5%85%B7\"><span class=\"toc-text\">测试工具</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#spring-boot-starter-test\"><span class=\"toc-text\">spring-boot-starter-test</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#junit4\"><span class=\"toc-text\">junit4</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#Mockito\"><span class=\"toc-text\">Mockito</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95%EF%BC%88UT%EF%BC%89\"><span class=\"toc-text\">单元测试（UT）</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%BB%84%E4%BB%B6%E6%B5%8B%E8%AF%95%EF%BC%88CT%EF%BC%89-%E9%9B%86%E6%88%90%E6%B5%8B%E8%AF%95%EF%BC%88IT%EF%BC%89\"><span class=\"toc-text\">组件测试（CT）&#x2F;集成测试（IT）</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E4%BD%BF%E7%94%A8-mock-%E4%BB%A3%E6%9B%BF%E5%AE%9E%E9%99%85%E8%AF%B7%E6%B1%82\"><span class=\"toc-text\">使用 mock 代替实际请求</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#SpringBootTest-%E8%AF%B4%E6%98%8E\"><span class=\"toc-text\">SpringBootTest 说明</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E4%BD%BF%E7%94%A8-H2-%E5%86%85%E5%AD%98%E6%95%B0%E6%8D%AE%E5%BA%93%E6%9D%A5%E4%BB%A3%E6%9B%BF%E5%AE%9E%E9%99%85%E5%BA%93\"><span class=\"toc-text\">使用 H2 内存数据库来代替实际库</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E4%BD%BF%E7%94%A8%E6%8C%87%E5%AE%9A%E7%9A%84%E6%B5%8B%E8%AF%95%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6\"><span class=\"toc-text\">使用指定的测试配置文件</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%81%9A%E5%A5%BD%E6%B5%8B%E8%AF%95%E8%B5%84%E6%BA%90%E7%9A%84%E6%B8%85%E7%90%86\"><span class=\"toc-text\">做好测试资源的清理</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%B0%8F%E7%BB%93\"><span class=\"toc-text\">小结</span></a></li></ol>","author":{"name":"glmapper","slug":"blog-author","avatar":"https://glmapper-blog.oss-cn-hangzhou.aliyuncs.com/common/favicon.ico","link":"/","description":"开放，开源，分享，共享","socials":{"github":"https://github.com/glmapper","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/2412872703","zhihu":"","csdn":"","juejin":"https://juejin.cn/user/3227821827961806","customs":{"sofastack":{"icon":"https://glmapper-blog.oss-cn-hangzhou.aliyuncs.com/common/sofastack.svg","link":"https://www.sofastack.tech/"}}}},"mapped":true,"hidden":false,"prev_post":{"title":"Nginx 转发 404 问题的排查和思考","uid":"b6cc4bb37be33d0751cb992f744131af","slug":"middleware/middleware-nginx-proxy-pass","date":"2023-09-13T01:04:07.000Z","updated":"2024-07-05T04:09:05.790Z","comments":true,"path":"api/articles/middleware/middleware-nginx-proxy-pass.json","keywords":null,"cover":[],"text":" 本篇文章原自当前业务遇到的一个实际问题，因为受到所在网络环境的因素影响，所以整体排查下来耗费了很大精力，记录一下。 项目背景项目是 toG 项目，部署的网络环...","permalink":"/post/middleware/middleware-nginx-proxy-pass","photos":[],"count_time":{"symbolsCount":"4.2k","symbolsTime":"4 mins."},"categories":[{"name":"Middleware","slug":"Middleware","count":13,"path":"api/categories/Middleware.json"}],"tags":[{"name":"nginx","slug":"nginx","count":2,"path":"api/tags/nginx.json"},{"name":"反向代理","slug":"反向代理","count":2,"path":"api/tags/反向代理.json"},{"name":"负载均衡","slug":"负载均衡","count":3,"path":"api/tags/负载均衡.json"}],"author":{"name":"glmapper","slug":"blog-author","avatar":"https://glmapper-blog.oss-cn-hangzhou.aliyuncs.com/common/favicon.ico","link":"/","description":"开放，开源，分享，共享","socials":{"github":"https://github.com/glmapper","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/2412872703","zhihu":"","csdn":"","juejin":"https://juejin.cn/user/3227821827961806","customs":{"sofastack":{"icon":"https://glmapper-blog.oss-cn-hangzhou.aliyuncs.com/common/sofastack.svg","link":"https://www.sofastack.tech/"}}}}},"next_post":{"title":"Linux nohup 命令","uid":"abbcd011f0be9dc628ed542e40f49896","slug":"linux/linux-no-hangup","date":"2023-08-15T02:12:22.000Z","updated":"2024-07-05T04:09:05.775Z","comments":true,"path":"api/articles/linux/linux-no-hangup.json","keywords":null,"cover":null,"text":"nohup 表示不挂断地运行命令，是 no hangup 的缩写，语法格式如下： 1nohup Command [ Arg ... ] [ & ] nohup ...","permalink":"/post/linux/linux-no-hangup","photos":[],"count_time":{"symbolsCount":"3.6k","symbolsTime":"3 mins."},"categories":[{"name":"Linux","slug":"Linux","count":9,"path":"api/categories/Linux.json"}],"tags":[{"name":"linux","slug":"linux","count":9,"path":"api/tags/linux.json"},{"name":"nohup","slug":"nohup","count":1,"path":"api/tags/nohup.json"}],"author":{"name":"glmapper","slug":"blog-author","avatar":"https://glmapper-blog.oss-cn-hangzhou.aliyuncs.com/common/favicon.ico","link":"/","description":"开放，开源，分享，共享","socials":{"github":"https://github.com/glmapper","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/2412872703","zhihu":"","csdn":"","juejin":"https://juejin.cn/user/3227821827961806","customs":{"sofastack":{"icon":"https://glmapper-blog.oss-cn-hangzhou.aliyuncs.com/common/sofastack.svg","link":"https://www.sofastack.tech/"}}}}}}