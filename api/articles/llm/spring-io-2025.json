{"title":"SpringIO 2025 技术峰会：洞察 JDK 25、Spring AI与框架新纪元的核心脉络","uid":"8ee8278443dcdd9107b679f97798c91c","slug":"llm/spring-io-2025","date":"2025-05-26T03:30:33.000Z","updated":"2025-05-26T03:32:11.818Z","comments":true,"path":"api/articles/llm/spring-io-2025.json","keywords":"宋国磊, glmapper, 卫恒, 分享, 开源","cover":[],"content":"<p>2025 Spring IO 大会于 2025 年 5 月 21 日至 23 日在西班牙巴塞罗那举行。作为 Spring Framework 生态系统的顶尖会议，本次大会吸引了超过 1200 名 Spring 专业人士和爱好者。<strong>也刚好恰逢 Java 语言诞生三十周年纪念日（大会第二天即 5月 23日为Java 30周年纪念日）</strong>，此次大会成为 Spring 生态系统发展历程中的一个关键节点。业界普遍预期，JDK（随着JDK 25的到来）和 Spring 自身（Framework 7、Boot 4）都将迎来重大的代际革新，这使得本次大会的每一个发布都备受瞩目。本文将全面概述了大会的重点主题，特别关注 Spring 对 JDK25 的支持、AI 应用开发的进展以及 Spring Framework 自身的最新发展。本文主要信息来源是基于官方文档、项目更新和公开信息，旨在为 Java 和 Spring 开发者提供清晰且可操作的见解。</p>\n<span id=\"more\"></span>\n\n<p>从大会的主题演讲及核心议题中，可以清晰地提炼出 Spring 未来发展的三大战略支柱：</p>\n<ol>\n<li><strong>深度协同JDK 25</strong>：Spring将与即将发布的下一个长期支持版本（LTS）JDK 25进行深度、协同的整合与优化。</li>\n<li><strong>Spring AI 1.0 GA的里程碑</strong>：Spring AI 1.0的正式发布，标志着 Spring 正致力于成为企业级AI应用开发的关键赋能者。</li>\n<li><strong>Spring框架自身的演进</strong>：Spring Framework 7 和 Spring Boot 4 的底层革新，为未来应用架构的发展奠定了坚实基础，7.0 版本计划于 2025 年 11 月发布。</li>\n</ol>\n<h1 id=\"总体愿景\"><a href=\"#总体愿景\" class=\"headerlink\" title=\"总体愿景\"></a>总体愿景</h1><p><strong>通过积极拥抱现代 Java 的最新进展，简化人工智能等复杂技术的应用门槛，并持续优化开发者体验，从而巩固并扩大其在 Java 生态中的领导地位。</strong></p>\n<p>大会所传递的各项声明，并非孤立的技术更新，而是展现了一种高度的战略协同性。JDK 25 作为新的 LTS 版本，为整个生态提供了稳定且功能丰富的基石 。Spring Framework 7 明确地针对 JDK 25 进行了优化，并构成了 Spring Boot 4 的核心基础。而 Spring AI 1.0 的正式版（GA）在 SpringIO 大会前夕（5月20日）发布，充分利用了 Spring Boot 提供的现代化能力，如自动配置和生产就绪特性。这种紧密的关联性表明，Spring 团队正通过精心策划的、统一的战略部署，迎接下一代 Java 企业级开发的浪潮。Spring AI GA 版本的发布时间紧邻 SpringIO 2025（5月21-23日），这清晰地预示了其在本次大会中的核心地位。</p>\n<h1 id=\"主题演讲\"><a href=\"#主题演讲\" class=\"headerlink\" title=\"主题演讲\"></a>主题演讲</h1><p>尽管目前公开渠道未能获取 SpringIO 2025 主题演讲的完整视频记录，但通过分析大会公布的关键议题，特别是名为<strong>从Beans到Boot，从Aspects到AI</strong>（From Beans to Boot，Aspects to AI）的演讲（由 Spring 框架的创始人和现任领导层主讲），以及官方公布的主题演讲嘉宾名单（<code>Juergen Hoeller, Rossen Stoyanchev, Ana Maria Mihalceanu, Moritz Halbritter, Mark Paluch, Josh Long, Mark Pollack</code>），还是可以基本精准地把握其核心信息和战略意图。</p>\n<h3 id=\"核心-topic-的信息传递\"><a href=\"#核心-topic-的信息传递\" class=\"headerlink\" title=\"核心 topic 的信息传递\"></a><strong>核心 topic 的信息传递</strong></h3><ul>\n<li><strong>Juergen Hoeller (Spring Framework 联合创始人)<strong>：其演讲内容聚焦于 Spring 框架的基础层面、依赖注入的演进（其个人议题“依赖注入再探讨”），以及 Spring Framework 7 的架构基石。他参与</strong>从Beans到Boot，从Aspects到AI</strong>的演讲，也暗示了对 Spring 发展历程的回顾与未来展望。</li>\n<li><strong>Rod Johnson (Spring Framework 创建者)<strong>：他在</strong>从 Beans 到 Boot，从 Aspects 到 AI</strong>议题中的出现，很可能为 Spring 当前的发展方向，特别是向 AI 领域的迈进（其个人简介中提到<em>目前正在使用Spring和Kotlin开发一个结构化的RAG系统</em>），提供了历史背景和权威解读。</li>\n<li><strong>Josh Long (Spring 开发者布道师)<strong>：作为连接历史与未来的桥梁，他将 Spring 的历史背景与当前开发者的热情和未来可能性相结合，共同主讲</strong>从 Beans 到 Boot，从 Aspects 到 AI</strong>和 《Bootiful GraalVM》。</li>\n<li><strong>Mark Pollack (Spring AI 项目负责人)<strong>：在揭示 Spring AI 1.0 GA 的特性、功能和愿景方面扮演了核心角色。诸如</strong>Spring AI精要</strong>和<strong>Spring AI大师课</strong>等议题，以及他参与主题演讲，都凸显了这一点。他发表的博客文章也详细介绍了Spring AI的特性。</li>\n<li>**Rossen Stoyanchev (Spring Framework 项目负责人)**：专注于 Web 技术的进步和核心框架特性，特别是《Spring Framework 7中的 API 版本控制》议题 。</li>\n<li>**Moritz Halbritter (Spring Boot 团队成员)**：强调性能和启动时间的改进，其主讲的 《通过Spring Boot和Project Leyden提升性能表现》 和《揭秘Spring Boot的自动配置魔法》备受关注。</li>\n<li>**Ana Maria Mihalceanu (Java Champion)**：涵盖了前沿的 Java 主题，例如《保护Java应用免受量子威胁》，以及Java技术进步与Spring 框架之间的互动。</li>\n<li>**Mark Paluch (Spring Data 项目负责人)**：通过《Spring Data 4：数据访问再探讨》议题，讨论了数据访问技术的演进。</li>\n</ul>\n<h3 id=\"总体愿景：演进、集成与赋能\"><a href=\"#总体愿景：演进、集成与赋能\" class=\"headerlink\" title=\"总体愿景：演进、集成与赋能\"></a><strong>总体愿景：演进、集成与赋能</strong></h3><p><strong>综合来看，Spring 社区人员传递的核心信息是强调了 Spring 从其  foundational principles（“Beans”）出发，历经当前主流形态（“Boot”）和现代架构考量（如AOT、性能等“Aspects”），最终拥抱下一个主要技术浪潮（“AI”）的持续演进过程</strong>。其愿景是将各种复杂而强大的技术（如多样化的 AI模型、向量数据库）无缝集成到开发者熟悉且高效的 Spring 生态系统中，从而赋能数百万 Java 开发者。</p>\n<p>主题演讲的嘉宾名单 涵盖了框架、AI、数据、Boot、Web等各个领域的领军人物。这些专家在后续的分论坛中，也分别就各自的专业领域进行了深入的阐述。而“从Beans到Boot，从Aspects到AI”这一议题，则因其汇集了 Spring 的创始人和核心领导者，承担了提纲挈领、勾勒战略全貌的角色。</p>\n<h1 id=\"Spring-与-JDK-25-的协同\"><a href=\"#Spring-与-JDK-25-的协同\" class=\"headerlink\" title=\"Spring 与 JDK 25 的协同\"></a>Spring 与 JDK 25 的协同</h1><p><strong>1、Spring Framework 7 与 JDK 25：战略同盟</strong></p>\n<p>Spring Framework 7.0的正式版（GA）计划于2025年11月发布，并明确指出其“为即将于同年9月发布的JDK 25这一新的LTS版本进行了优化” 。JDK 25的正式发布日期为2025年9月16日。这种紧密的发布节奏凸显了Spring与Java平台核心演进的深度整合战略。更重要的是，Spring Framework 7 将作为 Spring Boot 4.0 的 Cornerstone（基石）。</p>\n<p><strong>2、借助 Project Leyden 提升性能</strong></p>\n<p>Spring Framework 7 和 Spring Boot 4 将通过引入 Project Leyden 等特性，为现代应用架构赋能。大会为此设立了专门的议题，如Moritz Halbritter 主讲的《通过 Spring Boot 和 Project Leyden 提升性能表现》，以及《降低Java启动时间的四种方法：AppCDS、Native Image、Project Leyden、CRaC》。<strong>Project Leyden 本质上市通过选择性预编译（AOT）和缓存机制来改善应用的启动时间和内存占用的。</strong></p>\n<p><strong>3、JDK 25关键特性及其对Spring开发的影响</strong></p>\n<ul>\n<li><strong>Instance Main Methods</strong>：JEP 512 <em>紧凑源文件和实例主方法</em> 在JDK 25中正式确定。该特性简化了基础 Java 应用的编写，对于初学者或简单用例而言，能够使 Spring Boot 或者 JAVA 应用的入口点更加简洁(更类似 python 或者 go) 。</li>\n<li>**结构化并发 (Structured Concurrency) (第五预览版 - JEP 505)**：简化了并发编程的复杂性，使得编写健壮且易于维护的多线程Spring 应用更为容易，尤其是在结合虚拟线程使用时。</li>\n<li>**作用域值 (Scoped Values) (JEP 506)**：提供了一种现代化的方式在线程内部及线程之间共享数据，有望简化 Spring 应用中的上下文传播，特别是在响应式和虚拟线程场景下（ThreadLocal 的直接替代品）。</li>\n<li><strong>其他针对 JDK 25 的JEPs</strong>：稳定值（预览版）、移除32位x86 端口、模式匹配中的基本类型（第三预览版）、向量API（第十孵化版）、密钥派生函数API、模块导入声明、灵活构造函数体、AOT命令行人体工程学、AOT方法分析、紧凑对象头。这些特性将共同提升运行于JDK 25之上的Spring应用的性能、安全性及开发者体验。</li>\n</ul>\n<p><strong>4、对 Spring Boot 4.0 及生态系统的意义</strong></p>\n<p>Spring Boot 4.0 将通过 Spring Framework 7 自然继承这些 JDK 25 的优化成果。可以预见，新版本的 Spring Boot 将在开箱即用的性能、资源消耗以及对现代 Java 并发模型的支持方面带来显著提升。</p>\n<p><strong>表：与Spring应用相关的JDK 25关键特性</strong></p>\n<table>\n<thead>\n<tr>\n<th><strong>特性 (JEP)</strong></th>\n<th><strong>描述</strong></th>\n<th><strong>对Spring生态的潜在影响</strong></th>\n</tr>\n</thead>\n<tbody><tr>\n<td>Project Leyden</td>\n<td>通过选择性AOT编译和缓存来优化Java应用启动时间和内存占用。</td>\n<td>Spring Boot应用启动更快，资源消耗更少，尤其利好云原生和Serverless场景。</td>\n</tr>\n<tr>\n<td>JEP 512: 紧凑源文件和实例主方法</td>\n<td>简化Java程序编写，允许更简洁的语法和核心库的自动导入。</td>\n<td>降低Spring Boot应用入门门槛，使简单应用的入口点更简洁。</td>\n</tr>\n<tr>\n<td>JEP 505: 结构化并发 (第五预览版)</td>\n<td>简化并发编程，提供更可靠的错误处理和取消机制。</td>\n<td>提升Spring应用中并发代码的健壮性和可维护性，尤其与虚拟线程结合时。</td>\n</tr>\n<tr>\n<td>JEP 506: 作用域值</td>\n<td>提供在线程内和跨线程安全共享不可变数据的新机制。</td>\n<td>简化Spring应用中的上下文传播，例如在请求处理链路中传递用户信息或追踪ID，特别是在响应式和虚拟线程环境中。</td>\n</tr>\n<tr>\n<td>JEP 508: 向量API (第十孵化版)</td>\n<td>提供表达向量计算的API，这些计算在运行时可靠地编译为CPU架构上的最佳向量指令。</td>\n<td>为Spring应用中需要高性能数值计算的场景（如AI、机器学习）提供底层支持。</td>\n</tr>\n<tr>\n<td>JEP 511: 模块导入声明</td>\n<td>允许简洁地导入模块导出的所有包。</td>\n<td>简化Spring应用在使用Java模块系统时的依赖管理和代码组织。</td>\n</tr>\n<tr>\n<td>JEP 513: 灵活构造函数体</td>\n<td>允许在构造函数中调用<code>super(...)</code>或<code>this(...)</code>之前执行语句。</td>\n<td>提高Spring组件初始化的灵活性和代码可读性。</td>\n</tr>\n<tr>\n<td>JEP 514&#x2F;515: AOT命令行人体工程学&#x2F;AOT方法分析</td>\n<td>改进AOT编译的工具和分析能力。</td>\n<td>进一步推动Spring Native等AOT编译方案的发展，提升开发者体验和应用性能。</td>\n</tr>\n</tbody></table>\n<p>JDK 25 对于 Spring 而言，不仅仅是一次版本升级，更是下一代框架实现架构和性能突破的基础性赋能。Spring Framework 7&#x2F;Boot 4与JDK 25的紧密耦合，特别是对 Project Leyden 和现代并发 API 的深度利用，表明 Spring 正将 JDK 25 视为实现显著架构演进和性能优化的关键驱动力。Spring Boot 团队成员 Moritz Halbritter 关于 Project Leyden 的专门议题，以及 JDK 25 GA（2025年9月）与 Spring Framework 7 GA（2025年11月）之间短暂的时间差，都印证了 Spring 团队对 JDK 25 各项重要特性（如结构化并发、作用域值）的积极整合与测试。这充分说明 Spring 的策略是全面拥抱并构建于 JDK 25 的这些进步之上，从而为开发者提供性能更优、效率更高、体验更现代的开发平台，使 JDK 25 成为其下一代产品的核心基石。</p>\n<h1 id=\"Spring-AI-1-0-GA-与智能应用的普惠化\"><a href=\"#Spring-AI-1-0-GA-与智能应用的普惠化\" class=\"headerlink\" title=\"Spring AI 1.0 GA 与智能应用的普惠化\"></a>Spring AI 1.0 GA 与智能应用的普惠化</h1><p><strong>1、里程碑式的发布：Spring AI 1.0正式版 (GA)</strong></p>\n<p>Spring AI 1.0 GA 已于 2025 年 5 月 20 日正式发布，这一时间点的选择极具战略意义，恰逢 SpringIO 2025 大会前夕。这标志着一个重要的里程碑，使得 AI 开发对于庞大的 Spring 开发者社区而言变得更加触手可及。Spring AI 目的就是简化 AI 工程的复杂性，毕竟对于 90% 的用例而言，AI 工程“仅仅是与模型的集成”。为庆祝这一发布，Spring AI 还拥有了由 Sergi Almar 和 Jorge Rigabert 设计的全新官方 Logo。</p>\n<p><img src=\"https://vspicgo.oss-cn-shanghai.aliyuncs.com/typora/spring-ai-logo.png\" alt=\"img\"></p>\n<p><strong>2、Spring AI 1.0 GA 的核心组件与能力</strong></p>\n<ul>\n<li><code>ChatClient</code> API：作为与 AI 模型交互的主要接口，具有可移植性和易用性。<ul>\n<li>支持调用多达 <strong>20种不同的AI模型</strong>（从Anthropic到ZhiPu）。</li>\n<li>支持<strong>多模态输入输出</strong>（需底层模型支持）。</li>\n<li>支持<strong>结构化响应</strong>（通常为JSON格式），便于应用层处理。</li>\n</ul>\n</li>\n<li>向量存储抽象 (Vector Store Abstraction)：提供了可移植的向量数据库API。<ul>\n<li>支持 <strong>20种不同的向量数据库</strong>（例如Azure Cosmos DB、Weaviate、以及通过社区贡献支持的Redis、MongoDB等）。</li>\n<li>包含一种<strong>可移植的过滤器表达式语言</strong>（类SQL语法），用于元数据过滤，并支持回退到原生查询。</li>\n</ul>\n</li>\n<li>ETL框架 (ETL Framework)：轻量级、可配置的框架，用于将数据导入向量存储。<ul>\n<li>通过可插拔的<code>DocumentReader</code>组件支持多种数据源（本地文件、网页、GitHub、AWS S3、Azure Blob Storage、Google Cloud Storage、Kafka、MongoDB、JDBC兼容数据库等）。</li>\n</ul>\n</li>\n<li>检索增强生成 (RAG) 支持 (Retrieval Augmented Generation Support)：为RAG模式提供广泛支持，使AI模型的响应能够基于所提供的数据进行。<ul>\n<li><strong>增强型LLM</strong>（Augmented LLM）概念为基础模型交互增加了数据检索、对话记忆和工具调用等能力。</li>\n<li><strong>Advisors</strong>特性通过注入检索到的数据和对话记忆来修改传入的提示。</li>\n<li>大会的相关议题，如《SpringAI在现代企业应用中的实用Agentic RAG》和《使用Java和Spring AI的模块化RAG架构》，深入探讨了这一领域。</li>\n</ul>\n</li>\n<li>评估框架 (Evaluation Framework)<ul>\n<li>灵活的<code>Evaluator</code>接口。</li>\n<li><code>RelevancyEvaluator</code>：评估AI响应是否与用户查询及检索到的上下文匹配。</li>\n<li><code>FactCheckingEvaluator</code>：基于提供的上下文验证AI响应的事实准确性（可使用如通过Ollama运行的Bespoke Minicheck等较小模型）。</li>\n</ul>\n</li>\n<li>可观测性 (Observability)：<ul>\n<li>与<strong>Micrometer</strong>集成，提供关键指标的遥测数据（模型延迟、Token用量、工具调用、检索次数等）。</li>\n<li>通过Micrometer Tracing提供完整的<strong>追踪支持</strong>。</li>\n<li>提供有助于故障排查的日志信息。</li>\n</ul>\n</li>\n<li>Agentic工作流模式与Spring MCP Agent (Agentic Workflow Patterns &amp; Spring MCP Agent)<ul>\n<li>支持构建Agent行为的结构化模式（例如，<strong>评估者优化器</strong>模式，模型通过结构化的自我评估过程来优化其响应）。</li>\n<li>孵化中的<strong>Spring MCP (Model Context Protocol) Agent项目</strong>，用于创建能够自主决策、通过MCP动态发现和使用工具、维护执行记忆并根据结果递归优化策略的Agent。</li>\n<li>相关议题：《从单次LLM调用到智能Agent：使用Spring AI和MCP构建可扩展AI系统》，《Spring AI大师课：构建高效Agent并探索模型上下文协议(MCP)》。</li>\n<li>基于 OAuth2 的 MCP 授权也是一个焦点。</li>\n</ul>\n</li>\n<li>**开发者体验 (Developer Experience)**：集成了Spring Boot的DevTools、Docker Compose和Testcontainers支持。支持虚拟线程和GraalVM原生镜像。</li>\n</ul>\n<p><strong>3、实用案例与开发者指南</strong></p>\n<p>Spring AI 的重点在于赋能 Java 开发者构建智能化应用，例如通过集成 LLM 实现基于私有数据的问答、内容生成、摘要提取以及构建AI Agent等。Spring Initializr 现已集成 Spring AI，极大地简化了项目的启动和配置过程。</p>\n<p><strong>表：Spring AI 1.0 GA - 核心组件与能力</strong></p>\n<table>\n<thead>\n<tr>\n<th><strong>组件&#x2F;特性</strong></th>\n<th><strong>描述</strong></th>\n<th><strong>关键支持技术&#x2F;模型</strong></th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>ChatClient</code> API</td>\n<td>与AI模型交互的主要可移植接口。</td>\n<td>支持20种AI模型（如OpenAI, Azure OpenAI, Anthropic, Ollama, Bedrock, Vertex AI, ZhiPu等），支持多模态输入输出，结构化响应（JSON）。</td>\n</tr>\n<tr>\n<td>向量存储抽象 (Vector Store Abstraction)</td>\n<td>提供操作向量数据库的可移植API。</td>\n<td>支持20种向量数据库（如Azure Cosmos DB, Weaviate, Pinecone, Milvus, Redis, MongoDB, Chroma, PGVector等），提供可移植的元数据过滤表达式语言。</td>\n</tr>\n<tr>\n<td>ETL框架 (ETL Framework)</td>\n<td>轻量级、可配置的数据导入框架，用于将数据加载到向量存储中。</td>\n<td>支持多种<code>DocumentReader</code>（文件系统, 网页, GitHub, S3, Azure Blob, GCS, Kafka, MongoDB, JDBC等）和<code>DocumentTransformer</code>。</td>\n</tr>\n<tr>\n<td>检索增强生成 (RAG) 支持</td>\n<td>广泛支持RAG模式，通过外部知识库增强LLM响应。</td>\n<td>包括数据检索、对话记忆、工具调用（函数调用）等。</td>\n</tr>\n<tr>\n<td>评估框架 (Evaluation Framework)</td>\n<td>用于评估AI模型响应质量的工具。</td>\n<td><code>RelevancyEvaluator</code>评估相关性，<code>FactCheckingEvaluator</code>评估事实准确性。</td>\n</tr>\n<tr>\n<td>可观测性 (Observability)</td>\n<td>集成监控和追踪能力。</td>\n<td>与Micrometer集成，提供模型延迟、Token用量等指标；通过Micrometer Tracing提供完整追踪。</td>\n</tr>\n<tr>\n<td>Agentic工作流模式与Spring MCP Agent</td>\n<td>支持构建更复杂的AI Agent行为和多Agent协作。</td>\n<td>孵化中的Spring MCP Agent项目，支持动态工具发现、执行记忆、递归策略优化。</td>\n</tr>\n<tr>\n<td>开发者体验</td>\n<td>提升AI应用开发的便捷性和效率。</td>\n<td>集成Spring Boot DevTools, Docker Compose, Testcontainers；支持虚拟线程和GraalVM原生镜像。</td>\n</tr>\n</tbody></table>\n<p>Spring AI 的设计目标并不仅仅是用于实验性项目，而是致力于构建生产级的AI应用。这一点从其内置的全面可观测性套件（如Micrometer集成和追踪功能）、强大的评估框架（包括<code>RelevancyEvaluator</code>和<code>FactCheckingEvaluator</code>）以及对RAG和Agentic工作流等生产级模式的支持中可见一斑。这些特性表明，Spring AI 旨在帮助开发者构建和部署严肃的企业级 AI 应用，而不仅仅是简单的LLM封装。Spring AI继承了Spring Boot注重生产就绪的理念，为虚拟线程、GraalVM原生镜像和通过Micrometer实现的可观测性提供了支持 。这些远超基本模型交互的功能，是面向真实世界、对可靠性、可监控性和质量保证有严格要求的生产部署的标志。</p>\n<h1 id=\"Spring核心演进：Framework-7、Boot-4与生态系统增强\"><a href=\"#Spring核心演进：Framework-7、Boot-4与生态系统增强\" class=\"headerlink\" title=\"Spring核心演进：Framework 7、Boot 4与生态系统增强\"></a>Spring核心演进：Framework 7、Boot 4与生态系统增强</h1><h3 id=\"Spring-Framework-7-0：下一代基石\"><a href=\"#Spring-Framework-7-0：下一代基石\" class=\"headerlink\" title=\"Spring Framework 7.0：下一代基石\"></a>Spring Framework 7.0：下一代基石</h3><ul>\n<li><strong>GA时间表</strong>：计划于2025年11月发布。</li>\n<li><strong>核心原则</strong>：基于JDK 17基线构建，并针对JDK 25 LTS进行优化。</li>\n<li>架构转变<ul>\n<li>支持以编程方式注册Bean，包括对AOT（Ahead-of-Time）编译的支持。这提供了更大的灵活性，并通过允许更多的预处理来改善启动时间。</li>\n</ul>\n</li>\n<li>Web技术进展：<ul>\n<li>为Web端点提供API版本控制功能。这对于在微服务和大型应用中演进API至关重要。Rossen Stoyanchev的议题“Spring Framework 7中的API版本控制”对此进行了深入探讨。</li>\n</ul>\n</li>\n<li>集成改进<ul>\n<li>统一的 JMS 客户端。</li>\n<li>支持 Jakarta EE 11。相关议题：“每个Spring开发者都应该了解的Jakarta EE” 。</li>\n<li>针对部分泛型的通用类型匹配算法的修订。</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"Spring-Boot-4-0：构建于新基石之上\"><a href=\"#Spring-Boot-4-0：构建于新基石之上\" class=\"headerlink\" title=\"Spring Boot 4.0：构建于新基石之上\"></a><strong>Spring Boot 4.0：构建于新基石之上</strong></h3><p><strong>表：预期特性亮点 - Spring Framework 7 &amp; Spring Boot 4</strong></p>\n<table>\n<thead>\n<tr>\n<th><strong>领域</strong></th>\n<th><strong>特性</strong></th>\n<th><strong>描述&#x2F;益处</strong></th>\n<th><strong>相关框架&#x2F;Boot版本</strong></th>\n</tr>\n</thead>\n<tbody><tr>\n<td>核心与性能</td>\n<td>JDK 25 优化</td>\n<td>充分利用JDK 25 LTS的新特性和性能改进。</td>\n<td>SF7, SB4</td>\n</tr>\n<tr>\n<td>核心与性能</td>\n<td>Project Leyden 集成</td>\n<td>提升启动速度，减少内存占用，支持选择性AOT编译。</td>\n<td>SF7, SB4</td>\n</tr>\n<tr>\n<td>核心</td>\n<td>编程式Bean注册 (含AOT支持)</td>\n<td>提供更灵活的Bean定义方式，有利于AOT处理和提升启动性能。</td>\n<td>SF7</td>\n</tr>\n<tr>\n<td>Web</td>\n<td>Web端点API版本控制</td>\n<td>简化API演进管理，支持不同版本的API共存。</td>\n<td>SF7</td>\n</tr>\n<tr>\n<td>语言支持</td>\n<td>Kotlin 2.x 支持</td>\n<td>为Kotlin开发者提供更佳的开发体验和性能优化。</td>\n<td>SB4</td>\n</tr>\n<tr>\n<td>集成</td>\n<td>统一JMS客户端</td>\n<td>简化JMS消息传递的开发和配置。</td>\n<td>SF7</td>\n</tr>\n<tr>\n<td>集成</td>\n<td>Jakarta EE 11 支持</td>\n<td>确保与最新的Java EE标准兼容。</td>\n<td>SF7</td>\n</tr>\n<tr>\n<td>核心</td>\n<td>修订的泛型类型匹配算法</td>\n<td>改进对复杂泛型场景的处理。</td>\n<td>SF7</td>\n</tr>\n</tbody></table>\n<p>Spring Framework 7 和 Boot 4 不仅仅是增量更新，它们代表了一次代际的飞跃。其核心焦点在于与最新的 Java LTS 版本（JDK 25）的深度集成，通过拥抱 AOT 和 Project Leyden 实现显著的性能和效率提升，并对核心编程模型（如编程式Bean注册、API版本控制）进行现代化改造，以满足当代应用架构的需求。Spring Framework 7 被明确定义为<strong>面向2026年及未来的新一代</strong>框架，并作为 Spring Boot 4.0 的基础，与 JDK 25 和 Project Leyden 紧密相连。诸如<strong>编程式Bean注册（包含AOT支持）和Web端点API版本控制</strong> 等特性，是重要的架构级增强，而非微小的调整。核心团队成员主导的关于 Project Leyden 和Spring Framework 7 API 版本控制的专门议题，也证实了这些是重大的研发投入。</p>\n<h1 id=\"开发者路线图\"><a href=\"#开发者路线图\" class=\"headerlink\" title=\"开发者路线图\"></a>开发者路线图</h1><p><strong>对 Java开发者来说，JDK 25 的到来、Spring AI 的成熟以及Spring Framework 7&#x2F;Boot 4的革新，将共同重塑 Java 开发的格局。性能提升、开发者生产力的进一步解放，以及 AI 赋能应用新领域的拓展，将成为未来的主旋律。Spring 致力于降低企业采纳AI技术的门槛，这一点在其战略中表现得尤为突出。</strong></p>\n<p>展望未来，Spring 一定会继续深化其 AI 集成能力，未来可能提供更复杂的 Agentic 框架和 MLOps（机器学习运维）支持。基于 Project Leyden 和 AOT 的成果，Spring 将进一步优化对 Serverless 和边缘计算场景的支持。</p>\n<p><strong>Spring 和 Java 领域（尤其是在AI方面）的创新步伐也倒逼咱们这些普通的 JAVA 开发者必须主动学习和跟进新特性发展。</strong></p>\n<h1 id=\"结论\"><a href=\"#结论\" class=\"headerlink\" title=\"结论\"></a>结论</h1><p>SpringIO 2025 大会传递的核心信息清晰而有力：<strong>与 JDK 25 的深度协同将为性能和现代化带来新机遇；Spring AI 1.0的正式发布为Java应用智能化开辟了广阔前景；而Spring Framework 7和Boot 4的底层革新则为整个生态的未来发展奠定了坚实基础</strong>。</p>\n<p>Spring 框架凭借其强大的适应性和持续的创新力，在 Java 生态系统中始终扮演着框架层面事情标准的角色，不仅积极适应技术发展，更在许多方面引领着行业发展方向。SpringIO 2025 大会，特别是在 Java 迎来 30 周年之际，再次印证了 Spring 持久的创新精神和强劲的发展势头，预示着它将继续在未来的软件开发领域中发挥关键作用。<strong>作为 java 开发者来说，AI 时代可能是继 web 时代再一次起飞的时机，相比于 python 来说，Java 在企业级、大规模应用工程化上面积累的的优势还是非常大的</strong>。</p>\n","feature":true,"text":"2025 Spring IO 大会于 2025 年 5 月 21 日至 23 日在西班牙巴塞罗那举行。作为 Spring Framework 生态系统的顶尖会议...","permalink":"/post/llm/spring-io-2025","photos":[],"count_time":{"symbolsCount":"11k","symbolsTime":"10 mins."},"categories":[{"name":"LLM","slug":"LLM","count":6,"path":"api/categories/LLM.json"}],"tags":[{"name":"Spring AI","slug":"Spring-AI","count":2,"path":"api/tags/Spring-AI.json"},{"name":"Spring IO","slug":"Spring-IO","count":1,"path":"api/tags/Spring-IO.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E6%80%BB%E4%BD%93%E6%84%BF%E6%99%AF\"><span class=\"toc-text\">总体愿景</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E4%B8%BB%E9%A2%98%E6%BC%94%E8%AE%B2\"><span class=\"toc-text\">主题演讲</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%A0%B8%E5%BF%83-topic-%E7%9A%84%E4%BF%A1%E6%81%AF%E4%BC%A0%E9%80%92\"><span class=\"toc-text\">核心 topic 的信息传递</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%80%BB%E4%BD%93%E6%84%BF%E6%99%AF%EF%BC%9A%E6%BC%94%E8%BF%9B%E3%80%81%E9%9B%86%E6%88%90%E4%B8%8E%E8%B5%8B%E8%83%BD\"><span class=\"toc-text\">总体愿景：演进、集成与赋能</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#Spring-%E4%B8%8E-JDK-25-%E7%9A%84%E5%8D%8F%E5%90%8C\"><span class=\"toc-text\">Spring 与 JDK 25 的协同</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#Spring-AI-1-0-GA-%E4%B8%8E%E6%99%BA%E8%83%BD%E5%BA%94%E7%94%A8%E7%9A%84%E6%99%AE%E6%83%A0%E5%8C%96\"><span class=\"toc-text\">Spring AI 1.0 GA 与智能应用的普惠化</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#Spring%E6%A0%B8%E5%BF%83%E6%BC%94%E8%BF%9B%EF%BC%9AFramework-7%E3%80%81Boot-4%E4%B8%8E%E7%94%9F%E6%80%81%E7%B3%BB%E7%BB%9F%E5%A2%9E%E5%BC%BA\"><span class=\"toc-text\">Spring核心演进：Framework 7、Boot 4与生态系统增强</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Spring-Framework-7-0%EF%BC%9A%E4%B8%8B%E4%B8%80%E4%BB%A3%E5%9F%BA%E7%9F%B3\"><span class=\"toc-text\">Spring Framework 7.0：下一代基石</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Spring-Boot-4-0%EF%BC%9A%E6%9E%84%E5%BB%BA%E4%BA%8E%E6%96%B0%E5%9F%BA%E7%9F%B3%E4%B9%8B%E4%B8%8A\"><span class=\"toc-text\">Spring Boot 4.0：构建于新基石之上</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E5%BC%80%E5%8F%91%E8%80%85%E8%B7%AF%E7%BA%BF%E5%9B%BE\"><span class=\"toc-text\">开发者路线图</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E7%BB%93%E8%AE%BA\"><span class=\"toc-text\">结论</span></a></li></ol>","author":{"name":"glmapper","slug":"blog-author","avatar":"https://glmapper-blog.oss-cn-hangzhou.aliyuncs.com/common/favicon.ico","link":"/","description":"开放，开源，分享，共享","socials":{"github":"https://github.com/glmapper","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/2412872703","zhihu":"","csdn":"","juejin":"https://juejin.cn/user/3227821827961806","customs":{"sofastack":{"icon":"https://glmapper-blog.oss-cn-hangzhou.aliyuncs.com/common/sofastack.svg","link":"https://www.sofastack.tech/"}}}},"mapped":true,"hidden":false,"prev_post":{"title":"2025年红杉 AI 闭门峰会深度解读报告","uid":"91d464e1423ffb0b86ad81af72aa75e0","slug":"llm/hongshan-ai-2025","date":"2025-05-26T03:31:45.000Z","updated":"2025-05-26T03:33:33.852Z","comments":true,"path":"api/articles/llm/hongshan-ai-2025.json","keywords":"宋国磊, glmapper, 卫恒, 分享, 开源","cover":null,"text":"I. 执行摘要：解码2025年红杉 AI Ascent 峰会2025年5月2日于旧金山举行的红杉AI Ascent峰会（Sequoia AI Ascent 20...","permalink":"/post/llm/hongshan-ai-2025","photos":[],"count_time":{"symbolsCount":"31k","symbolsTime":"28 mins."},"categories":[{"name":"LLM","slug":"LLM","count":6,"path":"api/categories/LLM.json"}],"tags":[{"name":"AI","slug":"AI","count":1,"path":"api/tags/AI.json"}],"author":{"name":"glmapper","slug":"blog-author","avatar":"https://glmapper-blog.oss-cn-hangzhou.aliyuncs.com/common/favicon.ico","link":"/","description":"开放，开源，分享，共享","socials":{"github":"https://github.com/glmapper","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/2412872703","zhihu":"","csdn":"","juejin":"https://juejin.cn/user/3227821827961806","customs":{"sofastack":{"icon":"https://glmapper-blog.oss-cn-hangzhou.aliyuncs.com/common/sofastack.svg","link":"https://www.sofastack.tech/"}}}},"feature":true},"next_post":{"title":"Spring AI：赋能 Java 开发者，拥抱生成式 AI 革命","uid":"6957b9d6800587dc8728828eb290b3b7","slug":"llm/spring-ai-intro","date":"2025-05-26T03:26:04.000Z","updated":"2025-05-26T03:27:41.703Z","comments":true,"path":"api/articles/llm/spring-ai-intro.json","keywords":"宋国磊, glmapper, 卫恒, 分享, 开源","cover":[],"text":" https://mp.weixin.qq.com/s/nKp2YyFcxQ6WQoTcSQOB2w微信公众号：磊叔的技术博客 生成式人工智能（Generati...","permalink":"/post/llm/spring-ai-intro","photos":[],"count_time":{"symbolsCount":"18k","symbolsTime":"16 mins."},"categories":[{"name":"LLM","slug":"LLM","count":6,"path":"api/categories/LLM.json"}],"tags":[{"name":"MCP","slug":"MCP","count":2,"path":"api/tags/MCP.json"},{"name":"Spring AI","slug":"Spring-AI","count":2,"path":"api/tags/Spring-AI.json"}],"author":{"name":"glmapper","slug":"blog-author","avatar":"https://glmapper-blog.oss-cn-hangzhou.aliyuncs.com/common/favicon.ico","link":"/","description":"开放，开源，分享，共享","socials":{"github":"https://github.com/glmapper","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/2412872703","zhihu":"","csdn":"","juejin":"https://juejin.cn/user/3227821827961806","customs":{"sofastack":{"icon":"https://glmapper-blog.oss-cn-hangzhou.aliyuncs.com/common/sofastack.svg","link":"https://www.sofastack.tech/"}}}},"feature":true}}