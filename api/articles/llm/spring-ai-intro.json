{"title":"Spring AI：赋能 Java 开发者，拥抱生成式 AI 革命","uid":"6957b9d6800587dc8728828eb290b3b7","slug":"llm/spring-ai-intro","date":"2025-05-26T03:26:04.000Z","updated":"2025-05-26T03:27:41.703Z","comments":true,"path":"api/articles/llm/spring-ai-intro.json","keywords":"宋国磊, glmapper, 卫恒, 分享, 开源","cover":[],"content":"<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p><a href=\"https://mp.weixin.qq.com/s/nKp2YyFcxQ6WQoTcSQOB2w\">https://mp.weixin.qq.com/s/nKp2YyFcxQ6WQoTcSQOB2w</a><br>微信公众号：磊叔的技术博客</p></blockquote>\n<p>生成式人工智能（Generative AI）的浪潮，特别是大型语言模型（LLM）的兴起，正在通过自动化任务、增强用户体验和创造新的内容形式，深刻地改变着各个行业。这些模型能够生成与人类相媲美的文本、图像、音频和视频，其背后是海量数据的训练支撑。在当前 AI&#x2F;ML（人工智能&#x2F;机器学习）的开发领域，Python 凭借其丰富的库、成熟的生态系统以及在数据科学任务中的易用性，占据了绝对主导的地位。</p>\n<span id=\"more\"></span>\n\n<p>在此背景下，Spring AI 应运而生，它是 Spring 团队的战略性举措，其目的是将生成式 AI 的强大能力带给广大的 Java 和 Spring 开发者社群 。Spring AI 的核心目标是将 Spring 生态系统的设计原则，如可移植性、模块化设计以及 POJO（Plain Old Java Object）为中心的开发理念，应用于 AI 工程领域 。其核心愿景是无缝连接企业数据和 API 与各种 AI 模型 。</p>\n<p>Spring AI 的推出不仅仅是简单地增加一个新的 AI 框架，更是 Spring 团队确保 Java 在快速发展的 AI 驱动应用领域中保持其相关性和强大生命力的一项战略部署。考虑到 Python 在 AI 领域的主导地位，以及 Spring 在 Java 企业级应用中的核心地位，Spring AI 致力于在成熟的 Spring 体系中引入 AI 来填补缺失的一环。这一举措的深层动机在于赋能已经熟悉  Spring 生态的开发者，使他们能够在 AI 时代继续发挥其技术优势 。因此，Spring AI 的推出和发展一定程度上保持了庞大的 Java&#x2F;Spring 企业生态系统在新的 AI 时代的竞争力，也避免了企业在 AI 相关应用开发中完全转向于  Python。</p>\n<p>本文将系统性地介绍 Spring AI，深入探讨其发起背景、发展历程、核心功能，分析其在当前 LLM 开发格局中对 Java 开发者的影响和作用，并将其与 LangChain、LlamaIndex 等非 Java 框架以及 Langchain4j 等 Java 框架进行对比。</p>\n<p><img src=\"https://vspicgo.oss-cn-shanghai.aliyuncs.com/typora/image-20250509162930506.png\" alt=\"image-20250509162930506\"></p>\n<h2 id=\"Spring-AI-的起源与演进：从概念到前沿\"><a href=\"#Spring-AI-的起源与演进：从概念到前沿\" class=\"headerlink\" title=\"Spring AI 的起源与演进：从概念到前沿\"></a>Spring AI 的起源与演进：从概念到前沿</h2><h3 id=\"“为何选择-Spring-AI”：项目背后的驱动力\"><a href=\"#“为何选择-Spring-AI”：项目背后的驱动力\" class=\"headerlink\" title=\"“为何选择 Spring AI”：项目背后的驱动力\"></a>“为何选择 Spring AI”：项目背后的驱动力</h3><p>Spring AI 的诞生源于多方面的考量和明确的目标：</p>\n<ul>\n<li><strong>满足企业需求</strong>：Spring AI 致力于解决将 AI 与企业现有数据和 API 集成的核心挑战 。这对于希望利用 AI 提升业务价值的企业至关重要。</li>\n<li><strong>将 Spring 原则应用于 AI</strong>：项目的核心目标之一是将 Spring 成熟的设计哲学——可移植性、模块化设计、POJO 为中心的开发方式扩展到 AI 工程领域 ，使得 AI 开发对于已熟悉 Spring 的开发者而言更加自然和高效。</li>\n<li><strong>打破 Python 在 AI 领域的垄断</strong>：Spring AI 坚信，下一波生成式 AI 应用将不仅仅局限于 Python 开发者，而是会普及到多种编程语言。</li>\n<li><strong>无缝集成</strong>：Spring AI 追求与现有 Spring 生态系统（如Spring Boot, Spring Data等）的无缝集成，允许开发者利用他们已有的知识和代码库，平滑过渡到 AI 应用的开发 。</li>\n</ul>\n<h3 id=\"里程碑之旅：关键发展阶段与版本亮点\"><a href=\"#里程碑之旅：关键发展阶段与版本亮点\" class=\"headerlink\" title=\"里程碑之旅：关键发展阶段与版本亮点\"></a>里程碑之旅：关键发展阶段与版本亮点</h3><p>Spring AI 自 2023 年启动以来，经历了一系列重要的里程碑版本，逐步完善其功能并迈向成熟：</p>\n<ul>\n<li><strong>首次公开发布</strong>：版本 0.8.0 于 2024 年 2 月发布 ，标志着 Spring AI 正式进入公众视野。</li>\n<li><strong>1.0.0-M1 - 2024年5月30日</strong>：引入了多项关键特性，包括<code>ChatClient</code>流式 API、结构化输出（Structured Output）、Advisors、In-Memory Conversational History、New &amp; Updated AI Models 和向量存储支持，以及 Testcontainers 支持 。此版本开始充实核心开发者体验和功能集。</li>\n<li><strong>1.0.0-M2</strong>：重点增加了可观测性功能，利用 Micrometer 为核心组件（如<code>ChatClient</code>, <code>Advisors</code>, 模型, 向量存储）提供度量和追踪支持。</li>\n<li><strong>1.0.0-M4 - 2024年11月20日</strong>：带来了显著增强，包括支持  Amazon Bedrock Converse API（具备工具调用和多模态能力）、改进的 <strong>Tool Calling</strong>（模式配置、自定义响应处理、泛型输入类型、自动模式生成）、Kotlin 支持（类型安全API）、高级和模块化 RAG（包含<code>DocumentCompressor</code>, <code>DocumentRanker</code>, <code>QueryRouter</code>等组件）、新的向量存储实现（Oracle Coherence, Azure Cosmos）以及大规模的文档结构重组 。</li>\n<li><strong>1.0.0-M6 - 2025年2月</strong>：持续从设计角度审视代码库；支持通过新的注解（<code>@Tool</code>, <code>@ToolParam</code>）和类（<code>MethodToolCallback</code>, <code>FunctionToolCallback</code>）以声明式、编程式和函数式方式定义工具；集成了新的模型上下文协议（MCP）Java SDK；增强了向量存储  API 。</li>\n<li><strong>1.0.0-M7 - 2025年4月10日</strong><ul>\n<li><strong>重大的项目结构调整</strong>：从单体核心转变为专门的领域模块（如<code>spring-ai-commons</code>, <code>spring-ai-model</code>, <code>spring-ai-vector-store</code>等）</li>\n<li><strong>包结构重组</strong>：为了更好地反映领域职责，对类进行了迁移 。</li>\n<li><strong>新的和增强的模型集成</strong>：更新了对 Anthropic Claude（Claude 3.7 Sonnet模型，“思考”能力，工具 API 重命名）、Mistral AI（内容审核、自定义结构化输出）、Ollama（min_p参数、新模型）、Azure OpenAI 和 OpenAI 的支持 。</li>\n<li><strong>工具和多模态能力增强</strong>：引入<code>ToolExecutionEligibilityPredicate</code>接口，改进 MCP 工具处理，支持工具调用中Base64 图像 。</li>\n<li><strong>文档处理</strong>：增加了<code>JSoup</code> HTML 文档读取器 。</li>\n<li><strong>聊天记忆</strong>：增加了 JDBC 和 Neo4j 实现，并将 Cassandra 迁移到独立模块。</li>\n<li><strong>RAG改进</strong>：在<code>RetrievalAugmentationAdvisor</code>中为查询增加了上下文支持。</li>\n<li><strong>开发者体验</strong>：更新了 Spring Boot 支持版本，改进了 AOT&#x2F;Native Image 支持。</li>\n</ul>\n</li>\n<li><strong>1.0.0-M8 - 2025年4月30日</strong><ul>\n<li><strong>工具调用的不兼容变更</strong>：废弃的<code>tools()</code>方法被<code>toolCallbacks()</code>和<code>toolNames()</code>取代，以提高清晰度并避免歧义 。提供了 OpenRewrite 用于迁移。</li>\n<li><strong>聊天记忆增强</strong>：引入<code>ChatMemoryRepository</code>接口、<code>MessageWindowChatMemory</code>，改进了属性命名，支持<code>InMemoryChatMemoryRepository</code>和<code>JdbcChatMemoryRepository</code>。</li>\n<li><strong><code>TemplateRenderer</code> API</strong>：新的灵活 API 用于提示模板化（例如<code>StTemplateRenderer</code>, <code>NoOpTemplateRenderer</code>），已集成到<code>ChatClient</code>中。</li>\n<li><strong>增强的MCP工具回调配置</strong> 。</li>\n<li><strong>新增提示工程模式文档</strong> 。</li>\n<li><strong>向量存储更新</strong>：支持 Cosmos DB Entra ID，修复了 Cassandra 相关问题 。</li>\n<li><strong><code>ChatClient</code>更新</strong>：<code>AdvisedRequest</code>&#x2F;<code>Response</code>被<code>ChatClientRequest</code>&#x2F;<code>Response</code>取代 。</li>\n</ul>\n</li>\n<li><strong>通往正式版（GA）之路</strong>：M7 被认为是 RC1 和 GA 之前的最后一个里程碑版本 ，随后发布的 M8 进一步进行了完善。里程碑版本的快速迭代表明项目正积极开发，迈向稳定的 1.0 版本。</li>\n</ul>\n<p>Spring AI 里程碑版本（从 M1 到 M8）的快速迭代和功能丰富性，清晰地展示了一个高度敏捷的开发过程，以及 Spring 生态 致力于迅速将 Spring AI 打造成 Java 开发者在 AI 领域中成熟且全面的框架的坚定决心。回顾其发展历程，从 2024 年 2 月的 0.8.0 版本到 2025 年 4 月的 M8 版本，每个里程碑都带来了实质性的新功能和架构改进，例如 M2 的可观测性，M4 的 Bedrock、Kotlin 和 模块化RAG支持，M7 的项目结构重组，以及 M8 在工具调用、聊天记忆和模板渲染方面的革新。这一系列紧锣密鼓、功能密集的开发周期，不仅反映了 AI 领域本身的动态特性，也表明 Spring AI 正采取一种深思熟虑且积极的策略，旨在短期内实现与更成熟（通常是Python）框架的功能对等，并为庞大的 Spring 企业用户群提供一个强大的解决方案。</p>\n<p>此外，M7 版本中向模块化架构的转变，是 Spring AI 迈向生产就绪的 1.0 版本的一个关键标志。早期框架为了快速原型验证，往往采用单体结构。M7 明确引入了重大的项目重构，将核心功能拆分为专门的领域模块。这样做的好处显而易见：最大限度地降低了传递性依赖带来的冲突风险，并实现了更清晰的关注点分离。这些优势对于企业级应用至关重要，因为在这些场景中，部署规模、稳定性及可维护性是核心考量。因此，这种结构调整清楚地表明，Spring AI 正从实验阶段演进到专注于企业级生产就绪和长期可维护性的阶段，为稳定的 GA 版本铺平了道路。</p>\n<h2 id=\"Spring-AI-的核心能力与架构\"><a href=\"#Spring-AI-的核心能力与架构\" class=\"headerlink\" title=\"Spring AI 的核心能力与架构\"></a>Spring AI 的核心能力与架构</h2><h3 id=\"基本原则\"><a href=\"#基本原则\" class=\"headerlink\" title=\"基本原则\"></a>基本原则</h3><p>Spring AI 的设计和实现遵循了 Spring 生态一贯的核心原则，即为 Java 开发者提供熟悉且高效的 AI 开发体验：</p>\n<ul>\n<li><strong>可移植性与模块化</strong>：核心设计目标之一是允许开发者轻松切换不同的 AI 提供商和组件。M7 版本的项目结构重组进一步强化了模块化特性，工程上可以根据业务需求进行功能模块的按需引入。</li>\n<li><strong>POJO为中心的设计</strong>：提倡使用简单 Java 对象（POJO）作为应用程序的构建块，这与标准的 Spring 实践保持一致，降低了学习门槛 。</li>\n<li><strong>Spring Boot 深度集成</strong>：通过自动配置和启动器（Starters）为模型和向量存储提供支持，使得通过<code>start.spring.io</code>进行项目初始化和配置变得非常简单和便捷。</li>\n</ul>\n<h3 id=\"对多样化-LLM-和模型类型的全面支持\"><a href=\"#对多样化-LLM-和模型类型的全面支持\" class=\"headerlink\" title=\"对多样化 LLM 和模型类型的全面支持\"></a>对多样化 LLM 和模型类型的全面支持</h3><p>Spring AI 致力于提供广泛的 AI 模型支持，确保开发者可以灵活选择最适合其需求的模型：</p>\n<ul>\n<li><strong>LLM 提供商支持</strong>：包括 Anthropic、OpenAI、Microsoft Azure、Amazon Bedrock（及其Converse API）、Google（Vertex AI, Gemini）、Ollama、Mistral AI 等主流和新兴的 LLM 提供商 。</li>\n<li><strong>支持的模型类型</strong>：涵盖聊天补全（Chat Completion）、嵌入（Embedding）、文本转图像（Text to Image）、音频转录（Audio Transcription）、文本转语音（Text to Speech）以及内容审核（Moderation）等多种 AI 能力。</li>\n<li><strong>可移植 API</strong>：为不同的 AI 提供商提供了一致的 API 接口，支持同步和流式两种交互方式，并且允许访问特定于模型的功能。</li>\n</ul>\n<h3 id=\"统一的向量存储-API\"><a href=\"#统一的向量存储-API\" class=\"headerlink\" title=\"统一的向量存储 API\"></a>统一的向量存储 API</h3><p>在构建基于检索增强生成（RAG）等 AI 应用时，向量数据库扮演着至关重要的角色，Spring AI 提供了强大的支持：</p>\n<ul>\n<li><strong>向量存储支持</strong>：集成了众多主流向量数据库，如 Apache Cassandra, Azure Vector Search, Chroma, Milvus, MongoDB Atlas, Neo4j, Oracle, PostgreSQL&#x2F;PGVector, PineCone, Qdrant, Redis, Weaviate, MariaDB, OpenSearch, Oracle Coherence, Azure Cosmos。</li>\n<li><strong>可移植 API</strong>：提供了跨向量存储的一致性 API，包括一个新颖的类 SQL 元数据过滤 API，简化了数据检索和筛选操作。</li>\n<li><strong>构建器模式</strong>：为了简化初始化过程，为某些向量存储（如Chroma）和组件（如<code>TokenTextSplitter</code>）提供了构建器模式。</li>\n</ul>\n<h3 id=\"核心抽象与接口\"><a href=\"#核心抽象与接口\" class=\"headerlink\" title=\"核心抽象与接口\"></a>核心抽象与接口</h3><p>Spring AI 通过一系列精心设计的抽象和接口，为开发者提供了与 AI 模型和服务交互的规范方式：</p>\n<ul>\n<li>**<code>AiClient</code> (早期抽象)**：这是一个接口，曾有针对 OpenAI 和 Azure OpenAI 的实现，提供<code>generate(String message)</code>和<code>generate(Prompt prompt)</code>等方法 。</li>\n<li>**<code>ChatClient</code>**：一个流式 API，用于与 AI 聊天模型进行通信，其风格与 Spring 开发者熟悉的<code>WebClient</code>和<code>RestClient</code>类似 。M8 版本更新后，<code>ChatClient</code>开始使用<code>ChatClientRequest</code>和<code>ChatClientResponse</code>。</li>\n<li>**<code>Prompt</code>**：代表一个参数化的<code>Message</code>对象列表，是与模型交互的输入单元 。</li>\n<li>**<code>Message</code>**：一个接口，定义了消息内容（<code>getContent()</code>）、属性（<code>getProperties()</code>）和消息类型（<code>getMessageType()</code>）。</li>\n<li>**<code>AiResponse</code> (早期抽象)**：包含一个<code>Generation</code>对象列表，代表 AI 模型的响应 。</li>\n<li>**<code>Generation</code> (早期抽象)**：持有生成的文本内容和相关的元数据信息 。</li>\n</ul>\n<h3 id=\"提示、模板与结构化输出\"><a href=\"#提示、模板与结构化输出\" class=\"headerlink\" title=\"提示、模板与结构化输出\"></a>提示、模板与结构化输出</h3><p>有效的 prompt 工程是发挥 LLM 能力的关键，Spring AI 提供了相应工具来简化这一过程：</p>\n<ul>\n<li>**提示模板 (Prompt Templates)**：允许预先定义提示结构，并在运行时替换其中的关键字。模板可以直接从资源文件中加载，便于管理和复用。</li>\n<li>**<code>TemplateRenderer</code> API (M8新增)**：这是一个灵活的新 API，用于提示模板的渲染（例如<code>StTemplateRenderer</code>, <code>NoOpTemplateRenderer</code>），并已集成到<code>ChatClient</code>中，简化了模板化操作 。</li>\n<li>**结构化输出 (Structured Outputs)**：支持将 AI 模型的输出直接映射到 POJO，这有助于模型理解期望的输出格式，并简化了后续的数据处理。</li>\n</ul>\n<h3 id=\"函数调用与工具集成\"><a href=\"#函数调用与工具集成\" class=\"headerlink\" title=\"函数调用与工具集成\"></a>函数调用与工具集成</h3><p>为了让 AI 应用能够与外部世界交互并执行具体任务，Spring AI 引入了强大的函数调用（现称为工具调用）能力：</p>\n<p><img src=\"https://vspicgo.oss-cn-shanghai.aliyuncs.com/typora/image-20250509163021326.png\" alt=\"image-20250509163021326\"></p>\n<ul>\n<li>允许模型请求执行客户端的工具和函数，以便访问实时信息或执行特定操作。</li>\n<li>M4 版本改进了<code>FunctionCallback</code>构建器，支持<code>java.util.Function</code>, <code>Supplier</code>, <code>Consumer</code>, <code>BiFunction&lt;I, ToolContext, O&gt;</code>接口以及方法调用。</li>\n<li>M6 版本引入了<code>@Tool</code>和<code>@ToolParam</code>注解，以及<code>MethodToolCallback</code>和<code>FunctionToolCallback</code>类，进一步规范了工具的定义和使用。</li>\n<li>M7 版本为了保持一致性，将与函数相关的 API 重命名为与工具相关的 API（例如，在 Anthropic Claude 集成中），并引入了<code>ToolExecutionEligibilityPredicate</code>接口。</li>\n<li>M8 版本带来了破坏性变更，用更清晰的<code>toolCallbacks()</code>和<code>toolNames()</code>方法取代了已废弃的<code>tools()</code>方法，以避免歧义。</li>\n</ul>\n<h3 id=\"检索增强生成-RAG\"><a href=\"#检索增强生成-RAG\" class=\"headerlink\" title=\"检索增强生成 (RAG)\"></a>检索增强生成 (RAG)</h3><p>RAG 是提升 LLM 回答相关性和准确性的关键技术，Spring AI 对此提供了全面的支持：</p>\n<ul>\n<li><strong>文档注入 ETL 框架</strong>：为 RAG 的数据工程方面提供支持，简化数据准备流程。</li>\n<li>**高级和模块化 RAG (M4)**：包含了如<code>QueryTransformer</code>, <code>QueryExpander</code>, <code>QueryRouter</code>, <code>DocumentRetriever</code>, <code>DocumentJoiner</code>, <code>DocumentCompressor</code>, <code>DocumentRanker</code>, <code>DocumentSelector</code>, <code>QueryAugmenter</code>和<code>RetrievalAugmentationAdvisor</code>等可组合组件。</li>\n<li>**RAG 改进 (M7)**：在<code>RetrievalAugmentationAdvisor</code>中为查询增加了上下文支持，进一步提升了检索效果。</li>\n<li>**文档读取器 (Document Readers)**：支持多种文档格式，如 PDF, Markdown, Word, HTML 等，M7 版本新增了<code>JSoup</code> HTML 读取器。</li>\n</ul>\n<h3 id=\"持久化对话：聊天记忆管理\"><a href=\"#持久化对话：聊天记忆管理\" class=\"headerlink\" title=\"持久化对话：聊天记忆管理\"></a>持久化对话：聊天记忆管理</h3><p>为了构建能够进行连贯对话的 AI 应用，Spring AI 提供了聊天记忆管理：</p>\n<ul>\n<li>M1 版本引入了内存中对话历史记录功能。</li>\n<li>M7 版本增加了 JDBC 和 Neo4j 的聊天记忆实现，并将 Cassandra 的实现迁移到了其独立的模块中。</li>\n<li>M8 版本通过引入<code>ChatMemoryRepository</code>接口（支持<code>InMemoryChatMemoryRepository</code>, <code>JdbcChatMemoryRepository</code>）和<code>MessageWindowChatMemory</code>实现，进一步增强了聊天记忆管理能力。</li>\n</ul>\n<h3 id=\"关注开发者的特性\"><a href=\"#关注开发者的特性\" class=\"headerlink\" title=\"关注开发者的特性\"></a>关注开发者的特性</h3><p>Spring AI 不仅关注核心 AI 能力的集成，同样重视提升开发者的使用体验：</p>\n<ul>\n<li>**可观测性 (M2 及之后版本)**：通过 Micrometer 为 AI 相关操作（如<code>ChatClient</code>, <code>Advisors</code>, 模型, 向量存储）提供度量和追踪，帮助开发者洞察应用行为，度量指标包括令牌使用情况等。</li>\n<li><strong>AI 模型评估</strong>：提供实用工具，帮助评估生成内容的质量，并防范模型产生幻觉（不准确或虚构的回答）。</li>\n<li><strong>Advisors API</strong>：封装了常见的生成式 AI 模式，转换与 LLM 之间传输的数据，并提供跨不同模型和用例的可移植性 。</li>\n<li>**Kotlin支持 (M4及之后版本)**：提供惯用的 Kotlin 扩展和类型安全的 API，方便 Kotlin 开发者使用。</li>\n<li>**模块化项目结构 (M7 及之后版本)**：减少了依赖足迹，实现了更清晰的关注点分离，提升了项目的可维护性 。</li>\n<li><strong>错误处理</strong>：对特定提供商的错误进行了抽象，例如<code>OpenAiHttpException</code>，简化了错误处理逻辑。</li>\n</ul>\n<p>Spring AI 对多样化 LLM、向量数据库和模型类型的迅速扩展支持，结合其可移植的 API 设计，战略性地将其定位为 Java 领域的一个多功能“元框架”。这种设计使得企业能够在不被特定 AI 提供商锁定的前提下，依然能够利用熟悉的  Spring  生态系统。具体来看，Spring AI 支持包括 OpenAI、Google、Anthropic、Azure、Ollama、Deepseek 在内的众多 LLM 提供商，以及 Chroma、Milvus、Pinecone、PGVector 等多种向量数据库。其核心设计原则之一便是跨这些提供商的“可移植性”。通过提供一致的 API，开发者可以以最小的代码改动（通常仅需更改依赖）在不同实现之间切换 。因此，Spring AI 扮演了一个抽象层的角色，将应用逻辑与具体的 AI服务实现解耦。这赋予了开发者和企业根据成本、性能或特性选择或切换AI&#x2F;向量数据库提供商的灵活性，同时保持在 Spring 开发范式之内。</p>\n<p>RAG（检索增强生成）和工具&#x2F;函数调用等功能的演进，清晰地表明 Spring AI 不仅仅追求基础的集成，更在积极地吸收和转化来自更广泛 AI 社区的复杂模式和前沿研究，并将其适配到 Java&#x2F;Spring 的特定语境中。最初的 Spring AI 版本提及了对 RAG 和函数调用的支持 。随后，M4 版本引入了“高级和模块化RAG”，明确参考了相关研究论文，并将 RAG 分解为可组合的组件。函数调用功能也历经迭代：M4 改进了构建器，M6 引入了新的注解和回调类，M7 为了保持一致性重命名了 API ，M8 则为了清晰性优化了方法签名。这些发展轨迹显示，Spring AI 正在紧跟 AI 领域的先进理念，并且不满足于仅提供表层集成，而是积极致力于为企业级 Java 开发提供这些高级模式的强大、灵活且稳健的实现。</p>\n<p><code>ChatClient</code> API 的引入和持续优化，以及新的<code>TemplateRenderer</code>和结构化输出等功能，共同突显了 Spring AI 对开发者体验的高度重视。其目标是使复杂的 AI 交互对于习惯了 Spring 流式 API 的 Java 开发者而言更加直观和类型安全。<code>ChatClient</code>提供了类似于<code>WebClient</code>和<code>RestClient</code>的流式 API，这些是 Spring 开发者非常熟悉的模式。将输出结构化为 POJO 简化了数据处理 。M8 中新的<code>TemplateRenderer</code> API 为管理提示提供了灵活且一致的方式 。此外，对 Kotlin 的支持进一步增强了 Spring AI 框架内Kotlin 用户的类型安全性和代码简洁性。综合来看，这些特性旨在减少通常与 AI 模型交互相关的样板代码和复杂性，使开发过程更符合现有的 Spring 实践，从而提高整体开发效率和代码质量。</p>\n<h2 id=\"重塑-LLM-时代-Java-开发者的格局\"><a href=\"#重塑-LLM-时代-Java-开发者的格局\" class=\"headerlink\" title=\"重塑 LLM 时代 Java 开发者的格局\"></a>重塑 LLM 时代 Java 开发者的格局</h2><h3 id=\"利用熟悉度：无缝集成的力量\"><a href=\"#利用熟悉度：无缝集成的力量\" class=\"headerlink\" title=\"利用熟悉度：无缝集成的力量\"></a>利用熟悉度：无缝集成的力量</h3><p>对于广大的 Spring 开发者而言，Spring AI 最显著的优势在于其与现有生态系统的深度融合和一致性体验。它并非一个需要从头学习的全新范式，而是巧妙地扩展了开发者已有的知识体系。Spring AI 的设计沿用了 Spring 开发者所熟知的核心概念，如依赖注入、注解驱动以及清晰的抽象，这些与 Spring Data 等框架的理念一脉相承 。这种一致性意味着开发者可以迅速投入 AI 功能的开发，而无需彻底改变其固有的应用开发思维模式。</p>\n<p>与某些需要复杂配置或工作流设置的工具不同，Spring AI 能够轻松地融入现有的代码库，允许开发者复用已有的 Bean、服务和仓库（Repositories）。它不是一个外挂式的 AI 平台，而是直接与开发者精心构建的业务逻辑和企业服务相集成，充分利用了企业在Spring 生态系统上的已有投资。相较于其他AI集成方法，这种方式显著降低了学习曲线，使得 AI 技术的引入更加平滑自然。</p>\n<h3 id=\"为-Java-企业应用普及-AI-技术\"><a href=\"#为-Java-企业应用普及-AI-技术\" class=\"headerlink\" title=\"为 Java 企业应用普及 AI 技术\"></a>为 Java 企业应用普及 AI 技术</h3><p>Spring AI 专注于简化企业级应用的 AI 操作，尤其适合那些需要在其业务应用中添加直接 AI 功能（如文本生成、嵌入表示和函数调用）的开发者。它提供了一种结构化和标准化的方法来处理AI模型，从而简化了 AI 驱动应用的开发、部署和管理流程。通过连接企业数据、API 和 AI 能力，Spring AI 能够催生出如虚拟助手、文本摘要、智能搜索建议等 AI 驱动的解决方案，从而增强下一代应用的智能水平。</p>\n<h3 id=\"Java在AI世界中的地位：为何-Spring-AI-引人注目\"><a href=\"#Java在AI世界中的地位：为何-Spring-AI-引人注目\" class=\"headerlink\" title=\"Java在AI世界中的地位：为何 Spring AI 引人注目\"></a>Java在AI世界中的地位：为何 Spring AI 引人注目</h3><p>Spring AI 的出现，有力地回应了生成式 AI 应用将跨越多种编程语言，而非仅仅局限于 Python 的趋势。对于那些已经在 Java 和Spring 生态系统上进行了大量投入的企业而言，Spring AI 提供了一个极具吸引力的强大替代方案。它使得这些企业能够充分利用其现有的 Java \t人才储备来进行AI应用的开发，而无需大规模转向新的技术栈。</p>\n<h3 id=\"Java-在企业-AI-中的优势\"><a href=\"#Java-在企业-AI-中的优势\" class=\"headerlink\" title=\"Java 在企业 AI 中的优势\"></a>Java 在企业 AI 中的优势</h3><p>在企业级 AI 应用场景中，选择 Java 结合 Spring AI 可能带来多重优势：</p>\n<ul>\n<li><strong>性能</strong>：一旦应用成熟，Java 虚拟机（JVM）能够为计算密集型任务提供强大的性能支持。</li>\n<li><strong>可伸缩性</strong>：Java 和 Spring 在构建高度可伸缩的企业级系统方面拥有绝对的优势。Spring AI 同时支持基于云的 AI模 型和本地部署方案，满足不同场景的需求。</li>\n<li><strong>可维护性</strong>：Java 的静态类型特性和强大的工具链有助于提升大型复杂 AI 应用的可维护性。</li>\n<li><strong>安全性与配置管理</strong>：Spring AI 内置了安全特性，用于管理 API 密钥、处理身份验证以及在与AI模型交互时确保数据安全。数据隐私和合规性（如 GDPR）至关重要，Spring AI 可以作为合规架构的一部分，帮助企业满足这些要求。</li>\n<li><strong>降低运维复杂度</strong>：对于主要使用 Java 的企业而言，Spring AI 有助于整合技术栈，降低运维的复杂性。</li>\n</ul>\n<p>Spring AI 最核心是其对现有 Spring&#x2F;Java 企业生态系统来说，采纳 AI 技术的门槛会大大降低。在整个 JAVA 应用生态领域，Spring 技术栈家族已经成了企业应用框架上的事实标准。企业在拥抱 AI 技术时，为了使得现有技术体系的快速切入和融合 ，会更加倾向与现有技术体系一致的框架。Spring AI 为这些企业及其开发者提供了一条自然且干扰更小的路径来构建AI驱动的应用，这一定程度上利于加速 AI 技术在 JAVA 技术栈体系市场中的整合。</p>\n<p>通过赋能 JAVA 开发者构建复杂的 AI 应用，Spring AI 不仅在 Java 世界内普及了 AI 开发，也巩固了 Java 作为现代 AI 领域一流公民的地位，有力地挑战了 Python 在 AI 应用开发中独占鳌头的传统观念。Spring AI 提升了 Java 在 AI 时代的角色，使其成为端到端 AI 应用开发的一个可行且具吸引力的选项，尤其是在 Java 已广泛应用的企业环境中。</p>\n<h2 id=\"Spring-AI-在全球-LLM-框架竞技场中的比较分析\"><a href=\"#Spring-AI-在全球-LLM-框架竞技场中的比较分析\" class=\"headerlink\" title=\"Spring AI 在全球 LLM 框架竞技场中的比较分析\"></a>Spring AI 在全球 LLM 框架竞技场中的比较分析</h2><p>在当前以 Python 为主导的 LLM 开发环境中，Spring AI 的出现为 Java 开发者提供了新的选择。为了更清晰地理解 Spring AI 的定位，有必要将其与主流的 Python 框架以及 Java 生态中的其他类似框架进行比较。</p>\n<h3 id=\"Spring-AI-vs-Python巨头-LangChain-LlamaIndex\"><a href=\"#Spring-AI-vs-Python巨头-LangChain-LlamaIndex\" class=\"headerlink\" title=\"Spring AI vs. Python巨头 (LangChain &amp; LlamaIndex)\"></a>Spring AI vs. Python巨头 (LangChain &amp; LlamaIndex)</h3><p><strong>LangChain (Python)</strong></p>\n<ul>\n<li><strong>理念与核心优势</strong>：LangChain是一个多功能框架，旨在简化由LLM驱动的应用开发，覆盖从开发、生产化到部署的整个生命周期 。它以其模块化组件（模型、提示、链、代理、记忆、索引）、灵活性和广泛的集成而闻名 。LangGraph作为其扩展，用于构建有状态的多参与者应用 。</li>\n<li><strong>RAG与代理</strong>：在RAG和代理方面能力强大，通过链（Chains）来序列化调用，通过代理（Agents）进行决策制定 。支持代理式RAG（Agentic RAG）。</li>\n<li><strong>模型&#x2F;向量数据库支持</strong>：集成了数百个LLM、嵌入模型和向量存储的提供商 。</li>\n<li><strong>生态与社区</strong>：拥有非常庞大且活跃的社区（GitHub星标超10万，贡献者超4千，月下载量超2000万）。</li>\n<li><strong>潜在不足</strong>：由于集成众多且变化迅速，可能存在一定的复杂性和陡峭的学习曲线，以及潜在的破坏性变更风险 。</li>\n</ul>\n<p><strong>LlamaIndex (Python)</strong></p>\n<ul>\n<li><strong>理念与核心优势</strong>：LlamaIndex是一个数据框架，专注于连接自定义数据源与LLM，尤其擅长构建上下文增强的LLM应用，特别是RAG。其核心在于数据摄取、数据索引（向量存储、知识图谱）和查询引擎（检索、合成）。提供LlamaCloud作为企业知识管理平台，LlamaParse用于文档解析 。</li>\n<li><strong>RAG与代理</strong>：在RAG方面表现卓越，优化了文档检索。支持数据代理（Data Agents）进行自动化搜索&#x2F;检索和API调用 。</li>\n<li><strong>模型&#x2F;向量数据库支持</strong>：LlamaHub上提供了广泛的数据连接器（超过350个数据源和向量数据库）。原生支持OpenAI集成 。</li>\n<li><strong>生态与社区</strong>：社区庞大且持续增长（Python主仓库GitHub星标超4.14万，贡献者超1300，月下载量超280万）。</li>\n<li><strong>潜在不足</strong>：部分企业级特性（如安全性、可视化开发）可能依赖商业版本，存在对高级功能的供应商依赖风险，以及框架本身的复杂性 。</li>\n</ul>\n<p><strong>Spring AI的定位</strong></p>\n<ul>\n<li>Spring AI从LangChain和LlamaIndex等项目中汲取灵感，但它并<em>不是</em>这些项目的直接移植 。</li>\n<li>其核心目标是为Java开发者提供一种Spring原生的体验，充分利用现有的Spring生态系统 。</li>\n<li>相较于追求极致的工作流复杂性，Spring AI在初期更侧重于为常见的AI任务提供企业级的简洁性。</li>\n<li>与Python巨头相比，Spring AI相对较新，社区规模较小但正在成长（Spring AI主仓库GitHub星标约5千，贡献者约286名）。</li>\n</ul>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p><strong>决策指南</strong>：如果团队以Java&#x2F;Spring为中心，需要与现有Spring企业应用深度集成，并偏好Spring惯用风格的开发方式，那么Spring AI是理想选择。如果团队已具备Python技术优势，或者需要Spring AI尚未提供的尖端功能，那么Python框架凭借其成熟度和更大的生态系统可能更为合适。</p></blockquote>\n<p><strong>表1：Spring AI、LangChain、LlamaIndex对比概览</strong></p>\n<table>\n<thead>\n<tr>\n<th><strong>特性</strong></th>\n<th><strong>Spring AI</strong></th>\n<th><strong>LangChain (Python)</strong></th>\n<th><strong>LlamaIndex (Python)</strong></th>\n</tr>\n</thead>\n<tbody><tr>\n<td><strong>主要语言</strong></td>\n<td>Java</td>\n<td>Python</td>\n<td>Python</td>\n</tr>\n<tr>\n<td><strong>核心设计理念</strong></td>\n<td>将Spring原则应用于AI工程，连接企业数据与AI模型；提供Spring原生体验</td>\n<td>构建LLM驱动应用的通用框架，强调模块化、灵活性和可组合性</td>\n<td>专注于连接自定义数据源与LLM，优化上下文增强应用（尤其是RAG）</td>\n</tr>\n<tr>\n<td><strong>关键抽象</strong></td>\n<td><code>ChatClient</code>, <code>Prompt</code>, <code>Message</code>, <code>Advisors</code>, 模块化组件 (M7后)</td>\n<td>Models, Prompts, Chains, Agents, Memory, Indexes, LangGraph (for stateful agents)</td>\n<td>Data Connectors, Indexes (Vector, KG), Retrievers, Query Engines, Response Synthesizers, Agents</td>\n</tr>\n<tr>\n<td><strong>RAG专业化程度</strong></td>\n<td>良好，支持模块化RAG，提供文档ETL框架</td>\n<td>强大，通过Chains和Retrievers实现，支持Agentic RAG</td>\n<td>非常高，核心优势在于数据索引和检索优化，专为RAG设计</td>\n</tr>\n<tr>\n<td><strong>代理能力</strong></td>\n<td>发展中，通过工具调用和Advisors支持，MCP集成增强</td>\n<td>成熟，核心组件之一，支持复杂决策和工具使用</td>\n<td>良好，支持数据代理，可执行工具，构建Agentic RAG</td>\n</tr>\n<tr>\n<td><strong>模型支持多样性</strong></td>\n<td>广泛（OpenAI, Azure, Bedrock, Google, Ollama, Anthropic, Mistral等）</td>\n<td>非常广泛（集成数百个提供商）</td>\n<td>广泛（通过LlamaHub连接器）</td>\n</tr>\n<tr>\n<td><strong>向量数据库支持多样性</strong></td>\n<td>广泛（PGVector, Milvus, Pinecone, Chroma, Redis, Weaviate, Cassandra等）</td>\n<td>非常广泛（集成众多向量存储）</td>\n<td>广泛（通过LlamaHub连接器，支持超过350个数据源和向量数据库）</td>\n</tr>\n<tr>\n<td><strong>主要生态集成</strong></td>\n<td>深度集成Spring Boot, Spring Framework</td>\n<td>广泛的Python库和工具</td>\n<td>广泛的Python库和数据处理工具，LlamaCloud</td>\n</tr>\n<tr>\n<td><strong>社区规模 (主仓库)</strong></td>\n<td>约5k星标 &#x2F; 约286贡献者</td>\n<td>超100k星标 &#x2F; 超4k贡献者</td>\n<td>超41.4k星标 &#x2F; 超1.3k贡献者</td>\n</tr>\n<tr>\n<td><strong>企业就绪性关注</strong></td>\n<td>高，强调与Spring企业生态的集成、可观测性、安全性</td>\n<td>发展中，LangSmith用于生产监控，LangGraph Platform用于部署</td>\n<td>发展中，LlamaCloud提供企业级方案，但部分高级特性可能依赖商业版</td>\n</tr>\n</tbody></table>\n<h3 id=\"Spring-AI-vs-Langchain4j-Java领域的同伴\"><a href=\"#Spring-AI-vs-Langchain4j-Java领域的同伴\" class=\"headerlink\" title=\"Spring AI vs. Langchain4j (Java领域的同伴)\"></a>Spring AI vs. Langchain4j (Java领域的同伴)</h3><p><strong>Langchain4j</strong></p>\n<ul>\n<li><strong>理念与核心优势</strong>：旨在成为LangChain的Java版本，为Java应用集成LLM提供工具 。它提供统一的API用于访问LLM提供商和嵌入存储，拥有全面的工具箱（提示模板、聊天记忆、函数调用、RAG、代理），并包含大量示例。支持低级别和高级别（AI服务）的抽象 。</li>\n<li><strong>RAG与代理</strong>：提供全面的RAG支持（数据摄取、检索、重排序）和对代理的支持 。</li>\n<li><strong>模型&#x2F;向量数据库支持</strong>：支持超过15个LLM提供商、20个嵌入存储和15个嵌入模型 。</li>\n<li><strong>生态与集成</strong>：与Spring Boot和Quarkus集成。其核心抽象位于<code>langchain4j-core</code>模块，主模块<code>langchain4j</code>包含工具，另有众多<code>langchain4j-&#123;integration&#125;</code>模块 。</li>\n<li><strong>Langchain4j的突出优势</strong>：易于切换提供商，与Web技术（Java, Quarkus, Spring Boot）无缝集成，对于某些Java应用可能比Python具有更好的性能，在Java生态系统内代码复用性高，灵活性强，拥有活跃社区。</li>\n</ul>\n<p><strong>Spring AI的差异化优势</strong></p>\n<ul>\n<li><strong>更深度的Spring生态集成</strong>：Spring AI由Spring团队为Spring生态系统构建。其集成是原生的、基础性的，而非简单的附加。它更深入地利用了核心Spring模式（如依赖注入、AOP、Boot启动器）。</li>\n<li><strong>通过Spring实现企业级专注</strong>：继承了Spring的企业级特性、可伸缩性和部署模式。</li>\n<li><strong>可观测性</strong>：通过Micrometer内置了强大的可观测性功能 。</li>\n</ul>\n<p><strong>共同目标</strong>：两者都致力于为Java开发者提供LLM能力，为以Python为中心的开发模式提供替代方案。</p>\n<p><strong>决策指南</strong>：如果项目深度依赖Spring生态系统，并希望获得最无缝、最原生的体验，Spring AI是首选。如果需要一个更独立的Java LLM库，能够集成到各种Java应用（包括Spring Boot和Quarkus），并且可能提供更广泛的、类似LangChain的直接抽象，那么Langchain4j是一个强有力的竞争者。</p>\n<p><strong>表2：Java LLM框架一览：Spring AI vs. Langchain4j</strong></p>\n<table>\n<thead>\n<tr>\n<th><strong>特性</strong></th>\n<th><strong>Spring AI</strong></th>\n<th><strong>Langchain4j</strong></th>\n</tr>\n</thead>\n<tbody><tr>\n<td><strong>核心理念</strong></td>\n<td>Spring原生AI工程框架，强调与Spring生态的深度融合和企业级应用简化</td>\n<td>通用Java LLM集成库，提供类似LangChain的工具和抽象，支持多种Java应用集成</td>\n</tr>\n<tr>\n<td><strong>关键抽象</strong></td>\n<td><code>ChatClient</code>, <code>Prompt</code>, <code>Message</code>, <code>Advisors</code>, 模块化组件 (M7后)</td>\n<td><code>ChatLanguageModel</code>, <code>EmbeddingStore</code>, <code>Embedding</code>, <code>AI Services</code>, <code>Tool</code>等</td>\n</tr>\n<tr>\n<td><strong>RAG能力</strong></td>\n<td>全面，支持模块化RAG，文档ETL，多种文档读取器</td>\n<td>全面，支持文档加载&#x2F;切分&#x2F;嵌入&#x2F;存储，查询转换&#x2F;路由&#x2F;检索&#x2F;重排序</td>\n</tr>\n<tr>\n<td><strong>代理支持</strong></td>\n<td>发展中，通过工具调用、Advisors、MCP集成实现</td>\n<td>支持，作为高级模式提供</td>\n</tr>\n<tr>\n<td><strong>原生Spring生态集成深度</strong></td>\n<td>非常高，由Spring团队开发，基于Spring Boot Starter和自动配置</td>\n<td>良好，提供<code>langchain4j-spring-boot-starter</code>等集成模块</td>\n</tr>\n<tr>\n<td><strong>Quarkus集成</strong></td>\n<td>暂无官方直接集成，但理论上可作为Java库使用</td>\n<td>支持，提供<code>langchain4j-quarkus</code>扩展</td>\n</tr>\n<tr>\n<td><strong>其他Java框架集成</strong></td>\n<td>主要聚焦Spring生态</td>\n<td>设计为可用于普通Java应用，并有特定框架集成（如Quarkus）</td>\n</tr>\n<tr>\n<td><strong>可观测性特性</strong></td>\n<td>强大，通过Micrometer提供度量和追踪</td>\n<td>依赖具体集成和底层实现，核心库层面未突出强调</td>\n</tr>\n<tr>\n<td><strong>社区规模估算 (主仓库)</strong></td>\n<td>约5k星标 &#x2F; 约286贡献者</td>\n<td>主仓库星标&#x2F;贡献者数据未直接找到，示例库约900星标&#x2F;49贡献者</td>\n</tr>\n</tbody></table>\n<p>尽管 Spring AI 和 Langchain4j 都致力于将 LLM 的能力引入 Java 领域，但Spring AI的战略优势在于其与广阔Spring生态系统的<em>原生且深度</em>的集成，这使其成为现有Spring技术栈企业的更自然选择。Langchain4j则将自身定位为一个更通用的Java LLM库，提供了包括Spring Boot在内的多种集成方式。具体而言，Spring AI由Spring团队开发，其核心根植于Spring原则 。而Langchain4j提供了Spring Boot和Quarkus的集成方案 。Spring AI的自动配置、启动器（Starters）以及与Spring Data模式的对齐等特性，为Spring开发者营造了一种更为内嵌和无缝的体验 。相比之下，Langchain4j通过核心模块和独立的集成模块的结构 ，显示出其设计首先着眼于更广泛的Java适用性，然后在此基础上添加对特定框架的支持。因此，对于已经高度依赖Spring的企业来说，Spring AI提供了一条更具凝聚力和集成性的AI采纳路径。而对于那些可能并非以Spring为中心，或者偏好更独立LLM库的Java项目，Langchain4j则提供了灵活性。</p>\n<p>目前，由于其发展成熟度和Python在AI领域的主导地位，Python框架（如LangChain、LlamaIndex）在功能的广度、尖端研究的实现速度以及社区规模方面仍处于领先地位。Spring AI和Langchain4j正在为Java开发者迅速追赶，但它们所服务的生态系统更侧重于稳定性、企业级集成以及利用现有的Java专业知识。LangChain和LlamaIndex拥有显著更大的GitHub社区（星标数、贡献者数量、下载量），远超Spring AI  和Langchain4j 。新的AI研究成果往往首先在Python框架中得到实现。Spring AI和Langchain4j明确的目标是将这些能力引入Java 。Spring AI的重点在于无缝的Spring集成和企业应用的简洁性 ，而Langchain4j则专注于提供一个具有广泛集成的Java替代方案 。因此，在Python和Java框架之间的选择，往往涉及到在Python的前沿特性和庞大社区与Java框架所能提供的利用现有Java基础设施、人才以及企业级稳定性和集成度之间的权衡。Spring AI和Langchain4j正在使Java成为后者更可行的选项。</p>\n<h2 id=\"Spring-AI-的未来展望：发展方向与总结思考\"><a href=\"#Spring-AI-的未来展望：发展方向与总结思考\" class=\"headerlink\" title=\"Spring AI 的未来展望：发展方向与总结思考\"></a>Spring AI 的未来展望：发展方向与总结思考</h2><h3 id=\"近期版本揭示的新兴趋势\"><a href=\"#近期版本揭示的新兴趋势\" class=\"headerlink\" title=\"近期版本揭示的新兴趋势\"></a>近期版本揭示的新兴趋势</h3><p><img src=\"https://docs.spring.io/spring-ai/reference/1.0/_images/mcp/java-mcp-client-architecture.jpg\" alt=\"Java MCP Client Architecture\"></p>\n<p>从 Spring AI 最近的里程碑版本中，可以观察到一些清晰的发展趋势，这些趋势预示着框架未来的演进方向：</p>\n<ul>\n<li><strong>高级RAG能力</strong>：模块化RAG组件的引入 以及持续的改进 ，表明 Spring AI 将继续致力于增强知识密集型应用的能力。</li>\n<li><strong>增强的模块化</strong>：M7版本的项目结构重组指向一个更灵活、更易于维护的框架，允许开发者按需选择和组合组件。</li>\n<li><strong>强化的工具支持与类代理能力</strong>：函数&#x2F;工具调用功能的不断完善 以及与<strong>MCP</strong>的集成 ，预示着向更复杂的代理行为迈进。</li>\n<li><strong>多模态支持</strong>：对视觉能力的支持（例如M4版本中的Bedrock Converse ）以及在工具调用中处理Base64图像（M7版本），显示出框架正从纯文本交互扩展到更丰富的多媒体交互。</li>\n<li><strong>开发者体验</strong>：持续关注Kotlin支持 、AOT&#x2F;Native Image优化以及提供全面的文档 。</li>\n</ul>\n<h3 id=\"未来路线图展望-基于趋势的推测\"><a href=\"#未来路线图展望-基于趋势的推测\" class=\"headerlink\" title=\"未来路线图展望 (基于趋势的推测)\"></a>未来路线图展望 (基于趋势的推测)</h3><p>基于已观察到的趋势，可以推测Spring AI未来可能的路线图包括：</p>\n<ul>\n<li>进一步成熟RAG特性，可能会提供更多预构建的策略和评估工具。</li>\n<li>更复杂的代理框架和编排能力。</li>\n<li>更广泛和深入地支持各种AI模型提供商及其最新特性。</li>\n<li>在Spring生态系统内增强对MLOps（机器学习运维）方面的工具支持（例如模型管理、部署）。</li>\n<li>与其他Spring项目更紧密地集成，以支持端到端的AI应用开发。</li>\n</ul>\n<h3 id=\"Spring-AI在Java领域企业AI采纳中的持久角色\"><a href=\"#Spring-AI在Java领域企业AI采纳中的持久角色\" class=\"headerlink\" title=\"Spring AI在Java领域企业AI采纳中的持久角色\"></a>Spring AI在Java领域企业AI采纳中的持久角色</h3><p>Spring AI在赋能庞大的Java企业社区全面参与AI革命方面扮演着至关重要的角色。其将AI与现有企业系统和数据安全可靠地集成的能力，将是其未来成功的关键。</p>\n<h3 id=\"对Spring-AI价值定位的最终反思\"><a href=\"#对Spring-AI价值定位的最终反思\" class=\"headerlink\" title=\"对Spring AI价值定位的最终反思\"></a>对Spring AI价值定位的最终反思</h3><p>经过对Spring AI的深入观察，我认为其核心价值可以更接地气地理解为：</p>\n<p>作为Spring生态的AI引擎，Spring AI最大的优势在于让Java开发者能用自己熟悉的方式构建智能应用。这就像给Java工程师配了把AI瑞士军刀——既保留Spring框架原有的开发手感，又新增了应对AI时代的工具组合。</p>\n<p>具体来说，它解决了几个关键问题：</p>\n<ol>\n<li><strong>企业级AI的落地难题</strong>：不是简单对接几个AI接口，而是能基于企业真实数据进行推理决策，像M4版本推出的模块化RAG功能，让知识管理系统真正”活”起来</li>\n<li><strong>复杂系统的驾驭能力</strong>：通过持续迭代的工具调用体系（从M4到M8版本不断进化），开发者现在能像搭积木一样构建能自主行动的AI代理，而不仅是做个聊天机器人</li>\n<li><strong>技术迭代的焦虑缓解</strong>：每当AI领域有新突破（比如Claude 3模型或Bedrock多模态），Spring AI总能快速跟上（像M7适配Claude 3只用了三周），让Java技术栈不再担心落后</li>\n</ol>\n<p>Spring AI 始终保持着Spring特有的工程美学：通过M7版本实现的模块化重构，把AI系统开发的复杂度封装成可维护的组件。就像当年Spring Boot简化微服务开发那样，现在它正为AI应用定义新的工程标准。</p>\n<p>此外，Spring AI的迭代节奏（每年多个里程碑版本）透露出清晰的战略意图：既要保持对前沿技术的敏感度，又要守住企业级开发的底线。这种平衡术让它既不像研究型框架那样激进，又比传统企业框架更富探索精神。</p>\n<p>总的来说，Spring AI正在做的事，很像当年Spring Framework对Java EE的革新——不是简单集成现有技术，而是通过工程化创新，让Java生态在AI时代继续成为企业级开发的首选。当你在Spring项目里流畅地调用AI能力时，背后是设计团队对开发者体验的深度理解：用约定优于配置的思路，把AI的复杂性转化为可维护的代码。</p>\n","feature":true,"text":" https://mp.weixin.qq.com/s/nKp2YyFcxQ6WQoTcSQOB2w微信公众号：磊叔的技术博客 生成式人工智能（Generati...","permalink":"/post/llm/spring-ai-intro","photos":[],"count_time":{"symbolsCount":"18k","symbolsTime":"16 mins."},"categories":[{"name":"LLM","slug":"LLM","count":6,"path":"api/categories/LLM.json"}],"tags":[{"name":"MCP","slug":"MCP","count":2,"path":"api/tags/MCP.json"},{"name":"Spring AI","slug":"Spring-AI","count":2,"path":"api/tags/Spring-AI.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Spring-AI-%E7%9A%84%E8%B5%B7%E6%BA%90%E4%B8%8E%E6%BC%94%E8%BF%9B%EF%BC%9A%E4%BB%8E%E6%A6%82%E5%BF%B5%E5%88%B0%E5%89%8D%E6%B2%BF\"><span class=\"toc-text\">Spring AI 的起源与演进：从概念到前沿</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E2%80%9C%E4%B8%BA%E4%BD%95%E9%80%89%E6%8B%A9-Spring-AI%E2%80%9D%EF%BC%9A%E9%A1%B9%E7%9B%AE%E8%83%8C%E5%90%8E%E7%9A%84%E9%A9%B1%E5%8A%A8%E5%8A%9B\"><span class=\"toc-text\">“为何选择 Spring AI”：项目背后的驱动力</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E9%87%8C%E7%A8%8B%E7%A2%91%E4%B9%8B%E6%97%85%EF%BC%9A%E5%85%B3%E9%94%AE%E5%8F%91%E5%B1%95%E9%98%B6%E6%AE%B5%E4%B8%8E%E7%89%88%E6%9C%AC%E4%BA%AE%E7%82%B9\"><span class=\"toc-text\">里程碑之旅：关键发展阶段与版本亮点</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Spring-AI-%E7%9A%84%E6%A0%B8%E5%BF%83%E8%83%BD%E5%8A%9B%E4%B8%8E%E6%9E%B6%E6%9E%84\"><span class=\"toc-text\">Spring AI 的核心能力与架构</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%9F%BA%E6%9C%AC%E5%8E%9F%E5%88%99\"><span class=\"toc-text\">基本原则</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%AF%B9%E5%A4%9A%E6%A0%B7%E5%8C%96-LLM-%E5%92%8C%E6%A8%A1%E5%9E%8B%E7%B1%BB%E5%9E%8B%E7%9A%84%E5%85%A8%E9%9D%A2%E6%94%AF%E6%8C%81\"><span class=\"toc-text\">对多样化 LLM 和模型类型的全面支持</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%BB%9F%E4%B8%80%E7%9A%84%E5%90%91%E9%87%8F%E5%AD%98%E5%82%A8-API\"><span class=\"toc-text\">统一的向量存储 API</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%A0%B8%E5%BF%83%E6%8A%BD%E8%B1%A1%E4%B8%8E%E6%8E%A5%E5%8F%A3\"><span class=\"toc-text\">核心抽象与接口</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%8F%90%E7%A4%BA%E3%80%81%E6%A8%A1%E6%9D%BF%E4%B8%8E%E7%BB%93%E6%9E%84%E5%8C%96%E8%BE%93%E5%87%BA\"><span class=\"toc-text\">提示、模板与结构化输出</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%87%BD%E6%95%B0%E8%B0%83%E7%94%A8%E4%B8%8E%E5%B7%A5%E5%85%B7%E9%9B%86%E6%88%90\"><span class=\"toc-text\">函数调用与工具集成</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%A3%80%E7%B4%A2%E5%A2%9E%E5%BC%BA%E7%94%9F%E6%88%90-RAG\"><span class=\"toc-text\">检索增强生成 (RAG)</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%8C%81%E4%B9%85%E5%8C%96%E5%AF%B9%E8%AF%9D%EF%BC%9A%E8%81%8A%E5%A4%A9%E8%AE%B0%E5%BF%86%E7%AE%A1%E7%90%86\"><span class=\"toc-text\">持久化对话：聊天记忆管理</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%85%B3%E6%B3%A8%E5%BC%80%E5%8F%91%E8%80%85%E7%9A%84%E7%89%B9%E6%80%A7\"><span class=\"toc-text\">关注开发者的特性</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E9%87%8D%E5%A1%91-LLM-%E6%97%B6%E4%BB%A3-Java-%E5%BC%80%E5%8F%91%E8%80%85%E7%9A%84%E6%A0%BC%E5%B1%80\"><span class=\"toc-text\">重塑 LLM 时代 Java 开发者的格局</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%88%A9%E7%94%A8%E7%86%9F%E6%82%89%E5%BA%A6%EF%BC%9A%E6%97%A0%E7%BC%9D%E9%9B%86%E6%88%90%E7%9A%84%E5%8A%9B%E9%87%8F\"><span class=\"toc-text\">利用熟悉度：无缝集成的力量</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%B8%BA-Java-%E4%BC%81%E4%B8%9A%E5%BA%94%E7%94%A8%E6%99%AE%E5%8F%8A-AI-%E6%8A%80%E6%9C%AF\"><span class=\"toc-text\">为 Java 企业应用普及 AI 技术</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Java%E5%9C%A8AI%E4%B8%96%E7%95%8C%E4%B8%AD%E7%9A%84%E5%9C%B0%E4%BD%8D%EF%BC%9A%E4%B8%BA%E4%BD%95-Spring-AI-%E5%BC%95%E4%BA%BA%E6%B3%A8%E7%9B%AE\"><span class=\"toc-text\">Java在AI世界中的地位：为何 Spring AI 引人注目</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Java-%E5%9C%A8%E4%BC%81%E4%B8%9A-AI-%E4%B8%AD%E7%9A%84%E4%BC%98%E5%8A%BF\"><span class=\"toc-text\">Java 在企业 AI 中的优势</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Spring-AI-%E5%9C%A8%E5%85%A8%E7%90%83-LLM-%E6%A1%86%E6%9E%B6%E7%AB%9E%E6%8A%80%E5%9C%BA%E4%B8%AD%E7%9A%84%E6%AF%94%E8%BE%83%E5%88%86%E6%9E%90\"><span class=\"toc-text\">Spring AI 在全球 LLM 框架竞技场中的比较分析</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Spring-AI-vs-Python%E5%B7%A8%E5%A4%B4-LangChain-LlamaIndex\"><span class=\"toc-text\">Spring AI vs. Python巨头 (LangChain &amp; LlamaIndex)</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Spring-AI-vs-Langchain4j-Java%E9%A2%86%E5%9F%9F%E7%9A%84%E5%90%8C%E4%BC%B4\"><span class=\"toc-text\">Spring AI vs. Langchain4j (Java领域的同伴)</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Spring-AI-%E7%9A%84%E6%9C%AA%E6%9D%A5%E5%B1%95%E6%9C%9B%EF%BC%9A%E5%8F%91%E5%B1%95%E6%96%B9%E5%90%91%E4%B8%8E%E6%80%BB%E7%BB%93%E6%80%9D%E8%80%83\"><span class=\"toc-text\">Spring AI 的未来展望：发展方向与总结思考</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E8%BF%91%E6%9C%9F%E7%89%88%E6%9C%AC%E6%8F%AD%E7%A4%BA%E7%9A%84%E6%96%B0%E5%85%B4%E8%B6%8B%E5%8A%BF\"><span class=\"toc-text\">近期版本揭示的新兴趋势</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%9C%AA%E6%9D%A5%E8%B7%AF%E7%BA%BF%E5%9B%BE%E5%B1%95%E6%9C%9B-%E5%9F%BA%E4%BA%8E%E8%B6%8B%E5%8A%BF%E7%9A%84%E6%8E%A8%E6%B5%8B\"><span class=\"toc-text\">未来路线图展望 (基于趋势的推测)</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Spring-AI%E5%9C%A8Java%E9%A2%86%E5%9F%9F%E4%BC%81%E4%B8%9AAI%E9%87%87%E7%BA%B3%E4%B8%AD%E7%9A%84%E6%8C%81%E4%B9%85%E8%A7%92%E8%89%B2\"><span class=\"toc-text\">Spring AI在Java领域企业AI采纳中的持久角色</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%AF%B9Spring-AI%E4%BB%B7%E5%80%BC%E5%AE%9A%E4%BD%8D%E7%9A%84%E6%9C%80%E7%BB%88%E5%8F%8D%E6%80%9D\"><span class=\"toc-text\">对Spring AI价值定位的最终反思</span></a></li></ol></li></ol>","author":{"name":"glmapper","slug":"blog-author","avatar":"https://glmapper-blog.oss-cn-hangzhou.aliyuncs.com/common/favicon.ico","link":"/","description":"开放，开源，分享，共享","socials":{"github":"https://github.com/glmapper","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/2412872703","zhihu":"","csdn":"","juejin":"https://juejin.cn/user/3227821827961806","customs":{"sofastack":{"icon":"https://glmapper-blog.oss-cn-hangzhou.aliyuncs.com/common/sofastack.svg","link":"https://www.sofastack.tech/"}}}},"mapped":true,"hidden":false,"prev_post":{"title":"SpringIO 2025 技术峰会：洞察 JDK 25、Spring AI与框架新纪元的核心脉络","uid":"8ee8278443dcdd9107b679f97798c91c","slug":"llm/spring-io-2025","date":"2025-05-26T03:30:33.000Z","updated":"2025-05-26T03:32:11.818Z","comments":true,"path":"api/articles/llm/spring-io-2025.json","keywords":"宋国磊, glmapper, 卫恒, 分享, 开源","cover":[],"text":"2025 Spring IO 大会于 2025 年 5 月 21 日至 23 日在西班牙巴塞罗那举行。作为 Spring Framework 生态系统的顶尖会议...","permalink":"/post/llm/spring-io-2025","photos":[],"count_time":{"symbolsCount":"11k","symbolsTime":"10 mins."},"categories":[{"name":"LLM","slug":"LLM","count":6,"path":"api/categories/LLM.json"}],"tags":[{"name":"Spring AI","slug":"Spring-AI","count":2,"path":"api/tags/Spring-AI.json"},{"name":"Spring IO","slug":"Spring-IO","count":1,"path":"api/tags/Spring-IO.json"}],"author":{"name":"glmapper","slug":"blog-author","avatar":"https://glmapper-blog.oss-cn-hangzhou.aliyuncs.com/common/favicon.ico","link":"/","description":"开放，开源，分享，共享","socials":{"github":"https://github.com/glmapper","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/2412872703","zhihu":"","csdn":"","juejin":"https://juejin.cn/user/3227821827961806","customs":{"sofastack":{"icon":"https://glmapper-blog.oss-cn-hangzhou.aliyuncs.com/common/sofastack.svg","link":"https://www.sofastack.tech/"}}}},"feature":true},"next_post":{"title":"A2A 与 MCP：智能体协作的新纪元与AI工程化的未来","uid":"577fde4e7ff936a1264dd8c160903c95","slug":"llm/a2a-mcp-concept","date":"2025-05-26T03:22:37.000Z","updated":"2025-05-26T03:25:01.341Z","comments":true,"path":"api/articles/llm/a2a-mcp-concept.json","keywords":"宋国磊, glmapper, 卫恒, 分享, 开源","cover":null,"text":" 原文：https://mp.weixin.qq.com/s/3S8CUpD1Va8RyelMVyCDzA微信公众号：磊叔的技术博客 在人工智能快速发展的今天，...","permalink":"/post/llm/a2a-mcp-concept","photos":[],"count_time":{"symbolsCount":"4.8k","symbolsTime":"4 mins."},"categories":[{"name":"LLM","slug":"LLM","count":6,"path":"api/categories/LLM.json"}],"tags":[{"name":"MCP","slug":"MCP","count":2,"path":"api/tags/MCP.json"},{"name":"A2A","slug":"A2A","count":1,"path":"api/tags/A2A.json"}],"author":{"name":"glmapper","slug":"blog-author","avatar":"https://glmapper-blog.oss-cn-hangzhou.aliyuncs.com/common/favicon.ico","link":"/","description":"开放，开源，分享，共享","socials":{"github":"https://github.com/glmapper","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/2412872703","zhihu":"","csdn":"","juejin":"https://juejin.cn/user/3227821827961806","customs":{"sofastack":{"icon":"https://glmapper-blog.oss-cn-hangzhou.aliyuncs.com/common/sofastack.svg","link":"https://www.sofastack.tech/"}}}}}}