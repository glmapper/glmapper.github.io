{"title":"Spring 源码系列-依赖注入","uid":"33cd3345dbbaff282fcbe2e14cfaf78c","slug":"spring/spring-ioc-dependency-inject","date":"2018-02-07T02:24:12.000Z","updated":"2024-07-05T04:09:05.817Z","comments":true,"path":"api/articles/spring/spring-ioc-dependency-inject.json","keywords":null,"cover":[],"content":"<p>在<a href=\"https://juejin.im/post/6844903553820000269\">Spring源码系列-BeanDefinition</a>文章中大概分析了一下 Bean 的载入，其实这个过程就是在Ioc容器中建立BeanDefinition的数据映射。但是对于Bean的实例化并未涉及，在之前的分析中也提到，bean的实例化是在依赖注入是才具体完成。</p>\n<span id=\"more\"></span>\n\n<h2 id=\"关于依赖注入\"><a href=\"#关于依赖注入\" class=\"headerlink\" title=\"关于依赖注入\"></a>关于依赖注入</h2><p>关于Spring，我们最先想到的就两个Ioc和Aop；然后关于Ioc我们又能牵扯出两个：控制反转和依赖注入。<br>控制反转和依赖注入在网上被无数大神亦或菜鸟解读过，这里就不罗列那些概念了，直接看：</p>\n<p><strong>不使用Spring</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">UserService</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">//手动new一个</span></span><br><span class=\"line\">    <span class=\"type\">UserDao</span> <span class=\"variable\">userDao</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">UserDaoImpl</span>();</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">insertUser</span><span class=\"params\">(String userName)</span> &#123;</span><br><span class=\"line\">    \t<span class=\"keyword\">return</span> userDao.insertUser(userName);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>使用Spring(以注解方式)</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">UserService</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> UserDao userDao;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">insertUser</span><span class=\"params\">(String userName)</span> &#123;</span><br><span class=\"line\">    \t<span class=\"keyword\">return</span> userDao.insertUser(userName);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>看起来貌似没有啥很大的改变，区别呢？</p>\n<p>我们先来分析下在一个类中这两种申明的区别：</p>\n<p><code>UserDao userDao;</code></p>\n<p>userDao是UserDao类型的引用名称。仅仅是声明了一个变量引用名称。并没有做实例化，userDao的实例化可以通过set方法进行设置（Spring中之前常用的就是set方法注入）；当我们初始化持有userDao的这个类时我们还不知道userDao到底具体指向哪个堆中的对象地址。</p>\n<p><code>UserDao userDao = new UserDaoImpl();</code></p>\n<p>而这个，申明一个变量名称，并将userDao直接指向new UserDaoImpl()创建的对象。</p>\n<p>我们来看Spring中关于注入之后对象地址以及不使用注入方式对象的地址：</p>\n<p><strong>1、直接注入</strong><br><img src=\"https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2018/2/3/16159c3902ee9323~tplv-t2oaga2asx-image.image\"><br><strong>2、注入覆盖了我自己的对象</strong><br><img src=\"https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2018/2/3/16159c1cd7a9401c~tplv-t2oaga2asx-image.image\"><br><strong>3、自己手动new</strong><br><img src=\"https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2018/2/3/16159c2b21b3bbb5~tplv-t2oaga2asx-image.image\"></p>\n<p>通过上面三幅图可以明显的看出，自己手动new的对象没有使用代理的方式，而托管给Spring注入的对象均是通过动态代理来完成的。</p>\n<p>关于动态代理：<a href=\"https://juejin.im/post/6844903550942707725\">《猪弟拱Java》连载番外篇：Java代理（中）</a></p>\n<p>总结：当某个角色(可能是一个Java实例，调用者)需要另一个角色(另一个Java实例，被调用者)的协助时，在未使用Spring来管理Bean的程序设计过程中，通常由调用者来创建被调用者的实例。但在Spring里，创建被调用者的工作不再由调用者来完成，因此称为控制反转;创建被调用者实例的工作通常由Spring容器来完成，然后注入调用者，因此也称为依赖注入。</p>\n<h2 id=\"三个问题\"><a href=\"#三个问题\" class=\"headerlink\" title=\"三个问题\"></a>三个问题</h2><p>那么现在要考虑问题就是，<strong>什么时候会触发我们的依赖注入呢？Bean的实例化是否必须在依赖注入时才能完成呢？在Spring中又是通过哪些类来完成注入工作的呢？</strong></p>\n<p><strong>1、什么时候会触发我们的依赖注入</strong></p>\n<p>答：用户第一次向容器获取Bean的时候出发。</p>\n<p><strong>2、Bean的实例化是否必须在依赖注入时才能完成</strong></p>\n<p>这个其实不是必须的，咱们都知道BeanDefinition中有lazy-init这样一个属性，我们可以通过控制这个属性的设置来让容器完成对Bean的预实例化。预实例化就是说它的依赖注入是在实例化过程中完成的。</p>\n<p><code>第一和第二个问题将会在分析第三个问题的时候慢慢的细化分析。所以第三个问题其实没啥鸟用，但也是最最最核心的，就是为了引出后面关于一些具体类的分析的。</code></p>\n<h2 id=\"getBean\"><a href=\"#getBean\" class=\"headerlink\" title=\"getBean\"></a>getBean</h2><p>在<a href=\"https://juejin.im/post/6844903557129322510\">Spring源码系列：BeanFactory的创建</a>文章中我们谈到了BeanFactory这容器，这个里面提供了注入的实现接口。其具体的实现还需要从AbstractBeanFactory和DefaultListableBeanFactory中来看。今天就先撸一下AbstractBeanFactory这个类中的getBean这个方法。</p>\n<h3 id=\"getBean-1\"><a href=\"#getBean-1\" class=\"headerlink\" title=\"getBean\"></a>getBean</h3><p>getBean提供了四个重载方法，如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//通过name获取Bean</span></span><br><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> Object <span class=\"title function_\">getBean</span><span class=\"params\">(String name)</span> <span class=\"keyword\">throws</span> BeansException &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> doGetBean(name, <span class=\"literal\">null</span>, <span class=\"literal\">null</span>, <span class=\"literal\">false</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//通过name和类型获取Bean</span></span><br><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> &lt;T&gt; T <span class=\"title function_\">getBean</span><span class=\"params\">(String name, Class&lt;T&gt; requiredType)</span> <span class=\"keyword\">throws</span> BeansException &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> doGetBean(name, requiredType, <span class=\"literal\">null</span>, <span class=\"literal\">false</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//通过name和对象参数获取Bean</span></span><br><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> Object <span class=\"title function_\">getBean</span><span class=\"params\">(String name, Object... args)</span> <span class=\"keyword\">throws</span> BeansException &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> doGetBean(name, <span class=\"literal\">null</span>, args, <span class=\"literal\">false</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//通过name、类型和参数获取Bean</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> &lt;T&gt; T <span class=\"title function_\">getBean</span><span class=\"params\">(String name, Class&lt;T&gt; requiredType, Object... args)</span> <span class=\"keyword\">throws</span> BeansException &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> doGetBean(name, requiredType, args, <span class=\"literal\">false</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>从这四个重载方法的方法体中可以看出，他们都是通过doGetBean来实现的。所以doGetBean其实才是真正获取Bean的地方，也是触发依赖注入发生的地方。（这个方法比较长，分段来说）</p>\n<h3 id=\"doGetBean\"><a href=\"#doGetBean\" class=\"headerlink\" title=\"doGetBean\"></a>doGetBean</h3><p>先来看下方法的定义：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class=\"line\">\t<span class=\"keyword\">protected</span> &lt;T&gt; T <span class=\"title function_\">doGetBean</span><span class=\"params\">(</span></span><br><span class=\"line\"><span class=\"params\">\t<span class=\"keyword\">final</span> String name, <span class=\"keyword\">final</span> Class&lt;T&gt; requiredType, <span class=\"keyword\">final</span> Object[] args, <span class=\"type\">boolean</span> typeCheckOnly)</span></span><br><span class=\"line\">\t<span class=\"keyword\">throws</span> BeansException &#123;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>name 要检索的bean的名称</li>\n<li>requiredType 要检索的bean所需的类型</li>\n<li>args 使用显式参数创建bean实例时使用的参数（仅在创建新实例时应用，而不是在检索现有实例时应用）</li>\n<li>typeCheckOnly 是否为类型检查而获得实例，而不是实际使用</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//返回bean名称，剥离工厂引用前缀，并将别名解析为规范名称。</span></span><br><span class=\"line\"><span class=\"keyword\">final</span> <span class=\"type\">String</span> <span class=\"variable\">beanName</span> <span class=\"operator\">=</span> transformedBeanName(name);</span><br><span class=\"line\"><span class=\"comment\">//声明当前需要返回的bean对象</span></span><br><span class=\"line\">Object bean;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 先从缓存中获取bean，处理已经被创建的单例模式的bean，</span></span><br><span class=\"line\"><span class=\"comment\">//对于此类bean的请求不需要重复的创建(singleton)</span></span><br><span class=\"line\"><span class=\"type\">Object</span> <span class=\"variable\">sharedInstance</span> <span class=\"operator\">=</span> getSingleton(beanName);</span><br></pre></td></tr></table></figure>\n\n<p>如果当前获取到的sharedInstance不为null并且参数为空，则进行FactoryBean的相关处理，并获取FactoryBean的处理结果。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (sharedInstance != <span class=\"literal\">null</span> &amp;&amp; args == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (logger.isDebugEnabled()) &#123;</span><br><span class=\"line\">\t    <span class=\"comment\">//返回指定的singleton bean是否正在创建（在整个工厂内）。</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (isSingletonCurrentlyInCreation(beanName)) &#123;</span><br><span class=\"line\">\t\t\tlogger.debug(<span class=\"string\">&quot;Returning eagerly cached instance of singleton bean &#x27;&quot;</span> </span><br><span class=\"line\">\t\t\t+ beanName +<span class=\"string\">&quot;&#x27; that is not fully initialized yet - a consequence of a circular reference&quot;</span>);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\tlogger.debug(<span class=\"string\">&quot;Returning cached instance of singleton bean &#x27;&quot;</span> + beanName + <span class=\"string\">&quot;&#x27;&quot;</span>);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">//完成FactoryBean的相关处理，并用来获取FactoryBean的处理结果</span></span><br><span class=\"line\">\tbean = getObjectForBeanInstance(sharedInstance, name, beanName, <span class=\"literal\">null</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>如果当前获取到的sharedInstance为null，我们再来看下做了哪些处理（下面的都在一个大的else里面）：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">//分解到下面</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//在当前线程中，返回指定的prototype bean是否正在创建。</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (isPrototypeCurrentlyInCreation(beanName)) &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">BeanCurrentlyInCreationException</span>(beanName);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>下面这段的作用是对Ioc容器中的BeanDefinition是否存在进行检测，先是检测当前BeanFactory中是否能够获取到，如果取不到则继续到双亲容器中进行尝试获取，如果双亲还是取不到，则继续向上一级父容器中尝试获取。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 检查该工厂是否存在bean定义。</span></span><br><span class=\"line\"><span class=\"type\">BeanFactory</span> <span class=\"variable\">parentBeanFactory</span> <span class=\"operator\">=</span> getParentBeanFactory();</span><br><span class=\"line\"><span class=\"keyword\">if</span> (parentBeanFactory != <span class=\"literal\">null</span> &amp;&amp; !containsBeanDefinition(beanName)) &#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 如果没有，则继续检查父类</span></span><br><span class=\"line\">\t<span class=\"type\">String</span> <span class=\"variable\">nameToLookup</span> <span class=\"operator\">=</span> originalBeanName(name);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (args != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 用明确的参数代表父项。</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> (T) parentBeanFactory.getBean(nameToLookup, args);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 如果没有args - &gt;委托给标准的getBean方法。</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> parentBeanFactory.getBean(nameToLookup, requiredType);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>将指定的bean标记为已经创建（或即将创建）；这里允许bean工厂优化其缓存以重复创建指定的bean。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (!typeCheckOnly) &#123;</span><br><span class=\"line\">\tmarkBeanAsCreated(beanName);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>先根据beanName来获取BeanDefinition，然后获取当前bean的所有依赖bean，这里是通过递归调用getBean来完成，直到没有任何依赖的bean为止。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">final</span> <span class=\"type\">RootBeanDefinition</span> <span class=\"variable\">mbd</span> <span class=\"operator\">=</span> getMergedLocalBeanDefinition(beanName);</span><br><span class=\"line\"><span class=\"comment\">//检查给定的合并bean定义，可能抛出验证异常。</span></span><br><span class=\"line\">checkMergedBeanDefinition(mbd, beanName, args);</span><br><span class=\"line\"><span class=\"comment\">// 保证当前bean依赖的bean的初始化。</span></span><br><span class=\"line\">String[] dependsOn = mbd.getDependsOn();</span><br><span class=\"line\"><span class=\"keyword\">if</span> (dependsOn != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (String dep : dependsOn) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (isDependent(beanName, dep)) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">BeanCreationException</span>(mbd.getResourceDescription(), beanName,</span><br><span class=\"line\">\t\t\t<span class=\"string\">&quot;Circular depends-on relationship between &#x27;&quot;</span> + beanName + <span class=\"string\">&quot;&#x27; and &#x27;&quot;</span> + dep + <span class=\"string\">&quot;&#x27;&quot;</span>);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tregisterDependentBean(dep, beanName);</span><br><span class=\"line\">\t\t<span class=\"comment\">//递归处理依赖bean</span></span><br><span class=\"line\">\t\tgetBean(dep);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>下面这段就是创建一个bean实例；这里通过调用getSingleton方法来创建一个单例bean实例；从代码中可以看到，getSingleton的调用是通过getObject这个回调函数来间接调用createBean完成的。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (mbd.isSingleton()) &#123;</span><br><span class=\"line\">\tsharedInstance = getSingleton(beanName, <span class=\"keyword\">new</span> <span class=\"title class_\">ObjectFactory</span>&lt;Object&gt;() &#123;</span><br><span class=\"line\">\t<span class=\"comment\">//回调函数getObject</span></span><br><span class=\"line\">\t\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">public</span> Object <span class=\"title function_\">getObject</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> BeansException &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t\t\t    <span class=\"comment\">//创建bean</span></span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">return</span> createBean(beanName, mbd, args);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">catch</span> (BeansException ex) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">//发生异常则销毁</span></span><br><span class=\"line\">\t\t\t\tdestroySingleton(beanName);</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">throw</span> ex;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;);</span><br><span class=\"line\">\t<span class=\"comment\">//获取给定bean实例的对象，无论是bean实例本身，还是FactoryBean创建的对象。</span></span><br><span class=\"line\">\tbean = getObjectForBeanInstance(sharedInstance, name, beanName, mbd);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>下面是创建prototype bean</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (mbd.isPrototype()) &#123;</span><br><span class=\"line\">    <span class=\"type\">Object</span> <span class=\"variable\">prototypeInstance</span> <span class=\"operator\">=</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">    \tbeforePrototypeCreation(beanName);</span><br><span class=\"line\">    \t<span class=\"comment\">//创建prototype bean</span></span><br><span class=\"line\">    \tprototypeInstance = createBean(beanName, mbd, args);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">    \tafterPrototypeCreation(beanName);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    bean = getObjectForBeanInstance(prototypeInstance, name, beanName, mbd);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>最后是对创建的bean进行类型检查，没有问题就返回已经创建好的bean；此时这个bean是包含依赖关系的bean</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (requiredType != <span class=\"literal\">null</span> &amp;&amp; bean != <span class=\"literal\">null</span> &amp;&amp; !requiredType.isAssignableFrom(bean.getClass())) &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> getTypeConverter().convertIfNecessary(bean, requiredType);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">catch</span> (TypeMismatchException ex) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (logger.isDebugEnabled()) &#123;</span><br><span class=\"line\">\t\t\tlogger.debug(<span class=\"string\">&quot;Failed to convert bean &#x27;&quot;</span> + name + <span class=\"string\">&quot;&#x27; to required type &#x27;&quot;</span> +</span><br><span class=\"line\">\t\t\t\t\tClassUtils.getQualifiedName(requiredType) + <span class=\"string\">&quot;&#x27;&quot;</span>, ex);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">BeanNotOfRequiredTypeException</span>(name, requiredType, bean.getClass());</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//返回bean</span></span><br><span class=\"line\"><span class=\"keyword\">return</span> (T) bean;</span><br></pre></td></tr></table></figure>\n\n<p>getBean是依赖注入的起点，从上面的分析可以看出，bean的创建都是通过createBean来完成具体的创建的。createBean的具体实现是在AbstractAutowireCapableBeanFactory中的，这里createBean不仅仅负责创建bean，还需要完成对bean的初始化。</p>\n<h2 id=\"createBean\"><a href=\"#createBean\" class=\"headerlink\" title=\"createBean\"></a>createBean</h2><p>getBean 是依赖注入的起点，bean 的创建都是通过 createBean 来完成具体的创建的。createBean 的具体实现是在AbstractAutowireCapableBeanFactory 中的。</p>\n<p>这个方法是 AbstractAutowireCapableBeanFactory 这个类的中心方法，其作用就是创建一个bean实例，填充bean实例，后置处理等。</p>\n<p>在createBean中主要做了三件事：</p>\n<ul>\n<li>判断需要创建的Bean是否可以实例化，这个类是否可以通过类装载器来载入</li>\n<li>是否配置了后置处理器相关处理（如果配置了则返回一个代理）</li>\n<li>创建Bean</li>\n</ul>\n<p>具体来看方法：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">protected</span> Object <span class=\"title function_\">createBean</span><span class=\"params\">(String beanName, RootBeanDefinition mbd, Object[] args)</span> <span class=\"keyword\">throws</span> BeanCreationException &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (logger.isDebugEnabled()) &#123;</span><br><span class=\"line\">\t\tlogger.debug(<span class=\"string\">&quot;Creating instance of bean &#x27;&quot;</span> + beanName + <span class=\"string\">&quot;&#x27;&quot;</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"type\">RootBeanDefinition</span> <span class=\"variable\">mbdToUse</span> <span class=\"operator\">=</span> mbd;</span><br><span class=\"line\">\t<span class=\"comment\">// Make sure bean class is actually resolved at this point, and</span></span><br><span class=\"line\">\t<span class=\"comment\">// clone the bean definition in case of a dynamically resolved Class</span></span><br><span class=\"line\">\t<span class=\"comment\">// which cannot be stored in the shared merged bean definition.</span></span><br><span class=\"line\">\t<span class=\"comment\">//判断需要创建的Bean是否可以实例化，这个类是否可以通过类装载器来载入</span></span><br><span class=\"line\">\tClass&lt;?&gt; resolvedClass = resolveBeanClass(mbd, beanName);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (resolvedClass != <span class=\"literal\">null</span> &amp;&amp; !mbd.hasBeanClass() &amp;&amp; mbd.getBeanClassName() != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">\t\tmbdToUse = <span class=\"keyword\">new</span> <span class=\"title class_\">RootBeanDefinition</span>(mbd);</span><br><span class=\"line\">\t\tmbdToUse.setBeanClass(resolvedClass);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// Prepare method overrides.</span></span><br><span class=\"line\">\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t\tmbdToUse.prepareMethodOverrides();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">catch</span> (BeanDefinitionValidationException ex) &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">//异常：Validation of method overrides failed</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// Give BeanPostProcessors a chance to return a proxy instead of the target </span></span><br><span class=\"line\">\t\t<span class=\"comment\">//bean instance.</span></span><br><span class=\"line\">\t\t<span class=\"comment\">//是否配置了后置处理器相关处理（如果配置了则返回一个代理）</span></span><br><span class=\"line\">\t\t<span class=\"type\">Object</span> <span class=\"variable\">bean</span> <span class=\"operator\">=</span> resolveBeforeInstantiation(beanName, mbdToUse);</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (bean != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> bean;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">catch</span> (Throwable ex) &#123;</span><br><span class=\"line\">\t    <span class=\"comment\">//异常:BeanPostProcessor before instantiation of bean failed</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">    <span class=\"comment\">//创建Bean</span></span><br><span class=\"line\">\t<span class=\"type\">Object</span> <span class=\"variable\">beanInstance</span> <span class=\"operator\">=</span> doCreateBean(beanName, mbdToUse, args);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (logger.isDebugEnabled()) &#123;</span><br><span class=\"line\">\t\tlogger.debug(<span class=\"string\">&quot;Finished creating instance of bean &#x27;&quot;</span> + beanName + <span class=\"string\">&quot;&#x27;&quot;</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> beanInstance;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>从上面的代码中可以看到，创建bean是交给doCreateBean方法来创建的。继续看doCreateBean这个方法：<br>（这里面涉及到一个BeanWrapper这个接口，小伙伴可以移步了解一下《<a href=\"https://juejin.im/post/6844903559926906888\">Spring源码系列：BeanWrapper</a>》）</p>\n<p><strong>代码 1：</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 用BeanWrapper来持有创建出来的Bean对象</span></span><br><span class=\"line\"><span class=\"type\">BeanWrapper</span> <span class=\"variable\">instanceWrapper</span> <span class=\"operator\">=</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\"><span class=\"comment\">//如果是单例的话，则先把缓存中的同名bean清除</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (mbd.isSingleton()) &#123;</span><br><span class=\"line\">\tinstanceWrapper = <span class=\"built_in\">this</span>.factoryBeanInstanceCache.remove(beanName);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//实际创建的交给createBeanInstance来完成，</span></span><br><span class=\"line\"><span class=\"comment\">//bean的生成，这里会使用默认的类生成器，包装成BeanWrapperImpl类，</span></span><br><span class=\"line\"><span class=\"comment\">//为了下面的populateBean方法的属性注入做准备  </span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (instanceWrapper == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">\tinstanceWrapper = createBeanInstance(beanName, mbd, args);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">final</span> <span class=\"type\">Object</span> <span class=\"variable\">bean</span> <span class=\"operator\">=</span> (instanceWrapper != <span class=\"literal\">null</span> ? instanceWrapper.getWrappedInstance() : <span class=\"literal\">null</span>);</span><br><span class=\"line\">Class&lt;?&gt; beanType = (instanceWrapper != <span class=\"literal\">null</span> ? instanceWrapper.getWrappedClass() : <span class=\"literal\">null</span>);</span><br><span class=\"line\">mbd.resolvedTargetType = beanType;</span><br></pre></td></tr></table></figure>\n<p><strong>代码 2：</strong> </p>\n<p>允许后处理器修改合并的bean定义。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">synchronized</span> (mbd.postProcessingLock) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!mbd.postProcessed) &#123;</span><br><span class=\"line\">    \t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">    \t\tapplyMergedBeanDefinitionPostProcessors(mbd, beanType, beanName);</span><br><span class=\"line\">    \t&#125;</span><br><span class=\"line\">    \t<span class=\"keyword\">catch</span> (Throwable ex) &#123;</span><br><span class=\"line\">    \t<span class=\"comment\">//异常：Post-processing of merged bean definition failed</span></span><br><span class=\"line\">    \t&#125;</span><br><span class=\"line\">    \tmbd.postProcessed = <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>代码 3 ：</strong></p>\n<p>即使被BeanFactoryAware等生命周期接口触发，也要尽快地缓存singletons 以便能够解析循环引用。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">boolean earlySingletonExposure = (mbd.isSingleton() &amp;&amp; this.allowCircularReferences &amp;&amp;</span><br><span class=\"line\">\t\tisSingletonCurrentlyInCreation(beanName));</span><br><span class=\"line\">if (earlySingletonExposure) &#123;</span><br><span class=\"line\">\tif (logger.isDebugEnabled()) &#123;</span><br><span class=\"line\">\t\tlogger.debug(&quot;Eagerly caching bean &#x27;&quot; + beanName +</span><br><span class=\"line\">\t\t\t\t&quot;&#x27; to allow for resolving potential circular references&quot;);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\taddSingletonFactory(beanName, new ObjectFactory&lt;Object&gt;() &#123;</span><br><span class=\"line\">\t\t@Override</span><br><span class=\"line\">\t\tpublic Object getObject() throws BeansException &#123;</span><br><span class=\"line\">\t\t\treturn getEarlyBeanReference(beanName, mbd, bean);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>代码 4:</strong></p>\n<p>这里是对bean的初始化的地方，一般情况下依赖注入就在这里发生；这个exposedObject变量保存的是在初始化处理完以后返回的作为依赖注入完成之后的bean。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Initialize the bean instance.</span></span><br><span class=\"line\"><span class=\"type\">Object</span> <span class=\"variable\">exposedObject</span> <span class=\"operator\">=</span> bean;</span><br><span class=\"line\"><span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\tpopulateBean(beanName, mbd, instanceWrapper);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (exposedObject != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">\t\texposedObject = initializeBean(beanName, exposedObject, mbd);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">catch</span> (Throwable ex) &#123;</span><br><span class=\"line\">    <span class=\"comment\">//抛出</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (ex <span class=\"keyword\">instanceof</span> BeanCreationException &amp;&amp; beanName.equals(((BeanCreationException)</span><br><span class=\"line\">\t    ex).getBeanName())) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">throw</span> (BeanCreationException) ex;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t<span class=\"comment\">//异常:Initialization of bean failed</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>代码 5:</strong></p>\n<p>这里是注册bean</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">try &#123;</span><br><span class=\"line\">\tregisterDisposableBeanIfNecessary(beanName, bean, mbd);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">catch (BeanDefinitionValidationException ex) &#123;</span><br><span class=\"line\">    //异常处理</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">//返回结果</span><br><span class=\"line\">return exposedObject;</span><br></pre></td></tr></table></figure>\n\n<p>上面的5个代码段均是doCreateBean中的处理逻辑，有兴趣的小伙伴可以自行查阅源码。从上面的代码中我们依然没有得到具体创建的过程，因为在doCreateBean中又依赖：<code>createBeanInstance</code>和<code>populateBean</code>两个方法。</p>\n<p>在<code>createBeanInstance</code>中生成了Bean所包含的java对象。来看是怎么生成的：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">protected</span> BeanWrapper <span class=\"title function_\">createBeanInstance</span><span class=\"params\">(String beanName, RootBeanDefinition mbd, Object[] args)</span> &#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 确保bean类实际上已经解析过了，可以实例化</span></span><br><span class=\"line\">\tClass&lt;?&gt; beanClass = resolveBeanClass(mbd, beanName);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (beanClass != <span class=\"literal\">null</span> &amp;&amp; !Modifier.isPublic(beanClass.getModifiers()) &amp;&amp; !mbd.isNonPublicAccessAllowed()) &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">//异常：Bean class isn&#x27;t public, and non-public access not allowed:beanName</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">     <span class=\"comment\">//1. 使用工厂方法来进行bean的实例化</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (mbd.getFactoryMethodName() != <span class=\"literal\">null</span>)  &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> instantiateUsingFactoryMethod(beanName, mbd, args);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 重新创建相同的bean时快捷方式...</span></span><br><span class=\"line\">\t<span class=\"type\">boolean</span> <span class=\"variable\">resolved</span> <span class=\"operator\">=</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">\t<span class=\"type\">boolean</span> <span class=\"variable\">autowireNecessary</span> <span class=\"operator\">=</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (args == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">synchronized</span> (mbd.constructorArgumentLock) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (mbd.resolvedConstructorOrFactoryMethod != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">\t\t\t\tresolved = <span class=\"literal\">true</span>;</span><br><span class=\"line\">\t\t\t\tautowireNecessary = mbd.constructorArgumentsResolved;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (resolved) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (autowireNecessary) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> autowireConstructor(beanName, mbd, <span class=\"literal\">null</span>, <span class=\"literal\">null</span>);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> instantiateBean(beanName, mbd);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 2.需要确定构造函数...,使用构造函数进行bean实例化</span></span><br><span class=\"line\">\tConstructor&lt;?&gt;[] ctors = determineConstructorsFromBeanPostProcessors(beanClass, beanName);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (ctors != <span class=\"literal\">null</span> ||</span><br><span class=\"line\">\t\t\tmbd.getResolvedAutowireMode() == RootBeanDefinition.AUTOWIRE_CONSTRUCTOR ||</span><br><span class=\"line\">\t\t\tmbd.hasConstructorArgumentValues() || !ObjectUtils.isEmpty(args))  &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> autowireConstructor(beanName, mbd, ctors, args);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//3.没有特殊的处理：只需使用无参数构造函数。（默认构造函数）</span></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> instantiateBean(beanName, mbd);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>从上面这段代码可以看出，对象的生成有许多不同的方式，有通过工厂的，也有通过容器的autowire特性生成的。当然这些生成方式都是由相关的BeanDefinition来指定的。</p>\n<p><strong>Spring中配置Bean的方式我们常用的一种是通过xml文件来配置，还有就是通过注解的方式来配置</strong>。</p>\n<ul>\n<li><strong>demo1</strong></li>\n</ul>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;user&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;com.glmapper.test.User&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;name&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;glmapper&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span>       </span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>这种方式，通过class提供的权限定名，spring就可以利用反射机制创建这个bean。</p>\n<ul>\n<li><strong>demo2</strong></li>\n</ul>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;user&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;com.glmapper.test.UserFactory&quot;</span> <span class=\"attr\">factory-method</span>=<span class=\"string\">&quot;getUser&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">constructor-arg</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;glmapper&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">constructor-arg</span>&gt;</span>           </span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>这种是利用静态工厂方法来创建的，提供的class并非是类的权限定名， 而是静态工厂的全类名；除此之外还需要指定获取bean的方法（此处是getUser）和参数（参数是glmapper）。</p>\n<ul>\n<li><strong>demo3</strong></li>\n</ul>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;userFactory&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;com.glmapper.test.UserInstanceFactory&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!--用一个集合来保存我当前的对象实例--&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;map&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">map</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">entry</span> <span class=\"attr\">key</span>=<span class=\"string\">&quot;user1&quot;</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;com.glmapper.test.User&quot;</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;name&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;glmapper1&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span>        </span><br><span class=\"line\">                <span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">entry</span>&gt;</span>    </span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">entry</span> <span class=\"attr\">key</span>=<span class=\"string\">&quot;user2&quot;</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;com.glmapper.test.User&quot;</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;name&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;glmapper2&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span>   </span><br><span class=\"line\">                <span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">entry</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">map</span>&gt;</span>  </span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\"> <span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br><span class=\"line\"> </span><br><span class=\"line\"> //实例1</span><br><span class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;user1&quot;</span> <span class=\"attr\">factory-bean</span>=<span class=\"string\">&quot;userFactory&quot;</span> <span class=\"attr\">factory-method</span>=<span class=\"string\">&quot;getUserInstance&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">constructor-arg</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;user1&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">constructor-arg</span>&gt;</span>           </span><br><span class=\"line\"> <span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br><span class=\"line\">//实例2</span><br><span class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;user2&quot;</span> <span class=\"attr\">factory-bean</span>=<span class=\"string\">&quot;userFactory&quot;</span> <span class=\"attr\">factory-method</span>=<span class=\"string\">&quot;getUserInstance&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">constructor-arg</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;user2&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">constructor-arg</span>&gt;</span>           </span><br><span class=\"line\"> &lt;/bean</span><br></pre></td></tr></table></figure>\n\n<p>这种方式和静态工厂的区别在于我们需要先实例化一个工厂对象，然后才能使用这个工厂对象来创建我们的bean。getUserInstance通过key值来获取我们已经实例化好的对象（当然方式有很多，此处以map来举个例子）。<code>关于注解的和使用FactoryBean接口的这里就暂时不说，后期再聊</code></p>\n<p>OK，继续来分钟，上面说到的是以工厂方法创建bean，具体的源码有点长，这里就不放了，大概思路就如上面所提到的那几种方式。接下来看下常见的使用instantiateBean方式（使用它的默认构造函数）来构建bean的代码：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">protected</span> BeanWrapper <span class=\"title function_\">instantiateBean</span><span class=\"params\">(<span class=\"keyword\">final</span> String beanName, <span class=\"keyword\">final</span> RootBeanDefinition mbd)</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t\tObject beanInstance;</span><br><span class=\"line\">\t\t<span class=\"keyword\">final</span> <span class=\"type\">BeanFactory</span> <span class=\"variable\">parent</span> <span class=\"operator\">=</span> <span class=\"built_in\">this</span>;</span><br><span class=\"line\">\t    <span class=\"comment\">//获取系统安全接口。</span></span><br><span class=\"line\">\t    <span class=\"comment\">//如果已经为当前应用程序建立了安全管理器，则返回该安全管理器; </span></span><br><span class=\"line\">\t    <span class=\"comment\">//否则，返回null。</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (System.getSecurityManager() != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">\t\t\tbeanInstance = AccessController.doPrivileged(<span class=\"keyword\">new</span> <span class=\"title class_\">PrivilegedAction</span>&lt;Object&gt;() &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">public</span> Object <span class=\"title function_\">run</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">return</span> getInstantiationStrategy().instantiate(mbd, beanName, parent);</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;, getAccessControlContext());</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\tbeanInstance = getInstantiationStrategy().instantiate(mbd, beanName, parent);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"type\">BeanWrapper</span> <span class=\"variable\">bw</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">BeanWrapperImpl</span>(beanInstance);</span><br><span class=\"line\">\t\tinitBeanWrapper(bw);</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> bw;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">catch</span> (Throwable ex) &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">//异常：Instantiation of bean failed</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>可以看出，上面的创建都是通过：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">getInstantiationStrategy().instantiate(mbd, beanName, parent);</span><br></pre></td></tr></table></figure>\n<p>这样一段代码来完成的，是的，这里已经快接近真相了。从语义上来分析，先是获取了一种策略，然后利用当前获取的策略再去执行实例化。OK，我们看下getInstantiationStrategy()拿到的是什么：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//返回实例化策略用于创建bean实例。</span></span><br><span class=\"line\"><span class=\"keyword\">protected</span> InstantiationStrategy <span class=\"title function_\">getInstantiationStrategy</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"built_in\">this</span>.instantiationStrategy;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//默认的实例化测试是使用CGLIB代理</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"type\">InstantiationStrategy</span> <span class=\"variable\">instantiationStrategy</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">CglibSubclassingInstantiationStrategy</span>();</span><br></pre></td></tr></table></figure>\n<p>看到这里我们清楚了，默认构造函数的情况下，在spring中会使用Cglib来进行bean的实例化（关于cglib此处不再赘述）。我们看下CglibSubclassingInstantiationStrategy这个类的申明：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">CglibSubclassingInstantiationStrategy</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">SimpleInstantiationStrategy</span> </span><br></pre></td></tr></table></figure>\n<p>它继承自SimpleInstantiationStrategy ，这个又是什么鬼呢？</p>\n<p><code>SimpleInstantiationStrategy是Spring用来生成Bean对象的默认类，在这个类中提供了两种实例化java对象的方法，一种是基于java自身反射机制的BeanUtils，还有一种就是基于Cglib</code>。</p>\n<p>如何创建的就不说了；到这里createBeanInstance就说完了（Bean已经创建了）；但是仅仅是创建，spring还没有处理它们，比如说bean对象的属性，依赖关系等等。这些就是上面提到的另外一个方法populateBean；</p>\n<p>这个方法其实就做了一件事：<strong>使用bean定义中的属性值在给定的BeanWrapper中填充bean实例。</strong>分段来看：<br>下面这段代码是先将BeanDefinition中设置的property值封装成PropertyValues，然后检测我们的BeanWrapper是否为Null，如果为null则抛出异常或者跳过当前空实例赋值阶段</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//获取到BeanDefinition中设置的property值，封装成PropertyValues</span></span><br><span class=\"line\"><span class=\"type\">PropertyValues</span> <span class=\"variable\">pvs</span> <span class=\"operator\">=</span> mbd.getPropertyValues();</span><br><span class=\"line\"><span class=\"keyword\">if</span> (bw == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (!pvs.isEmpty()) &#123;</span><br><span class=\"line\">\t<span class=\"comment\">//异常：Cannot apply property values to null instance</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t<span class=\"comment\">// Skip property population phase for null instance.</span></span><br><span class=\"line\">\t    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>下面这段代码的意思是给任何InstantiationAwareBeanPostProcessors提供在设置属性之前修改bean状态的机会。 </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">boolean</span> <span class=\"variable\">continueWithPropertyPopulation</span> <span class=\"operator\">=</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\"><span class=\"keyword\">if</span> (!mbd.isSynthetic() &amp;&amp; hasInstantiationAwareBeanPostProcessors()) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (BeanPostProcessor bp : getBeanPostProcessors()) &#123;</span><br><span class=\"line\">    \t<span class=\"keyword\">if</span> (bp <span class=\"keyword\">instanceof</span> InstantiationAwareBeanPostProcessor) &#123;</span><br><span class=\"line\">    \t\t<span class=\"type\">InstantiationAwareBeanPostProcessor</span> <span class=\"variable\">ibp</span> <span class=\"operator\">=</span> (InstantiationAwareBeanPostProcessor) bp;</span><br><span class=\"line\">    \t\t<span class=\"keyword\">if</span> (!ibp.postProcessAfterInstantiation(bw.getWrappedInstance(), beanName)) &#123;</span><br><span class=\"line\">    \t\t\tcontinueWithPropertyPopulation = <span class=\"literal\">false</span>;</span><br><span class=\"line\">    \t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">    \t\t&#125;</span><br><span class=\"line\">    \t&#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> (!continueWithPropertyPopulation) &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>下面就是对具体注入方式的处理：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//处理autowire的注入；可以根据bean的名称和类型来注入</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (mbd.getResolvedAutowireMode() == RootBeanDefinition.AUTOWIRE_BY_NAME ||</span><br><span class=\"line\">\tmbd.getResolvedAutowireMode() == RootBeanDefinition.AUTOWIRE_BY_TYPE) &#123;</span><br><span class=\"line\">    <span class=\"type\">MutablePropertyValues</span> <span class=\"variable\">newPvs</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">MutablePropertyValues</span>(pvs);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 则根据名称添加基于自动装配的属性值。</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (mbd.getResolvedAutowireMode() == RootBeanDefinition.AUTOWIRE_BY_NAME) &#123;</span><br><span class=\"line\">    \tautowireByName(beanName, mbd, bw, newPvs);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// 根据类型添加基于自动装配的属性值。</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (mbd.getResolvedAutowireMode() == RootBeanDefinition.AUTOWIRE_BY_TYPE) &#123;</span><br><span class=\"line\">    \tautowireByType(beanName, mbd, bw, newPvs);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    pvs = newPvs;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>两个判断条件，在满足的情况下做的处理分别是：</p>\n<ul>\n<li>在工厂将给定属性值应用到给定的bean后，对其进行后处理。 允许检查所有的依赖关系是否被满足，例如基于bean属性设置器上的“Required”注解。还允许替换要应用的属性值，通常通过创建基于原始PropertyValues的新MutablePropertyValues实例，添加或删除特定值。</li>\n<li>执行依赖性检查</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//返回这个工厂是否拥有一个InstantiationAwareBeanPostProcessor</span></span><br><span class=\"line\"><span class=\"type\">boolean</span> <span class=\"variable\">hasInstAwareBpps</span> <span class=\"operator\">=</span> hasInstantiationAwareBeanPostProcessors();</span><br><span class=\"line\"><span class=\"comment\">//返回依赖检查代码。</span></span><br><span class=\"line\"><span class=\"type\">boolean</span> <span class=\"variable\">needsDepCheck</span> <span class=\"operator\">=</span> (mbd.getDependencyCheck() != RootBeanDefinition.DEPENDENCY_CHECK_NONE);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> (hasInstAwareBpps || needsDepCheck) &#123;</span><br><span class=\"line\"><span class=\"comment\">//从给定的BeanWrapper中提取一组已过滤的PropertyDescriptors，</span></span><br><span class=\"line\"><span class=\"comment\">//不包括在被忽略的依赖性接口上定义的被忽略的依赖类型或属性（译注）。</span></span><br><span class=\"line\">\tPropertyDescriptor[] filteredPds = filterPropertyDescriptorsForDependencyCheck(bw, mbd.allowCaching);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (hasInstAwareBpps) &#123;</span><br><span class=\"line\">    \t<span class=\"keyword\">for</span> (BeanPostProcessor bp : getBeanPostProcessors()) &#123;</span><br><span class=\"line\">        \t<span class=\"keyword\">if</span> (bp <span class=\"keyword\">instanceof</span> InstantiationAwareBeanPostProcessor) &#123;</span><br><span class=\"line\">        \t\t<span class=\"type\">InstantiationAwareBeanPostProcessor</span> <span class=\"variable\">ibp</span> <span class=\"operator\">=</span> (InstantiationAwareBeanPostProcessor) bp;</span><br><span class=\"line\">        \t\tpvs = ibp.postProcessPropertyValues(pvs, filteredPds, bw.getWrappedInstance(), beanName);</span><br><span class=\"line\">        \t\t<span class=\"keyword\">if</span> (pvs == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">        \t\t\t<span class=\"keyword\">return</span>;</span><br><span class=\"line\">        \t\t&#125;</span><br><span class=\"line\">        \t&#125;</span><br><span class=\"line\">    \t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (needsDepCheck) &#123;</span><br><span class=\"line\">\t\tcheckDependencies(beanName, mbd, filteredPds, pvs);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>最后是对属性进行注入：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">applyPropertyValues(beanName, mbd, bw, pvs);</span><br></pre></td></tr></table></figure>\n<p>这个方法描述的是对属性进行解析然后注入的过程；先来分析下applyPropertyValues的申明：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title function_\">applyPropertyValues</span><span class=\"params\">(String beanName</span></span><br><span class=\"line\"><span class=\"params\">, BeanDefinition mbd, BeanWrapper bw, PropertyValues pvs)</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>beanName bean名称</li>\n<li>mbd 合并的bean definition</li>\n<li>bw 包装目标对象的BeanWrapper</li>\n<li>pvs 新的属性值</li>\n</ul>\n<p>代码分段来看：</p>\n<ul>\n<li><p>参数验证</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (pvs == <span class=\"literal\">null</span> || pvs.isEmpty()) &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li><p>pvs参数处理</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (pvs <span class=\"keyword\">instanceof</span> MutablePropertyValues) &#123;</span><br><span class=\"line\">    mpvs = (MutablePropertyValues) pvs;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (mpvs.isConverted()) &#123;</span><br><span class=\"line\">    \t<span class=\"comment\">// 使用预先转换后的值。</span></span><br><span class=\"line\">    \t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">    \t\tbw.setPropertyValues(mpvs);</span><br><span class=\"line\">    \t\t<span class=\"keyword\">return</span>;</span><br><span class=\"line\">    \t&#125;</span><br><span class=\"line\">    \t<span class=\"keyword\">catch</span> (BeansException ex) &#123;</span><br><span class=\"line\">    \t\t<span class=\"comment\">//异常：Error setting property values</span></span><br><span class=\"line\">    \t&#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    original = mpvs.getPropertyValueList();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    original = Arrays.asList(pvs.getPropertyValues());</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>valueResolver来解析BeanDefinition</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">BeanDefinitionValueResolver</span> <span class=\"variable\">valueResolver</span> <span class=\"operator\">=</span> </span><br><span class=\"line\"><span class=\"keyword\">new</span> <span class=\"title class_\">BeanDefinitionValueResolver</span>(<span class=\"built_in\">this</span>, beanName, mbd, converter);</span><br></pre></td></tr></table></figure></li>\n<li><p>为解析值创建一个副本，注入到bean中的是副本的数据</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Create a deep copy, resolving any references for values.</span></span><br><span class=\"line\">List&lt;PropertyValue&gt; deepCopy = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;PropertyValue&gt;(original.size());</span><br></pre></td></tr></table></figure></li>\n<li><p>遍历处理</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">boolean</span> <span class=\"variable\">resolveNecessary</span> <span class=\"operator\">=</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\"><span class=\"keyword\">for</span> (PropertyValue pv : original) &#123;</span><br><span class=\"line\">    <span class=\"comment\">//返回此持有者是否已经包含转换后的值（true），还是需要转换值（false）。</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (pv.isConverted()) &#123;</span><br><span class=\"line\">    \tdeepCopy.add(pv);</span><br><span class=\"line\">    &#125;   </span><br><span class=\"line\">    <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    \t<span class=\"type\">String</span> <span class=\"variable\">propertyName</span> <span class=\"operator\">=</span> pv.getName();</span><br><span class=\"line\">    \t<span class=\"type\">Object</span> <span class=\"variable\">originalValue</span> <span class=\"operator\">=</span> pv.getValue();</span><br><span class=\"line\">    \t<span class=\"comment\">//看下面的注释resolveValueIfNecessary</span></span><br><span class=\"line\">    \t<span class=\"type\">Object</span> <span class=\"variable\">resolvedValue</span> <span class=\"operator\">=</span> valueResolver.resolveValueIfNecessary(pv, originalValue);</span><br><span class=\"line\">    \t<span class=\"type\">Object</span> <span class=\"variable\">convertedValue</span> <span class=\"operator\">=</span> resolvedValue;</span><br><span class=\"line\">    \t<span class=\"type\">boolean</span> <span class=\"variable\">convertible</span> <span class=\"operator\">=</span> bw.isWritableProperty(propertyName) &amp;&amp;</span><br><span class=\"line\">    \t\t\t!PropertyAccessorUtils.isNestedOrIndexedProperty(propertyName);</span><br><span class=\"line\">    \t<span class=\"keyword\">if</span> (convertible) &#123;</span><br><span class=\"line\">    \t\tconvertedValue = convertForProperty(resolvedValue, propertyName, bw, converter);</span><br><span class=\"line\">    \t&#125;</span><br><span class=\"line\">    \t<span class=\"comment\">// 可能将转换的值存储在合并的bean定义中，以避免为每个创建的bean实例重新转换。</span></span><br><span class=\"line\">    \t<span class=\"keyword\">if</span> (resolvedValue == originalValue) &#123;</span><br><span class=\"line\">    \t\t<span class=\"keyword\">if</span> (convertible) &#123;</span><br><span class=\"line\">    \t\t\tpv.setConvertedValue(convertedValue);</span><br><span class=\"line\">    \t\t&#125;</span><br><span class=\"line\">    \t\tdeepCopy.add(pv);</span><br><span class=\"line\">    \t&#125;</span><br><span class=\"line\">    \t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (convertible &amp;&amp; originalValue <span class=\"keyword\">instanceof</span> TypedStringValue &amp;&amp;</span><br><span class=\"line\">    \t\t\t!((TypedStringValue) originalValue).isDynamic() &amp;&amp;</span><br><span class=\"line\">    \t\t\t!(convertedValue <span class=\"keyword\">instanceof</span> Collection || ObjectUtils.isArray(convertedValue))) &#123;</span><br><span class=\"line\">    \t\tpv.setConvertedValue(convertedValue);</span><br><span class=\"line\">    \t\tdeepCopy.add(pv);</span><br><span class=\"line\">    \t&#125;</span><br><span class=\"line\">    \t<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    \t\tresolveNecessary = <span class=\"literal\">true</span>;</span><br><span class=\"line\">    \t\tdeepCopy.add(<span class=\"keyword\">new</span> <span class=\"title class_\">PropertyValue</span>(pv, convertedValue));</span><br><span class=\"line\">    \t&#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>resolveValueIfNecessary 给定一个PropertyValue，返回一个value，必要时解析对工厂中其他bean的引用。value可以是：</p>\n</li>\n<li><p>一个BeanDefinition，它导致创建一个相应的新的bean实例。 Singleton标志和这样的”inner beans”的名字被忽略：内部beans是匿名原型。</p>\n</li>\n<li><p>RuntimeBeanReference(必须解析)</p>\n</li>\n<li><p>ManagedList</p>\n</li>\n<li><p>ManagedSet</p>\n</li>\n<li><p>ManagedMap</p>\n</li>\n<li><p>一个普通的对象或null，在这种情况下，它是孤立的。</p>\n</li>\n</ul>\n<p>下面这段代码时依赖注入发生的地方，其实际上是在BeanWrapperImpl中来完成。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">    bw.setPropertyValues(<span class=\"keyword\">new</span> <span class=\"title class_\">MutablePropertyValues</span>(deepCopy));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">catch</span> (BeansException ex) &#123;</span><br><span class=\"line\">    <span class=\"comment\">//异常：Error setting property values</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>上面说到 spring 是通过 BeanDefinitionValueResolver 来解析 BeanDefinition 的，然后再注入到 property 中，关于这个过程见下一小节。</p>\n<h2 id=\"属性注入\"><a href=\"#属性注入\" class=\"headerlink\" title=\"属性注入\"></a>属性注入</h2><p>前面文章中对依赖注入的触发和bean的创建做了学习记录，本文将来记录一下bean的属性注入过程。Bean的属性注入发生在<code>BeanDefinitionValueResolver</code>这个类中，<code>BeanDefinitionValueResolver</code>这类是用于bean工厂实现的Helper类，职责就是将bean定义对象中包含的值解析为应用于目标bean实例的实际值。</p>\n<p><code>BeanDefinitionValueResolver</code>类中的<code>resolveValueIfNecessary()</code>方法包含了对所有注入类型的处理。所以本文主要围绕这个方法展开来说。</p>\n<h2 id=\"resolveValueIfNecessary方法\"><a href=\"#resolveValueIfNecessary方法\" class=\"headerlink\" title=\"resolveValueIfNecessary方法\"></a>resolveValueIfNecessary方法</h2><p><code>resolveValueIfNecessary()</code>:给定一个PropertyValue，返回一个value，解析对工厂中其他bean的引用。 value可能是：</p>\n<ul>\n<li>RuntimeBeanReference : 在解析到依赖的Bean的时侯，解析器会依据依赖bean的name创建一个RuntimeBeanReference对像，将这个对像放入BeanDefinition的MutablePropertyValues中。</li>\n<li>ManagedList：用来保存它所管理的List元素，它可以包含运行时期的bean引用(将被解析为bean对象). </li>\n<li>ManagedSet ：用来保存它所管理的set值，它可以包含运行时期的bean引用(将被解析为bean对象) </li>\n<li>ManagedMap ：用来保存它所管理的map值，它可以包含运行时期的bean引用(将被解析为bean对象)</li>\n</ul>\n<p><strong>1、方法申明</strong></p>\n<p>argName ：为其定义的参数的名称</p>\n<p>value   ：要解析的值对象</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> Object <span class=\"title function_\">resolveValueIfNecessary</span><span class=\"params\">(Object argName, Object value)</span></span><br></pre></td></tr></table></figure>\n<p><strong>2、RuntimeBeanReference</strong></p>\n<p>当在beanfactory中作为另外一个<strong>bean的引用时</strong>，作为属性值对象，将在运行时进行解析。 RuntimeBeanReference是在对BeanDefinition进行解析时生成的数据对象。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (value <span class=\"keyword\">instanceof</span> RuntimeBeanReference) &#123;</span><br><span class=\"line\">    <span class=\"type\">RuntimeBeanReference</span> <span class=\"variable\">ref</span> <span class=\"operator\">=</span> (RuntimeBeanReference) value;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> resolveReference(argName, ref);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>3、RuntimeBeanNameReference</strong></p>\n<p>当在beanfactory中作为另外一个<strong>bean名称的引用时</strong>，作为属性值对象，将在运行时进行解析。 </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (value <span class=\"keyword\">instanceof</span> RuntimeBeanNameReference) &#123;</span><br><span class=\"line\">    <span class=\"type\">String</span> <span class=\"variable\">refName</span> <span class=\"operator\">=</span> ((RuntimeBeanNameReference) value).getBeanName();</span><br><span class=\"line\">    refName = String.valueOf(doEvaluate(refName));</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!<span class=\"built_in\">this</span>.beanFactory.containsBean(refName)) &#123;</span><br><span class=\"line\">        <span class=\"comment\">//异常：Invalid bean name &#x27;&quot; + refName + &quot;&#x27; in bean reference for &quot; + argName</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> refName;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>4、BeanDefinitionHolder</strong></p>\n<p>解析BeanDefinitionHolder：包含具有名称和别名的BeanDefinition。BeanDefinitionHolder就是使用名称或者别名来保存BeanDefinition的。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (value <span class=\"keyword\">instanceof</span> BeanDefinitionHolder) &#123;</span><br><span class=\"line\">    <span class=\"type\">BeanDefinitionHolder</span> <span class=\"variable\">bdHolder</span> <span class=\"operator\">=</span> (BeanDefinitionHolder) value;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> resolveInnerBean(argName, bdHolder.getBeanName(), bdHolder.getBeanDefinition());</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>5、BeanDefinition</strong></p>\n<p>解析纯粹的BeanDefinition</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (value <span class=\"keyword\">instanceof</span> BeanDefinition) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// Resolve plain BeanDefinition, without contained name: use dummy name.</span></span><br><span class=\"line\">    <span class=\"type\">BeanDefinition</span> <span class=\"variable\">bd</span> <span class=\"operator\">=</span> (BeanDefinition) value;</span><br><span class=\"line\">    <span class=\"type\">String</span> <span class=\"variable\">innerBeanName</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;(inner bean)&quot;</span> + BeanFactoryUtils.GENERATED_BEAN_NAME_SEPARATOR +</span><br><span class=\"line\">    \t\tObjectUtils.getIdentityHexString(bd);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> resolveInnerBean(argName, innerBeanName, bd);</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>6、ManagedArray</strong></p>\n<p>包含运行时期的bean引用(将被解析为bean对象)</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (value <span class=\"keyword\">instanceof</span> ManagedArray) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// May need to resolve contained runtime references.</span></span><br><span class=\"line\">    <span class=\"type\">ManagedArray</span> <span class=\"variable\">array</span> <span class=\"operator\">=</span> (ManagedArray) value;</span><br><span class=\"line\">    Class&lt;?&gt; elementType = array.resolvedElementType;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (elementType == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">    \t<span class=\"type\">String</span> <span class=\"variable\">elementTypeName</span> <span class=\"operator\">=</span> array.getElementTypeName();</span><br><span class=\"line\">    \t<span class=\"keyword\">if</span> (StringUtils.hasText(elementTypeName)) &#123;</span><br><span class=\"line\">        \t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        \t\telementType = ClassUtils.forName(elementTypeName,</span><br><span class=\"line\">        \t\t<span class=\"built_in\">this</span>.beanFactory.getBeanClassLoader());</span><br><span class=\"line\">        \t\tarray.resolvedElementType = elementType;</span><br><span class=\"line\">        \t&#125;</span><br><span class=\"line\">        \t<span class=\"keyword\">catch</span> (Throwable ex) &#123;</span><br><span class=\"line\">        \t\t<span class=\"comment\">// Improve the message by showing the context.</span></span><br><span class=\"line\">        \t\t<span class=\"comment\">//异常：Error resolving array type for &quot; + argName</span></span><br><span class=\"line\">        \t&#125;</span><br><span class=\"line\">    \t&#125;</span><br><span class=\"line\">    \t<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    \t\telementType = Object.class;</span><br><span class=\"line\">    \t&#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> resolveManagedArray(argName, (List&lt;?&gt;) value, elementType);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>7、ManagedList，ManagedSet，ManagedMap</strong></p>\n<p>包含运行时期的bean引用(将被解析为bean对象)</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//对ManagedList进行解析</span></span><br><span class=\"line\"><span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (value <span class=\"keyword\">instanceof</span> ManagedList) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> resolveManagedList(argName, (List&lt;?&gt;) value);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//对ManagedSet进行解析</span></span><br><span class=\"line\"><span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (value <span class=\"keyword\">instanceof</span> ManagedSet) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> resolveManagedSet(argName, (Set&lt;?&gt;) value);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//对ManagedMap进行解析</span></span><br><span class=\"line\"><span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (value <span class=\"keyword\">instanceof</span> ManagedMap) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> resolveManagedMap(argName, (Map&lt;?, ?&gt;) value);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>8、ManagedProperties</strong></p>\n<p>ManagedProperties表示的是一个spring管理的属性实例，它支持父&#x2F;子 definition的合并。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//对ManagedProperties进行解析</span></span><br><span class=\"line\"><span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (value <span class=\"keyword\">instanceof</span> ManagedProperties) &#123;</span><br><span class=\"line\">    <span class=\"type\">Properties</span> <span class=\"variable\">original</span> <span class=\"operator\">=</span> (Properties) value;</span><br><span class=\"line\">    <span class=\"type\">Properties</span> <span class=\"variable\">copy</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Properties</span>();</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (Map.Entry&lt;Object, Object&gt; propEntry : original.entrySet()) &#123;</span><br><span class=\"line\">    \t<span class=\"type\">Object</span> <span class=\"variable\">propKey</span> <span class=\"operator\">=</span> propEntry.getKey();</span><br><span class=\"line\">    \t<span class=\"type\">Object</span> <span class=\"variable\">propValue</span> <span class=\"operator\">=</span> propEntry.getValue();</span><br><span class=\"line\">    \t<span class=\"keyword\">if</span> (propKey <span class=\"keyword\">instanceof</span> TypedStringValue) &#123;</span><br><span class=\"line\">    \t\tpropKey = evaluate((TypedStringValue) propKey);</span><br><span class=\"line\">    \t&#125;</span><br><span class=\"line\">    \t<span class=\"keyword\">if</span> (propValue <span class=\"keyword\">instanceof</span> TypedStringValue) &#123;</span><br><span class=\"line\">    \t\tpropValue = evaluate((TypedStringValue) propValue);</span><br><span class=\"line\">    \t&#125;</span><br><span class=\"line\">    \tcopy.put(propKey, propValue);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> copy;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>9、TypedStringValue</strong></p>\n<p>TypedStringValue保存的是一个类型的属性值。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//对TypedStringValue进行解析</span></span><br><span class=\"line\"><span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (value <span class=\"keyword\">instanceof</span> TypedStringValue) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// Convert value to target type here.</span></span><br><span class=\"line\">    <span class=\"type\">TypedStringValue</span> <span class=\"variable\">typedStringValue</span> <span class=\"operator\">=</span> (TypedStringValue) value;</span><br><span class=\"line\">    <span class=\"type\">Object</span> <span class=\"variable\">valueObject</span> <span class=\"operator\">=</span> evaluate(typedStringValue);</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">    \tClass&lt;?&gt; resolvedTargetType = resolveTargetType(typedStringValue);</span><br><span class=\"line\">    \t<span class=\"keyword\">if</span> (resolvedTargetType != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">    \t\t<span class=\"keyword\">return</span> <span class=\"built_in\">this</span>.typeConverter.convertIfNecessary(valueObject, resolvedTargetType);</span><br><span class=\"line\">    \t&#125;</span><br><span class=\"line\">    \t<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    \t\t<span class=\"keyword\">return</span> valueObject;</span><br><span class=\"line\">    \t&#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">catch</span> (Throwable ex) &#123;</span><br><span class=\"line\">    \t<span class=\"comment\">// Improve the message by showing the context.</span></span><br><span class=\"line\">    \t<span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">BeanCreationException</span>(</span><br><span class=\"line\">    \t<span class=\"comment\">//异常：Error converting typed String value for &quot; + argName</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>10、作为表达式进行评估</strong></p>\n<p>将给定的值作为表达式进行评估。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">else &#123;</span><br><span class=\"line\">    return evaluate(value);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在完成上述解析之后，已经为我们的依赖注入做好了准备。这是真正把Bean对象设置到它所依赖的另一个Bean的属性中去的地方，可以看到，处理的属性也是各式各样的。具体属性的注入是在之前提到的BeanWrapper接口的实现类BeanWrapperImpl的setPropertyValue方法来完成。</p>\n<h3 id=\"setPropertyValue方法\"><a href=\"#setPropertyValue方法\" class=\"headerlink\" title=\"setPropertyValue方法\"></a>setPropertyValue方法</h3><h4 id=\"a、方法声明\"><a href=\"#a、方法声明\" class=\"headerlink\" title=\"a、方法声明\"></a>a、方法声明</h4><p>这个方法是私有的，是BeanWrapperImpl实际处理的方法，其对外也提供了setPropertyValue的其它重载方法来提供服务。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setPropertyValue</span><span class=\"params\">(PropertyTokenHolder tokens, PropertyValue pv)</span></span><br><span class=\"line\">    <span class=\"keyword\">throws</span> BeansException</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"b、PropertyTokenHolder是BeanWrapperImpl的内部类\"><a href=\"#b、PropertyTokenHolder是BeanWrapperImpl的内部类\" class=\"headerlink\" title=\"b、PropertyTokenHolder是BeanWrapperImpl的内部类\"></a>b、PropertyTokenHolder是BeanWrapperImpl的内部类</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">private static class PropertyTokenHolder &#123;</span><br><span class=\"line\">    public String canonicalName;</span><br><span class=\"line\">    public String actualName;</span><br><span class=\"line\">    public String[] keys;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在setPropertyValue方法中会根据tokens变量是否为null,有两个不同的分支。其中当tokens为null时，则会对属性名进行递归调用分析处理，返回分析处理后的BeanWrapImpl对象nestedBw。如果nestedBw&#x3D;&#x3D;this,则会设置pv的resolvedTokens属性值，最后将调用nestedBw对象的设置属性值方法设置属性。来具体看看：</p>\n<h4 id=\"c、其中当tokens为null时，即对集合类的域进行注入\"><a href=\"#c、其中当tokens为null时，即对集合类的域进行注入\" class=\"headerlink\" title=\"c、其中当tokens为null时，即对集合类的域进行注入\"></a>c、其中当tokens为null时，即对集合类的域进行注入</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 设置tokens的索引和keys</span></span><br><span class=\"line\"><span class=\"type\">PropertyTokenHolder</span> <span class=\"variable\">getterTokens</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">PropertyTokenHolder</span>();</span><br><span class=\"line\">getterTokens.canonicalName = tokens.canonicalName;</span><br><span class=\"line\">getterTokens.actualName = tokens.actualName;</span><br><span class=\"line\">getterTokens.keys = <span class=\"keyword\">new</span> <span class=\"title class_\">String</span>[tokens.keys.length - <span class=\"number\">1</span>];</span><br><span class=\"line\">System.arraycopy(tokens.keys, <span class=\"number\">0</span>, getterTokens.keys, <span class=\"number\">0</span>, tokens.keys.length - <span class=\"number\">1</span>);</span><br><span class=\"line\">Object propValue;</span><br><span class=\"line\"><span class=\"comment\">//getPropertyValue用来获取Bean中对对象注入的引用；</span></span><br><span class=\"line\"><span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\tpropValue = getPropertyValue(getterTokens);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">catch</span> (NotReadablePropertyException ex) &#123;</span><br><span class=\"line\"><span class=\"comment\">//异常：Cannot access indexed value in property referenced </span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>1、propValue为null</strong></p>\n<p>propValue为null</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (propValue == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 空值映射的情况</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"built_in\">this</span>.autoGrowNestedPaths) &#123;</span><br><span class=\"line\">    \t<span class=\"comment\">// <span class=\"doctag\">TODO:</span> cleanup, this is pretty hacky</span></span><br><span class=\"line\">    \t<span class=\"type\">int</span> <span class=\"variable\">lastKeyIndex</span> <span class=\"operator\">=</span> tokens.canonicalName.lastIndexOf(<span class=\"string\">&#x27;[&#x27;</span>);</span><br><span class=\"line\">    \tgetterTokens.canonicalName = tokens.canonicalName.substring(<span class=\"number\">0</span>, lastKeyIndex);</span><br><span class=\"line\">    \tpropValue = setDefaultValue(getterTokens);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">//异常：Cannot access indexed value in property referenced &quot; +</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;in indexed property path &#x27;&quot;</span> + propertyName + <span class=\"string\">&quot;&#x27;: returned null&quot;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>2、对array进行注入</strong></p>\n<p>对array进行注入</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (propValue.getClass().isArray()) &#123;</span><br><span class=\"line\">    <span class=\"type\">PropertyDescriptor</span> <span class=\"variable\">pd</span> <span class=\"operator\">=</span> getCachedIntrospectionResults().getPropertyDescriptor(actualName);</span><br><span class=\"line\">    <span class=\"type\">Class</span> <span class=\"variable\">requiredType</span> <span class=\"operator\">=</span> propValue.getClass().getComponentType();</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">arrayIndex</span> <span class=\"operator\">=</span> Integer.parseInt(key);</span><br><span class=\"line\">    <span class=\"type\">Object</span> <span class=\"variable\">oldValue</span> <span class=\"operator\">=</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">    \t<span class=\"keyword\">if</span> (isExtractOldValueForEditor() &amp;&amp; arrayIndex &lt; Array.getLength(propValue)) &#123;</span><br><span class=\"line\">    \t\toldValue = Array.get(propValue, arrayIndex);</span><br><span class=\"line\">    \t&#125;</span><br><span class=\"line\">    \t<span class=\"type\">Object</span> <span class=\"variable\">convertedValue</span> <span class=\"operator\">=</span> convertIfNecessary(propertyName, oldValue, pv.getValue(),</span><br><span class=\"line\">    \t\t\trequiredType, TypeDescriptor.nested(property(pd), tokens.keys.length));</span><br><span class=\"line\">    \tArray.set(propValue, arrayIndex, convertedValue);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">catch</span> (IndexOutOfBoundsException ex) &#123;</span><br><span class=\"line\">    <span class=\"comment\">//异常：Invalid array index in property path &#x27;&quot; + propertyName</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>2、对list进行注入</strong></p>\n<p>对list进行注入</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (propValue <span class=\"keyword\">instanceof</span> List) &#123;</span><br><span class=\"line\">    <span class=\"type\">PropertyDescriptor</span> <span class=\"variable\">pd</span> <span class=\"operator\">=</span> getCachedIntrospectionResults().getPropertyDescriptor(actualName);</span><br><span class=\"line\">    <span class=\"type\">Class</span> <span class=\"variable\">requiredType</span> <span class=\"operator\">=</span> GenericCollectionTypeResolver.getCollectionReturnType(</span><br><span class=\"line\">    \t\tpd.getReadMethod(), tokens.keys.length);</span><br><span class=\"line\">    <span class=\"type\">List</span> <span class=\"variable\">list</span> <span class=\"operator\">=</span> (List) propValue;</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">index</span> <span class=\"operator\">=</span> Integer.parseInt(key);</span><br><span class=\"line\">    <span class=\"type\">Object</span> <span class=\"variable\">oldValue</span> <span class=\"operator\">=</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (isExtractOldValueForEditor() &amp;&amp; index &lt; list.size()) &#123;</span><br><span class=\"line\">    \toldValue = list.get(index);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"type\">Object</span> <span class=\"variable\">convertedValue</span> <span class=\"operator\">=</span> convertIfNecessary(propertyName, oldValue, pv.getValue(),</span><br><span class=\"line\">    \t\trequiredType, TypeDescriptor.nested(property(pd), tokens.keys.length));</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">size</span> <span class=\"operator\">=</span> list.size();</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (index &gt;= size &amp;&amp; index &lt; <span class=\"built_in\">this</span>.autoGrowCollectionLimit) &#123;</span><br><span class=\"line\">    \t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> size; i &lt; index; i++) &#123;</span><br><span class=\"line\">    \t\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">    \t\t\tlist.add(<span class=\"literal\">null</span>);</span><br><span class=\"line\">    \t\t&#125;</span><br><span class=\"line\">    \t\t<span class=\"keyword\">catch</span> (NullPointerException ex) &#123;</span><br><span class=\"line\">    \t\t    <span class=\"comment\">//异常：InvalidPropertyException</span></span><br><span class=\"line\">    \t\t&#125;</span><br><span class=\"line\">    \t&#125;</span><br><span class=\"line\">    \tlist.add(convertedValue);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    \t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">    \t\tlist.set(index, convertedValue);</span><br><span class=\"line\">    \t&#125;</span><br><span class=\"line\">    \t<span class=\"keyword\">catch</span> (IndexOutOfBoundsException ex) &#123;</span><br><span class=\"line\">    \t\t<span class=\"comment\">//异常：Invalid list index in property path &#x27;&quot; + propertyName + &quot;&#x27;&quot;</span></span><br><span class=\"line\">    \t&#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>2、对map进行注入</strong></p>\n<p>对map进行注入</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (propValue <span class=\"keyword\">instanceof</span> Map) &#123;</span><br><span class=\"line\">    <span class=\"type\">PropertyDescriptor</span> <span class=\"variable\">pd</span> <span class=\"operator\">=</span> getCachedIntrospectionResults().getPropertyDescriptor(actualName);</span><br><span class=\"line\">    <span class=\"type\">Class</span> <span class=\"variable\">mapKeyType</span> <span class=\"operator\">=</span> GenericCollectionTypeResolver.getMapKeyReturnType(</span><br><span class=\"line\">    \t\tpd.getReadMethod(), tokens.keys.length);</span><br><span class=\"line\">    <span class=\"type\">Class</span> <span class=\"variable\">mapValueType</span> <span class=\"operator\">=</span> GenericCollectionTypeResolver.getMapValueReturnType(</span><br><span class=\"line\">    \t\tpd.getReadMethod(), tokens.keys.length);</span><br><span class=\"line\">    <span class=\"type\">Map</span> <span class=\"variable\">map</span> <span class=\"operator\">=</span> (Map) propValue;</span><br><span class=\"line\">    <span class=\"comment\">//重要提示：不要在这里传递完整的属性名称</span></span><br><span class=\"line\">    <span class=\"type\">TypeDescriptor</span> <span class=\"variable\">typeDescriptor</span> <span class=\"operator\">=</span> (mapKeyType != <span class=\"literal\">null</span> ?</span><br><span class=\"line\">    \t\tTypeDescriptor.valueOf(mapKeyType) : TypeDescriptor.valueOf(Object.class));</span><br><span class=\"line\">    <span class=\"type\">Object</span> <span class=\"variable\">convertedMapKey</span> <span class=\"operator\">=</span> convertIfNecessary(<span class=\"literal\">null</span>, <span class=\"literal\">null</span>, key, mapKeyType, typeDescriptor);</span><br><span class=\"line\">    <span class=\"type\">Object</span> <span class=\"variable\">oldValue</span> <span class=\"operator\">=</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (isExtractOldValueForEditor()) &#123;</span><br><span class=\"line\">    \toldValue = map.get(convertedMapKey);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 在这里传递完整的属性名称和旧值，因为希望对map值有完整的转换能力。</span></span><br><span class=\"line\">    <span class=\"type\">Object</span> <span class=\"variable\">convertedMapValue</span> <span class=\"operator\">=</span> convertIfNecessary(propertyName, oldValue, pv.getValue(),</span><br><span class=\"line\">    \t\tmapValueType, TypeDescriptor.nested(property(pd), tokens.keys.length));</span><br><span class=\"line\">    map.put(convertedMapKey, convertedMapValue);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"其中当tokens不为null时，即对非集合类的域进行注入\"><a href=\"#其中当tokens不为null时，即对非集合类的域进行注入\" class=\"headerlink\" title=\"其中当tokens不为null时，即对非集合类的域进行注入\"></a>其中当tokens不为null时，即对非集合类的域进行注入</h4><p>这里是核心的地方，取得注入属性的set方法，通过反射机制，把对象注入进去。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">final</span> <span class=\"type\">Method</span> <span class=\"variable\">writeMethod</span> <span class=\"operator\">=</span> (pd <span class=\"keyword\">instanceof</span> GenericTypeAwarePropertyDescriptor ?</span><br><span class=\"line\">    ((GenericTypeAwarePropertyDescriptor) pd).getWriteMethodForActualAccess() :</span><br><span class=\"line\">    pd.getWriteMethod());</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>通过上面的几篇分析我们大概的熟悉了Bean创建和对象依赖注入的一个过程，在这个过程中，spring需要根据Beandefinition中的信息来递归完成依赖注入。并且这些递归的入口都是getBean这个方法。</p>\n<p>一个递归是在上下文体系中查找需要的Bean和创建Bean的递归调用；</p>\n<p>另一个递归是在依赖注入时通过递归调用容器的getBean方法，得到当前Bean的依赖Bean，同时也触发对依赖Bean的创建和注入。</p>\n<p>在对Bean的属性进行依赖注入时解析的过程也是一个递归的过程。这样就可以根据依赖关系，一层一层的完成Bean的创建和注入，直到最后完成当前Bean的创建。</p>\n<h2 id=\"总结-1\"><a href=\"#总结-1\" class=\"headerlink\" title=\"总结\"></a>总结</h2><h3 id=\"依赖注入调用过程\"><a href=\"#依赖注入调用过程\" class=\"headerlink\" title=\"依赖注入调用过程\"></a>依赖注入调用过程</h3><p><img src=\"https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2018/2/7/1616f3c6ef426da7~tplv-t2oaga2asx-image.image\"></p>\n<p>如前几篇文章所述，依赖注入是由 getBean 来触发的；然后涉及到 bean 实例的创建、依赖关系的建立、属性注入等子过程。</p>\n<ul>\n<li>getBean 方法触发依赖注入</li>\n<li>doGetBean 从容器中查找Bean（BeanFactory链，当前容器-&gt;双亲容器-双亲容器…）</li>\n</ul>\n<p>当然，在获取到某个Bean的时候也会通过递归的方式来依赖注入依赖的bean</p>\n<ul>\n<li><p>createBeanInstance 生成了Bean所包含的Java对象，Spring中用SimpleInstantiationStrategy类来生成Bean对象的实例，实例化Java对象的方法有两种（CGlib是默认方式）：</p>\n<ul>\n<li>通过BeanUtils，它使用了JVM的反射功能来生成Java对象实例</li>\n<li>用CGLIB来生成，CGLIB是一种常用的字节码生成器的类库</li>\n</ul>\n</li>\n<li><p>populateBean 设置Bean对象的依赖关系</p>\n</li>\n<li><p>resolveValueIfNecessary 注入类型的处理；解析不同类型的属性</p>\n</li>\n<li><p>setPropertyValues 属性注入</p>\n</li>\n</ul>\n<h3 id=\"关于lazy-init\"><a href=\"#关于lazy-init\" class=\"headerlink\" title=\"关于lazy-init\"></a>关于lazy-init</h3><p>Ioc 容器的初始化过程中，主要的工作就是对BeanDefinition的定位、载入、解析和注册；但是就像之前说过的，此时依赖注入还没有发生。在getBean 方法提到，依赖注入发生在应用第一次向容器获取 Bean 的时候；也就是上面说到的通过 getBean 来触发。</p>\n<p>当然，依赖注入也可以在容器初始化的过程中就完成。这个就是lazy-init属性的存在意义了。就是说我们可以通过设置Bean的lazy-init属性来控制预实例化的过程。</p>\n<p><code>预实例化：在初始化容器时完成Bean的依赖注入</code></p>\n<p>这种做法的好处在于提高了我们第一次获取Bean的的效率，但是它也降低了容器初始化的速度。（这个其实很好理解的，因为第一次获取Bean的时候，依赖注入已经完成了，直接拿过来用就行）</p>\n<p>关于lazy-init属性的处理也是在wac.refresh这个方法中完成的，具体是在finishBeanFactoryInitialization方法中。如果继续追溯的话，最终是交给DefaultListableBeanFactory容器中的preInstantiateSingletons方法中完成。</p>\n<p>lazy-init这种实例化方式就是通过将依赖注入委托给容器来处理，而不是在用户第一向容器申请的Bean的时候完成依赖注入，不同的阶段，也有不同的优劣。</p>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><ul>\n<li><p>《Spring技术内幕》</p>\n</li>\n<li><p><a href=\"https://www.cnblogs.com/davidwang456/p/4213652.html\">https://www.cnblogs.com/davidwang456/p/4213652.html</a></p>\n</li>\n</ul>\n","text":"在Spring源码系列-BeanDefinition文章中大概分析了一下 Bean 的载入，其实这个过程就是在Ioc容器中建立BeanDefinition的数据...","permalink":"/post/spring/spring-ioc-dependency-inject","photos":[],"count_time":{"symbolsCount":"36k","symbolsTime":"33 mins."},"categories":[{"name":"spring","slug":"spring","count":15,"path":"api/categories/spring.json"}],"tags":[{"name":"spring","slug":"spring","count":11,"path":"api/tags/spring.json"},{"name":"依赖注入","slug":"依赖注入","count":3,"path":"api/tags/依赖注入.json"},{"name":"Ioc","slug":"Ioc","count":3,"path":"api/tags/Ioc.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%85%B3%E4%BA%8E%E4%BE%9D%E8%B5%96%E6%B3%A8%E5%85%A5\"><span class=\"toc-text\">关于依赖注入</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%B8%89%E4%B8%AA%E9%97%AE%E9%A2%98\"><span class=\"toc-text\">三个问题</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#getBean\"><span class=\"toc-text\">getBean</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#getBean-1\"><span class=\"toc-text\">getBean</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#doGetBean\"><span class=\"toc-text\">doGetBean</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#createBean\"><span class=\"toc-text\">createBean</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%B1%9E%E6%80%A7%E6%B3%A8%E5%85%A5\"><span class=\"toc-text\">属性注入</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#resolveValueIfNecessary%E6%96%B9%E6%B3%95\"><span class=\"toc-text\">resolveValueIfNecessary方法</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#setPropertyValue%E6%96%B9%E6%B3%95\"><span class=\"toc-text\">setPropertyValue方法</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#a%E3%80%81%E6%96%B9%E6%B3%95%E5%A3%B0%E6%98%8E\"><span class=\"toc-text\">a、方法声明</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#b%E3%80%81PropertyTokenHolder%E6%98%AFBeanWrapperImpl%E7%9A%84%E5%86%85%E9%83%A8%E7%B1%BB\"><span class=\"toc-text\">b、PropertyTokenHolder是BeanWrapperImpl的内部类</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#c%E3%80%81%E5%85%B6%E4%B8%AD%E5%BD%93tokens%E4%B8%BAnull%E6%97%B6%EF%BC%8C%E5%8D%B3%E5%AF%B9%E9%9B%86%E5%90%88%E7%B1%BB%E7%9A%84%E5%9F%9F%E8%BF%9B%E8%A1%8C%E6%B3%A8%E5%85%A5\"><span class=\"toc-text\">c、其中当tokens为null时，即对集合类的域进行注入</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%85%B6%E4%B8%AD%E5%BD%93tokens%E4%B8%8D%E4%B8%BAnull%E6%97%B6%EF%BC%8C%E5%8D%B3%E5%AF%B9%E9%9D%9E%E9%9B%86%E5%90%88%E7%B1%BB%E7%9A%84%E5%9F%9F%E8%BF%9B%E8%A1%8C%E6%B3%A8%E5%85%A5\"><span class=\"toc-text\">其中当tokens不为null时，即对非集合类的域进行注入</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%80%BB%E7%BB%93\"><span class=\"toc-text\">总结</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%80%BB%E7%BB%93-1\"><span class=\"toc-text\">总结</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%BE%9D%E8%B5%96%E6%B3%A8%E5%85%A5%E8%B0%83%E7%94%A8%E8%BF%87%E7%A8%8B\"><span class=\"toc-text\">依赖注入调用过程</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%85%B3%E4%BA%8Elazy-init\"><span class=\"toc-text\">关于lazy-init</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%8F%82%E8%80%83\"><span class=\"toc-text\">参考</span></a></li></ol>","author":{"name":"glmapper","slug":"blog-author","avatar":"https://glmapper-blog.oss-cn-hangzhou.aliyuncs.com/common/favicon.ico","link":"/","description":"开放，开源，分享，共享","socials":{"github":"https://github.com/glmapper","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/2412872703","zhihu":"","csdn":"","juejin":"https://juejin.cn/user/3227821827961806","customs":{"sofastack":{"icon":"https://glmapper-blog.oss-cn-hangzhou.aliyuncs.com/common/sofastack.svg","link":"https://www.sofastack.tech/"}}}},"mapped":true,"hidden":false,"prev_post":{"title":"日志？聊一聊 slf4j","uid":"08a5071a80b0f5201a84d06e57924a87","slug":"middleware/middleware-log-slf4j","date":"2018-04-15T13:24:52.000Z","updated":"2024-07-05T04:09:05.789Z","comments":true,"path":"api/articles/middleware/middleware-log-slf4j.json","keywords":null,"cover":null,"text":"作为一个 Java 程序员，肯定对于日志记录不会陌生，无论项目大小，日志记录都是必须的；因为好的日志可以很容易的帮助我们定位一些生产问题。 我怀念的是 无话不说...","permalink":"/post/middleware/middleware-log-slf4j","photos":[],"count_time":{"symbolsCount":"13k","symbolsTime":"12 mins."},"categories":[{"name":"Middleware","slug":"Middleware","count":11,"path":"api/categories/Middleware.json"}],"tags":[{"name":"log","slug":"log","count":5,"path":"api/tags/log.json"},{"name":"slf4j","slug":"slf4j","count":1,"path":"api/tags/slf4j.json"}],"author":{"name":"glmapper","slug":"blog-author","avatar":"https://glmapper-blog.oss-cn-hangzhou.aliyuncs.com/common/favicon.ico","link":"/","description":"开放，开源，分享，共享","socials":{"github":"https://github.com/glmapper","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/2412872703","zhihu":"","csdn":"","juejin":"https://juejin.cn/user/3227821827961806","customs":{"sofastack":{"icon":"https://glmapper-blog.oss-cn-hangzhou.aliyuncs.com/common/sofastack.svg","link":"https://www.sofastack.tech/"}}}}},"next_post":{"title":"Spring 源码系列-BeanDefinition","uid":"8260d6d08a83b75824bdeb2a713c7b70","slug":"spring/spring-ioc-bean-definition","date":"2018-02-07T02:24:11.000Z","updated":"2024-07-05T04:09:05.816Z","comments":true,"path":"api/articles/spring/spring-ioc-bean-definition.json","keywords":null,"cover":[],"text":"Bean的定义主要由 BeanDefinition 来描述的。作为Spring中用于包装Bean的数据结构，今天就来看看它的面纱下的真容吧 BeanDefini...","permalink":"/post/spring/spring-ioc-bean-definition","photos":[],"count_time":{"symbolsCount":"29k","symbolsTime":"27 mins."},"categories":[{"name":"spring","slug":"spring","count":15,"path":"api/categories/spring.json"}],"tags":[{"name":"spring","slug":"spring","count":11,"path":"api/tags/spring.json"},{"name":"依赖注入","slug":"依赖注入","count":3,"path":"api/tags/依赖注入.json"},{"name":"Ioc","slug":"Ioc","count":3,"path":"api/tags/Ioc.json"},{"name":"BeanDefinition","slug":"BeanDefinition","count":1,"path":"api/tags/BeanDefinition.json"}],"author":{"name":"glmapper","slug":"blog-author","avatar":"https://glmapper-blog.oss-cn-hangzhou.aliyuncs.com/common/favicon.ico","link":"/","description":"开放，开源，分享，共享","socials":{"github":"https://github.com/glmapper","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/2412872703","zhihu":"","csdn":"","juejin":"https://juejin.cn/user/3227821827961806","customs":{"sofastack":{"icon":"https://glmapper-blog.oss-cn-hangzhou.aliyuncs.com/common/sofastack.svg","link":"https://www.sofastack.tech/"}}}}}}