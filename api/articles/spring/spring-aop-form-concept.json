{"title":"聊一聊 AOP ：表现形式与基础概念","uid":"740732400e76d891c8b7f2d184b75bcc","slug":"spring/spring-aop-form-concept","date":"2018-06-20T16:43:21.000Z","updated":"2024-07-05T04:09:05.815Z","comments":true,"path":"api/articles/spring/spring-aop-form-concept.json","keywords":null,"cover":[],"content":"<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>原文：<a href=\"https://juejin.cn/post/6844903623101513735\">https://juejin.cn/post/6844903623101513735</a></p></blockquote>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>aop 终于提上日程来写一写了。</p></blockquote>\n<p>本系列分为 上、中、下三篇。上篇主要是介绍如果使用 AOP ，提供了demo和配置方式说明；中篇来对实现 AOP 的技术原理进行分析；下篇主要针对Spring中对于AOP的实现进行源码分析。</p>\n<span id=\"more\"></span>\n\n<h2 id=\"目录\"><a href=\"#目录\" class=\"headerlink\" title=\"目录\"></a>目录</h2><ul>\n<li><a href=\"\">从一个例子说起</a><ul>\n<li><a href=\"\">基于代理的方式</a> </li>\n<li><a href=\"\">纯POJO切面 配置方式</a></li>\n<li><a href=\"\">AspectJ 注解方式</a></li>\n<li><a href=\"\">AspectJ XML 配置方式</a></li>\n<li><a href=\"\">表达式说明</a></li>\n</ul>\n</li>\n<li><a href=\"\">基础概念</a><ul>\n<li><a href=\"\">AOP概念</a></li>\n<li><a href=\"\">Target Object</a></li>\n<li><a href=\"\">织入（Weave</a></li>\n<li><a href=\"\">Proxy</a></li>\n<li><a href=\"\">Introduction</a></li>\n<li><a href=\"\">Aspect</a></li>\n<li><a href=\"\">Joinpoint</a></li>\n<li><a href=\"\">Pointcut</a></li>\n<li><a href=\"\">Advice</a><ul>\n<li><a href=\"\">概念</a></li>\n<li><a href=\"\">分类</a></li>\n</ul>\n</li>\n<li><a href=\"\">关系</a></li>\n</ul>\n</li>\n<li><a href=\"\">一些坑</a></li>\n</ul>\n<h2 id=\"项目地址\"><a href=\"#项目地址\" class=\"headerlink\" title=\"项目地址\"></a>项目地址</h2><p>项目地址：<a href=\"https://github.com/glmapper/glmapper-ssm-parent\">glmapper-ssm-parent</a></p>\n<p>这个项目里面包含了下面几种 AOP 实现方式的所有代码，有兴趣的同学可以fork跑一下。这个demo中列举了4中方式的实现：</p>\n<ul>\n<li>基于代码的方式</li>\n<li>基于纯POJO类的方式</li>\n<li>基于Aspect注解的方式</li>\n<li>基于注入式Aspect的方式</li>\n</ul>\n<p>目前我们经常用到的是<strong>基于Aspect注解的方式</strong>的方式。下面来一个个了解下不同方式的表现形式。</p>\n<h2 id=\"基于代理的方式\"><a href=\"#基于代理的方式\" class=\"headerlink\" title=\"基于代理的方式\"></a>基于代理的方式</h2><p>这种方式看起来很好理解，但是配置起来相当麻烦；小伙伴们可以参考项目来看，这里只贴出比较关键的流程代码。</p>\n<h3 id=\"1、首先定义一个接口：GoodsService\"><a href=\"#1、首先定义一个接口：GoodsService\" class=\"headerlink\" title=\"1、首先定义一个接口：GoodsService\"></a>1、首先定义一个接口：GoodsService</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">GoodsService</span> &#123;</span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * 查询所有商品信息</span></span><br><span class=\"line\"><span class=\"comment\">\t * </span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@param</span> offset 查询起始位置</span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@param</span> limit 查询条数</span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\tList&lt;Goods&gt; <span class=\"title function_\">queryAll</span><span class=\"params\">(<span class=\"type\">int</span> offset,<span class=\"type\">int</span> limit)</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2、GoodsService-实现类\"><a href=\"#2、GoodsService-实现类\" class=\"headerlink\" title=\"2、GoodsService 实现类\"></a>2、GoodsService 实现类</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Service</span></span><br><span class=\"line\"><span class=\"meta\">@Qualifier(&quot;goodsService&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">GoodsServiceImpl</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">GoodsService</span> &#123;</span><br><span class=\"line\">\t<span class=\"meta\">@Autowired</span> </span><br><span class=\"line\">\t<span class=\"keyword\">private</span> GoodsDao goodsDao;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"keyword\">public</span> List&lt;Goods&gt; <span class=\"title function_\">queryAll</span><span class=\"params\">(<span class=\"type\">int</span> offset, <span class=\"type\">int</span> limit)</span> &#123;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">&quot;执行了queryAll方法&quot;</span>);</span><br><span class=\"line\">\t\tList&lt;Goods&gt; list = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;Goods&gt;();</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> list;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3、定义一个通知类-LoggerHelper，该类继承-MethodBeforeAdvice和-AfterReturningAdvice。\"><a href=\"#3、定义一个通知类-LoggerHelper，该类继承-MethodBeforeAdvice和-AfterReturningAdvice。\" class=\"headerlink\" title=\"3、定义一个通知类 LoggerHelper，该类继承 MethodBeforeAdvice和 AfterReturningAdvice。\"></a>3、定义一个通知类 LoggerHelper，该类继承 MethodBeforeAdvice和 AfterReturningAdvice。</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//通知类 LoggerHelper</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">LoggerHelper</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">MethodBeforeAdvice</span>,</span><br><span class=\"line\">AfterReturningAdvice &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">Logger</span> <span class=\"variable\">LOGGER</span> <span class=\"operator\">=</span> LoggerFactory.getLogger(LoggerHelper.class);</span><br><span class=\"line\">    <span class=\"comment\">//MethodBeforeAdvice的before方法实现</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">before</span><span class=\"params\">(Method method, Object[] objects, Object o)</span> <span class=\"keyword\">throws</span> Throwable &#123;</span><br><span class=\"line\">        LOGGER.info(<span class=\"string\">&quot;before current time:&quot;</span>+System.currentTimeMillis());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//AfterReturningAdvice的afterReturning方法实现</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">afterReturning</span><span class=\"params\">(Object o, Method method,</span></span><br><span class=\"line\"><span class=\"params\">    Object[] objects, Object o1)</span> <span class=\"keyword\">throws</span> Throwable &#123;</span><br><span class=\"line\">        LOGGER.info(<span class=\"string\">&quot;afterReturning current time:&quot;</span>+System.currentTimeMillis());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"4、重点，这个配置需要关注下。这个项目里面我是配置在applicationContext-xml文件中的。\"><a href=\"#4、重点，这个配置需要关注下。这个项目里面我是配置在applicationContext-xml文件中的。\" class=\"headerlink\" title=\"4、重点，这个配置需要关注下。这个项目里面我是配置在applicationContext.xml文件中的。\"></a>4、重点，这个配置需要关注下。这个项目里面我是配置在applicationContext.xml文件中的。</h3><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 定义被代理者 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;goodsServiceImpl&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;com.glmapper.framerwork.service.impl.GoodsServiceImpl&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 定义通知内容，也就是切入点执行前后需要做的事情 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;loggerHelper&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;com.glmapper.framerwork.aspect.LoggerHelper&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 定义切入点位置 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;loggerPointcut&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;org.springframework.aop.support.JdkRegexpMethodPointcut&quot;</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;pattern&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;.*query.*&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 使切入点与通知相关联，完成切面配置 --&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 从这里可以帮助我们理解Advisor，advice和pointcut之间的关系--&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!--adivce和pointcut是Advisor的两个属性--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;loggerHelperAdvisor&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;org.springframework.aop.support.DefaultPointcutAdvisor&quot;</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;advice&quot;</span> <span class=\"attr\">ref</span>=<span class=\"string\">&quot;loggerHelper&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;pointcut&quot;</span> <span class=\"attr\">ref</span>=<span class=\"string\">&quot;loggerPointcut&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 设置代理 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;proxy&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;org.springframework.aop.framework.ProxyFactoryBean&quot;</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"comment\">&lt;!-- 代理的对象 ，也就是目标类--&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;target&quot;</span> <span class=\"attr\">ref</span>=<span class=\"string\">&quot;goodsServiceImpl&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"comment\">&lt;!-- 使用切面 --&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;interceptorNames&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;loggerHelperAdvisor&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"comment\">&lt;!-- 代理接口，商品接口 --&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;proxyInterfaces&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;com.glmapper.framerwork.service.GoodsService&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"5、使用：注解注入方式\"><a href=\"#5、使用：注解注入方式\" class=\"headerlink\" title=\"5、使用：注解注入方式\"></a>5、使用：注解注入方式</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Controller</span></span><br><span class=\"line\"><span class=\"meta\">@RequestMapping(&quot;/buy&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">BuyController</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> OrderService orderService;</span><br><span class=\"line\">    <span class=\"comment\">//因为我们已经在配置文件中配置了proxy，</span></span><br><span class=\"line\">    <span class=\"comment\">//所以这里可以直接注入拿到我们的代理类</span></span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> GoodsService proxy;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"meta\">@RequestMapping(&quot;/initPage&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> ModelAndView <span class=\"title function_\">initPage</span><span class=\"params\">(HttpServletRequest request,</span></span><br><span class=\"line\"><span class=\"params\">    \tHttpServletResponse response, ModelAndView view)</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">//这里使用proxy执行了*query*,</span></span><br><span class=\"line\">    List&lt;Goods&gt; goods = proxy.queryAll(<span class=\"number\">10</span>,<span class=\"number\">10</span>);</span><br><span class=\"line\">    view.addObject(<span class=\"string\">&quot;goodsList&quot;</span>, goods);</span><br><span class=\"line\">    view.setViewName(<span class=\"string\">&quot;goodslist&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> view;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"6、使用：工具类方式手动获取bean\"><a href=\"#6、使用：工具类方式手动获取bean\" class=\"headerlink\" title=\"6、使用：工具类方式手动获取bean\"></a>6、使用：工具类方式手动获取bean</h3><p>这个方式是通过一个SpringContextUtil工具类来获取代理对象的。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@RequestMapping(&quot;/initPage&quot;)</span><br><span class=\"line\">public ModelAndView initPage(HttpServletRequest request,</span><br><span class=\"line\">\tHttpServletResponse response, ModelAndView view) &#123;</span><br><span class=\"line\">    //这里通过工具类来拿，效果一样的。</span><br><span class=\"line\">    GoodsService proxy= (GoodsService) SpringContextUtil.getBean(&quot;proxy&quot;);</span><br><span class=\"line\">    List&lt;Goods&gt; goods = proxy.queryAll(10,10);</span><br><span class=\"line\">    view.addObject(&quot;goodsList&quot;, goods);</span><br><span class=\"line\">    view.setViewName(&quot;goodslist&quot;);</span><br><span class=\"line\">    return view;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"7、SpringContextUtil-类的定义\"><a href=\"#7、SpringContextUtil-类的定义\" class=\"headerlink\" title=\"7、SpringContextUtil 类的定义\"></a>7、SpringContextUtil 类的定义</h3><p>这个还是有点坑的，首先SpringContextUtil是继承ApplicationContextAware这个接口，我们希望能够SpringContextUtil可以被Spring容器直接管理，所以，需要使用 @Component 标注。标注了之后最关键的是它得能够被我们配置的注入扫描扫到（亲自踩的坑，我把它放在一个扫不到的包下面，一直debug都是null；差点砸电脑…）</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">SpringContextUtil</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">ApplicationContextAware</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Spring应用上下文环境</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> ApplicationContext applicationContext;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 实现ApplicationContextAware接口的回调方法，设置上下文环境</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> applicationContext</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setApplicationContext</span><span class=\"params\">(ApplicationContext applicationContext)</span> &#123;</span><br><span class=\"line\">        SpringContextUtil.applicationContext = applicationContext;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> ApplicationContext</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> ApplicationContext <span class=\"title function_\">getApplicationContext</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> applicationContext;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 获取对象</span></span><br><span class=\"line\"><span class=\"comment\">     * 这里重写了bean方法，起主要作用</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> name</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> Object 一个以所给名字注册的bean的实例</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@throws</span> BeansException</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Object <span class=\"title function_\">getBean</span><span class=\"params\">(String name)</span> <span class=\"keyword\">throws</span> BeansException &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> applicationContext.getBean(name);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"8、运行结果\"><a href=\"#8、运行结果\" class=\"headerlink\" title=\"8、运行结果\"></a>8、运行结果</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">21:04:47.940 [http-nio-8080-exec-7] INFO </span><br><span class=\"line\">c.g.framerwork.aspect.LoggerHelper - before current</span><br><span class=\"line\">time:1529413487940</span><br><span class=\"line\"></span><br><span class=\"line\">执行了queryAll方法</span><br><span class=\"line\"></span><br><span class=\"line\">21:04:47.940 [http-nio-8080-exec-7] INFO </span><br><span class=\"line\">c.g.framerwork.aspect.LoggerHelper - afterReturning current</span><br><span class=\"line\">time:1529413487940</span><br></pre></td></tr></table></figure>\n\n<p>上面就是最最经典的方式，就是通过代理的方式来实现AOP的过程。</p>\n<h2 id=\"纯POJO切面-aop-config\"><a href=\"#纯POJO切面-aop-config\" class=\"headerlink\" title=\"纯POJO切面 aop:config\"></a>纯POJO切面 <a href=\"aop:config\">aop:config</a></h2><p>注意这里和LoggerHelper的区别，这里的LoggerAspect并没有继承任何接口或者抽象类。</p>\n<h3 id=\"1、POJO-类定义\"><a href=\"#1、POJO-类定义\" class=\"headerlink\" title=\"1、POJO 类定义\"></a>1、POJO 类定义</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@description</span>: [描述文本]</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@email</span>: &lt;a href=&quot;guolei.sgl@antfin.com&quot;&gt;&lt;/a&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span>: guolei.sgl</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@date</span>: 18/6/20</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">LoggerAspect</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">Logger</span> <span class=\"variable\">LOGGER</span> <span class=\"operator\">=</span></span><br><span class=\"line\">    LoggerFactory.getLogger(LoggerHelper.class);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">before</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        LOGGER.info(<span class=\"string\">&quot;before current time:&quot;</span>+System.currentTimeMillis());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">afterReturning</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        LOGGER.info(<span class=\"string\">&quot;afterReturning current time:&quot;</span>+System.currentTimeMillis());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125; </span><br></pre></td></tr></table></figure>\n<h3 id=\"2、配置文件\"><a href=\"#2、配置文件\" class=\"headerlink\" title=\"2、配置文件\"></a>2、配置文件</h3><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 定义通知内容，也就是切入点执行前后需要做的事情 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;loggerAspect&quot;</span>  </span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">class</span>=<span class=\"string\">&quot;com.glmapper.framerwork.aspect.LoggerAspect&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">aop:config</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!--定义切面--&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">aop:aspect</span> <span class=\"attr\">ref</span>=<span class=\"string\">&quot;loggerAspect&quot;</span>&gt;</span></span><br><span class=\"line\">    \t<span class=\"tag\">&lt;<span class=\"name\">aop:pointcut</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;loggerPointCut&quot;</span>  <span class=\"attr\">expression</span>=</span></span><br><span class=\"line\"><span class=\"tag\">    \t<span class=\"string\">&quot;execution(* com.glmapper.framerwork.service.impl.*.*(..)) &quot;</span> /&gt;</span></span><br><span class=\"line\">    \t<span class=\"comment\">&lt;!-- 定义 Advice --&gt;</span></span><br><span class=\"line\">    \t<span class=\"comment\">&lt;!-- 前置通知 --&gt;</span></span><br><span class=\"line\">    \t<span class=\"tag\">&lt;<span class=\"name\">aop:before</span> <span class=\"attr\">pointcut-ref</span>=<span class=\"string\">&quot;loggerPointCut&quot;</span> <span class=\"attr\">method</span>=<span class=\"string\">&quot;before&quot;</span> /&gt;</span></span><br><span class=\"line\">    \t<span class=\"comment\">&lt;!-- 后置通知 --&gt;</span></span><br><span class=\"line\">    \t<span class=\"tag\">&lt;<span class=\"name\">aop:after-returning</span> <span class=\"attr\">pointcut-ref</span>=<span class=\"string\">&quot;loggerPointCut&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">    \t<span class=\"attr\">method</span>=<span class=\"string\">&quot;afterReturning&quot;</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">aop:aspect</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">aop:config</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>注意这里LoggerAspect中的before和afterReturning如果有参数，这里需要处理下，否则会报 <strong>0 formal unbound in pointcut</strong> 异常。</p>\n<h2 id=\"AspectJ-注解驱动方式\"><a href=\"#AspectJ-注解驱动方式\" class=\"headerlink\" title=\"@AspectJ 注解驱动方式\"></a>@AspectJ 注解驱动方式</h2><p>这种方式是最简单的一种实现，直接使用 @Aspect 注解标注我们的切面类即可。</p>\n<h3 id=\"1、定义切面类，并使用-Aspect-进行标注\"><a href=\"#1、定义切面类，并使用-Aspect-进行标注\" class=\"headerlink\" title=\"1、定义切面类，并使用 @Aspect 进行标注\"></a>1、定义切面类，并使用 @Aspect 进行标注</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@description</span>: 使用Aspect注解驱动的方式</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@email</span>: &lt;a href=&quot;guolei.sgl@antfin.com&quot;&gt;&lt;/a&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span>: guolei.sgl</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@date</span>: 18/6/20</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Aspect</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">LoggerAspectInject</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">Logger</span> <span class=\"variable\">LOGGER</span> <span class=\"operator\">=</span> LoggerFactory.getLogger(LoggerAspectInject.class);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Pointcut(&quot;execution(* com.glmapper.framerwork.service.impl.*.*(..))&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">cutIn</span><span class=\"params\">()</span>&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Before(&quot;cutIn()&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">before</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        LOGGER.info(<span class=\"string\">&quot;before current time:&quot;</span>+System.currentTimeMillis());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@AfterReturning(&quot;cutIn()&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">AfterReturning</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        LOGGER.info(<span class=\"string\">&quot;afterReturning current time:&quot;</span>+System.currentTimeMillis());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2、使用方式1：配置文件方式声明-bean\"><a href=\"#2、使用方式1：配置文件方式声明-bean\" class=\"headerlink\" title=\"2、使用方式1：配置文件方式声明 bean\"></a>2、使用方式1：配置文件方式声明 bean</h3><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">aop:aspectj-autoproxy</span> /&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 定义通知内容，也就是切入点执行前后需要做的事情 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;loggerAspectInject&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">class</span>=<span class=\"string\">&quot;com.glmapper.framerwork.aspect.LoggerAspectInject&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 定义被代理者 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;goodsServiceImpl&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">class</span>=<span class=\"string\">&quot;com.glmapper.framerwork.service.impl.GoodsServiceImpl&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3、客户端使用：\"><a href=\"#3、客户端使用：\" class=\"headerlink\" title=\"3、客户端使用：\"></a>3、客户端使用：</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Controller</span></span><br><span class=\"line\"><span class=\"meta\">@RequestMapping(&quot;/buy&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">BuyController</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> OrderService orderService;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"meta\">@RequestMapping(&quot;/initPage&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> ModelAndView <span class=\"title function_\">initPage</span><span class=\"params\">(HttpServletRequest request,</span></span><br><span class=\"line\"><span class=\"params\">    \t\tHttpServletResponse response, ModelAndView view)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">//通过SpringContextUtil手动获取 代理bean</span></span><br><span class=\"line\">    \tGoodsService goodsService=(GoodsService)</span><br><span class=\"line\">    \tSpringContextUtil.getBean(<span class=\"string\">&quot;goodsServiceImpl&quot;</span>);</span><br><span class=\"line\">    </span><br><span class=\"line\">    \tList&lt;Goods&gt; goods = goodsService.queryAll(<span class=\"number\">10</span>,<span class=\"number\">10</span>);</span><br><span class=\"line\">    \tview.addObject(<span class=\"string\">&quot;goodsList&quot;</span>, goods);</span><br><span class=\"line\">    \tview.setViewName(<span class=\"string\">&quot;goodslist&quot;</span>);</span><br><span class=\"line\">    \t<span class=\"keyword\">return</span> view;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"4、使用方式2：使用-component注解托管给IOC\"><a href=\"#4、使用方式2：使用-component注解托管给IOC\" class=\"headerlink\" title=\"4、使用方式2：使用@component注解托管给IOC\"></a>4、使用方式2：使用@component注解托管给IOC</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Aspect</span></span><br><span class=\"line\"><span class=\"meta\">@Component</span> <span class=\"comment\">//这里加上了Component注解，就不需要在xml中配置了</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">LoggerAspectInject</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">Logger</span> <span class=\"variable\">LOGGER</span> <span class=\"operator\">=</span></span><br><span class=\"line\">    LoggerFactory.getLogger(LoggerAspectInject.class);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Pointcut(&quot;execution(* com.glmapper.framerwork.service.impl.*.*(..))&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">cutIn</span><span class=\"params\">()</span>&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Before(&quot;cutIn()&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">before</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        LOGGER.info(<span class=\"string\">&quot;before current time:&quot;</span>+System.currentTimeMillis());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@AfterReturning(&quot;cutIn()&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">AfterReturning</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        LOGGER.info(<span class=\"string\">&quot;afterReturning current time:&quot;</span>+System.currentTimeMillis());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"5、客户端代码：\"><a href=\"#5、客户端代码：\" class=\"headerlink\" title=\"5、客户端代码：\"></a>5、客户端代码：</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Controller</span></span><br><span class=\"line\"><span class=\"meta\">@RequestMapping(&quot;/buy&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">BuyController</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> OrderService orderService;</span><br><span class=\"line\">    <span class=\"comment\">//直接注入</span></span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> GoodsService goodsService;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"meta\">@RequestMapping(&quot;/initPage&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> ModelAndView <span class=\"title function_\">initPage</span><span class=\"params\">(HttpServletRequest request,</span></span><br><span class=\"line\"><span class=\"params\">    \t\tHttpServletResponse response, ModelAndView view)</span> &#123;</span><br><span class=\"line\">    \t</span><br><span class=\"line\">    \tList&lt;Goods&gt; goods = goodsService.queryAll(<span class=\"number\">10</span>,<span class=\"number\">10</span>);</span><br><span class=\"line\">    \tview.addObject(<span class=\"string\">&quot;goodsList&quot;</span>, goods);</span><br><span class=\"line\">    \tview.setViewName(<span class=\"string\">&quot;goodslist&quot;</span>);</span><br><span class=\"line\">    \t<span class=\"keyword\">return</span> view;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"6、比较完整的一个LoggerAspectInject，在实际工程中可以直接参考\"><a href=\"#6、比较完整的一个LoggerAspectInject，在实际工程中可以直接参考\" class=\"headerlink\" title=\"6、比较完整的一个LoggerAspectInject，在实际工程中可以直接参考\"></a>6、比较完整的一个LoggerAspectInject，在实际工程中可以直接参考</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@description</span>: aop</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@email</span>: &lt;a href=&quot;henugl@1992.163.com&quot;&gt;&lt;/a&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span>: glmapper@磊叔</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@date</span>: 18/6/4</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Aspect</span></span><br><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">LoggerAspectInject</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> Logger LOGGER= LoggerFactory.getLogger(LoggerAspectInject.class);</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"meta\">@Pointcut(&quot;execution(* com.glmapper.book.web.controller.*.*(..))&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">cutIn</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Around(&quot;cutIn()&quot;)</span>   <span class=\"comment\">// 定义Pointcut，名称即下面的标识&quot;aroundAdvice</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Object <span class=\"title function_\">aroundAdvice</span><span class=\"params\">(ProceedingJoinPoint poin)</span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;环绕通知&quot;</span>);</span><br><span class=\"line\">        <span class=\"type\">Object</span> <span class=\"variable\">object</span> <span class=\"operator\">=</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">        <span class=\"keyword\">try</span>&#123;</span><br><span class=\"line\">            object = poin.proceed();</span><br><span class=\"line\">        &#125;<span class=\"keyword\">catch</span> (Throwable e)&#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> object;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 定义 advise</span></span><br><span class=\"line\">    <span class=\"comment\">//这个方法只是一个标识，相当于在配置文件中定义了pointcut的id,此方法没有返回值和参数</span></span><br><span class=\"line\">    <span class=\"meta\">@Before(&quot;cutIn()&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">beforeAdvice</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;前置通知&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@After(&quot;cutIn()&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">afterAdvice</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;后置通知&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@AfterReturning(&quot;cutIn()&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">afterReturning</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;后置返回 &quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@AfterThrowing(&quot;cutIn()&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">afterThrowing</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;后置异常&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>关于命名切入点</strong>：上面的例子中cutIn方法可以被称之为命名切入点，命名切入点可以被其他切入点引用，而匿名切入点是不可以的。只有@AspectJ支持命名切入点，而Schema风格不支持命名切入点。<br>如下所示，@AspectJ使用如下方式引用命名切入点：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Pointcut(&quot;execution(* com.glmapper.book.web.controller.*.*(..))&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">cutIn</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//引入命名切入点</span></span><br><span class=\"line\"><span class=\"meta\">@Before(&quot;cutIn()&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">beforeAdvice</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;前置通知&quot;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"注入式-AspectJ-切面\"><a href=\"#注入式-AspectJ-切面\" class=\"headerlink\" title=\"注入式 AspectJ 切面\"></a>注入式 AspectJ 切面</h2><p>这种方式我感觉是第二种和第三种的结合的一种方式。</p>\n<h3 id=\"1、定义切面类\"><a href=\"#1、定义切面类\" class=\"headerlink\" title=\"1、定义切面类\"></a>1、定义切面类</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">* <span class=\"doctag\">@description</span>: 注入式 也是一种通过XML方式配置的方式</span></span><br><span class=\"line\"><span class=\"comment\">* <span class=\"doctag\">@email</span>: &lt;a href=&quot;guolei.sgl@antfin.com&quot;&gt;&lt;/a&gt;</span></span><br><span class=\"line\"><span class=\"comment\">* <span class=\"doctag\">@author</span>: guolei.sgl</span></span><br><span class=\"line\"><span class=\"comment\">* <span class=\"doctag\">@date</span>: 18/6/20</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">LoggerAspectHelper</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">Logger</span> <span class=\"variable\">LOGGER</span> <span class=\"operator\">=</span> LoggerFactory.getLogger(LoggerAspectHelper.class);</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 调动方法前执行</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> point</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@throws</span> Throwable</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">doBefore</span><span class=\"params\">(JoinPoint point)</span> <span class=\"keyword\">throws</span> Throwable &#123;</span><br><span class=\"line\">        LOGGER.info(<span class=\"string\">&quot;before current time:&quot;</span>+System.currentTimeMillis());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 在调用方法前后执行</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> point</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@throws</span> Throwable</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Object <span class=\"title function_\">doAround</span><span class=\"params\">(ProceedingJoinPoint point)</span> <span class=\"keyword\">throws</span> Throwable</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        LOGGER.info(<span class=\"string\">&quot;around current time:&quot;</span>+System.currentTimeMillis());</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(point.getArgs().length&gt;<span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> point.proceed(point.getArgs());</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> point.proceed();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 在调用方法之后执行</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> point</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@throws</span> Throwable</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">doAfter</span><span class=\"params\">(JoinPoint point)</span> <span class=\"keyword\">throws</span> Throwable</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        LOGGER.info(<span class=\"string\">&quot;after current time:&quot;</span>+System.currentTimeMillis());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 异常通知</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> point</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> ex</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">doThrowing</span><span class=\"params\">(JoinPoint point, Throwable ex)</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        LOGGER.info(<span class=\"string\">&quot;throwing current time:&quot;</span>+System.currentTimeMillis());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2、XML-配置\"><a href=\"#2、XML-配置\" class=\"headerlink\" title=\"2、XML 配置\"></a>2、XML 配置</h3><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;loggerAspectHelper&quot;</span>    </span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">class</span>=<span class=\"string\">&quot;com.glmapper.framerwork.aspect.LoggerAspectHelper&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">aop:config</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">aop:aspect</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;configAspect&quot;</span> <span class=\"attr\">ref</span>=<span class=\"string\">&quot;loggerAspectHelper&quot;</span>&gt;</span></span><br><span class=\"line\">    \t<span class=\"comment\">&lt;!--配置com.glmapper.framerwork.service.imp</span></span><br><span class=\"line\"><span class=\"comment\">    \t包下所有类或接口的所有方法 --&gt;</span></span><br><span class=\"line\">    \t<span class=\"tag\">&lt;<span class=\"name\">aop:pointcut</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;cutIn&quot;</span> <span class=\"attr\">expression</span>=</span></span><br><span class=\"line\"><span class=\"tag\">    \t<span class=\"string\">&quot;execution(* com.glmapper.framerwork.service.impl.*.*(..))&quot;</span> /&gt;</span></span><br><span class=\"line\">    \t</span><br><span class=\"line\">    \t<span class=\"tag\">&lt;<span class=\"name\">aop:before</span>   <span class=\"attr\">pointcut-ref</span>=<span class=\"string\">&quot;cutIn&quot;</span> <span class=\"attr\">method</span>=<span class=\"string\">&quot;doBefore&quot;</span> /&gt;</span></span><br><span class=\"line\">    \t<span class=\"tag\">&lt;<span class=\"name\">aop:after</span>    <span class=\"attr\">pointcut-ref</span>=<span class=\"string\">&quot;cutIn&quot;</span> <span class=\"attr\">method</span>=<span class=\"string\">&quot;doAfter&quot;</span> /&gt;</span></span><br><span class=\"line\">    \t<span class=\"tag\">&lt;<span class=\"name\">aop:around</span>   <span class=\"attr\">pointcut-ref</span>=<span class=\"string\">&quot;cutIn&quot;</span> <span class=\"attr\">method</span>=<span class=\"string\">&quot;doAround&quot;</span> /&gt;</span></span><br><span class=\"line\">    \t<span class=\"tag\">&lt;<span class=\"name\">aop:after-throwing</span> <span class=\"attr\">pointcut-ref</span>=<span class=\"string\">&quot;cutIn&quot;</span> </span></span><br><span class=\"line\"><span class=\"tag\">    \t    <span class=\"attr\">method</span>=<span class=\"string\">&quot;doThrowing&quot;</span> <span class=\"attr\">throwing</span>=<span class=\"string\">&quot;ex&quot;</span> /&gt;</span></span><br><span class=\"line\">    \t</span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">aop:aspect</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">aop:config</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3、结果\"><a href=\"#3、结果\" class=\"headerlink\" title=\"3、结果\"></a>3、结果</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">23:39:48.756 [http-nio-8080-exec-4] INFO  c.g.f.aspect.LoggerAspectHelper</span><br><span class=\"line\">- before current time:1529509188756</span><br><span class=\"line\">23:39:48.757 [http-nio-8080-exec-4] INFO  c.g.f.aspect.LoggerAspectHelper</span><br><span class=\"line\">- around current time:1529509188757</span><br><span class=\"line\">excute queryAll method...</span><br><span class=\"line\">23:39:48.757 [http-nio-8080-exec-4] INFO  c.g.f.aspect.LoggerAspectHelper</span><br><span class=\"line\">- after current time:1529509188757</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"表达式\"><a href=\"#表达式\" class=\"headerlink\" title=\"表达式\"></a>表达式</h2><hr>\n<p>从上面的例子中我们都是使用一些正则表达式来指定我们的切入点的。在实际的使用中，不仅仅是execution，还有其他很多种类型的表达式。下面就列举一些：</p>\n<h3 id=\"1、execution\"><a href=\"#1、execution\" class=\"headerlink\" title=\"1、execution\"></a>1、execution</h3><p>用于匹配方法执行的连接点;</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">execution(* com.glmapper.book.web.controller.*.*(..))</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>execution（）表达式的主体；</li>\n<li>第一个 “*” 符号表示返回值的类型任意；</li>\n<li>com.glmapper.book.web.controller       AOP所切的服务的包名，即，我们的业务部分</li>\n<li>包名后面的”.”\t表示当前包及子包</li>\n<li>第二个”*”\t表示类名，即所有类</li>\n<li>.*(..) 表示任何方法名，括号表示参数，两个点表示任何参数类型</li>\n</ul>\n<h2 id=\"2、within\"><a href=\"#2、within\" class=\"headerlink\" title=\"2、within\"></a>2、within</h2><p>用于匹配指定类型内的方法执行;</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//如果在com.glmapper.book.web.controller包或其下的任何子包中</span></span><br><span class=\"line\"><span class=\"comment\">//定义了该类型，则在Web层中有一个连接点。</span></span><br><span class=\"line\">within(com.glmapper.book.web.controller..*)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Pointcut(&quot;within(com.glmapper.book.web.controller..*)&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">cutIn</span><span class=\"params\">()</span>&#123;&#125;</span><br></pre></td></tr></table></figure>\n<p>@within：用于匹配所以持有指定注解类型内的方法；</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@description</span>: 注解定义</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@email</span>: &lt;a href=&quot;henugl@1992.163.com&quot;&gt;&lt;/a&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span>: glmapper@磊叔</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@date</span>: 18/6/4</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class=\"line\"><span class=\"meta\">@Target(&#123;ElementType.METHOD,ElementType.FIELD&#125;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"meta\">@interface</span> AuthAnnotation &#123;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>任何目标对象对应的类型持有AuthAnnotation注解的类方法；必须是在目标对象上声明这个注解，在接口上声明的对它不起作用。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@within(com.glmapper.book.common.annotaion.AuthAnnotation)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//所有被@AdviceAnnotation标注的类都将匹配</span></span><br><span class=\"line\"><span class=\"meta\">@Pointcut(&quot;@within(com.glmapper.book.common.annotaion.AuthAnnotation)&quot;)</span> </span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">cutIn</span><span class=\"params\">()</span>&#123;&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3、this\"><a href=\"#3、this\" class=\"headerlink\" title=\"3、this\"></a>3、this</h3><p>用于匹配当前AOP代理对象类型的执行方法；注意是AOP代理对象的类型匹配，这样就可能包括引入接口也类型匹配；this中使用的表达式必须是类型全限定名，不支持通配符；</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//当前目标对象（非AOP对象）实现了 UserService 接口的任何方法</span></span><br><span class=\"line\"><span class=\"built_in\">this</span>(com.glmapper.book.web.service.UserService)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//用于向通知方法中传入代理对象的引用。</span></span><br><span class=\"line\"><span class=\"meta\">@Before(&quot;cutIn() &amp;&amp; this(proxy)&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">beforeAdvice</span><span class=\"params\">(ProceedingJoinPoint poin,Object proxy)</span>&#123;</span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;前置通知&quot;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"4、target\"><a href=\"#4、target\" class=\"headerlink\" title=\"4、target\"></a>4、target</h3><p>用于匹配当前目标对象类型的执行方法；注意是目标对象的类型匹配，这样就不包括引入接口也类型匹配；target中使用的表达式必须是类型全限定名，不支持通配符；</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//当前目标对象（非AOP对象）实现了 UserService 接口的任何方法</span></span><br><span class=\"line\">target(com.glmapper.book.web.service.UserService)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//用于向通知方法中传入代理对象的引用。</span></span><br><span class=\"line\"><span class=\"meta\">@Before(&quot;cutIn() &amp;&amp; target(proxy)&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">beforeAdvice</span><span class=\"params\">(ProceedingJoinPoint poin,Object proxy)</span>&#123;</span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;前置通知&quot;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>@target：用于匹配当前目标对象类型的执行方法，其中目标对象持有指定的注解；任何目标对象持有Secure注解的类方法；这个和@within一样必须是在目标对象上声明这个注解，在接口上声明的对它同样不起作用。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@target(com.glmapper.book.common.annotaion.AuthAnnotation)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Pointcut(&quot;@target(com.glmapper.book.common.annotaion.AuthAnnotation)&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">cutIn</span><span class=\"params\">()</span>&#123;&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"5、args\"><a href=\"#5、args\" class=\"headerlink\" title=\"5、args\"></a>5、args</h3><p>用于匹配当前执行的方法传入的参数为指定类型的执行方法；参数类型列表中的参数必须是类型全限定名，通配符不支持；args属于动态切入点，这种切入点开销非常大，非特殊情况最好不要使用；</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//任何一个以接受“传入参数类型为java.io.Serializable”开头，</span></span><br><span class=\"line\"><span class=\"comment\">//且其后可跟任意个任意类型的参数的方法执行，</span></span><br><span class=\"line\"><span class=\"comment\">//args指定的参数类型是在运行时动态匹配的</span></span><br><span class=\"line\">args (java.io.Serializable,..)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//用于将参数传入到通知方法中。</span></span><br><span class=\"line\"><span class=\"meta\">@Before(&quot;cutIn() &amp;&amp; args(age,username)&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">beforeAdvide</span><span class=\"params\">(JoinPoint point, <span class=\"type\">int</span> age, String username)</span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">//...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>@args：用于匹配当前执行的方法传入的参数持有指定注解的执行；任何一个只接受一个参数的方法，且方法运行时传入的参数持有注解AuthAnnotation；动态切入点，类似于arg指示符；</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@args</span> (com.glmapper.book.common.annotaion.AuthAnnotation)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Before(&quot;@args(com.glmapper.book.common.annotaion.AuthAnnotation)&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">beforeAdvide</span><span class=\"params\">(JoinPoint point)</span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">//...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"6、-annotation\"><a href=\"#6、-annotation\" class=\"headerlink\" title=\"6、@annotation\"></a>6、@annotation</h3><p>使用“@annotation(注解类型)”匹配当前执行方法持有指定注解的方法；注解类型也必须是全限定类型名；</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//当前执行方法上持有注解 AuthAnnotation将被匹配</span></span><br><span class=\"line\"><span class=\"meta\">@annotation(com.glmapper.book.common.annotaion.AuthAnnotation)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//匹配连接点被它参数指定的AuthAnnotation注解的方法。</span></span><br><span class=\"line\"><span class=\"comment\">//也就是说，所有被指定注解标注的方法都将匹配。</span></span><br><span class=\"line\"><span class=\"meta\">@Pointcut(&quot;@annotation(com.glmapper.book.common.annotaion.AuthAnnotation)&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">cutIn</span><span class=\"params\">()</span>&#123;&#125;</span><br></pre></td></tr></table></figure>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>还有一种是bean的方式，没用过。有兴趣可以看看。</p></blockquote>\n<p>例子在下面说到的基础概念部分对应给出。</p>\n<h1 id=\"基础概念\"><a href=\"#基础概念\" class=\"headerlink\" title=\"基础概念\"></a>基础概念</h1><p>基础概念部分主要将 AOP 中的一些概念点捋一捋，这部分主要参考了官网上的一些解释。</p>\n<h2 id=\"AOP\"><a href=\"#AOP\" class=\"headerlink\" title=\"AOP\"></a>AOP</h2><p><code>AOP(Aspect-Oriented Programming)</code>， 即 <strong>面向切面编程</strong>, 它与 <code>OOP</code>( <code>Object-Oriented Programming</code>, 面向对象编程) 相辅相成, 提供了与 <code>OOP</code> 不同的抽象软件结构的视角。在 <code>OOP</code> 中,我们以类(class)作为我们的基本单元, 而 <code>AOP</code> 中的基本单元是 **Aspect(切面)**。</p>\n<p><strong>横切关注点</strong>(<code>Cross Cutting Concern</code>)：独立服务，如系统日志。如果不是独立服务（就是与业务耦合比较强的服务）就不能横切了。通常这种独立服务需要遍布系统各个角落，遍布在业务流程之中。</p>\n<h2 id=\"Target-Object\"><a href=\"#Target-Object\" class=\"headerlink\" title=\"Target Object\"></a>Target Object</h2><p>目标对象。织入 advice 的目标对象。 目标对象也被称为 <code>advised object</code>。<br>因为 Spring AOP 使用运行时代理的方式来实现 aspect, 因此 adviced object 总是一个代理对象(proxied object)；注意， adviced object 指的不是原来的类, 而是织入 advice 后所产生的代理类。</p>\n<h2 id=\"织入（Weave）\"><a href=\"#织入（Weave）\" class=\"headerlink\" title=\"织入（Weave）\"></a>织入（Weave）</h2><p>即<code>Advice</code>应用在<code>JoinPoint</code>的过程，这个过程叫织入。从另外一个角度老说就是将 <code>aspect</code> 和其他对象连接起来, 并创建 <code>adviced object</code> 的过程。</p>\n<p>根据不同的实现技术， <code>AOP</code>织入有三种方式:</p>\n<ul>\n<li>编译器织入，这要求有特殊的<code>Java</code>编译器</li>\n<li>类装载期织入， 这需要有特殊的类装载器</li>\n<li>动态代理织入, 在运行期为目标类添加增强( <code>Advice</code> )生成子类的方式。</li>\n</ul>\n<p>Spring 采用动态代理织入, 而AspectJ采用编译器织入和类装载期</p>\n<h2 id=\"代理\"><a href=\"#代理\" class=\"headerlink\" title=\"代理\"></a>代理</h2><p>Spring AOP默认使用代理的是标准的JDK动态代理。这使得任何接口（或一组接口）都可以代理。</p>\n<p>Spring AOP也可以使用CGLIB代理。如果业务对象不实现接口，则默认使用CGLIB。对接口编程而不是对类编程是一种很好的做法；业务类通常会实现一个或多个业务接口。在一些特殊的情况下，即需要通知的接口上没有声明的方法，或者需要将代理对象传递给具体类型的方法，有可能强制使用CGLIB。</p>\n<h2 id=\"Introductions\"><a href=\"#Introductions\" class=\"headerlink\" title=\"Introductions\"></a>Introductions</h2><p>我们知道Java语言本身并非是动态的，就是我们的类一旦编译完成，就很难再为他添加新的功能。但是在一开始给出的例子中，虽然我们没有向对象中添加新的方法，但是已经向其中添加了新的功能。这种属于向现有的方法添加新的功能，那能不能为一个对象添加新的方法呢？答案肯定是可以的，使用introduction就能够实现。</p>\n<p>introduction：动态为某个类增加或减少方法。为一个类型添加额外的方法或字段。Spring AOP 允许我们为 <code>目标对象</code> 引入新的接口(和对应的实现)。</p>\n<h2 id=\"Aspect\"><a href=\"#Aspect\" class=\"headerlink\" title=\"Aspect\"></a>Aspect</h2><p>切面：通知和切入点的结合。</p>\n<p>切面实现了cross-cutting（横切）功能。最常见的是logging模块、方法执行耗时模块，这样，程序按功能被分为好几层，如果按传统的继承的话，商业模型继承日志模块的话需要插入修改的地方太多，而通过创建一个切面就可以使用AOP来实现相同的功能了，我们可以针对不同的需求做出不同的切面。</p>\n<p>而将散落于各个业务对象之中的Cross-cutting concerns 收集起来，设计各个独立可重用的对象，这些对象称之为Aspect；在上面的例子中我们根据不同的配置方式，定义了四种不同形式的切面。</p>\n<h2 id=\"Joinpoint\"><a href=\"#Joinpoint\" class=\"headerlink\" title=\"Joinpoint\"></a>Joinpoint</h2><p>Aspect 在应用程序执行时加入业务流程的点或时机称之为 Joinpoint ，具体来说，就是 Advice 在应用程序中被呼叫执行的时机，这个时机可能是某个方法被呼叫之前或之后（或两者都有），或是某个异常发生的时候。</p>\n<h3 id=\"Joinpoint-ProceedingJoinPoint\"><a href=\"#Joinpoint-ProceedingJoinPoint\" class=\"headerlink\" title=\"Joinpoint &amp; ProceedingJoinPoint\"></a>Joinpoint &amp; ProceedingJoinPoint</h3><p>环绕通知 &#x3D; 前置+目标方法执行+后置通知，proceed方法就是用于启动目标方法执行的。</p>\n<p>环绕通知 ProceedingJoinPoint 执行 proceed 方法 的作用是让目标方法执行 ，这 也是环绕通知和前置、后置通知方法的一个最大区别。</p>\n<p>Proceedingjoinpoint 继承了 JoinPoint 。是在JoinPoint的基础上暴露出 proceed 这个方法。proceed很重要，这个是aop代理链执行的方法；暴露出这个方法，就能支持<a href=\"aop:around\">aop:around</a> 这种切面（其他的几种切面只需要用到JoinPoint，这跟切面类型有关）， 能决定是否走代理链还是走自己拦截的其他逻辑。</p>\n<p>在环绕通知的方法中是需要返回一个Object类型对象的，如果把环绕通知的方法返回类型是void，将会导致一些无法预估的情况，比如：404。</p>\n<h2 id=\"Pointcut\"><a href=\"#Pointcut\" class=\"headerlink\" title=\"Pointcut\"></a>Pointcut</h2><p>匹配 <code>join points </code>的谓词。<code>Advice</code>与切入点表达式相关联, 并在切入点匹配的任何连接点上运行。（例如，具有特定名称的方法的执行）。由切入点表达式匹配的连接点的概念是<code>AOP</code>的核心，<code>Spring</code>默认使用<code>AspectJ</code>切入点表达式语言。</p>\n<p>在 <code>Spring</code> 中, 所有的方法都可以认为是<code> Joinpoint</code>, 但是我们并不希望在所有的方法上都添加 <code>Advice</code>, 而 <code>Pointcut</code> 的作用就是提供一组规则(使用 <code>AspectJ pointcut expression language</code> 来描述) 来匹配<code>Joinpoint</code>, 给满足规则的<code>Joinpoint</code> 添加 <code>Advice</code>。</p>\n<h3 id=\"Pointcut-和-Joinpoint\"><a href=\"#Pointcut-和-Joinpoint\" class=\"headerlink\" title=\"Pointcut 和 Joinpoint\"></a>Pointcut 和 Joinpoint</h3><p>在<code> Spring AOP</code> 中, 所有的方法执行都是 <code>join point</code>。 而 <code>point cut</code> 是一个描述信息，它修饰的是 <code>join point</code>， 通过 <code>point cut</code>，我们就可以确定哪些 <code>join point</code> 可以被织入<code> Advice</code>。 因此<code> join point</code> 和 <code>point cut </code>本质上就是两个不同维度上的东西。</p>\n<p><code>advice</code> 是在 <code>join point</code> 上执行的, 而 <code>point cut</code> 规定了哪些 <code>join point</code> 可以执行哪些 <code>advice</code>。</p>\n<h2 id=\"Advice\"><a href=\"#Advice\" class=\"headerlink\" title=\"Advice\"></a>Advice</h2><h3 id=\"概念\"><a href=\"#概念\" class=\"headerlink\" title=\"概念\"></a>概念</h3><p>Advice 是我们切面功能的实现，它是切点的真正执行的地方。比如像前面例子中打印时间的几个方法（被@Before等注解标注的方法都是一个通知）；Advice 在 Jointpoint 处插入代码到应用程序中。</p>\n<h3 id=\"分类\"><a href=\"#分类\" class=\"headerlink\" title=\"分类\"></a>分类</h3><p>BeforeAdvice，AfterAdvice，区别在于Advice在目标方法之前调用还是之后调用，Throw Advice 表示当目标发生异常时调用Advice。</p>\n<ul>\n<li>before advice： 在 join point 前被执行的 advice. 虽然 before advice 是在 join point 前被执行, 但是它并不能够阻止 join     point 的执行, 除非发生了异常(即我们在 before advice 代码中, 不能人为地决定是否继续执行 join point 中的代码)</li>\n<li>after return advice： 在一个 join point 正常返回后执行的 advice</li>\n<li>after throwing advice： 当一个 join point 抛出异常后执行的 advice</li>\n<li>after(final) advice： 无论一个 join point 是正常退出还是发生了异常, 都会被执行的 advice.</li>\n<li>around advice：在 join point 前和 joint point 退出后都执行的 advice. 这个是最常用的 advice.</li>\n</ul>\n<h2 id=\"Advice、JoinPoint、PointCut-关系\"><a href=\"#Advice、JoinPoint、PointCut-关系\" class=\"headerlink\" title=\"Advice、JoinPoint、PointCut 关系\"></a>Advice、JoinPoint、PointCut 关系</h2><p><img src=\"https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2018/6/21/1641e065ec1ad2e7~tplv-t2oaga2asx-image.image\"></p>\n<p>下面这张图是在网上一位大佬的博客里发现的，可以帮助我们更好的理解这些概念之间的关系。</p>\n<p><img src=\"https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2018/6/21/1641e0a1e65715e4~tplv-t2oaga2asx-image.image\" alt=\"图片源自网络\"></p>\n<p>上面是对于AOP中涉及到的一些基本概念及它们之间的关系做了简单的梳理。</p>\n<h2 id=\"一些坑\"><a href=\"#一些坑\" class=\"headerlink\" title=\"一些坑\"></a>一些坑</h2><p>在调试程序过程中出现的一些问题记录</p>\n<h3 id=\"1、使用AOP拦截controller层的服务成功，但是页面报错404\"><a href=\"#1、使用AOP拦截controller层的服务成功，但是页面报错404\" class=\"headerlink\" title=\"1、使用AOP拦截controller层的服务成功，但是页面报错404\"></a>1、使用AOP拦截controller层的服务成功，但是页面报错404</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Around(&quot;cutIn()&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">aroundAdvice</span><span class=\"params\">(ProceedingJoinPoint poin)</span> &#123;</span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;环绕通知&quot;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这里需要注意的是再使用环绕通知时，需要给方法一个返回值。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Around(&quot;cutIn()&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> Object <span class=\"title function_\">aroundAdvice</span><span class=\"params\">(ProceedingJoinPoint poin)</span> <span class=\"keyword\">throws</span> Throwable &#123;</span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;环绕通知&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> poin.proceed();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2、0-formal-unbound-in-pointcut\"><a href=\"#2、0-formal-unbound-in-pointcut\" class=\"headerlink\" title=\"2、0 formal unbound in pointcut\"></a>2、0 formal unbound in pointcut</h3><p>在spring 4.x中 提供了aop注解方式 带参数的方式。看下面例子：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Pointcut(value = &quot;execution(* com.glmapper.framerwork.service.impl.*(int,int)) &amp;&amp; args(i,j)&quot;)</span>  </span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">cutIn</span><span class=\"params\">(<span class=\"type\">int</span> i, <span class=\"type\">int</span> j)</span> &#123;&#125;  </span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"meta\">@Before(value=&quot;cutIn(i, j)&quot;,argNames = &quot;i,j&quot;)</span>  </span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">beforeMethod</span><span class=\"params\">( <span class=\"type\">int</span> i, <span class=\"type\">int</span> j)</span> &#123;  </span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;---------begins with &quot;</span> + i + <span class=\"string\">&quot;-&quot;</span> +j);  </span><br><span class=\"line\">&#125;  </span><br></pre></td></tr></table></figure>\n<p>比如说这里，Before中有两个int类型的参数，如果此时我们在使用时没有给其指定参数，那么就会抛出：<strong>Caused by: java.lang.IllegalArgumentException: error at ::0 formal unbound in pointcut</strong> 异常信息。</p>\n<p><code>本来是想放在一篇里面的，但是实在太长了，就分开吧；周末更新下</code></p>\n","text":" 原文：https://juejin.cn/post/6844903623101513735 aop 终于提上日程来写一写了。 本系列分为 上、中、下三篇。上篇...","permalink":"/post/spring/spring-aop-form-concept","photos":[],"count_time":{"symbolsCount":"23k","symbolsTime":"21 mins."},"categories":[{"name":"spring","slug":"spring","count":15,"path":"api/categories/spring.json"}],"tags":[{"name":"spring","slug":"spring","count":11,"path":"api/tags/spring.json"},{"name":"aop","slug":"aop","count":3,"path":"api/tags/aop.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E7%9B%AE%E5%BD%95\"><span class=\"toc-text\">目录</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E9%A1%B9%E7%9B%AE%E5%9C%B0%E5%9D%80\"><span class=\"toc-text\">项目地址</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%9F%BA%E4%BA%8E%E4%BB%A3%E7%90%86%E7%9A%84%E6%96%B9%E5%BC%8F\"><span class=\"toc-text\">基于代理的方式</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1%E3%80%81%E9%A6%96%E5%85%88%E5%AE%9A%E4%B9%89%E4%B8%80%E4%B8%AA%E6%8E%A5%E5%8F%A3%EF%BC%9AGoodsService\"><span class=\"toc-text\">1、首先定义一个接口：GoodsService</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2%E3%80%81GoodsService-%E5%AE%9E%E7%8E%B0%E7%B1%BB\"><span class=\"toc-text\">2、GoodsService 实现类</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3%E3%80%81%E5%AE%9A%E4%B9%89%E4%B8%80%E4%B8%AA%E9%80%9A%E7%9F%A5%E7%B1%BB-LoggerHelper%EF%BC%8C%E8%AF%A5%E7%B1%BB%E7%BB%A7%E6%89%BF-MethodBeforeAdvice%E5%92%8C-AfterReturningAdvice%E3%80%82\"><span class=\"toc-text\">3、定义一个通知类 LoggerHelper，该类继承 MethodBeforeAdvice和 AfterReturningAdvice。</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#4%E3%80%81%E9%87%8D%E7%82%B9%EF%BC%8C%E8%BF%99%E4%B8%AA%E9%85%8D%E7%BD%AE%E9%9C%80%E8%A6%81%E5%85%B3%E6%B3%A8%E4%B8%8B%E3%80%82%E8%BF%99%E4%B8%AA%E9%A1%B9%E7%9B%AE%E9%87%8C%E9%9D%A2%E6%88%91%E6%98%AF%E9%85%8D%E7%BD%AE%E5%9C%A8applicationContext-xml%E6%96%87%E4%BB%B6%E4%B8%AD%E7%9A%84%E3%80%82\"><span class=\"toc-text\">4、重点，这个配置需要关注下。这个项目里面我是配置在applicationContext.xml文件中的。</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#5%E3%80%81%E4%BD%BF%E7%94%A8%EF%BC%9A%E6%B3%A8%E8%A7%A3%E6%B3%A8%E5%85%A5%E6%96%B9%E5%BC%8F\"><span class=\"toc-text\">5、使用：注解注入方式</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#6%E3%80%81%E4%BD%BF%E7%94%A8%EF%BC%9A%E5%B7%A5%E5%85%B7%E7%B1%BB%E6%96%B9%E5%BC%8F%E6%89%8B%E5%8A%A8%E8%8E%B7%E5%8F%96bean\"><span class=\"toc-text\">6、使用：工具类方式手动获取bean</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#7%E3%80%81SpringContextUtil-%E7%B1%BB%E7%9A%84%E5%AE%9A%E4%B9%89\"><span class=\"toc-text\">7、SpringContextUtil 类的定义</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#8%E3%80%81%E8%BF%90%E8%A1%8C%E7%BB%93%E6%9E%9C\"><span class=\"toc-text\">8、运行结果</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E7%BA%AFPOJO%E5%88%87%E9%9D%A2-aop-config\"><span class=\"toc-text\">纯POJO切面 aop:config</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1%E3%80%81POJO-%E7%B1%BB%E5%AE%9A%E4%B9%89\"><span class=\"toc-text\">1、POJO 类定义</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2%E3%80%81%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6\"><span class=\"toc-text\">2、配置文件</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#AspectJ-%E6%B3%A8%E8%A7%A3%E9%A9%B1%E5%8A%A8%E6%96%B9%E5%BC%8F\"><span class=\"toc-text\">@AspectJ 注解驱动方式</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1%E3%80%81%E5%AE%9A%E4%B9%89%E5%88%87%E9%9D%A2%E7%B1%BB%EF%BC%8C%E5%B9%B6%E4%BD%BF%E7%94%A8-Aspect-%E8%BF%9B%E8%A1%8C%E6%A0%87%E6%B3%A8\"><span class=\"toc-text\">1、定义切面类，并使用 @Aspect 进行标注</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2%E3%80%81%E4%BD%BF%E7%94%A8%E6%96%B9%E5%BC%8F1%EF%BC%9A%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E6%96%B9%E5%BC%8F%E5%A3%B0%E6%98%8E-bean\"><span class=\"toc-text\">2、使用方式1：配置文件方式声明 bean</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3%E3%80%81%E5%AE%A2%E6%88%B7%E7%AB%AF%E4%BD%BF%E7%94%A8%EF%BC%9A\"><span class=\"toc-text\">3、客户端使用：</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#4%E3%80%81%E4%BD%BF%E7%94%A8%E6%96%B9%E5%BC%8F2%EF%BC%9A%E4%BD%BF%E7%94%A8-component%E6%B3%A8%E8%A7%A3%E6%89%98%E7%AE%A1%E7%BB%99IOC\"><span class=\"toc-text\">4、使用方式2：使用@component注解托管给IOC</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#5%E3%80%81%E5%AE%A2%E6%88%B7%E7%AB%AF%E4%BB%A3%E7%A0%81%EF%BC%9A\"><span class=\"toc-text\">5、客户端代码：</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#6%E3%80%81%E6%AF%94%E8%BE%83%E5%AE%8C%E6%95%B4%E7%9A%84%E4%B8%80%E4%B8%AALoggerAspectInject%EF%BC%8C%E5%9C%A8%E5%AE%9E%E9%99%85%E5%B7%A5%E7%A8%8B%E4%B8%AD%E5%8F%AF%E4%BB%A5%E7%9B%B4%E6%8E%A5%E5%8F%82%E8%80%83\"><span class=\"toc-text\">6、比较完整的一个LoggerAspectInject，在实际工程中可以直接参考</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%B3%A8%E5%85%A5%E5%BC%8F-AspectJ-%E5%88%87%E9%9D%A2\"><span class=\"toc-text\">注入式 AspectJ 切面</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1%E3%80%81%E5%AE%9A%E4%B9%89%E5%88%87%E9%9D%A2%E7%B1%BB\"><span class=\"toc-text\">1、定义切面类</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2%E3%80%81XML-%E9%85%8D%E7%BD%AE\"><span class=\"toc-text\">2、XML 配置</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3%E3%80%81%E7%BB%93%E6%9E%9C\"><span class=\"toc-text\">3、结果</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E8%A1%A8%E8%BE%BE%E5%BC%8F\"><span class=\"toc-text\">表达式</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1%E3%80%81execution\"><span class=\"toc-text\">1、execution</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#2%E3%80%81within\"><span class=\"toc-text\">2、within</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3%E3%80%81this\"><span class=\"toc-text\">3、this</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#4%E3%80%81target\"><span class=\"toc-text\">4、target</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#5%E3%80%81args\"><span class=\"toc-text\">5、args</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#6%E3%80%81-annotation\"><span class=\"toc-text\">6、@annotation</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E5%9F%BA%E7%A1%80%E6%A6%82%E5%BF%B5\"><span class=\"toc-text\">基础概念</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#AOP\"><span class=\"toc-text\">AOP</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Target-Object\"><span class=\"toc-text\">Target Object</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E7%BB%87%E5%85%A5%EF%BC%88Weave%EF%BC%89\"><span class=\"toc-text\">织入（Weave）</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%BB%A3%E7%90%86\"><span class=\"toc-text\">代理</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Introductions\"><span class=\"toc-text\">Introductions</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Aspect\"><span class=\"toc-text\">Aspect</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Joinpoint\"><span class=\"toc-text\">Joinpoint</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Joinpoint-ProceedingJoinPoint\"><span class=\"toc-text\">Joinpoint &amp; ProceedingJoinPoint</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Pointcut\"><span class=\"toc-text\">Pointcut</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Pointcut-%E5%92%8C-Joinpoint\"><span class=\"toc-text\">Pointcut 和 Joinpoint</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Advice\"><span class=\"toc-text\">Advice</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%A6%82%E5%BF%B5\"><span class=\"toc-text\">概念</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%88%86%E7%B1%BB\"><span class=\"toc-text\">分类</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Advice%E3%80%81JoinPoint%E3%80%81PointCut-%E5%85%B3%E7%B3%BB\"><span class=\"toc-text\">Advice、JoinPoint、PointCut 关系</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%B8%80%E4%BA%9B%E5%9D%91\"><span class=\"toc-text\">一些坑</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1%E3%80%81%E4%BD%BF%E7%94%A8AOP%E6%8B%A6%E6%88%AAcontroller%E5%B1%82%E7%9A%84%E6%9C%8D%E5%8A%A1%E6%88%90%E5%8A%9F%EF%BC%8C%E4%BD%86%E6%98%AF%E9%A1%B5%E9%9D%A2%E6%8A%A5%E9%94%99404\"><span class=\"toc-text\">1、使用AOP拦截controller层的服务成功，但是页面报错404</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2%E3%80%810-formal-unbound-in-pointcut\"><span class=\"toc-text\">2、0 formal unbound in pointcut</span></a></li></ol></li></ol>","author":{"name":"glmapper","slug":"blog-author","avatar":"https://glmapper-blog.oss-cn-hangzhou.aliyuncs.com/common/favicon.ico","link":"/","description":"开放，开源，分享，共享","socials":{"github":"https://github.com/glmapper","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/2412872703","zhihu":"","csdn":"","juejin":"https://juejin.cn/user/3227821827961806","customs":{"sofastack":{"icon":"https://glmapper-blog.oss-cn-hangzhou.aliyuncs.com/common/sofastack.svg","link":"https://www.sofastack.tech/"}}}},"mapped":true,"hidden":false,"prev_post":{"title":"聊一聊 AOP：Advice 源码解析","uid":"633ee0890ad90f5dbecf1b679aef9739","slug":"spring/spring-aop-advice-analysis","date":"2018-06-23T10:41:25.000Z","updated":"2024-07-05T04:09:05.815Z","comments":true,"path":"api/articles/spring/spring-aop-advice-analysis.json","keywords":null,"cover":[],"text":" 原文：https://juejin.cn/post/6844903624250769421 在第一篇中的例子和概念介绍中我们对 Advice 有了一个初步的认...","permalink":"/post/spring/spring-aop-advice-analysis","photos":[],"count_time":{"symbolsCount":"11k","symbolsTime":"10 mins."},"categories":[{"name":"spring","slug":"spring","count":15,"path":"api/categories/spring.json"}],"tags":[{"name":"spring","slug":"spring","count":11,"path":"api/tags/spring.json"},{"name":"aop","slug":"aop","count":3,"path":"api/tags/aop.json"}],"author":{"name":"glmapper","slug":"blog-author","avatar":"https://glmapper-blog.oss-cn-hangzhou.aliyuncs.com/common/favicon.ico","link":"/","description":"开放，开源，分享，共享","socials":{"github":"https://github.com/glmapper","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/2412872703","zhihu":"","csdn":"","juejin":"https://juejin.cn/user/3227821827961806","customs":{"sofastack":{"icon":"https://glmapper-blog.oss-cn-hangzhou.aliyuncs.com/common/sofastack.svg","link":"https://www.sofastack.tech/"}}}}},"next_post":{"title":"聊一聊 session 和 cookie","uid":"4394df75e93e562a0f93dd0d5cccdf72","slug":"middleware/middleware-http-session-cookie","date":"2018-05-12T21:10:25.000Z","updated":"2024-07-05T04:09:05.789Z","comments":true,"path":"api/articles/middleware/middleware-http-session-cookie.json","keywords":null,"cover":[],"text":"本来是想写 aop 设计机制的，但是最近被 session 这个东西搞得有点头大，所以就抽点时间来整理下关于 session 的一些东西。 目录 从http协议...","permalink":"/post/middleware/middleware-http-session-cookie","photos":[],"count_time":{"symbolsCount":"11k","symbolsTime":"10 mins."},"categories":[{"name":"Middleware","slug":"Middleware","count":11,"path":"api/categories/Middleware.json"}],"tags":[{"name":"http","slug":"http","count":3,"path":"api/tags/http.json"},{"name":"session","slug":"session","count":6,"path":"api/tags/session.json"},{"name":"cookie","slug":"cookie","count":1,"path":"api/tags/cookie.json"}],"author":{"name":"glmapper","slug":"blog-author","avatar":"https://glmapper-blog.oss-cn-hangzhou.aliyuncs.com/common/favicon.ico","link":"/","description":"开放，开源，分享，共享","socials":{"github":"https://github.com/glmapper","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/2412872703","zhihu":"","csdn":"","juejin":"https://juejin.cn/user/3227821827961806","customs":{"sofastack":{"icon":"https://glmapper-blog.oss-cn-hangzhou.aliyuncs.com/common/sofastack.svg","link":"https://www.sofastack.tech/"}}}}}}