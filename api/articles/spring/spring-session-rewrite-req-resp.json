{"title":"SpringSession系列-请求与响应重写","uid":"a51f93717fc52b7309abb94021410992","slug":"spring/spring-session-rewrite-req-resp","date":"2018-12-10T01:15:21.000Z","updated":"2024-07-05T04:09:05.818Z","comments":true,"path":"api/articles/spring/spring-session-rewrite-req-resp.json","keywords":"宋国磊, glmapper, 卫恒, 分享, 开源","cover":null,"content":"<p>我们知道，<code>HttpServletRequset</code>和<code>HttpServletResponse</code>是<code>Servlet</code>标准所指定的<code>Java</code>语言与<code>Web</code>容器进行交互的接口。接口本身只规定<code>java</code>语言对<code>web</code>容器进行访问的行为方式，而具体的实现是由不同的<code>web</code>容器在其内部实现的。</p>\n<p>那么在运行期，当我们需要对<code>HttpServletRequset</code>和<code>HttpServletResponse</code>的默认实例进行扩展时，我们就可以继承<code>HttpServletRequestWrapper</code>和<code>HttpServletResponseWrapper</code>来实现。</p>\n<span id=\"more\"></span>\n\n<p>在 <code>SpringSession</code>中因为我们要实现不依赖容器本身的<code>getSession</code> 实现，因此需要扩展 <code>HttpServletRequset</code>，通过重写<code>getSession</code>来实现分布式<code>session</code>的能力。下面就来看下<code>SpringSession</code>中对于<code>HttpServletRequset</code>的扩展。</p>\n<h2 id=\"1、请求重写\"><a href=\"#1、请求重写\" class=\"headerlink\" title=\"1、请求重写\"></a>1、请求重写</h2><p><code>SpringSession</code> 中对于请求重写，在能力上主要体现在存储方面，也就是<code>getSession</code>方法上。在 <code>SessionRepositoryFilter</code> 这个类中，是通过内部类的方式实现了对<code>HttpServletRequset</code>和<code>HttpServletResponse</code>的扩展。</p>\n<h3 id=\"1-1-HttpServletRequset-扩展实现\"><a href=\"#1-1-HttpServletRequset-扩展实现\" class=\"headerlink\" title=\"1.1 HttpServletRequset 扩展实现\"></a>1.1 HttpServletRequset 扩展实现</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">class</span> <span class=\"title class_\">SessionRepositoryRequestWrapper</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">extends</span> <span class=\"title class_\">HttpServletRequestWrapper</span> &#123;</span><br><span class=\"line\">\t<span class=\"comment\">// HttpServletResponse 实例</span></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">final</span> HttpServletResponse response;</span><br><span class=\"line\">\t<span class=\"comment\">// ServletContext 实例</span></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">final</span> ServletContext servletContext;</span><br><span class=\"line\">        <span class=\"comment\">// requestedSession session对象</span></span><br><span class=\"line\">        <span class=\"keyword\">private</span> S requestedSession; </span><br><span class=\"line\">        <span class=\"comment\">// 是否缓存 session</span></span><br><span class=\"line\">        <span class=\"keyword\">private</span> <span class=\"type\">boolean</span> requestedSessionCached;</span><br><span class=\"line\">\t<span class=\"comment\">// sessionId</span></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> String requestedSessionId;</span><br><span class=\"line\">\t<span class=\"comment\">// sessionId 是否有效</span></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> Boolean requestedSessionIdValid;</span><br><span class=\"line\">\t<span class=\"comment\">// sessionId 是否失效</span></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"type\">boolean</span> requestedSessionInvalidated;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">// 省略方法</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"1-2-构造方法\"><a href=\"#1-2-构造方法\" class=\"headerlink\" title=\"1.2 构造方法\"></a>1.2 构造方法</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"title function_\">SessionRepositoryRequestWrapper</span><span class=\"params\">(HttpServletRequest request,</span></span><br><span class=\"line\"><span class=\"params\">\t\tHttpServletResponse response, ServletContext servletContext)</span> &#123;</span><br><span class=\"line\">\t<span class=\"built_in\">super</span>(request);</span><br><span class=\"line\">\t<span class=\"built_in\">this</span>.response = response;</span><br><span class=\"line\">\t<span class=\"built_in\">this</span>.servletContext = servletContext;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>构造方法里面将 <code>HttpServletRequest</code>、<code>HttpServletResponse</code> 以及 <code>ServletContext</code> 实例传递进来，以便于后续扩展使用。</p>\n<h3 id=\"1-3-getSession-方法\"><a href=\"#1-3-getSession-方法\" class=\"headerlink\" title=\"1.3 getSession 方法\"></a>1.3 getSession 方法</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> HttpSessionWrapper <span class=\"title function_\">getSession</span><span class=\"params\">(<span class=\"type\">boolean</span> create)</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 从当前请求线程中获取 session</span></span><br><span class=\"line\">\t<span class=\"type\">HttpSessionWrapper</span> <span class=\"variable\">currentSession</span> <span class=\"operator\">=</span> getCurrentSession();</span><br><span class=\"line\">\t<span class=\"comment\">// 如果有直接返回</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (currentSession != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> currentSession;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">// 从请求中获取 session，这里面会涉及到从缓存中拿session的过程</span></span><br><span class=\"line\">\t<span class=\"type\">S</span> <span class=\"variable\">requestedSession</span> <span class=\"operator\">=</span> getRequestedSession();</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (requestedSession != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">\t    <span class=\"comment\">// 无效的会话id(不支持的会话存储库)请求属性名称。</span></span><br><span class=\"line\">\t    <span class=\"comment\">// 这里看下当前的sessionId是否有效</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (getAttribute(INVALID_SESSION_ID_ATTR) == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">\t\t    <span class=\"comment\">// 设置当前session的最后访问时间，用于延迟session的有效期</span></span><br><span class=\"line\">\t\t\trequestedSession.setLastAccessedTime(Instant.now());</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 将requestedSessionIdValid置为true</span></span><br><span class=\"line\">\t\t\t<span class=\"built_in\">this</span>.requestedSessionIdValid = <span class=\"literal\">true</span>;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 包装session</span></span><br><span class=\"line\">\t\t\tcurrentSession = <span class=\"keyword\">new</span> <span class=\"title class_\">HttpSessionWrapper</span>(requestedSession, getServletContext());</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 不是新的session，如果是新的session则需要改变sessionId</span></span><br><span class=\"line\">\t\t\tcurrentSession.setNew(<span class=\"literal\">false</span>);</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 将session设置到当前请求上下文</span></span><br><span class=\"line\">\t\t\tsetCurrentSession(currentSession);</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 返回session</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> currentSession;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 这里处理的是无效的sessionId的情况，但是当前请求线程 session有效</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (SESSION_LOGGER.isDebugEnabled()) &#123;</span><br><span class=\"line\">\t\t\tSESSION_LOGGER.debug(</span><br><span class=\"line\">\t\t\t\t\t<span class=\"string\">&quot;No session found by id: Caching result for getSession(false) for this HttpServletRequest.&quot;</span>);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 将invalidSessionId置为true</span></span><br><span class=\"line\">\t\tsetAttribute(INVALID_SESSION_ID_ATTR, <span class=\"string\">&quot;true&quot;</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">// 是否需要创建新的session</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (!create) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (SESSION_LOGGER.isDebugEnabled()) &#123;</span><br><span class=\"line\">\t\tSESSION_LOGGER.debug(</span><br><span class=\"line\">\t\t\t\t<span class=\"string\">&quot;A new session was created. To help you troubleshoot where the session was created we provided a StackTrace (this is not an error). You can prevent this from appearing by disabling DEBUG logging for &quot;</span></span><br><span class=\"line\">\t\t\t\t\t\t+ SESSION_LOGGER_NAME,</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">new</span> <span class=\"title class_\">RuntimeException</span>(</span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"string\">&quot;For debugging purposes only (not an error)&quot;</span>));</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">// 创建新的session</span></span><br><span class=\"line\">\t<span class=\"type\">S</span> <span class=\"variable\">session</span> <span class=\"operator\">=</span> SessionRepositoryFilter.<span class=\"built_in\">this</span>.sessionRepository.createSession();</span><br><span class=\"line\">\t<span class=\"comment\">// 设置最后访问时间，也就是指定了当前session的有效期限</span></span><br><span class=\"line\">\tsession.setLastAccessedTime(Instant.now());</span><br><span class=\"line\">\t<span class=\"comment\">// 包装下当前session</span></span><br><span class=\"line\">\tcurrentSession = <span class=\"keyword\">new</span> <span class=\"title class_\">HttpSessionWrapper</span>(session, getServletContext());</span><br><span class=\"line\">\t<span class=\"comment\">//设置到当前请求线程</span></span><br><span class=\"line\">\tsetCurrentSession(currentSession);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> currentSession;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>上面这段代码有几个点，这里单独来解释下。</p>\n<ul>\n<li><code>getCurrentSession</code><ul>\n<li>这是为了在同一个请求过程中不需要重复的去从存储中获取session，在一个新的进来时，将当前的 session 设置到当前请求中，在后续处理过程如果需要getSession就不需要再去存储介质中再拿一次。</li>\n</ul>\n</li>\n<li><code>getRequestedSession</code><ul>\n<li>这个是根据请求信息去取<code>session</code>，这里面就包括了<code>sessionId</code>解析，从存储获取<code>session</code>对象等过程。</li>\n</ul>\n</li>\n<li>是否创建新的<code>session</code>对象   <ul>\n<li>在当前请求中和存储中都没有获取到<code>session</code>信息的情况下，这里会根据<code>create</code>参数来判断是否创建新的<code>session</code>。这里一般用户首次登录时或者<code>session</code>失效时会走到。</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"1-4-getRequestedSession\"><a href=\"#1-4-getRequestedSession\" class=\"headerlink\" title=\"1.4 getRequestedSession\"></a>1.4 getRequestedSession</h3><p>根据请求信息来获取<code>session</code>对象</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> S <span class=\"title function_\">getRequestedSession</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 缓存的请求session是否存在</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (!<span class=\"built_in\">this</span>.requestedSessionCached) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 获取 sessionId</span></span><br><span class=\"line\">            List&lt;String&gt; sessionIds = SessionRepositoryFilter.<span class=\"built_in\">this</span>.httpSessionIdResolver</span><br><span class=\"line\">            \t\t.resolveSessionIds(<span class=\"built_in\">this</span>);</span><br><span class=\"line\">            <span class=\"comment\">// 通过sessionId来从存储中获取session</span></span><br><span class=\"line\">            <span class=\"keyword\">for</span> (String sessionId : sessionIds) &#123;</span><br><span class=\"line\">            \t<span class=\"keyword\">if</span> (<span class=\"built_in\">this</span>.requestedSessionId == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            \t\t<span class=\"built_in\">this</span>.requestedSessionId = sessionId;</span><br><span class=\"line\">            \t&#125;</span><br><span class=\"line\">            \t<span class=\"type\">S</span> <span class=\"variable\">session</span> <span class=\"operator\">=</span> SessionRepositoryFilter.<span class=\"built_in\">this</span>.sessionRepository</span><br><span class=\"line\">            \t\t\t.findById(sessionId);</span><br><span class=\"line\">            \t<span class=\"keyword\">if</span> (session != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            \t\t<span class=\"built_in\">this</span>.requestedSession = session;</span><br><span class=\"line\">            \t\t<span class=\"built_in\">this</span>.requestedSessionId = sessionId;</span><br><span class=\"line\">            \t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">            \t&#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"built_in\">this</span>.requestedSessionCached = <span class=\"literal\">true</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"built_in\">this</span>.requestedSession;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这段代码还是很有意思的，这里获取<code>sessionId</code>返回的是个列表。当然这里是<code>SpringSession</code>的实现策略，因为支持<code>session</code>，所以这里以列表的形式返回的。OK，继续来看如何解析<code>sessionId</code>的：</p>\n<p>[外链图片转存中…(img-RttDZ5t0-1650764287870)]</p>\n<p>这里可以看到<code>SpringSession</code>对于<code>sessionId</code>获取的两种策略，一种是基于<code>cookie</code>，一种是基于<code>header</code>；分别来看下具体实现。</p>\n<h4 id=\"1-4-1-CookieHttpSessionIdResolver-获取-sessionId\"><a href=\"#1-4-1-CookieHttpSessionIdResolver-获取-sessionId\" class=\"headerlink\" title=\"1.4.1 CookieHttpSessionIdResolver 获取 sessionId\"></a>1.4.1 CookieHttpSessionIdResolver 获取 sessionId</h4><p><code>CookieHttpSessionIdResolver</code> 中获取<code>sessionId</code>的核心代码如下：<br>[外链图片转存中…(img-jN2CqgSr-1650764287871)]<br>其实这里没啥好说的，就是读<code>cookie</code>。从<code>request</code>将<code>cookie</code>信息拿出来，然后遍历找当前<code>sessionId</code>对应的<code>cookie</code>,这里的判断也很简单， 如果是以<code>SESSION</code>开头，则表示是 <code>SessionId</code>，毕竟<code>cookie</code>是共享的，不只有<code>sessionId</code>，还有可能存储其他内容。</p>\n<p>另外这里面有个 jvmRoute，这个东西实际上很少能够用到，因为大多数情况下这个值都是null。这个我们在分析<code>CookieSerializer</code>时再来解释。</p>\n<h4 id=\"1-4-2-HeaderHttpSessionIdResolver-获取-sessionId\"><a href=\"#1-4-2-HeaderHttpSessionIdResolver-获取-sessionId\" class=\"headerlink\" title=\"1.4.2 HeaderHttpSessionIdResolver 获取 sessionId\"></a>1.4.2 HeaderHttpSessionIdResolver 获取 sessionId</h4><p>[外链图片转存中…(img-GinHnGhX-1650764287872)]<br>这个获取更直接粗暴，就是根据 <code>headerName</code> 从 <code>header</code> 中取值。</p>\n<p>回到<code>getRequestedSession</code>，剩下的代码中核心的都是和<code>sessionRepository</code>这个有关系，这部分就会涉及到存储部分。不在本篇的分析范围之内，会在存储实现部分来分析。</p>\n<h3 id=\"1-5-HttpSessionWrapper\"><a href=\"#1-5-HttpSessionWrapper\" class=\"headerlink\" title=\"1.5 HttpSessionWrapper\"></a>1.5 HttpSessionWrapper</h3><p>[外链图片转存中…(img-NLT9vKvP-1650764287872)]</p>\n<p>上面的代码中当我们拿到<code>session</code>实例是通常会包装下，那么用到的就是这个<code>HttpSessionWrapper</code>。</p>\n<p><code>HttpSessionWrapper</code> 继承了 <code>HttpSessionAdapter</code>，这个<code>HttpSessionAdapter</code>就是将SpringSession 转换成一个标准<code>HttpSession</code>的适配类。<code>HttpSessionAdapter</code> 实现了标准<code>servlet</code>规范的<code>HttpSession</code>接口。</p>\n<h4 id=\"1-5-1-HttpSessionWrapper\"><a href=\"#1-5-1-HttpSessionWrapper\" class=\"headerlink\" title=\"1.5.1 HttpSessionWrapper\"></a>1.5.1 HttpSessionWrapper</h4><p><code>HttpSessionWrapper</code> 重写了 <code>invalidate </code>方法。从代码来看，调用该方法产生的影响是：</p>\n<ul>\n<li><code>requestedSessionInvalidated</code> 置为<code>true</code>，标识当前 <code>session</code> 失效。</li>\n<li>将当前请求中的<code>session</code>设置为<code>null</code>，那么在请求的后续调用中通过<code>getCurrentSession</code>将拿不到<code>session</code>信息。</li>\n<li>当前缓存的 session 清楚，包括sessionId，session实例等。</li>\n<li>删除存储介质中的session对象。</li>\n</ul>\n<h4 id=\"1-5-2-HttpSessionAdapter\"><a href=\"#1-5-2-HttpSessionAdapter\" class=\"headerlink\" title=\"1.5.2 HttpSessionAdapter\"></a>1.5.2 HttpSessionAdapter</h4><p><code>SpringSession</code>和标准<code>HttpSession</code>的配置器类。这个怎么理解呢，来看下一段代码：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> Object <span class=\"title function_\">getAttribute</span><span class=\"params\">(String name)</span> &#123;</span><br><span class=\"line\">\tcheckState();</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"built_in\">this</span>.session.getAttribute(name);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>对于基于容器本身实现的<code>HttpSession</code>来说，<code>getAttribute</code>的实现也是有容器本身决定。但是这里做了转换之后，<code>getAttribute</code>将会通过<code>SpringSession</code>中实现的方案来获取。其他的<code>API</code>适配也是基于此实现。</p>\n<h3 id=\"SessionCommittingRequestDispatcher\"><a href=\"#SessionCommittingRequestDispatcher\" class=\"headerlink\" title=\"SessionCommittingRequestDispatcher\"></a>SessionCommittingRequestDispatcher</h3><p>实现了 <code>RequestDispatcher</code> 接口。关于<code>RequestDispatcher</code>可以参考这篇文章<a href=\"https://www.cnblogs.com/lulipro/p/7471987.html\">【Servlet】关于RequestDispatcher的原理</a>。<code>SessionCommittingRequestDispatcher</code>对<code>forward</code>的行为并没有改变。<br>对于<code>include</code>则是在<code>include</code>之前提交<code>session</code>。为什么这么做呢？</p>\n<p> 因为<code>include</code>方法使原先的<code>Servlet</code>和转发到的<code>Servlet</code>都可以输出响应信息，即原先的<code>Servlet</code>还可以继续输出响应信息；即请求转发后，原先的<code>Servlet</code>还可以继续输出响应信息，转发到的<code>Servlet</code>对请求做出的响应将并入原先<code>Servlet</code>的响应对象中。 </p>\n<p> 所以这个在<code>include</code>调用之前调用<code>commit</code>，这样可以确保被包含的<code>Servlet</code>程序不能改变响应消息的状态码和响应头。</p>\n<h2 id=\"2-响应重写\"><a href=\"#2-响应重写\" class=\"headerlink\" title=\"2 响应重写\"></a>2 响应重写</h2><p>响应重写的目的是确保在请求提交时能够把session保存起来。来看下<code>SessionRepositoryResponseWrapper</code>类的实现：</p>\n<p>[外链图片转存中…(img-GQr4aCqq-1650764287873)]<br>这里面实现还就是重写<code>onResponseCommitted</code>，也就是上面说的，在请求提交时能够通过这个回调函数将<code>session</code>保存到存储容器中。</p>\n<h3 id=\"2-1-session-提交\"><a href=\"#2-1-session-提交\" class=\"headerlink\" title=\"2.1 session 提交\"></a>2.1 session 提交</h3><p>最后来看下 commitSession</p>\n<p>[外链图片转存中…(img-LfCJyYua-1650764287874)]</p>\n<p>这个过程不会再去存储容器中拿<code>session</code>信息，而是直接从当前请求中拿。如果拿不到，则在回写<code>cookie</code>时会将当前<code>session</code>对应的<code>cookie</code>值设置为空，这样下次请求过来时携带的<code>sessionCookie</code>就是空，这样就会重新触发登陆。</p>\n<p>如果拿到，则清空当前请求中的<code>session</code>信息，然后将<code>session</code>保存到存储容器中，并且将<code>sessionId</code>回写到<code>cookie</code>中。</p>\n<h2 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h2><p>本篇主要对<code>SpringSession</code>中重写<code>Request</code>和<code>Response</code>进行了分析。通过重写<code>Request</code>请求来将<code>session</code>的存储与存储容器关联起来，通过重写<code>Response</code>来处理<code>session</code>提交，将<code>session</code>保存到存储容器中。</p>\n<p>后面我们会继续来分析<code>SpringSession</code>的源码。最近也在学习链路跟踪相关的技术，也准备写一写，有兴趣的同学可以一起讨论。</p>\n","text":"我们知道，HttpServletRequset和HttpServletResponse是Servlet标准所指定的Java语言与Web容器进行交互的接口。接口本...","permalink":"/post/spring/spring-session-rewrite-req-resp","photos":[],"count_time":{"symbolsCount":"7.6k","symbolsTime":"7 mins."},"categories":[{"name":"spring","slug":"spring","count":15,"path":"api/categories/spring.json"}],"tags":[{"name":"session","slug":"session","count":6,"path":"api/tags/session.json"},{"name":"分布式","slug":"分布式","count":6,"path":"api/tags/分布式.json"},{"name":"redis","slug":"redis","count":5,"path":"api/tags/redis.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#1%E3%80%81%E8%AF%B7%E6%B1%82%E9%87%8D%E5%86%99\"><span class=\"toc-text\">1、请求重写</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-1-HttpServletRequset-%E6%89%A9%E5%B1%95%E5%AE%9E%E7%8E%B0\"><span class=\"toc-text\">1.1 HttpServletRequset 扩展实现</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-2-%E6%9E%84%E9%80%A0%E6%96%B9%E6%B3%95\"><span class=\"toc-text\">1.2 构造方法</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-3-getSession-%E6%96%B9%E6%B3%95\"><span class=\"toc-text\">1.3 getSession 方法</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-4-getRequestedSession\"><span class=\"toc-text\">1.4 getRequestedSession</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#1-4-1-CookieHttpSessionIdResolver-%E8%8E%B7%E5%8F%96-sessionId\"><span class=\"toc-text\">1.4.1 CookieHttpSessionIdResolver 获取 sessionId</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#1-4-2-HeaderHttpSessionIdResolver-%E8%8E%B7%E5%8F%96-sessionId\"><span class=\"toc-text\">1.4.2 HeaderHttpSessionIdResolver 获取 sessionId</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-5-HttpSessionWrapper\"><span class=\"toc-text\">1.5 HttpSessionWrapper</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#1-5-1-HttpSessionWrapper\"><span class=\"toc-text\">1.5.1 HttpSessionWrapper</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#1-5-2-HttpSessionAdapter\"><span class=\"toc-text\">1.5.2 HttpSessionAdapter</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#SessionCommittingRequestDispatcher\"><span class=\"toc-text\">SessionCommittingRequestDispatcher</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#2-%E5%93%8D%E5%BA%94%E9%87%8D%E5%86%99\"><span class=\"toc-text\">2 响应重写</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-1-session-%E6%8F%90%E4%BA%A4\"><span class=\"toc-text\">2.1 session 提交</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%B0%8F%E7%BB%93\"><span class=\"toc-text\">小结</span></a></li></ol>","author":{"name":"glmapper","slug":"blog-author","avatar":"https://glmapper-blog.oss-cn-hangzhou.aliyuncs.com/common/favicon.ico","link":"/","description":"开放，开源，分享，共享","socials":{"github":"https://github.com/glmapper","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/2412872703","zhihu":"","csdn":"","juejin":"https://juejin.cn/user/3227821827961806","customs":{"sofastack":{"icon":"https://glmapper-blog.oss-cn-hangzhou.aliyuncs.com/common/sofastack.svg","link":"https://www.sofastack.tech/"}}}},"mapped":true,"hidden":false,"prev_post":{"title":"SpringSession系列-集成SpringBoot","uid":"d6e90c53f3989086d699165ea9667bd3","slug":"spring/spring-session-intergration-boot","date":"2018-12-10T01:16:19.000Z","updated":"2024-07-05T04:09:05.818Z","comments":true,"path":"api/articles/spring/spring-session-intergration-boot.json","keywords":"宋国磊, glmapper, 卫恒, 分享, 开源","cover":[],"text":"springSession是 spring 旗下的一个项目，把 servlet 容器实现的 httpSession替换为springSession，专注于解决s...","permalink":"/post/spring/spring-session-intergration-boot","photos":[],"count_time":{"symbolsCount":"5.4k","symbolsTime":"5 mins."},"categories":[{"name":"spring","slug":"spring","count":15,"path":"api/categories/spring.json"}],"tags":[{"name":"session","slug":"session","count":6,"path":"api/tags/session.json"},{"name":"分布式","slug":"分布式","count":6,"path":"api/tags/分布式.json"},{"name":"redis","slug":"redis","count":5,"path":"api/tags/redis.json"}],"author":{"name":"glmapper","slug":"blog-author","avatar":"https://glmapper-blog.oss-cn-hangzhou.aliyuncs.com/common/favicon.ico","link":"/","description":"开放，开源，分享，共享","socials":{"github":"https://github.com/glmapper","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/2412872703","zhihu":"","csdn":"","juejin":"https://juejin.cn/user/3227821827961806","customs":{"sofastack":{"icon":"https://glmapper-blog.oss-cn-hangzhou.aliyuncs.com/common/sofastack.svg","link":"https://www.sofastack.tech/"}}}}},"next_post":{"title":"SpringSession系列-分布式Session实现方案","uid":"46a9cf97b63fb53bbaac01eae86dbdc2","slug":"spring/spring-session-distribution-solution","date":"2018-12-10T01:14:52.000Z","updated":"2024-07-05T04:09:05.818Z","comments":true,"path":"api/articles/spring/spring-session-distribution-solution.json","keywords":"宋国磊, glmapper, 卫恒, 分享, 开源","cover":[],"text":" https://juejin.cn/post/6844903721206300685 上一篇文章 SpringSession：集成SpringBoot 中介绍...","permalink":"/post/spring/spring-session-distribution-solution","photos":[],"count_time":{"symbolsCount":"3.3k","symbolsTime":"3 mins."},"categories":[{"name":"spring","slug":"spring","count":15,"path":"api/categories/spring.json"}],"tags":[{"name":"session","slug":"session","count":6,"path":"api/tags/session.json"},{"name":"分布式","slug":"分布式","count":6,"path":"api/tags/分布式.json"},{"name":"redis","slug":"redis","count":5,"path":"api/tags/redis.json"}],"author":{"name":"glmapper","slug":"blog-author","avatar":"https://glmapper-blog.oss-cn-hangzhou.aliyuncs.com/common/favicon.ico","link":"/","description":"开放，开源，分享，共享","socials":{"github":"https://github.com/glmapper","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/2412872703","zhihu":"","csdn":"","juejin":"https://juejin.cn/user/3227821827961806","customs":{"sofastack":{"icon":"https://glmapper-blog.oss-cn-hangzhou.aliyuncs.com/common/sofastack.svg","link":"https://www.sofastack.tech/"}}}}}}