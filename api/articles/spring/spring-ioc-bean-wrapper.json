{"title":"Spring 源码系列-BeanWrapper","uid":"670500c2d4f523a72ee6e1b2edadead0","slug":"spring/spring-ioc-bean-wrapper","date":"2018-02-07T02:24:10.000Z","updated":"2024-07-05T04:09:05.817Z","comments":true,"path":"api/articles/spring/spring-ioc-bean-wrapper.json","keywords":null,"cover":null,"content":"<p>BeanWrapper 是 Spring 提供的一个用来操作javaBean 属性的工具，使用它可以直接修改一个对象的属性。</p>\n<span id=\"more\"></span>\n\n<p>对于 bean 属性的操作，大家熟知的主要有下面这些工具类：</p>\n<ul>\n<li>1.Apache 的 BeanUtils 和 PropertyUtils</li>\n<li>2.cglib 的 BeanMap 和 BeanCopier</li>\n<li>3.spring 的 BeanUtils</li>\n</ul>\n<p>Spring 中 BeanWrapper 的主要功能在于：</p>\n<ul>\n<li>1.支持设置嵌套属性</li>\n<li>2.支持属性值的类型转换（设置ConversionService）</li>\n<li>3.提供分析和操作标准JavaBean的操作：获取和设置属性值（单独或批量），获取属性描述符以及查询属性的可读性&#x2F;可写性的能力。</li>\n</ul>\n<p>BeanWrapper 本身是一个接口，它提供了一整套处理 Bean 的方法。源码如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">BeanWrapper</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">ConfigurablePropertyAccessor</span> &#123;</span><br><span class=\"line\">\t <span class=\"comment\">//为数组和集合自动增长指定一个限制。在普通的BeanWrapper上默认是无限的。</span></span><br><span class=\"line\">\t<span class=\"keyword\">void</span> <span class=\"title function_\">setAutoGrowCollectionLimit</span><span class=\"params\">(<span class=\"type\">int</span> autoGrowCollectionLimit)</span>;</span><br><span class=\"line\">\t<span class=\"comment\">//返回数组和集合自动增长的限制。</span></span><br><span class=\"line\">\t<span class=\"type\">int</span> <span class=\"title function_\">getAutoGrowCollectionLimit</span><span class=\"params\">()</span>;</span><br><span class=\"line\">    <span class=\"comment\">//如果有的话,返回由此对象包装的bean实例</span></span><br><span class=\"line\">\tObject <span class=\"title function_\">getWrappedInstance</span><span class=\"params\">()</span>;</span><br><span class=\"line\">\t<span class=\"comment\">//返回被包装的JavaBean对象的类型。</span></span><br><span class=\"line\">\tClass&lt;?&gt; getWrappedClass();</span><br><span class=\"line\">\t<span class=\"comment\">//获取包装对象的PropertyDescriptors（由标准JavaBeans自省确定）。</span></span><br><span class=\"line\">\tPropertyDescriptor[] getPropertyDescriptors();</span><br><span class=\"line\">\t<span class=\"comment\">//获取包装对象的特定属性的属性描述符。</span></span><br><span class=\"line\">\tPropertyDescriptor <span class=\"title function_\">getPropertyDescriptor</span><span class=\"params\">(String propertyName)</span> <span class=\"keyword\">throws</span> InvalidPropertyException;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>上面的 BeanWrapper 是基于4.3.6 版本的，这个接口在 4.1 版本之后略有改动。BeanWrapperImpl 是 BeanWrapper 的实现类，BeanWrapperImpl 的父类是 AbstractNestablePropertyAccessor，通过这个使得 BeanWrapper 具有处理属性的能力。</p>\n<p>下面是一个使用 BeanWrapper 包装对象的例子：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.glmapper.spring.test;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.beans.BeanWrapper;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.beans.PropertyAccessorFactory;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.beans.PropertyValue;</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * BeanWrapper 测试类</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">BeanWrapperTest</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        User user=<span class=\"keyword\">new</span> <span class=\"title class_\">User</span>();</span><br><span class=\"line\">        <span class=\"comment\">//通过PropertyAccessorFactory将user对象封装成BeanWrapper</span></span><br><span class=\"line\">        BeanWrapper bw=PropertyAccessorFactory.forBeanPropertyAccess(user);</span><br><span class=\"line\">        <span class=\"comment\">//方式一：直接对属性值进行设置</span></span><br><span class=\"line\">        bw.setPropertyValue(<span class=\"string\">&quot;userName&quot;</span>, <span class=\"string\">&quot;张三&quot;</span>);</span><br><span class=\"line\">        <span class=\"comment\">//方式二：通过PropertyValue进行设置</span></span><br><span class=\"line\">        PropertyValue pv=<span class=\"keyword\">new</span> <span class=\"title class_\">PropertyValue</span>(<span class=\"string\">&quot;userName&quot;</span>,<span class=\"string\">&quot;李四&quot;</span>);</span><br><span class=\"line\">        bw.setPropertyValue(pv);</span><br><span class=\"line\">        </span><br><span class=\"line\">        </span><br><span class=\"line\">        System.out.println(user.getUserName());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//一个User类</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">User</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String userName;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">getUserName</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> userName;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setUserName</span><span class=\"params\">(String userName)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.userName = userName;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在 Spring 中，有很多 Bean 属性的操作都是通过 BeanWrapper 来完成的，比如常见的 HttpServletBean 的属性设置就是。</p>\n<p><code>注：本文摘自我的博客园文章，进行了一些包装，放在Spring源码系列中。</code><br><a href=\"http://www.cnblogs.com/myadmin/p/7634702.html\">Spring中的 BeanWrapper</a></p>\n","text":"BeanWrapper 是 Spring 提供的一个用来操作javaBean 属性的工具，使用它可以直接修改一个对象的属性。 对于 bean 属性的操作，大家熟...","permalink":"/post/spring/spring-ioc-bean-wrapper","photos":[],"count_time":{"symbolsCount":"2.3k","symbolsTime":"2 mins."},"categories":[{"name":"spring","slug":"spring","count":15,"path":"api/categories/spring.json"}],"tags":[{"name":"spring","slug":"spring","count":11,"path":"api/tags/spring.json"},{"name":"依赖注入","slug":"依赖注入","count":3,"path":"api/tags/依赖注入.json"},{"name":"Ioc","slug":"Ioc","count":3,"path":"api/tags/Ioc.json"},{"name":"BeanWrapper","slug":"BeanWrapper","count":1,"path":"api/tags/BeanWrapper.json"}],"toc":"","author":{"name":"glmapper","slug":"blog-author","avatar":"https://glmapper-blog.oss-cn-hangzhou.aliyuncs.com/common/favicon.ico","link":"/","description":"开放，开源，分享，共享","socials":{"github":"https://github.com/glmapper","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/2412872703","zhihu":"","csdn":"","juejin":"https://juejin.cn/user/3227821827961806","customs":{"sofastack":{"icon":"https://glmapper-blog.oss-cn-hangzhou.aliyuncs.com/common/sofastack.svg","link":"https://www.sofastack.tech/"}}}},"mapped":true,"hidden":false,"prev_post":{"title":"Spring 源码系列-BeanDefinition","uid":"8260d6d08a83b75824bdeb2a713c7b70","slug":"spring/spring-ioc-bean-definition","date":"2018-02-07T02:24:11.000Z","updated":"2024-07-05T04:09:05.816Z","comments":true,"path":"api/articles/spring/spring-ioc-bean-definition.json","keywords":null,"cover":[],"text":"Bean的定义主要由 BeanDefinition 来描述的。作为Spring中用于包装Bean的数据结构，今天就来看看它的面纱下的真容吧 BeanDefini...","permalink":"/post/spring/spring-ioc-bean-definition","photos":[],"count_time":{"symbolsCount":"29k","symbolsTime":"27 mins."},"categories":[{"name":"spring","slug":"spring","count":15,"path":"api/categories/spring.json"}],"tags":[{"name":"spring","slug":"spring","count":11,"path":"api/tags/spring.json"},{"name":"依赖注入","slug":"依赖注入","count":3,"path":"api/tags/依赖注入.json"},{"name":"Ioc","slug":"Ioc","count":3,"path":"api/tags/Ioc.json"},{"name":"BeanDefinition","slug":"BeanDefinition","count":1,"path":"api/tags/BeanDefinition.json"}],"author":{"name":"glmapper","slug":"blog-author","avatar":"https://glmapper-blog.oss-cn-hangzhou.aliyuncs.com/common/favicon.ico","link":"/","description":"开放，开源，分享，共享","socials":{"github":"https://github.com/glmapper","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/2412872703","zhihu":"","csdn":"","juejin":"https://juejin.cn/user/3227821827961806","customs":{"sofastack":{"icon":"https://glmapper-blog.oss-cn-hangzhou.aliyuncs.com/common/sofastack.svg","link":"https://www.sofastack.tech/"}}}}},"next_post":{"title":"一个朋友圈泛型问题引发的“案子”","uid":"d76bc5d4a8a8d04159939df448b6792a","slug":"java/java-base-generic-reflect-usage","date":"2017-11-26T05:11:42.000Z","updated":"2024-07-05T04:09:05.763Z","comments":true,"path":"api/articles/java/java-base-generic-reflect-usage.json","keywords":null,"cover":null,"text":"昨天朋友圈问了一个问题： 对于下面的 list，何如在 list 添加一个 Integer 型整数？ 1ArrayList<String> list = new...","permalink":"/post/java/java-base-generic-reflect-usage","photos":[],"count_time":{"symbolsCount":"1.8k","symbolsTime":"2 mins."},"categories":[{"name":"JAVA","slug":"JAVA","count":12,"path":"api/categories/JAVA.json"}],"tags":[{"name":"泛型","slug":"泛型","count":2,"path":"api/tags/泛型.json"},{"name":"java","slug":"java","count":5,"path":"api/tags/java.json"},{"name":"反射","slug":"反射","count":1,"path":"api/tags/反射.json"}],"author":{"name":"glmapper","slug":"blog-author","avatar":"https://glmapper-blog.oss-cn-hangzhou.aliyuncs.com/common/favicon.ico","link":"/","description":"开放，开源，分享，共享","socials":{"github":"https://github.com/glmapper","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/2412872703","zhihu":"","csdn":"","juejin":"https://juejin.cn/user/3227821827961806","customs":{"sofastack":{"icon":"https://glmapper-blog.oss-cn-hangzhou.aliyuncs.com/common/sofastack.svg","link":"https://www.sofastack.tech/"}}}}}}