{"title":"聊一聊 Spring 中的扩展机制之 NamespaceHandler","uid":"23a4ce7fdfa388085850b04ca0698cfd","slug":"spring/spring-extention-namespace-handler","date":"2018-08-26T15:53:52.000Z","updated":"2024-07-05T04:09:05.816Z","comments":true,"path":"api/articles/spring/spring-extention-namespace-handler.json","keywords":null,"cover":[],"content":"<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>原文：<a href=\"https://juejin.cn/post/6844903665262657544\">https://juejin.cn/post/6844903665262657544</a></p></blockquote>\n<p>前一篇 <a href=\"/2018/08/19/spring/spring-extention-listener-awre\">聊一聊 Spring 中的扩展机制（一）</a> 中聊到了<code>ApplicationListener</code>、<code>ApplicationContextAware</code>、<code>BeanFactoryAware</code>三种机制。本篇将介绍 <code>NamespaceHandler</code> 的扩展使用。</p>\n<p>相信很多小伙伴对于这几个类都不陌生，基本基于<code>java</code>实现的<code>RPC</code>框架都会使用，比如 <a href=\"https://github.com/apache/incubator-dubbo\">Dubbo</a> , <a href=\"https://github.com/alipay/sofa-rpc\">SOFARpc</a> 等。本文先从几个小<code>demo</code>入手，了解下基本的概念和编程流程，然后分析下 <code>SOFARpc</code> 中是如何使用的。</p>\n<span id=\"more\"></span>\n\n<h2 id=\"NamespaceHandler\"><a href=\"#NamespaceHandler\" class=\"headerlink\" title=\"NamespaceHandler\"></a>NamespaceHandler</h2><p><code>NamespaceHandler</code> 是 <code>Spring</code> 提供的 命名空间处理器。下面这张图中，除了乱入的本篇 <code>demo</code> 中涉及到的 <code>BridgeNameSpaceHandler</code> 之外，其他均为 <code>Spring</code> 自身提供的。</p>\n<p><img src=\"https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2018/8/26/1657680c24505dbe~tplv-t2oaga2asx-image.image\"></p>\n<p>因为这里我只引入了 <code>bean</code> 和 <code>context</code> 依赖，所以这也仅仅是一部分。图中我们常用的应该算是 <code>AopNamespaceHandler</code>。</p>\n<p>我们使用基于<code>xml</code>的<code>spring</code>配置时，可能需要配置如<code>&lt;aop:config /&gt;</code>这样的标签，在配置这个标签之前，通常我们需要引入这个<code>aop</code>所在的命名空间：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=<span class=\"string\">&quot;1.0&quot;</span> encoding=<span class=\"string\">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">beans</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\"> <span class=\"attr\">xmlns:xsi</span>=<span class=\"string\">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\"> <span class=\"attr\">xmlns:aop</span>=<span class=\"string\">&quot;http://www.springframework.org/schema/aop&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\"> <span class=\"attr\">xmlns:context</span>=<span class=\"string\">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\"> <span class=\"attr\">xsi:schemaLocation</span>=<span class=\"string\">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"tag\"> http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"tag\">http://www.springframework.org/schema/aop</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"tag\">http://www.springframework.org/schema/aop/spring-aop.xsd</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"tag\">http://www.springframework.org/schema/context</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"tag\">http://www.springframework.org/schema/context/spring-context.xsd&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>关于AOP 可以了解下 <a href=\"https://juejin.im/post/6844903623101513735\">聊一聊 AOP ：表现形式与基础概念</a>，这里不过多解释，下面就按照 <a href=\"https://docs.spring.io/spring-framework/docs/current/spring-framework-reference/core.html#xml-custom\">官方文档的流程</a> 来写一个自定义<code>xml</code>，最终效果如下：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bridge:application</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;bridgeTestApplication&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">                    <span class=\"attr\">name</span>=<span class=\"string\">&quot;bridgeTestApplication&quot;</span>  </span></span><br><span class=\"line\"><span class=\"tag\">                    <span class=\"attr\">version</span>=<span class=\"string\">&quot;1.0&quot;</span> </span></span><br><span class=\"line\"><span class=\"tag\">                    <span class=\"attr\">organization</span>=<span class=\"string\">&quot;bridge.glmapper.com&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">                    <span class=\"attr\">owner</span>=<span class=\"string\">&quot;leishu@glmapper&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"1、定义-xsd-文件\"><a href=\"#1、定义-xsd-文件\" class=\"headerlink\" title=\"1、定义 xsd 文件\"></a>1、定义 xsd 文件</h3><p>关于 <code>xsd</code> 文件的语法规则不在本篇范围之内，有兴趣的同学可以自行<code>google</code>。<br>下面这个文件很简单，定义的<code>element</code> name 为<code>application</code>，对应于 <code>bridge:application</code>中的<code>application</code>。<code>attribute</code>就是上面效果展示中对应的几个属性名。</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=<span class=\"string\">&quot;1.0&quot;</span> encoding=<span class=\"string\">&quot;UTF-8&quot;</span> standalone=<span class=\"string\">&quot;no&quot;</span>?&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">xsd:schema</span> <span class=\"attr\">xmlns:xsd</span>=<span class=\"string\">&quot;http://www.w3.org/2001/XMLSchema&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">xmlns:beans</span>=<span class=\"string\">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">xmlns:tool</span>=<span class=\"string\">&quot;http://www.springframework.org/schema/tool&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">xmlns</span>=<span class=\"string\">&quot;http://bridge.glmapper.com/schema/bridge&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">targetNamespace</span>=<span class=\"string\">&quot;http://bridge.glmapper.com/schema/bridge&quot;</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">xsd:import</span> <span class=\"attr\">namespace</span>=<span class=\"string\">&quot;http://www.springframework.org/schema/beans&quot;</span>/&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">xsd:complexType</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;applicationType&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">xsd:attribute</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;id&quot;</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;xsd:ID&quot;</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">xsd:attribute</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;name&quot;</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;xsd:string&quot;</span> <span class=\"attr\">use</span>=<span class=\"string\">&quot;required&quot;</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">xsd:attribute</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;version&quot;</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;xsd:string&quot;</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">xsd:attribute</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;owner&quot;</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;xsd:string&quot;</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">xsd:attribute</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;organization&quot;</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;xsd:string&quot;</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">xsd:complexType</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">xsd:element</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;application&quot;</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;applicationType&quot;</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">xsd:schema</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"2、编写-NamespaceHandler\"><a href=\"#2、编写-NamespaceHandler\" class=\"headerlink\" title=\"2、编写 NamespaceHandler\"></a>2、编写 NamespaceHandler</h3><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>In addition to the schema, we need a NamespaceHandler that will parse all elements of this specific namespace Spring encounters while parsing configuration files.</p></blockquote>\n<p>用编写的这个 <code>NamespaceHandler</code> 来解析配置文件。</p>\n<p>具体说来<code>NamespaceHandler</code>会根据<code>schema</code>和节点名找到某个<code>BeanDefinitionParser</code>，然后由<code>BeanDefinitionParser</code>完成具体的解析工作。</p>\n<p><code>Spring</code>提供了默认实现类<code>NamespaceHandlerSupport</code>和<code>AbstractSingleBeanDefinitionParser</code>，最简单的方式就是去继承这两个类。</p>\n<p>这里通过继承 <code>NamespaceHandlerSupport</code> 这个抽象类来完成。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">BridgeNamespaceHandler</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">NamespaceHandlerSupport</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">init</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        registerBeanDefinitionParser(<span class=\"string\">&quot;application&quot;</span>, </span><br><span class=\"line\">        <span class=\"keyword\">new</span> <span class=\"title class_\">ApplicationBeanDefinitionParser</span>());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这里实际上只是注册了一个解析器，具体的 <code>BeanDefinitionParser</code> 才是将 <code>XML</code>元素映射到特定<code>bean</code>的。</p>\n<h3 id=\"3、编写-BeanDefinitionParser\"><a href=\"#3、编写-BeanDefinitionParser\" class=\"headerlink\" title=\"3、编写 BeanDefinitionParser\"></a>3、编写 BeanDefinitionParser</h3><p>这里直接通过实现<code>BeanDefinitionParser</code>接口的方式定义我们的<code>BeanDefinitionParser</code>实现类。关于<code>AbstractSingleBeanDefinitionParser</code> 的使用在 <code>SPFARpc</code> 中会涉及到。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ApplicationBeanDefinitionParser</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">BeanDefinitionParser</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> BeanDefinition <span class=\"title function_\">parse</span><span class=\"params\">(Element element, ParserContext parserContext)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">//beanDefinition</span></span><br><span class=\"line\">        <span class=\"type\">RootBeanDefinition</span> <span class=\"variable\">beanDefinition</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">RootBeanDefinition</span>();</span><br><span class=\"line\">        beanDefinition.setBeanClass(ApplicationConfig.class);</span><br><span class=\"line\">        beanDefinition.setLazyInit(<span class=\"literal\">false</span>);</span><br><span class=\"line\">        <span class=\"comment\">//解析id</span></span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">id</span> <span class=\"operator\">=</span> element.getAttribute(<span class=\"string\">&quot;id&quot;</span>);</span><br><span class=\"line\">        beanDefinition.getPropertyValues().add(<span class=\"string\">&quot;id&quot;</span>, id);</span><br><span class=\"line\">        <span class=\"comment\">//解析name</span></span><br><span class=\"line\">        beanDefinition.getPropertyValues().add(<span class=\"string\">&quot;name&quot;</span>,</span><br><span class=\"line\">        element.getAttribute(<span class=\"string\">&quot;name&quot;</span>));</span><br><span class=\"line\">        <span class=\"comment\">//解析version</span></span><br><span class=\"line\">        beanDefinition.getPropertyValues().add(<span class=\"string\">&quot;version&quot;</span>,</span><br><span class=\"line\">        element.getAttribute(<span class=\"string\">&quot;version&quot;</span>));</span><br><span class=\"line\">        <span class=\"comment\">//owner</span></span><br><span class=\"line\">        beanDefinition.getPropertyValues().add(<span class=\"string\">&quot;owner&quot;</span>,</span><br><span class=\"line\">        element.getAttribute(<span class=\"string\">&quot;owner&quot;</span>));</span><br><span class=\"line\">        <span class=\"comment\">//organization</span></span><br><span class=\"line\">        beanDefinition.getPropertyValues().add(<span class=\"string\">&quot;organization&quot;</span>,</span><br><span class=\"line\">        element.getAttribute(<span class=\"string\">&quot;organization&quot;</span>));</span><br><span class=\"line\">    </span><br><span class=\"line\">        parserContext.getRegistry().registerBeanDefinition(id, beanDefinition);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> beanDefinition;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这里我们需要了解的是开始解析自定义标签的时候，是通过<code>BeanDefinitionParserDelegate-&gt;parseCustomElement</code>方法来处理的，如下图所示：</p>\n<p><img src=\"https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2018/8/26/16576a988554f2e9~tplv-t2oaga2asx-image.image\"></p>\n<p>通过<code>ele</code>元素拿到当前<code>namespaceUri</code>，也就是在<code>xsd</code>中定义的命名空间，接着委托给 <code>DefaultNamespaceResolver</code> 得到具体的<code>handler</code>（<code>BridgenamspaceHandler</code>） ,<br>然后执行<code>parse</code> 解析。</p>\n<h3 id=\"4、配置-spring-handlers-和-spring-schmas\"><a href=\"#4、配置-spring-handlers-和-spring-schmas\" class=\"headerlink\" title=\"4、配置 spring.handlers 和 spring.schmas\"></a>4、配置 spring.handlers 和 spring.schmas</h3><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http\\://bridge.glmapper.com/schema/bridge=</span><br><span class=\"line\">com.glmapper.extention.namespacehandler.BridgeNamespaceHandler</span><br><span class=\"line\"></span><br><span class=\"line\">http\\://bridge.glmapper.com/schema/bridge.xsd=META-INF/bridge.xsd</span><br></pre></td></tr></table></figure>\n\n<p>配置这个其实是为了让<code>Spring</code>在解析<code>xml</code>的时候能够感知到我们的自定义元素，我们需要把<code>NamespaceHandler</code>和<code>xsd</code>文件放到位于META-INF目录下的<code>spring.handlers</code> 和 <code>spring.schmas</code>文件中。这样就可以在<code>spring</code>配置文件中使用我们自定义的标签了。如下：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=<span class=\"string\">&quot;1.0&quot;</span> encoding=<span class=\"string\">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">beans</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">       <span class=\"attr\">xmlns:bridge</span>=<span class=\"string\">&quot;http://bridge.glmapper.com/schema/bridge&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">       <span class=\"attr\">xmlns:xsi</span>=<span class=\"string\">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">       <span class=\"attr\">xsi:schemaLocation</span>=<span class=\"string\">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"tag\">       http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"tag\">       http://bridge.glmapper.com/schema/bridge</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"tag\">       http://bridge.glmapper.com/schema/bridge.xsd&quot;</span>&gt;</span></span><br><span class=\"line\">       </span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">bridge:application</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;bridgeTestApplication&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">                    <span class=\"attr\">name</span>=<span class=\"string\">&quot;bridgeTestApplication&quot;</span>  </span></span><br><span class=\"line\"><span class=\"tag\">                    <span class=\"attr\">version</span>=<span class=\"string\">&quot;1.0&quot;</span> </span></span><br><span class=\"line\"><span class=\"tag\">                    <span class=\"attr\">organization</span>=<span class=\"string\">&quot;bridge.glmapper.com&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">                    <span class=\"attr\">owner</span>=<span class=\"string\">&quot;leishu@glmapper&quot;</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>验证下从容器中获取我们的<code>bean</code>：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">ApplicationContext</span> <span class=\"variable\">applicationContext</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span></span><br><span class=\"line\">    <span class=\"title class_\">ClassPathXmlApplicationContext</span>(<span class=\"string\">&quot;classpath:bean.xml&quot;</span>);</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"type\">ApplicationConfig</span> <span class=\"variable\">applicationConfig</span> <span class=\"operator\">=</span> (ApplicationConfig)</span><br><span class=\"line\">    applicationContext.getBean(<span class=\"string\">&quot;bridgeTestApplication&quot;</span>);</span><br><span class=\"line\">    </span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;applicationConfig = &quot;</span>+applicationConfig);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>输出示例：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">applicationConfig = ApplicationConfig &#123;</span><br><span class=\"line\">    id=bridgeTestApplication, </span><br><span class=\"line\">    name=&#x27;bridgeTestApplication&#x27;, </span><br><span class=\"line\">    version=&#x27;1.0&#x27;, </span><br><span class=\"line\">    owner=&#x27;leishu@glmapper&#x27;, </span><br><span class=\"line\">    organization=&#x27;bridge.glmapper.com&#x27;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>整体来看，如果我们要实现自己的 <code>xml</code> 标签，仅需完成以下几步即可：</p>\n<ul>\n<li>1、定义 xsd 文件</li>\n<li>2、编写 NamespaceHandler </li>\n<li>3、编写 BeanDefinitionParser</li>\n<li>4、配置 spring.handlers 和 spring.schmas</li>\n</ul>\n<h2 id=\"SOFARpc-中使用分析\"><a href=\"#SOFARpc-中使用分析\" class=\"headerlink\" title=\"SOFARpc 中使用分析\"></a>SOFARpc 中使用分析</h2><p><code>SOFARpc</code> 中的 <code>rpc.xsd</code> 文件是集成在 <code>sofaboot.xsd</code> 文件中的，详细可见：<a href=\"https://github.com/alipay/sofa-boot\">sofa-boot</a></p>\n<p><img src=\"https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2018/8/26/16576c06a6b70603~tplv-t2oaga2asx-image.image\"></p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p><code>xsd</code> 文件这里不贴了，有点长 </p></blockquote>\n<h3 id=\"spring-handlers-和-spring-schmas\"><a href=\"#spring-handlers-和-spring-schmas\" class=\"headerlink\" title=\"spring.handlers 和 spring.schmas\"></a>spring.handlers 和 spring.schmas</h3><p>先看下 <code>spring.handlers</code> 和 <code>spring.schmas</code> 配置：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http\\:<span class=\"comment\">//sofastack.io/schema/sofaboot=</span></span><br><span class=\"line\">com.alipay.sofa.infra.config.spring.namespace.handler.SofaBootNamespaceHandler</span><br><span class=\"line\"></span><br><span class=\"line\">http\\:<span class=\"comment\">//sofastack.io/schema/sofaboot.xsd=</span></span><br><span class=\"line\">META-INF/com/alipay/sofa/infra/config/spring/namespace/schema/sofaboot.xsd</span><br><span class=\"line\"></span><br><span class=\"line\">http\\:<span class=\"comment\">//sofastack.io/schema/rpc.xsd=</span></span><br><span class=\"line\">META-INF/com/alipay/sofa/infra/config/spring/namespace/schema/rpc.xsd</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>从 <code>spring.handlers</code>找到 <code>NamespaceHandler</code> : <code>SofaBootNamespaceHandler</code>。</p>\n<h3 id=\"SofaBootNamespaceHandler\"><a href=\"#SofaBootNamespaceHandler\" class=\"headerlink\" title=\"SofaBootNamespaceHandler\"></a>SofaBootNamespaceHandler</h3><p>源码如下，这里看出来，并不是像上面我们自己写的那种方式那样，会有一个 <code>BeanDefinitionParser</code>。这里其实设计的很巧妙，通过<code>spi</code>的方式来载入具体的<code>BeanDefinitionParser</code>。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">SofaBootNamespaceHandler</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">NamespaceHandlerSupport</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">init</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        ServiceLoader&lt;SofaBootTagNameSupport&gt; serviceLoaderSofaBoot =</span><br><span class=\"line\">        ServiceLoader.load(SofaBootTagNameSupport.class);</span><br><span class=\"line\">        <span class=\"comment\">//SOFABoot</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (SofaBootTagNameSupport tagNameSupport : serviceLoaderSofaBoot) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">this</span>.registerTagParser(tagNameSupport);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title function_\">registerTagParser</span><span class=\"params\">(SofaBootTagNameSupport tagNameSupport)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!(tagNameSupport <span class=\"keyword\">instanceof</span> BeanDefinitionParser)) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// log</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">tagName</span> <span class=\"operator\">=</span> tagNameSupport.supportTagName();</span><br><span class=\"line\">        registerBeanDefinitionParser(tagName, (BeanDefinitionParser)</span><br><span class=\"line\">        tagNameSupport);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这里可以看出有 <code>ReferenceDefinitionParser</code> 和 <code>ServiceDefinitionParser</code> 两个解析类，分别对应服务引用和服务暴露。</p>\n<p><img src=\"https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2018/8/26/16576cfad71411d6~tplv-t2oaga2asx-image.image\"></p>\n<p>下面以<code>ReferenceDefinitionParser</code>为例，先看下它的类图：</p>\n<p><img src=\"https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2018/8/26/16576da5390f9128~tplv-t2oaga2asx-image.image\"></p>\n<p>解析工作都是在 <code>AbstractContractDefinitionParser</code> 类中完成， <code>ReferenceDefinitionParser</code> 自己只是做了一些特殊处理【jvm-first，jvm服务】。</p>\n<h2 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h2><p>本篇通过 <code>NamespaceHandler</code> 了解了如何去编写我们自定义的xml标签，从<code>NamespaceHandler</code>的角度可以很好的理解一些 <code>RPC</code> 框架中最基础的基于<code>xml</code> 方式的服务引用和暴露的实现思路。另外通过分析 <code>SOFARpc</code> ，也了解了在实际的工程组件中对于<code>NamespaceHandler</code>的扩展使用。</p>\n<p>本文代码：<a href=\"https://github.com/glmapper/glmapper-spring-extention\">glmapper-spring-extention</a></p>\n","text":" 原文：https://juejin.cn/post/6844903665262657544 前一篇 聊一聊 Spring 中的扩展机制（一） 中聊到了Appl...","permalink":"/post/spring/spring-extention-namespace-handler","photos":[],"count_time":{"symbolsCount":"9.3k","symbolsTime":"8 mins."},"categories":[{"name":"spring","slug":"spring","count":15,"path":"api/categories/spring.json"}],"tags":[{"name":"spring","slug":"spring","count":11,"path":"api/tags/spring.json"},{"name":"spring 扩展机制","slug":"spring-扩展机制","count":2,"path":"api/tags/spring-扩展机制.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#NamespaceHandler\"><span class=\"toc-text\">NamespaceHandler</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1%E3%80%81%E5%AE%9A%E4%B9%89-xsd-%E6%96%87%E4%BB%B6\"><span class=\"toc-text\">1、定义 xsd 文件</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2%E3%80%81%E7%BC%96%E5%86%99-NamespaceHandler\"><span class=\"toc-text\">2、编写 NamespaceHandler</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3%E3%80%81%E7%BC%96%E5%86%99-BeanDefinitionParser\"><span class=\"toc-text\">3、编写 BeanDefinitionParser</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#4%E3%80%81%E9%85%8D%E7%BD%AE-spring-handlers-%E5%92%8C-spring-schmas\"><span class=\"toc-text\">4、配置 spring.handlers 和 spring.schmas</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#SOFARpc-%E4%B8%AD%E4%BD%BF%E7%94%A8%E5%88%86%E6%9E%90\"><span class=\"toc-text\">SOFARpc 中使用分析</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#spring-handlers-%E5%92%8C-spring-schmas\"><span class=\"toc-text\">spring.handlers 和 spring.schmas</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#SofaBootNamespaceHandler\"><span class=\"toc-text\">SofaBootNamespaceHandler</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%B0%8F%E7%BB%93\"><span class=\"toc-text\">小结</span></a></li></ol>","author":{"name":"glmapper","slug":"blog-author","avatar":"https://glmapper-blog.oss-cn-hangzhou.aliyuncs.com/common/favicon.ico","link":"/","description":"开放，开源，分享，共享","socials":{"github":"https://github.com/glmapper","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/2412872703","zhihu":"","csdn":"","juejin":"https://juejin.cn/user/3227821827961806","customs":{"sofastack":{"icon":"https://glmapper-blog.oss-cn-hangzhou.aliyuncs.com/common/sofastack.svg","link":"https://www.sofastack.tech/"}}}},"mapped":true,"hidden":false,"prev_post":{"title":"聊一聊 RestTemplate","uid":"081a602eba3d6e39cf0949a624156da5","slug":"middleware/middleware-http-resttemplate","date":"2018-10-30T14:20:07.000Z","updated":"2024-07-05T04:09:05.788Z","comments":true,"path":"api/articles/middleware/middleware-http-resttemplate.json","keywords":null,"cover":[],"text":" 原文：https://juejin.cn/post/6844903695981740046 从 3.0 版本开始，Spring 提供了 RestTemplat...","permalink":"/post/middleware/middleware-http-resttemplate","photos":[],"count_time":{"symbolsCount":"4.5k","symbolsTime":"4 mins."},"categories":[{"name":"Middleware","slug":"Middleware","count":11,"path":"api/categories/Middleware.json"}],"tags":[{"name":"spring","slug":"spring","count":11,"path":"api/tags/spring.json"},{"name":"RestTemplate","slug":"RestTemplate","count":1,"path":"api/tags/RestTemplate.json"},{"name":"http","slug":"http","count":3,"path":"api/tags/http.json"}],"author":{"name":"glmapper","slug":"blog-author","avatar":"https://glmapper-blog.oss-cn-hangzhou.aliyuncs.com/common/favicon.ico","link":"/","description":"开放，开源，分享，共享","socials":{"github":"https://github.com/glmapper","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/2412872703","zhihu":"","csdn":"","juejin":"https://juejin.cn/user/3227821827961806","customs":{"sofastack":{"icon":"https://glmapper-blog.oss-cn-hangzhou.aliyuncs.com/common/sofastack.svg","link":"https://www.sofastack.tech/"}}}}},"next_post":{"title":"聊一聊 Spring 中的扩展机制之 Listener & Awre","uid":"fff7a6707fa538995f040f2ec6d86c43","slug":"spring/spring-extention-listener-awre","date":"2018-08-19T15:14:24.000Z","updated":"2024-07-05T04:09:05.816Z","comments":true,"path":"api/articles/spring/spring-extention-listener-awre.json","keywords":null,"cover":null,"text":" 之前 Spring 源码系列文章中大多是底层源码的分析，通过源码可以让我们能够清晰的了解 Spring 到底是什么，而不是停留于表面的认知。比如当我们要使用 ...","permalink":"/post/spring/spring-extention-listener-awre","photos":[],"count_time":{"symbolsCount":"12k","symbolsTime":"11 mins."},"categories":[{"name":"spring","slug":"spring","count":15,"path":"api/categories/spring.json"}],"tags":[{"name":"spring","slug":"spring","count":11,"path":"api/tags/spring.json"},{"name":"spring 扩展机制","slug":"spring-扩展机制","count":2,"path":"api/tags/spring-扩展机制.json"}],"author":{"name":"glmapper","slug":"blog-author","avatar":"https://glmapper-blog.oss-cn-hangzhou.aliyuncs.com/common/favicon.ico","link":"/","description":"开放，开源，分享，共享","socials":{"github":"https://github.com/glmapper","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/2412872703","zhihu":"","csdn":"","juejin":"https://juejin.cn/user/3227821827961806","customs":{"sofastack":{"icon":"https://glmapper-blog.oss-cn-hangzhou.aliyuncs.com/common/sofastack.svg","link":"https://www.sofastack.tech/"}}}}}}