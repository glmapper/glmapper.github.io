{"title":"SpringSession系列-集成SpringBoot","uid":"d6e90c53f3989086d699165ea9667bd3","slug":"spring/spring-session-intergration-boot","date":"2018-12-10T01:16:19.000Z","updated":"2024-07-05T04:09:05.818Z","comments":true,"path":"api/articles/spring/spring-session-intergration-boot.json","keywords":null,"cover":[],"content":"<p><code>springSession</code>是 <code>spring</code> 旗下的一个项目，把 <code>servlet</code> 容器实现的 <code>httpSession</code>替换为<code>springSession</code>，专注于解决<code>session</code>管理问题。可简单快速且无缝的集成到我们的应用中。本文通过一个案例，使用<code>SpringBoot</code>来集成 <code>SpringSession</code>，并且使用<code>Redis</code>作为存储来实践下<code>SpringSession</code> 的使用。</p>\n<span id=\"more\"></span>\n\n<h2 id=\"环境准备\"><a href=\"#环境准备\" class=\"headerlink\" title=\"环境准备\"></a>环境准备</h2><p>因为需要使用<code>Redis</code>作为底层<code>Session</code>的存储介质，实现分布式<code>session</code>，因此需要安装<code>Redis</code>。</p>\n<h3 id=\"Redis-安装\"><a href=\"#Redis-安装\" class=\"headerlink\" title=\"Redis 安装\"></a>Redis 安装</h3><p>1、从<a href=\"https://redis.io/\">官网</a>下载最新版的<code>Redis</code></p>\n<p><img src=\"https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2018/11/3/166d858f1ef7e45c~tplv-t2oaga2asx-image.image\"></p>\n<p>2、解压</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tar zxvf redis-5.0.0.tar.gz</span><br></pre></td></tr></table></figure>\n<p>3、编译测试</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo make test</span><br></pre></td></tr></table></figure>\n<p>4、编译安装</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo make install</span><br></pre></td></tr></table></figure>\n\n<p>5、安装问题</p>\n<p>如果您之前安装过，重复安装且没有卸载干净的话，会报下面的错</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">make[1]: *** [test] Error 1 </span><br><span class=\"line\">make: *** [test] Error 2</span><br></pre></td></tr></table></figure>\n<p>解决这个错误，执行下面的语句即可： </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">make distclean </span><br><span class=\"line\">make </span><br><span class=\"line\">make test</span><br></pre></td></tr></table></figure>\n<p>正确安装姿势如下：</p>\n<p><img src=\"https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2018/11/3/166d85fca26e9d51~tplv-t2oaga2asx-image.image\"></p>\n<p>6、启动<code>Redis</code><br>在您的<code>Redis</code>安装目录下，有 <code>redis-server</code> ，执行该脚本命令：</p>\n<p><img src=\"https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2018/11/3/166d861951a63478~tplv-t2oaga2asx-image.image\"></p>\n<p>OK，到这里，<code>Redis</code>的安装工作完毕。</p>\n<h3 id=\"SpringBoot-工程准备\"><a href=\"#SpringBoot-工程准备\" class=\"headerlink\" title=\"SpringBoot 工程准备\"></a>SpringBoot 工程准备</h3><p>这里我们直接通过<code>Idea</code>来构建我们的<code>SpringBoot</code>工程。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">File-&gt;New-&gt;Project : Spring Initializr</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2018/11/3/166d866832463dfc~tplv-t2oaga2asx-image.image\"></p>\n<p>OK，<code>SpringBoot</code> 工程准备完毕，这里选择创建的是一个<code>Web</code>工程。</p>\n<h2 id=\"集成\"><a href=\"#集成\" class=\"headerlink\" title=\"集成\"></a>集成</h2><p>集成主要是依赖引入，这里需要<code>redis</code>和<code>session</code>的依赖</p>\n<h3 id=\"依赖引入\"><a href=\"#依赖引入\" class=\"headerlink\" title=\"依赖引入\"></a>依赖引入</h3><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!--redis 依赖--&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!--sessions 依赖--&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.session<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-session-data-redis<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"配置application-properties\"><a href=\"#配置application-properties\" class=\"headerlink\" title=\"配置application.properties\"></a>配置application.properties</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#服务端口</span><br><span class=\"line\">server.port=8080</span><br><span class=\"line\">#redi主机地址</span><br><span class=\"line\">spring.redis.host=localhost</span><br><span class=\"line\">#redis服务端口</span><br><span class=\"line\">spring.redis.port=6379</span><br><span class=\"line\"></span><br><span class=\"line\"># spring session使用存储类型，spirngboot默认就是使用redis方式，如果不想用可以填none。</span><br><span class=\"line\">spring.session.store-type=redis</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"在启动类中加入-EnableRedisHttpSession-注解\"><a href=\"#在启动类中加入-EnableRedisHttpSession-注解\" class=\"headerlink\" title=\"在启动类中加入@EnableRedisHttpSession  注解\"></a>在启动类中加入@EnableRedisHttpSession  注解</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@SpringBootApplication</span></span><br><span class=\"line\"><span class=\"meta\">@EnableRedisHttpSession</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">SpringBootSessionApplication</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        SpringApplication.run(SpringBootSessionApplication.class, args);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"测试\"><a href=\"#测试\" class=\"headerlink\" title=\"测试\"></a>测试</h3><p>先来编写一个<code>Controller</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * SessionController</span></span><br><span class=\"line\"><span class=\"comment\"> * </span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span>: glmapper@leishu</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@since</span>: 18/11/3 下午3:16</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@version</span> 1.0</span></span><br><span class=\"line\"><span class=\"comment\"> **/</span></span><br><span class=\"line\"><span class=\"meta\">@Controller</span></span><br><span class=\"line\"><span class=\"meta\">@RequestMapping(value = &quot;/&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">SessionController</span> &#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"meta\">@ResponseBody</span></span><br><span class=\"line\">    <span class=\"meta\">@RequestMapping(value = &quot;/session&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Map&lt;String, Object&gt; <span class=\"title function_\">getSession</span><span class=\"params\">(HttpServletRequest request)</span> &#123;</span><br><span class=\"line\">        request.getSession().setAttribute(<span class=\"string\">&quot;userName&quot;</span>, <span class=\"string\">&quot;glmapper&quot;</span>);</span><br><span class=\"line\">        Map&lt;String, Object&gt; map = <span class=\"keyword\">new</span> <span class=\"title class_\">HashMap</span>&lt;&gt;();</span><br><span class=\"line\">        map.put(<span class=\"string\">&quot;sessionId&quot;</span>, request.getSession().getId());</span><br><span class=\"line\">        <span class=\"keyword\">return</span> map;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"meta\">@ResponseBody</span></span><br><span class=\"line\">    <span class=\"meta\">@RequestMapping(value = &quot;/get&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">get</span><span class=\"params\">(HttpServletRequest request)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">userName</span> <span class=\"operator\">=</span> (String) request.getSession().getAttribute(<span class=\"string\">&quot;userName&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> userName;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h3 id=\"测试结果\"><a href=\"#测试结果\" class=\"headerlink\" title=\"测试结果\"></a>测试结果</h3><p>启动<code>SpringBoot</code> 工程；然后浏览器中输入地址 <a href=\"http://localhost:8080/session%EF%BC%9B\">http://localhost:8080/session；</a></p>\n<p><img src=\"https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2018/11/3/166d8710aa02ae65~tplv-t2oaga2asx-image.image\"><br>这里对应执行的是我们上面<code>Controller</code>中的第一个方法<code>getSession</code>，这个方法向<code>session</code>中设置了一个值。</p>\n<p>下面我们执行：<a href=\"http://localhost:8080/get\">http://localhost:8080/get</a>  这里是从<code>session</code>中取值:</p>\n<p><img src=\"https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2018/11/3/166d8745a083485e~tplv-t2oaga2asx-image.image\"></p>\n<p>到此，<code>SpringBoot</code> 整合 <code>SpringSession</code> 的过程就完成了。这里我们只是引入了依赖，然后做了简单的配置，那么我们的请求是如何被 <code>SpringSession</code> 处理的呢？从我们一贯的认知来看，对于基于<code>Servlet</code>规范的容器（<code>SpringBoot</code> 使用的是嵌入式<code>Tomcat</code>）的应用，请求最先被处理的是<code>Filter</code>。我们在基于<code>Spring+SpringMvc</code>这套技术栈开发时,如果我们需要做权限管理，通过会基于<code>Filter</code>或者拦截器。但是这里貌似我们什么也没做，但是请求确实被<code>SpringSession</code>处理了。OK，我们来扒一扒。</p>\n<h2 id=\"SpringSession-是如何处理请求的？\"><a href=\"#SpringSession-是如何处理请求的？\" class=\"headerlink\" title=\"SpringSession 是如何处理请求的？\"></a>SpringSession 是如何处理请求的？</h2><p><img src=\"https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2018/11/3/166d87c15503e1c0~tplv-t2oaga2asx-image.image\"><br>上面这张截图想必大家都不陌生，是<code>SpringBoot</code>的启动日志；上图红色框内的是当前应用注册是<code>Filter</code>信息，从这里可以看到有个和 <code>session</code> 有关的<code>Filter：sessionRepositoryFilter</code>；这个<code>bean</code>对应的类是：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">org.springframework.boot.autoconfigure.session.SessionRepositoryFilterConfiguration.ConditionalOnBean=</span><br><span class=\"line\">org.springframework.session.web.http.SessionRepositoryFilter</span><br></pre></td></tr></table></figure>\n<p>在这里找到了<br><img src=\"https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2018/11/3/166d8809d67b53a2~tplv-t2oaga2asx-image.image\"></p>\n<p>这里涉及到<code>SpringBoot</code>的自动配置，从<code>spring-boot-autoconfig</code>包下加载<code>spring-autoconfigure-metadata.properties</code> 配置文件，然后获取所有支持自动配置的信息；<code>SpringSession</code> 也在其中。关于如何加载并且注册不在本文的范畴之内，我们继续来分析<code>SpringSession</code>的处理过程。</p>\n<h2 id=\"SpringSession-的处理过程\"><a href=\"#SpringSession-的处理过程\" class=\"headerlink\" title=\"SpringSession 的处理过程\"></a>SpringSession 的处理过程</h2><p>从上面<code>SpringBoot</code>的启动过程我们找到了处理<code>session</code>的<code>Filter</code>，然后知道了它是通过自动配置的方式被注册到当前的容器并且来处理请求。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Order(SessionRepositoryFilter.DEFAULT_ORDER)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">SessionRepositoryFilter</span>&lt;S <span class=\"keyword\">extends</span> <span class=\"title class_\">Session</span>&gt; </span><br><span class=\"line\"><span class=\"keyword\">extends</span> <span class=\"title class_\">OncePerRequestFilter</span> &#123;</span><br></pre></td></tr></table></figure>\n<p>从<code>SessionRepositoryFilter</code>的定义来看：</p>\n<ul>\n<li>1、使用了<code>Order</code>，并且配置了一个很小的值（<code>Integer.MIN_VALUE + 50</code>），以此来确保<code>session</code>的<code>Filter</code>在<code>Filter</code>链中被优先执行。</li>\n<li>2、集成了<code>OncePerRequestFilter</code>，确保在一次请求只通过一次<code>filter</code>，而不需要重复执行</li>\n</ul>\n<p>为什么 <code>session</code> 的 <code>Filter</code> 要被优先执行呢？因为我们的请求被包装了，如果<code>SessionRepositoryFilter</code>不优先处理请求，可能会导致后续的请求行为不一致，这里涉及到 <code>springSession</code>无缝替换应用服务器的<code>request</code>的原理：</p>\n<ul>\n<li>1.自定义个<code>Filter</code>，实现<code>doFilter</code>方法 </li>\n<li>2.继承 <code>HttpServletRequestWrapper</code> 、<code>HttpServletResponseWrapper</code> 类，重写<code>getSession</code>等相关方法(在这些方法里调用相关的 <code>session</code>存储容器操作类)。 </li>\n<li>3.自定义<code>request</code>和<code>response</code>类；并把它们分别传递到过滤器链 </li>\n<li>4.把该<code>filter</code>配置到过滤器链的第一个位置上</li>\n</ul>\n<p>OK，了解了这些背景，我们来跟踪下整个处理流程。</p>\n<h4 id=\"1、断点到-doFilterInternal\"><a href=\"#1、断点到-doFilterInternal\" class=\"headerlink\" title=\"1、断点到 doFilterInternal\"></a>1、断点到 doFilterInternal</h4><p><img src=\"https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2018/11/3/166d892f7ef1f8ea~tplv-t2oaga2asx-image.image\"></p>\n<p>从这里可以看到<code>request</code>和<code>response</code>类被包装了。</p>\n<h4 id=\"2、断点到-getSession\"><a href=\"#2、断点到-getSession\" class=\"headerlink\" title=\"2、断点到 getSession\"></a>2、断点到 getSession</h4><p>这里是从<code>Redis</code>中拿我们<code>session</code>数据的地方</p>\n<p><img src=\"https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2018/11/3/166d8a3135566112~tplv-t2oaga2asx-image.image\"></p>\n<ul>\n<li><p>先从我们当前<code>servlet</code>容器中去拿，如果拿到则直接返回</p>\n</li>\n<li><p>去<code>Redis</code>中取</p>\n<p>  <img src=\"https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2018/11/3/166d8a7556f931c5~tplv-t2oaga2asx-image.image\"><br>  这里会有一个缓存处理，并非是每次都到<code>Reids</code>中去查一次，避免一次与<code>Reids</code>的交互。</p>\n<ul>\n<li>如果缓存当前应用容器缓存中有，则直接返回当前被缓存的<code>session</code></li>\n<li>如果没有，则从请求中获取<code>sessionId</code>，并且根据当前<code>sessionId</code>去<code>Reids</code>中查找<code>session</code>数据</li>\n<li>更新缓存<code>session，sessionId,requestedSessionCached </code>等数据状态</li>\n</ul>\n</li>\n<li><p>如果<code>Redis</code>中有，则更新<code>session</code>相关信息并返回</p>\n</li>\n<li><p>如果<code>Reids</code>中没有找到，则根据 <code>create</code> 来判断是否创建新的<code>session</code>。</p>\n</li>\n</ul>\n<h3 id=\"断点到-readCookieValues\"><a href=\"#断点到-readCookieValues\" class=\"headerlink\" title=\"断点到 readCookieValues\"></a>断点到 readCookieValues</h3><p><code>SpringSession</code>提供了两种保存和传递<code>SessionId</code>的方式，一种是基于<code>Cookie</code>的，一种是基于<code>Header</code>的。<code>SpringSession</code>中默认使用的是基于<code>Cookie</code>的方式。<code>readCookieValues</code> 就是实现如何从<code>Cookie</code>中获取<code>sessionId</code>的。</p>\n<p><img src=\"https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2018/11/3/166d8b17ef251a93~tplv-t2oaga2asx-image.image\"></p>\n<p>这个过程其实很简单，先是从<code>request</code>中获取当前请求携带的所以的<code>Cookie</code>信息，然后将匹配到的 <code>cookieName</code> 为 <code>“SESSION”</code> 的<code>Cookie</code>进行解析。</p>\n<h3 id=\"断点到-RedisOperationsSessionRepository-getSession\"><a href=\"#断点到-RedisOperationsSessionRepository-getSession\" class=\"headerlink\" title=\"断点到 RedisOperationsSessionRepository -&gt; getSession\"></a>断点到 RedisOperationsSessionRepository -&gt; getSession</h3><p>这里是从<code>Redis</code>中取<code>session</code>数据的地方<br><img src=\"https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2018/11/3/166d8b5088d73386~tplv-t2oaga2asx-image.image\"></p>\n<ul>\n<li>根据<code>sessionId </code>从 <code>Redis</code>中取到 <code>entries</code> 数据</li>\n<li>构建 <code>RedisSession</code> 并返回</li>\n</ul>\n<h3 id=\"断点到-commitSession\"><a href=\"#断点到-commitSession\" class=\"headerlink\" title=\"断点到 commitSession\"></a>断点到 commitSession</h3><p><code>commitSession</code>作用是通过<code> HttpSessionIdResolver</code> 将<code>sessionId</code>写到<code>response</code>，并且进行持久化。</p>\n<p><img src=\"https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2018/11/3/166d895cfab06ffd~tplv-t2oaga2asx-image.image\"></p>\n<p>这里的 <code>session</code> 其实是已经更新过状态的，比如重新设置了 <code>session</code> 的过期时间等。<code>session</code> 提交实际上就意味着当前请求已经处理完毕了。</p>\n<h2 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h2><p>本文先介绍了如何使用 <code>SpringBoot</code> 集成 <code>SpringSession</code>，并且以 <code>Redis</code> 作为存储。然后简单分析了 <code>SpringSession</code> 的处理过程，本文对 <code>SpringSession</code> 的原理部分没有进行深入分析，下一篇分析下<code>SpringSession</code>的原理。</p>\n","text":"springSession是 spring 旗下的一个项目，把 servlet 容器实现的 httpSession替换为springSession，专注于解决s...","permalink":"/post/spring/spring-session-intergration-boot","photos":[],"count_time":{"symbolsCount":"5.4k","symbolsTime":"5 mins."},"categories":[{"name":"spring","slug":"spring","count":15,"path":"api/categories/spring.json"}],"tags":[{"name":"session","slug":"session","count":6,"path":"api/tags/session.json"},{"name":"分布式","slug":"分布式","count":6,"path":"api/tags/分布式.json"},{"name":"redis","slug":"redis","count":5,"path":"api/tags/redis.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E7%8E%AF%E5%A2%83%E5%87%86%E5%A4%87\"><span class=\"toc-text\">环境准备</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Redis-%E5%AE%89%E8%A3%85\"><span class=\"toc-text\">Redis 安装</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#SpringBoot-%E5%B7%A5%E7%A8%8B%E5%87%86%E5%A4%87\"><span class=\"toc-text\">SpringBoot 工程准备</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E9%9B%86%E6%88%90\"><span class=\"toc-text\">集成</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%BE%9D%E8%B5%96%E5%BC%95%E5%85%A5\"><span class=\"toc-text\">依赖引入</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E9%85%8D%E7%BD%AEapplication-properties\"><span class=\"toc-text\">配置application.properties</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%9C%A8%E5%90%AF%E5%8A%A8%E7%B1%BB%E4%B8%AD%E5%8A%A0%E5%85%A5-EnableRedisHttpSession-%E6%B3%A8%E8%A7%A3\"><span class=\"toc-text\">在启动类中加入@EnableRedisHttpSession  注解</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%B5%8B%E8%AF%95\"><span class=\"toc-text\">测试</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%B5%8B%E8%AF%95%E7%BB%93%E6%9E%9C\"><span class=\"toc-text\">测试结果</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#SpringSession-%E6%98%AF%E5%A6%82%E4%BD%95%E5%A4%84%E7%90%86%E8%AF%B7%E6%B1%82%E7%9A%84%EF%BC%9F\"><span class=\"toc-text\">SpringSession 是如何处理请求的？</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#SpringSession-%E7%9A%84%E5%A4%84%E7%90%86%E8%BF%87%E7%A8%8B\"><span class=\"toc-text\">SpringSession 的处理过程</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#1%E3%80%81%E6%96%AD%E7%82%B9%E5%88%B0-doFilterInternal\"><span class=\"toc-text\">1、断点到 doFilterInternal</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#2%E3%80%81%E6%96%AD%E7%82%B9%E5%88%B0-getSession\"><span class=\"toc-text\">2、断点到 getSession</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%96%AD%E7%82%B9%E5%88%B0-readCookieValues\"><span class=\"toc-text\">断点到 readCookieValues</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%96%AD%E7%82%B9%E5%88%B0-RedisOperationsSessionRepository-getSession\"><span class=\"toc-text\">断点到 RedisOperationsSessionRepository -&gt; getSession</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%96%AD%E7%82%B9%E5%88%B0-commitSession\"><span class=\"toc-text\">断点到 commitSession</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%B0%8F%E7%BB%93\"><span class=\"toc-text\">小结</span></a></li></ol>","author":{"name":"glmapper","slug":"blog-author","avatar":"https://glmapper-blog.oss-cn-hangzhou.aliyuncs.com/common/favicon.ico","link":"/","description":"开放，开源，分享，共享","socials":{"github":"https://github.com/glmapper","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/2412872703","zhihu":"","csdn":"","juejin":"https://juejin.cn/user/3227821827961806","customs":{"sofastack":{"icon":"https://glmapper-blog.oss-cn-hangzhou.aliyuncs.com/common/sofastack.svg","link":"https://www.sofastack.tech/"}}}},"mapped":true,"hidden":false,"prev_post":{"title":"SpringCloud-声明式服务调用 Feign","uid":"21548e9ec276e6ad92466723ebcdde83","slug":"springcloud/spring-cloud-feign-project","date":"2018-12-31T14:46:42.000Z","updated":"2024-07-05T04:09:05.838Z","comments":true,"path":"api/articles/springcloud/spring-cloud-feign-project.json","keywords":null,"cover":null,"text":"Fegin 是一个声明式的 web 服务客户端，它使得编写 web 服务客户端变得更加容易。使用 Fegin 创建一个接口并对它进行注解。它具有可插拔的注解支持...","permalink":"/post/springcloud/spring-cloud-feign-project","photos":[],"count_time":{"symbolsCount":"3.1k","symbolsTime":"3 mins."},"categories":[{"name":"SpringCloud","slug":"SpringCloud","count":14,"path":"api/categories/SpringCloud.json"}],"tags":[{"name":"http","slug":"http","count":3,"path":"api/tags/http.json"},{"name":"eureka","slug":"eureka","count":5,"path":"api/tags/eureka.json"},{"name":"feign","slug":"feign","count":2,"path":"api/tags/feign.json"}],"author":{"name":"glmapper","slug":"blog-author","avatar":"https://glmapper-blog.oss-cn-hangzhou.aliyuncs.com/common/favicon.ico","link":"/","description":"开放，开源，分享，共享","socials":{"github":"https://github.com/glmapper","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/2412872703","zhihu":"","csdn":"","juejin":"https://juejin.cn/user/3227821827961806","customs":{"sofastack":{"icon":"https://glmapper-blog.oss-cn-hangzhou.aliyuncs.com/common/sofastack.svg","link":"https://www.sofastack.tech/"}}}}},"next_post":{"title":"SpringSession系列-请求与响应重写","uid":"a51f93717fc52b7309abb94021410992","slug":"spring/spring-session-rewrite-req-resp","date":"2018-12-10T01:15:21.000Z","updated":"2024-07-05T04:09:05.818Z","comments":true,"path":"api/articles/spring/spring-session-rewrite-req-resp.json","keywords":null,"cover":null,"text":"我们知道，HttpServletRequset和HttpServletResponse是Servlet标准所指定的Java语言与Web容器进行交互的接口。接口本...","permalink":"/post/spring/spring-session-rewrite-req-resp","photos":[],"count_time":{"symbolsCount":"7.6k","symbolsTime":"7 mins."},"categories":[{"name":"spring","slug":"spring","count":15,"path":"api/categories/spring.json"}],"tags":[{"name":"session","slug":"session","count":6,"path":"api/tags/session.json"},{"name":"分布式","slug":"分布式","count":6,"path":"api/tags/分布式.json"},{"name":"redis","slug":"redis","count":5,"path":"api/tags/redis.json"}],"author":{"name":"glmapper","slug":"blog-author","avatar":"https://glmapper-blog.oss-cn-hangzhou.aliyuncs.com/common/favicon.ico","link":"/","description":"开放，开源，分享，共享","socials":{"github":"https://github.com/glmapper","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/2412872703","zhihu":"","csdn":"","juejin":"https://juejin.cn/user/3227821827961806","customs":{"sofastack":{"icon":"https://glmapper-blog.oss-cn-hangzhou.aliyuncs.com/common/sofastack.svg","link":"https://www.sofastack.tech/"}}}}}}