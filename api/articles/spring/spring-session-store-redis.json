{"title":"SpringSession系列-存储机制之Redis&Map","uid":"13e3061ae0f9c367c54ed2cb6b629b40","slug":"spring/spring-session-store-redis","date":"2018-12-10T01:14:11.000Z","updated":"2024-07-05T04:09:05.819Z","comments":true,"path":"api/articles/spring/spring-session-store-redis.json","keywords":null,"cover":[],"content":"<p>在之前的文章中已经对<code>SpringSession</code>的功能结构，请求&#x2F;响应重写等做了介绍。本文将继续来介绍下<code>SpringSession</code>中存储部分的设计。存储是分布式<code>session</code>中算是最核心的部分，通过引入三方的存储容器来实现<code>session</code>的存储，从而有效的解决<code>session</code>共享的问题。</p>\n<span id=\"more\"></span>\n\n<h2 id=\"1、SpringSession存储的顶级抽象接口\"><a href=\"#1、SpringSession存储的顶级抽象接口\" class=\"headerlink\" title=\"1、SpringSession存储的顶级抽象接口\"></a>1、SpringSession存储的顶级抽象接口</h2><p><code>SpringSession</code>存储的顶级抽象接口是<code>org.springframework.session</code>包下的<code>SessionRepository</code>这个接口。<code>SessionRepository</code>的类图结构如下：</p>\n<p><img src=\"https://img-blog.csdnimg.cn/20181215163704803.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3NpbmF0XzI1NTE4MzQ5,size_16,color_FFFFFF,t_70\" alt=\"SessionRepository类图结构\"><br>这里先来看下<code>SessionRepository</code>这个顶层接口中定义了哪些方法：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">SessionRepository</span>&lt;S <span class=\"keyword\">extends</span> <span class=\"title class_\">Session</span>&gt; &#123;</span><br><span class=\"line\">    <span class=\"comment\">//创建一个session</span></span><br><span class=\"line\">\tS <span class=\"title function_\">createSession</span><span class=\"params\">()</span>;</span><br><span class=\"line\">\t<span class=\"comment\">//保存session</span></span><br><span class=\"line\">\t<span class=\"keyword\">void</span> <span class=\"title function_\">save</span><span class=\"params\">(S session)</span>;</span><br><span class=\"line\">\t<span class=\"comment\">//通过ID查找session</span></span><br><span class=\"line\">\tS <span class=\"title function_\">findById</span><span class=\"params\">(String id)</span>;</span><br><span class=\"line\">\t<span class=\"comment\">//通过ID删除一个session</span></span><br><span class=\"line\">\t<span class=\"keyword\">void</span> <span class=\"title function_\">deleteById</span><span class=\"params\">(String id)</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>从代码来看还是很简单的，就是增删查。下面看具体实现。在2.0版本开始<code>SpringSession</code>中也提供了一个和<code>SessionRepository</code>具体相同能力的<code>ReactiveSessionRepository</code>，用于支持响应式编程模式。</p>\n<h2 id=\"2、MapSessionRepository\"><a href=\"#2、MapSessionRepository\" class=\"headerlink\" title=\"2、MapSessionRepository\"></a>2、MapSessionRepository</h2><p>基于HashMap实现的基于内存存储的存储器实现，这里就主要看下对于接口中几个方法的实现。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">MapSessionRepository</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">SessionRepository</span>&lt;MapSession&gt; &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> Integer defaultMaxInactiveInterval;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">final</span> Map&lt;String, Session&gt; sessions;</span><br><span class=\"line\">\t<span class=\"comment\">//...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>可以看到就是一个<code>Map</code>，那后面关于增删查其实就是操作这个<code>Map</code>了。</p>\n<h3 id=\"createSession\"><a href=\"#createSession\" class=\"headerlink\" title=\"createSession\"></a>createSession</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> MapSession <span class=\"title function_\">createSession</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">\t<span class=\"type\">MapSession</span> <span class=\"variable\">result</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">MapSession</span>();</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (<span class=\"built_in\">this</span>.defaultMaxInactiveInterval != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">\t\tresult.setMaxInactiveInterval(</span><br><span class=\"line\">\t\t\tDuration.ofSeconds(<span class=\"built_in\">this</span>.defaultMaxInactiveInterval));</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这里很直接，就是<code>new</code>了一个<code>MapSession</code>，然后设置了<code>session</code>的有效期。</p>\n<h3 id=\"save\"><a href=\"#save\" class=\"headerlink\" title=\"save\"></a>save</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">save</span><span class=\"params\">(MapSession session)</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (!session.getId().equals(session.getOriginalId())) &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">this</span>.sessions.remove(session.getOriginalId());</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"built_in\">this</span>.sessions.put(session.getId(), <span class=\"keyword\">new</span> <span class=\"title class_\">MapSession</span>(session));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这里面先判断了<code>session</code>中的两个<code>ID</code>，一个<code>originalId</code>，一个当前<code>id</code>。<code>originalId</code>是第一次生成<code>session</code>对象时创建的，后面都不会在变化。通过源码来看，对于<code>originalId</code>，只提供了<code>get</code>方法。对于<code>id</code>呢，其实是可以通过<code>changeSessionId</code>来改变的。</p>\n<p>这里的这个操作实际上是一种优化行为，及时的清除掉老的<code>session</code>数据来释放内存空间。</p>\n<h3 id=\"findById\"><a href=\"#findById\" class=\"headerlink\" title=\"findById\"></a>findById</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> MapSession <span class=\"title function_\">findById</span><span class=\"params\">(String id)</span> &#123;</span><br><span class=\"line\">\t<span class=\"type\">Session</span> <span class=\"variable\">saved</span> <span class=\"operator\">=</span> <span class=\"built_in\">this</span>.sessions.get(id);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (saved == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (saved.isExpired()) &#123;</span><br><span class=\"line\">\t\tdeleteById(saved.getId());</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">MapSession</span>(saved);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这个逻辑也很简单，先从<code>Map</code>中根据<code>id</code>取出<code>session</code>数据，如果没有就返回<code>null</code>，如果有则再判断下是否过期了，如果过期了就删除掉，然后返回<code>null</code>。如果查到了，并且没有过期的话，则构建一个<code>MapSession</code>返回。</p>\n<p>OK，基于内存存储的实现系列就是这些了，下面继续来看其他存储的实现。</p>\n<h2 id=\"3、FindByIndexNameSessionRepository\"><a href=\"#3、FindByIndexNameSessionRepository\" class=\"headerlink\" title=\"3、FindByIndexNameSessionRepository\"></a>3、FindByIndexNameSessionRepository</h2><p><code>FindByIndexNameSessionRepository</code>继承了<code>SessionRepository</code>接口，用于扩展对第三方存储的实现。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">FindByIndexNameSessionRepository</span>&lt;S <span class=\"keyword\">extends</span> <span class=\"title class_\">Session</span>&gt;</span><br><span class=\"line\">\t\t<span class=\"keyword\">extends</span> <span class=\"title class_\">SessionRepository</span>&lt;S&gt; &#123;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t<span class=\"type\">String</span> <span class=\"variable\">PRINCIPAL_NAME_INDEX_NAME</span> <span class=\"operator\">=</span> FindByIndexNameSessionRepository.class.getName()</span><br><span class=\"line\">\t\t\t.concat(<span class=\"string\">&quot;.PRINCIPAL_NAME_INDEX_NAME&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\tMap&lt;String, S&gt; <span class=\"title function_\">findByIndexNameAndIndexValue</span><span class=\"params\">(String indexName, String indexValue)</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">default</span> Map&lt;String, S&gt; <span class=\"title function_\">findByPrincipalName</span><span class=\"params\">(String principalName)</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> findByIndexNameAndIndexValue(PRINCIPAL_NAME_INDEX_NAME, principalName);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><code>FindByIndexNameSessionRepository</code>添加一个单独的方法为指定用户查询所有会话。这是通过设置名为<code>FindByIndexNameSessionRepository.PRINCIPAL_NAME_INDEX_NAME</code>的<code>Session</code>的属性值为指定用户的<code>username</code>来完成的。开发人员有责任确保属性被赋值，因为<code>SpringSession</code>不会在意被使用的认证机制。官方文档中给出的例子如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">String</span> <span class=\"variable\">username</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;username&quot;</span>;</span><br><span class=\"line\"><span class=\"built_in\">this</span>.session.setAttribute(</span><br><span class=\"line\">\tFindByIndexNameSessionRepository.PRINCIPAL_NAME_INDEX_NAME, username);</span><br></pre></td></tr></table></figure>\n<p><code>FindByIndexNameSessionRepository</code>的一些实现会提供一些钩子自动的索引其他的<code>session</code>属性。比如，很多实现都会自动的确保当前的<code>Spring Security</code>用户名称可通过索引名称<code>FindByIndexNameSessionRepository.PRINCIPAL_NAME_INDEX_NAME</code>进行索引。一旦会话被索引，就可以通过下面的代码检索：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">String</span> <span class=\"variable\">username</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;username&quot;</span>;</span><br><span class=\"line\">Map&lt;String, Session&gt; sessionIdToSession = </span><br><span class=\"line\">\t<span class=\"built_in\">this</span>.sessionRepository.findByIndexNameAndIndexValue(</span><br><span class=\"line\">\tFindByIndexNameSessionRepository.PRINCIPAL_NAME_INDEX_NAME,username);</span><br></pre></td></tr></table></figure>\n<p>下图是<code>FindByIndexNameSessionRepository</code>接口的三个实现类：<br><img src=\"https://img-blog.csdnimg.cn/2018121522191661.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3NpbmF0XzI1NTE4MzQ5,size_16,color_FFFFFF,t_70\" alt=\"FindByIndexNameSessionRepository\"></p>\n<p>下面来分别分析下这三个存储的实现细节。</p>\n<h3 id=\"3-1-RedisOperationsSessionRepository\"><a href=\"#3-1-RedisOperationsSessionRepository\" class=\"headerlink\" title=\"3.1 RedisOperationsSessionRepository\"></a>3.1 RedisOperationsSessionRepository</h3><p><code>RedisOperationsSessionRepository</code>的类图结构如下，<code>MessageListener</code>是<code>redis</code>消息订阅的监听接口。<br><img src=\"https://img-blog.csdnimg.cn/20181215222727234.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3NpbmF0XzI1NTE4MzQ5,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"></p>\n<p>代码有点长，就不在这里面贴了，一些注释可以在这个 <a href=\"https://github.com/glmapper/spring-session/tree/cn-spring-session\">SpringSession中文分支</a> 来看。这里还是主要来看下对于那几个方法的实现。</p>\n<h4 id=\"3-1-1-createSession\"><a href=\"#3-1-1-createSession\" class=\"headerlink\" title=\"3.1.1 createSession\"></a>3.1.1 createSession</h4><p>这里和<code>MapSessionRepository</code>的实现基本一样的，那区别就在于<code>Session</code>的封装模型不一样，这里是<code>RedisSession</code>，实际上<code>RedisSession</code>的实现是对<code>MapSession</code>又包了一层。下面会分析<code>RedisSession</code>这个类。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> RedisSession <span class=\"title function_\">createSession</span><span class=\"params\">()</span> &#123; </span><br><span class=\"line\">    <span class=\"comment\">// RedisSession,这里和MapSession区别开</span></span><br><span class=\"line\">\t<span class=\"type\">RedisSession</span> <span class=\"variable\">redisSession</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">RedisSession</span>();</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (<span class=\"built_in\">this</span>.defaultMaxInactiveInterval != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">\t\tredisSession.setMaxInactiveInterval(</span><br><span class=\"line\">\t\t\t\tDuration.ofSeconds(<span class=\"built_in\">this</span>.defaultMaxInactiveInterval));</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> redisSession;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在看其他两个方法之前，先来看下<code>RedisSession</code>这个类。</p>\n<h4 id=\"3-1-2-RedisSession\"><a href=\"#3-1-2-RedisSession\" class=\"headerlink\" title=\"3.1.2 RedisSession\"></a>3.1.2 RedisSession</h4><p>这个在模型上是对<code>MapSession</code>的扩展，增加了<code>delta</code>这个东西。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">final</span> <span class=\"keyword\">class</span> <span class=\"title class_\">RedisSession</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">Session</span> &#123;</span><br><span class=\"line\">       <span class=\"comment\">// MapSession 实例对象，主要存数据的地方</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">private</span> <span class=\"keyword\">final</span> MapSession cached;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 原始最后访问时间</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">private</span> Instant originalLastAccessTime;</span><br><span class=\"line\">\t\t<span class=\"keyword\">private</span> Map&lt;String, Object&gt; delta = <span class=\"keyword\">new</span> <span class=\"title class_\">HashMap</span>&lt;&gt;();</span><br><span class=\"line\">\t\t<span class=\"comment\">// 是否是新的session对象</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">private</span> <span class=\"type\">boolean</span> isNew;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 原始主名称</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">private</span> String originalPrincipalName;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 原始sessionId</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">private</span> String originalSessionId;</span><br></pre></td></tr></table></figure>\n<p><code>delta</code>是一个Map结构，那么这里面到底是放什么的呢？具体细节见 <a href=\"https://github.com/glmapper/spring-session/blob/cn-spring-session/spring-session-data-redis/src/main/java/org/springframework/session/data/redis/RedisOperationsSessionRepository.java\">saveDelta</a> 这个方法。<code>saveDelta</code> 这个方法会在两个地方被调用，一个是下面要说道的<code>save</code>方法，另外一个是 <code>flushImmediateIfNecessary</code> 这个方法：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title function_\">flushImmediateIfNecessary</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (RedisOperationsSessionRepository.<span class=\"built_in\">this</span>.redisFlushMode == RedisFlushMode.IMMEDIATE) &#123;</span><br><span class=\"line\">\t\tsaveDelta();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p> <code>RedisFlushMode</code>提供了两种推送模式：</p>\n<ul>\n<li>ON_SAVE：只有在调用<code>save</code>方法时执行，在<code>web</code>环境中这样做通常是尽快提交HTTP响应</li>\n<li>IMMEDIATE：只要有变更就会直接写到<code>redis</code>中，不会像<code>ON_SAVE</code>一样，在最后<code>commit</code>时一次性写入</li>\n</ul>\n<p>追踪<code>flushImmediateIfNecessary</code> 方法调用链如下：<br><img src=\"https://img-blog.csdnimg.cn/2018121523515912.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3NpbmF0XzI1NTE4MzQ5,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"><br>那么到这里基本就清楚了，首先<code>save</code>这个方法，当主动调用<code>save</code>时就是将数据推到<code>redis</code>中去的，也就是<code>ON_SAVE</code>这种情况。那么对于<code>IMMEDIATE</code>这种情况，只有调用了上面的四个方法，<code>SpringSession</code> 才会将数据推送到<code>redis</code>。</p>\n<p>所以<code>delta</code>里面存的是当前一些变更的 <code>key-val</code> 键值对象，而这些变更是由<code>setAttribute</code>、<code>removeAttribute</code>、<code>setMaxInactiveIntervalInSeconds</code>、<code>setLastAccessedTime</code>这四个方法触发的；比如<code>setAttribute(k,v)</code>，那么这个<code>k-&gt;v</code>就会被保存到<code>delta</code>里面。</p>\n<h4 id=\"3-1-3-save\"><a href=\"#3-1-3-save\" class=\"headerlink\" title=\"3.1.3 save\"></a>3.1.3 save</h4><p>在理解了<code>saveDelta</code>方法之后再来看<code>save</code>方法就简单多了。<code>save</code> 对应的就是<code>RedisFlushMode.ON_SAVE</code>。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">save</span><span class=\"params\">(RedisSession session)</span> &#123;</span><br><span class=\"line\">   <span class=\"comment\">// 直接调用 saveDelta推数据到redis</span></span><br><span class=\"line\">\tsession.saveDelta();</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (session.isNew()) &#123;</span><br><span class=\"line\">\t   <span class=\"comment\">// sessionCreatedKey-&gt;channl</span></span><br><span class=\"line\">\t\t<span class=\"type\">String</span> <span class=\"variable\">sessionCreatedKey</span> <span class=\"operator\">=</span> getSessionCreatedChannel(session.getId());</span><br><span class=\"line\">\t\t<span class=\"comment\">// 发布一个消息事件，新增 session，以供 MessageListener 回调处理。</span></span><br><span class=\"line\">\t\t<span class=\"built_in\">this</span>.sessionRedisOperations.convertAndSend(sessionCreatedKey, session.delta);</span><br><span class=\"line\">\t\tsession.setNew(<span class=\"literal\">false</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"3-1-4-findById\"><a href=\"#3-1-4-findById\" class=\"headerlink\" title=\"3.1.4 findById\"></a>3.1.4 findById</h4><p>查询这部分和基于<code>Map</code>的差别比较大，因为这里并不是直接操作<code>Map</code>，而是与<code>Redis</code> 进行一次交互。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> RedisSession <span class=\"title function_\">findById</span><span class=\"params\">(String id)</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> getSession(id, <span class=\"literal\">false</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>调用<code>getSession</code>方法：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> RedisSession <span class=\"title function_\">getSession</span><span class=\"params\">(String id, <span class=\"type\">boolean</span> allowExpired)</span> &#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 根据ID从redis中取出数据</span></span><br><span class=\"line\">\tMap&lt;Object, Object&gt; entries = getSessionBoundHashOperations(id).entries();</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (entries.isEmpty()) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">//转换成MapSession</span></span><br><span class=\"line\">\t<span class=\"type\">MapSession</span> <span class=\"variable\">loaded</span> <span class=\"operator\">=</span> loadSession(id, entries);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (!allowExpired &amp;&amp; loaded.isExpired()) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">//转换成RedisSession</span></span><br><span class=\"line\">\t<span class=\"type\">RedisSession</span> <span class=\"variable\">result</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">RedisSession</span>(loaded);</span><br><span class=\"line\">\tresult.originalLastAccessTime = loaded.getLastAccessedTime();</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><code>loadSession</code>中构建<code>MapSession</code>：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> MapSession <span class=\"title function_\">loadSession</span><span class=\"params\">(String id, Map&lt;Object, Object&gt; entries)</span> &#123;</span><br><span class=\"line\">   <span class=\"comment\">// 生成MapSession实例</span></span><br><span class=\"line\">\t<span class=\"type\">MapSession</span> <span class=\"variable\">loaded</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">MapSession</span>(id);</span><br><span class=\"line\">\t<span class=\"comment\">//遍历数据</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (Map.Entry&lt;Object, Object&gt; entry : entries.entrySet()) &#123;</span><br><span class=\"line\">\t\t<span class=\"type\">String</span> <span class=\"variable\">key</span> <span class=\"operator\">=</span> (String) entry.getKey();</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (CREATION_TIME_ATTR.equals(key)) &#123;</span><br><span class=\"line\">\t\t    <span class=\"comment\">// 设置创建时间</span></span><br><span class=\"line\">\t\t\tloaded.setCreationTime(Instant.ofEpochMilli((<span class=\"type\">long</span>) entry.getValue()));</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (MAX_INACTIVE_ATTR.equals(key)) &#123;</span><br><span class=\"line\">\t\t\t <span class=\"comment\">// 设置最大有效时间</span></span><br><span class=\"line\">\t\t\tloaded.setMaxInactiveInterval(Duration.ofSeconds((<span class=\"type\">int</span>) entry.getValue()));</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (LAST_ACCESSED_ATTR.equals(key)) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 设置最后访问时间</span></span><br><span class=\"line\">\t\t\tloaded.setLastAccessedTime(Instant.ofEpochMilli((<span class=\"type\">long</span>) entry.getValue()));</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (key.startsWith(SESSION_ATTR_PREFIX)) &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 设置属性</span></span><br><span class=\"line\">\t\t\tloaded.setAttribute(key.substring(SESSION_ATTR_PREFIX.length()),</span><br><span class=\"line\">\t\t\t\t\tentry.getValue());</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> loaded;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"3-1-5-deleteById\"><a href=\"#3-1-5-deleteById\" class=\"headerlink\" title=\"3.1.5 deleteById\"></a>3.1.5 deleteById</h4><p>根据<code>sessionId</code>删除<code>session</code>数据。具体过程看代码注释。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">deleteById</span><span class=\"params\">(String sessionId)</span> &#123;</span><br><span class=\"line\">   <span class=\"comment\">// 获取 RedisSession</span></span><br><span class=\"line\">\t<span class=\"type\">RedisSession</span> <span class=\"variable\">session</span> <span class=\"operator\">=</span> getSession(sessionId, <span class=\"literal\">true</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (session == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">   <span class=\"comment\">// 清楚当前session数据的索引</span></span><br><span class=\"line\">\tcleanupPrincipalIndex(session);</span><br><span class=\"line\">\t<span class=\"comment\">//执行删除操作</span></span><br><span class=\"line\">\t<span class=\"built_in\">this</span>.expirationPolicy.onDelete(session);</span><br><span class=\"line\">\t<span class=\"type\">String</span> <span class=\"variable\">expireKey</span> <span class=\"operator\">=</span> getExpiredKey(session.getId());</span><br><span class=\"line\">\t<span class=\"comment\">//删除expireKey</span></span><br><span class=\"line\">\t<span class=\"built_in\">this</span>.sessionRedisOperations.delete(expireKey);</span><br><span class=\"line\">\t<span class=\"comment\">//session有效期设置为0</span></span><br><span class=\"line\">\tsession.setMaxInactiveInterval(Duration.ZERO);</span><br><span class=\"line\">\tsave(session);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"3-1-6-onMessage\"><a href=\"#3-1-6-onMessage\" class=\"headerlink\" title=\"3.1.6 onMessage\"></a>3.1.6 onMessage</h4><p>最后来看下这个订阅回调处理。这里看下核心的一段逻辑：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">boolean</span> <span class=\"variable\">isDeleted</span> <span class=\"operator\">=</span> channel.equals(<span class=\"built_in\">this</span>.sessionDeletedChannel);</span><br><span class=\"line\"><span class=\"comment\">// Deleted 还是 Expired ？</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (isDeleted || channel.equals(<span class=\"built_in\">this</span>.sessionExpiredChannel)) &#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 此处省略无关代码</span></span><br><span class=\"line\">\t<span class=\"comment\">// Deleted</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (isDeleted) &#123;</span><br><span class=\"line\">\t   <span class=\"comment\">// 发布一个 SessionDeletedEvent 事件</span></span><br><span class=\"line\">\t\thandleDeleted(session);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">// Expired</span></span><br><span class=\"line\">\t<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 发布一个 SessionExpiredEvent 事件</span></span><br><span class=\"line\">\t\thandleExpired(session);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"3-2-Redis-存储的一些思考\"><a href=\"#3-2-Redis-存储的一些思考\" class=\"headerlink\" title=\"3.2 Redis 存储的一些思考\"></a>3.2 Redis 存储的一些思考</h3><p>首先按照我们自己常规的思路来设计的话，我们会怎么来考虑这个事情。这里首先要声明下，我对 <code>Redis</code> 这个东西不是很熟，没有做过深入的研究；那如果是我来做，可能也就仅仅限于存储。</p>\n<ul>\n<li><code>findByIndexNameAndIndexValue</code>的设计，这个的作用是通过<code>indexName</code>和<code>indexValue</code>来返回当前用户的所有会话。但是这里需要考虑的一个事情是，通常情况下，一个用户只会关联到一个会话上面去，那这种设计很显然，我的理解是为了支持单用户多会话的场景。<ul>\n<li>indexName：FindByIndexNameSessionRepository.PRINCIPAL_NAME_INDEX_NAME</li>\n<li>indexValue：username</li>\n</ul>\n</li>\n<li>实现 <code>MessageListener</code> 接口，增加事件通知能力。通过监听这些事件，可以做一些<code>session</code>操作管控。但是实际上 <code>SpringSession</code> 中并没有做任何事情，从代码来看，<code>publishEvent</code>方法是空实现。等待回复中 <a href=\"https://github.com/spring-projects/spring-session/issues/1287\">#issue 1287</a><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"type\">ApplicationEventPublisher</span> <span class=\"variable\">eventPublisher</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ApplicationEventPublisher</span>() &#123;</span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">publishEvent</span><span class=\"params\">(ApplicationEvent event)</span> &#123;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">publishEvent</span><span class=\"params\">(Object event)</span> &#123;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure></li>\n<li><code>RedisFlushMode</code> ，<code>SpringSession</code>中提供了两种模式的推送，一种是<code>ON_SAVE</code>，另外一种是<code>IMMEDIATE</code>。默认是<code>ON_SAVE</code>，也就是常规的在请求处理结束时进行一次<code>sessionCommit</code>操作。<code>RedisFlushMode</code> 的设计感觉是为<code>session</code>数据持久化的时机提供了另外一种思路。</li>\n</ul>\n<h2 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h2><p>存储机制设计部分就一基于内存和基于<code>Redis</code>两种来分析；另外基于<code>jdbc</code>和<code>hazelcast</code>有兴趣的同学可以自己查看源码。</p>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><ul>\n<li><a href=\"https://blog.csdn.net/zyhlwzy/article/details/78062646\">https://blog.csdn.net/zyhlwzy/article/details/78062646</a></li>\n<li><a href=\"https://docs.spring.io/spring-session/docs/2.0.0.M4/reference/html5/#api\">https://docs.spring.io/spring-session/docs/2.0.0.M4/reference/html5/#api</a></li>\n</ul>\n","text":"在之前的文章中已经对SpringSession的功能结构，请求/响应重写等做了介绍。本文将继续来介绍下SpringSession中存储部分的设计。存储是分布式s...","permalink":"/post/spring/spring-session-store-redis","photos":[],"count_time":{"symbolsCount":"9.7k","symbolsTime":"9 mins."},"categories":[{"name":"spring","slug":"spring","count":15,"path":"api/categories/spring.json"}],"tags":[{"name":"session","slug":"session","count":6,"path":"api/tags/session.json"},{"name":"分布式","slug":"分布式","count":6,"path":"api/tags/分布式.json"},{"name":"redis","slug":"redis","count":5,"path":"api/tags/redis.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#1%E3%80%81SpringSession%E5%AD%98%E5%82%A8%E7%9A%84%E9%A1%B6%E7%BA%A7%E6%8A%BD%E8%B1%A1%E6%8E%A5%E5%8F%A3\"><span class=\"toc-text\">1、SpringSession存储的顶级抽象接口</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#2%E3%80%81MapSessionRepository\"><span class=\"toc-text\">2、MapSessionRepository</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#createSession\"><span class=\"toc-text\">createSession</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#save\"><span class=\"toc-text\">save</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#findById\"><span class=\"toc-text\">findById</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#3%E3%80%81FindByIndexNameSessionRepository\"><span class=\"toc-text\">3、FindByIndexNameSessionRepository</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-1-RedisOperationsSessionRepository\"><span class=\"toc-text\">3.1 RedisOperationsSessionRepository</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#3-1-1-createSession\"><span class=\"toc-text\">3.1.1 createSession</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#3-1-2-RedisSession\"><span class=\"toc-text\">3.1.2 RedisSession</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#3-1-3-save\"><span class=\"toc-text\">3.1.3 save</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#3-1-4-findById\"><span class=\"toc-text\">3.1.4 findById</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#3-1-5-deleteById\"><span class=\"toc-text\">3.1.5 deleteById</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#3-1-6-onMessage\"><span class=\"toc-text\">3.1.6 onMessage</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-2-Redis-%E5%AD%98%E5%82%A8%E7%9A%84%E4%B8%80%E4%BA%9B%E6%80%9D%E8%80%83\"><span class=\"toc-text\">3.2 Redis 存储的一些思考</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%B0%8F%E7%BB%93\"><span class=\"toc-text\">小结</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%8F%82%E8%80%83\"><span class=\"toc-text\">参考</span></a></li></ol>","author":{"name":"glmapper","slug":"blog-author","avatar":"https://glmapper-blog.oss-cn-hangzhou.aliyuncs.com/common/favicon.ico","link":"/","description":"开放，开源，分享，共享","socials":{"github":"https://github.com/glmapper","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/2412872703","zhihu":"","csdn":"","juejin":"https://juejin.cn/user/3227821827961806","customs":{"sofastack":{"icon":"https://glmapper-blog.oss-cn-hangzhou.aliyuncs.com/common/sofastack.svg","link":"https://www.sofastack.tech/"}}}},"mapped":true,"hidden":false,"prev_post":{"title":"SpringSession系列-分布式Session实现方案","uid":"46a9cf97b63fb53bbaac01eae86dbdc2","slug":"spring/spring-session-distribution-solution","date":"2018-12-10T01:14:52.000Z","updated":"2024-07-05T04:09:05.818Z","comments":true,"path":"api/articles/spring/spring-session-distribution-solution.json","keywords":null,"cover":[],"text":" https://juejin.cn/post/6844903721206300685 上一篇文章 SpringSession：集成SpringBoot 中介绍...","permalink":"/post/spring/spring-session-distribution-solution","photos":[],"count_time":{"symbolsCount":"3.3k","symbolsTime":"3 mins."},"categories":[{"name":"spring","slug":"spring","count":15,"path":"api/categories/spring.json"}],"tags":[{"name":"session","slug":"session","count":6,"path":"api/tags/session.json"},{"name":"分布式","slug":"分布式","count":6,"path":"api/tags/分布式.json"},{"name":"redis","slug":"redis","count":5,"path":"api/tags/redis.json"}],"author":{"name":"glmapper","slug":"blog-author","avatar":"https://glmapper-blog.oss-cn-hangzhou.aliyuncs.com/common/favicon.ico","link":"/","description":"开放，开源，分享，共享","socials":{"github":"https://github.com/glmapper","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/2412872703","zhihu":"","csdn":"","juejin":"https://juejin.cn/user/3227821827961806","customs":{"sofastack":{"icon":"https://glmapper-blog.oss-cn-hangzhou.aliyuncs.com/common/sofastack.svg","link":"https://www.sofastack.tech/"}}}}},"next_post":{"title":"SpringSession系列-sessionId解析和Cookie读写策略","uid":"a69e5cb15ae185e57bcc31169f7e2e99","slug":"spring/spring-session-id-resolver","date":"2018-12-10T01:13:31.000Z","updated":"2024-07-05T04:09:05.818Z","comments":true,"path":"api/articles/spring/spring-session-id-resolver.json","keywords":null,"cover":[],"text":" 原文：https://blog.csdn.net/sinat_25518349/article/details/85042029 首先需求在这里说明下，Spr...","permalink":"/post/spring/spring-session-id-resolver","photos":[],"count_time":{"symbolsCount":"8.1k","symbolsTime":"7 mins."},"categories":[{"name":"spring","slug":"spring","count":15,"path":"api/categories/spring.json"}],"tags":[{"name":"session","slug":"session","count":6,"path":"api/tags/session.json"},{"name":"分布式","slug":"分布式","count":6,"path":"api/tags/分布式.json"},{"name":"redis","slug":"redis","count":5,"path":"api/tags/redis.json"}],"author":{"name":"glmapper","slug":"blog-author","avatar":"https://glmapper-blog.oss-cn-hangzhou.aliyuncs.com/common/favicon.ico","link":"/","description":"开放，开源，分享，共享","socials":{"github":"https://github.com/glmapper","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/2412872703","zhihu":"","csdn":"","juejin":"https://juejin.cn/user/3227821827961806","customs":{"sofastack":{"icon":"https://glmapper-blog.oss-cn-hangzhou.aliyuncs.com/common/sofastack.svg","link":"https://www.sofastack.tech/"}}}}}}