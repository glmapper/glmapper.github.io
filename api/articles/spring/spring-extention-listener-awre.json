{"title":"聊一聊 Spring 中的扩展机制之 Listener & Awre","uid":"fff7a6707fa538995f040f2ec6d86c43","slug":"spring/spring-extention-listener-awre","date":"2018-08-19T15:14:24.000Z","updated":"2024-07-05T04:09:05.816Z","comments":true,"path":"api/articles/spring/spring-extention-listener-awre.json","keywords":null,"cover":null,"content":"<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>之前 Spring 源码系列文章中大多是底层源码的分析，通过源码可以让我们能够清晰的了解 Spring 到底是什么，而不是停留于表面的认知。比如当我们要使用 @Autowired 注解时，可以拿到我们想要的 bean ,但是为什么可以是值得思考的。– 关于阅读源码</p></blockquote>\n<p>Spring源码的阅读结合日常的使用，可以帮助我们更好的掌握这个庞大的技术体系，实际的开发工作中有很多地方可以借鉴它的一些思想来帮助我们更好的实现自己的业务逻辑。本篇将以扩展点为切入点，来了解下在Spring生命周期中扩展Spring中的Bean功能。</p>\n<span id=\"more\"></span>\n\n<h2 id=\"ApplicationListener-扩展\"><a href=\"#ApplicationListener-扩展\" class=\"headerlink\" title=\"ApplicationListener 扩展\"></a>ApplicationListener 扩展</h2><p><code>ApplicationListener</code> 其实是 <code>spring</code> 事件通知机制中核心概念；在java的事件机制中，一般会有三个概念：</p>\n<ul>\n<li>event object : 事件对象</li>\n<li>event source ：事件源，产生事件的地方</li>\n<li>event listener ：监听事件并处理</li>\n</ul>\n<p><code>ApplicationListener</code> 继承自 <code>java.util.EventListener</code> ，提供了对于<code>Spring</code>中事件机制的扩展。</p>\n<p><code>ApplicationListener</code> 在实际的业务场景中使用的非常多，比如我一般喜欢在容器初始化完成之后来做一些资源载入或者一些组件的初始化。这里的容器指的就是<code>Ioc</code>容器，对应的事件是<code>ContextRefreshedEvent</code> 。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">StartApplicationListener</span> <span class=\"keyword\">implements</span></span><br><span class=\"line\"><span class=\"title class_\">ApplicationListener</span>&lt;ContextRefreshedEvent&gt; &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">onApplicationEvent</span><span class=\"params\">(ContextRefreshedEvent</span></span><br><span class=\"line\"><span class=\"params\">    contextRefreshedEvent)</span> &#123;</span><br><span class=\"line\">       <span class=\"comment\">//初始化资源文件</span></span><br><span class=\"line\">       <span class=\"comment\">//初始化组件 如：cache</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>上面这段代码会在容器刷新完成之后来做一些事情。下面通过自定义事件来看看怎么使用，在看具体的<code>demo</code>之前，先来了解下一些关注点。</p>\n<p>日常工作了，如果要使用 <code>Spring</code> 事件传播机制，我们需要关注的点有以下几点：</p>\n<ul>\n<li>事件类，这个用来描述事件本身一些属性，一般继承<code>ApplicationEvent</code></li>\n<li>监听类，用来监听具体的事件并作出响应。需要实现 <code>ApplicationListener</code> 接口</li>\n<li>事件发布类，需要通过这个类将时间发布出去，这样才能被监听者监听到，需要实现<code>ApplicationContextAware</code>接口。</li>\n<li>将事件类和监听类交给<code>Spring</code>容器。</li>\n</ul>\n<p>那么下面就按照这个思路来看下<code>demo</code>的具体实现。</p>\n<h3 id=\"事件类：UserRegisterEvent\"><a href=\"#事件类：UserRegisterEvent\" class=\"headerlink\" title=\"事件类：UserRegisterEvent\"></a>事件类：UserRegisterEvent</h3><p><code>UserRegisterEvent</code> ，用户注册事件；这里作为事件对象，继承自 <code>ApplicationEvent</code>。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@description</span>: 用户注册事件</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@email</span>: &lt;a href=&quot;glmapper_2018@163.com&quot;&gt;&lt;/a&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span>: guolei.sgl</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@date</span>: 18/7/25</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">UserRegisterEvent</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">ApplicationEvent</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String name;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">UserRegisterEvent</span><span class=\"params\">(Object o)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">super</span>(o);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">UserRegisterEvent</span><span class=\"params\">(Object o, String name)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">super</span>(o);</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.name=name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"事件发布类：UserService\"><a href=\"#事件发布类：UserService\" class=\"headerlink\" title=\"事件发布类：UserService\"></a>事件发布类：UserService</h3><p>用户注册服务，这里需要在用户注册时将注册事件发布出去，所以通过实现<code>ApplicationEventPublisherAware</code>接口，使<code>UserService</code>具有事件发布能力。</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>ApplicationEventPublisherAware:发布事件，也就是把某个事件告诉的所有与这个事件相关的监听器。</p></blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@description</span>: 用户注册服务，实现ApplicationEventPublisherAware接口</span></span><br><span class=\"line\"><span class=\"comment\"> ，表明本身具有事件发布能力</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@email</span>: &lt;a href=&quot;glmapper_2018@163.com&quot;&gt;&lt;/a&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span>: guolei.sgl</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@date</span>: 18/7/25</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">UserService</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">ApplicationEventPublisherAware</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> ApplicationEventPublisher applicationEventPublisher;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setApplicationEventPublisher</span><span class=\"params\">(ApplicationEventPublisher</span></span><br><span class=\"line\"><span class=\"params\">    applicationEventPublisher)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.applicationEventPublisher = applicationEventPublisher;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">register</span><span class=\"params\">(String name)</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;用户：&quot;</span> + name + <span class=\"string\">&quot; 已注册！&quot;</span>);</span><br><span class=\"line\">        applicationEventPublisher.publishEvent(<span class=\"keyword\">new</span> <span class=\"title class_\">UserRegisterEvent</span>(name));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这里的<code>UserService</code>实际上是作为事件源存在的，通过<code>register</code>将用户注册事件传播出去。那么下面就是需要定义如何来监听这个事件，并且将事件进行消费处理掉，这里就是通过<code>ApplicationListener</code>来完成。</p>\n<h3 id=\"监听类：BonusServerListener\"><a href=\"#监听类：BonusServerListener\" class=\"headerlink\" title=\"监听类：BonusServerListener\"></a>监听类：BonusServerListener</h3><p>当用户触发注册操作时，向积分服务发送消息，为用户初始化积分。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@description</span>: BonusServerListener</span></span><br><span class=\"line\"><span class=\"comment\"> 积分处理，当用户注册时，给当前用户增加初始化积分</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@email</span>: &lt;a href=&quot;glmapper_2018@163.com&quot;&gt;&lt;/a&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span>: guolei.sgl</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@date</span>: 18/7/25</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">BonusServerListener</span> <span class=\"keyword\">implements</span></span><br><span class=\"line\"><span class=\"title class_\">ApplicationListener</span>&lt;UserRegisterEvent&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">onApplicationEvent</span><span class=\"params\">(UserRegisterEvent event)</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;积分服务接到通知，给 &quot;</span> + event.getSource() +</span><br><span class=\"line\">        <span class=\"string\">&quot; 增加积分...&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"注册到容器中\"><a href=\"#注册到容器中\" class=\"headerlink\" title=\"注册到容器中\"></a>注册到容器中</h3><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=<span class=\"string\">&quot;1.0&quot;</span> encoding=<span class=\"string\">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">beans</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">       <span class=\"attr\">xmlns:xsi</span>=<span class=\"string\">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">       <span class=\"attr\">xmlns:context</span>=<span class=\"string\">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">       <span class=\"attr\">xsi:schemaLocation</span>=<span class=\"string\">&quot;</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"tag\">        http://www.springframework.org/schema/beans</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"tag\">        http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"tag\">        http://www.springframework.org/schema/context</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"tag\">        http://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span></span><br><span class=\"line\">        </span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;userService&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;com.glmapper.extention.UserService&quot;</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;bonusServerListener&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">class</span>=<span class=\"string\">&quot;com.glmapper.extention.BonusServerListener&quot;</span>/&gt;</span></span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"客户端类\"><a href=\"#客户端类\" class=\"headerlink\" title=\"客户端类\"></a>客户端类</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@description</span>: 客户端类</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@email</span>: &lt;a href=&quot;glmapper_2018@163.com&quot;&gt;&lt;/a&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span>: guolei.sgl</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@date</span>: 18/7/25</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">MainTest</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">ApplicationContext</span> <span class=\"variable\">context</span> <span class=\"operator\">=</span><span class=\"keyword\">new</span> </span><br><span class=\"line\">        <span class=\"title class_\">ClassPathXmlApplicationContext</span>(<span class=\"string\">&quot;beans.xml&quot;</span>);</span><br><span class=\"line\">        <span class=\"type\">UserService</span> <span class=\"variable\">userService</span> <span class=\"operator\">=</span> (UserService)</span><br><span class=\"line\">        context.getBean(<span class=\"string\">&quot;userService&quot;</span>);</span><br><span class=\"line\">        <span class=\"comment\">//注册事件触发</span></span><br><span class=\"line\">        userService.register(<span class=\"string\">&quot;glmapper&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>客户端类中，注册一个<code>name</code>为<code>glmapper</code>的用户，执行结果：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">用户：glmapper 已注册！</span><br><span class=\"line\">积分服务接到通知，给 glmapper 增加积分...</span><br></pre></td></tr></table></figure>\n<p>现在来考虑另外一个问题，增加一个功能，用户注册之后给用户发一个邮件。这个其实就是增加一个监听类就可以，前提是这个监听者是监听当前事件的。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@description</span>: 邮件服务监听器，当监听到用户的注册行为时，</span></span><br><span class=\"line\"><span class=\"comment\">    给用户发送邮件通知</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@email</span>: &lt;a href=&quot;glmapper_2018@163.com&quot;&gt;&lt;/a&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span>: guolei.sgl</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@date</span>: 18/7/25</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">EmailServerListener</span> <span class=\"keyword\">implements</span></span><br><span class=\"line\"><span class=\"title class_\">ApplicationListener</span>&lt;UserRegisterEvent&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">onApplicationEvent</span><span class=\"params\">(UserRegisterEvent event)</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;邮件服务接到通知，给 &quot;</span> + event.getSource() +</span><br><span class=\"line\">        <span class=\"string\">&quot; 发送邮件...&quot;</span>);</span><br><span class=\"line\">   </span><br></pre></td></tr></table></figure>\n<p>这里如果将<code>UserRegisterEvent</code>换成<code>UserLoginEvent</code>，那么邮件服务将不会有任何行为。</p>\n<p>增加发送邮件监听类之后的执行结果：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">用户：glmapper 已注册！</span><br><span class=\"line\">邮件服务接到通知，给 glmapper 发送邮件...</span><br><span class=\"line\">积分服务接到通知，给 glmapper 增加积分...</span><br></pre></td></tr></table></figure>\n\n<p><code>Spring</code> 的事件传播机制是基于观察者模式（<code>Observer</code>）实现的，它可以将 <code>Spring Bean </code>的改变定义为事件 <code>ApplicationEvent</code>，通过 <code>ApplicationListener</code> 监听 <code>ApplicationEvent</code> 事件，一旦<code>Spring Bean</code> 使用 <code>ApplicationContext.publishEvent( ApplicationEvent event )</code>发布事件后，<code>Spring</code> 容器会通知注册在 容器中所有 <code>ApplicationListener</code> 接口的实现类，最后 <code>ApplicationListener</code> 接口实现类判断是否处理刚发布出来的 <code>ApplicationEvent</code> 事件。</p>\n<h2 id=\"ApplicationContextAware-扩展\"><a href=\"#ApplicationContextAware-扩展\" class=\"headerlink\" title=\"ApplicationContextAware 扩展\"></a>ApplicationContextAware 扩展</h2><p><code>ApplicationContextAware</code>中只有一个<code>setApplicationContext</code>方法。实现了<code>ApplicationContextAware</code>接口的类，可以在该<code>Bean</code>被加载的过程中获取<code>Spring</code>的应用上下文<code>ApplicationContext</code>，通过<code>ApplicationContext</code>可以获取<br><code>Spring</code>容器内的很多信息。</p>\n<p>这种一般在需要手动获取<code>Bean</code>的注入实例对象时会使用到。下面通过一个简单的<code>demo</code>来了解下。</p>\n<p><code>GlmapperApplicationContext</code> 持有<code>ApplicationContext</code>对象，通过实现 <code>ApplicationContextAware</code>接口来给<code>ApplicationContext</code>做赋值。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@description</span>: GlmapperApplicationContext</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@email</span>: &lt;a href=&quot;glmapper_2018@163.com&quot;&gt;&lt;/a&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span>: guolei.sgl</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@date</span>: 18/7/29</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">GlmapperApplicationContext</span> <span class=\"keyword\">implements</span></span><br><span class=\"line\"><span class=\"title class_\">ApplicationContextAware</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span>  ApplicationContext applicationContext;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setApplicationContext</span><span class=\"params\">(ApplicationContext</span></span><br><span class=\"line\"><span class=\"params\">    applicationContext)</span> <span class=\"keyword\">throws</span> BeansException &#123;</span><br><span class=\"line\">            <span class=\"built_in\">this</span>.applicationContext=applicationContext;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> ApplicationContext <span class=\"title function_\">getApplicationContext</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> applicationContext;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>需要手动获取的<code>bean</code>:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@description</span>: HelloService</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@email</span>: &lt;a href=&quot;glmapper_2018@163.com&quot;&gt;&lt;/a&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span>: guolei.sgl</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@date</span>: 18/7/29</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">HelloService</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">sayHello</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;Hello Glmapper&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在配置文件中进行配置：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;helloService&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"attr\">class</span>=<span class=\"string\">&quot;com.glmapper.extention.applicationcontextaware.HelloService&quot;</span>/&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;glmapperApplicationContext&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"attr\">class</span>=<span class=\"string\">&quot;com.glmapper.extention.applicationcontextaware.GlmapperApplicationContext&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>客户端类调用：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">MainTest</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">ApplicationContext</span> <span class=\"variable\">context</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span></span><br><span class=\"line\">        <span class=\"title class_\">ClassPathXmlApplicationContext</span>(<span class=\"string\">&quot;beans.xml&quot;</span>);</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"type\">HelloService</span> <span class=\"variable\">helloService</span> <span class=\"operator\">=</span> (HelloService)</span><br><span class=\"line\">        context.getBean(<span class=\"string\">&quot;helloService&quot;</span>);</span><br><span class=\"line\">        helloService.sayHello();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//这里通过实现ApplicationContextAware接口的类来完成bean的获取</span></span><br><span class=\"line\">        <span class=\"type\">GlmapperApplicationContext</span> <span class=\"variable\">glmapperApplicationContext</span> <span class=\"operator\">=</span></span><br><span class=\"line\">        (GlmapperApplicationContext) context.getBean(<span class=\"string\">&quot;glmapperApplicationContext&quot;</span>);</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"type\">ApplicationContext</span> <span class=\"variable\">applicationContext</span> <span class=\"operator\">=</span></span><br><span class=\"line\">        glmapperApplicationContext.getApplicationContext();</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"type\">HelloService</span> <span class=\"variable\">glmapperHelloService</span> <span class=\"operator\">=</span> (HelloService)</span><br><span class=\"line\">        applicationContext.getBean(<span class=\"string\">&quot;helloService&quot;</span>);</span><br><span class=\"line\">        </span><br><span class=\"line\">        glmapperHelloService.sayHello();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"BeanFactoryAware-扩展\"><a href=\"#BeanFactoryAware-扩展\" class=\"headerlink\" title=\"BeanFactoryAware 扩展\"></a>BeanFactoryAware 扩展</h2><p>我们知道<code>BeanFactory</code>是整个<code>Ioc</code>容器最顶层的接口，它规定了容器的基本行为。实现<code>BeanFactoryAware</code>接口就表明当前类具体<code>BeanFactory</code>的能力。</p>\n<p><code>BeanFactoryAware</code>接口中只有一个<code>setBeanFactory</code>方法。实现了<code>BeanFactoryAware</code>接口的类，可以在该<code>Bean</code>被加载的过程中获取加载该<code>Bean</code>的<code>BeanFactory</code>，同时也可以获取这个<code>BeanFactory</code>中加载的其它<code>Bean</code>。</p>\n<p>来想一个问题，我们为什么需要通过<code>BeanFactory</code>的<code>getBean</code>来获取<code>Bean</code>呢？Spring已经提供了很多便捷的注入方式，那么通过<code>BeanFactory</code>的<code>getBean</code>来获取<code>Bean</code>有什么好处呢？来看一个场景。</p>\n<p>现在有一个<code>HelloService</code>，这个<code>HelloService</code>就是打招呼，我们需要通过不同的语言来实现打招呼，比如用中文，用英文。一般的做法是：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">HelloService</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title function_\">sayHello</span><span class=\"params\">()</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//英文打招呼实现</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">GlmapperHelloServiceImpl</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">HelloService</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">sayHello</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;Hello Glmapper&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//中文打招呼实现</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">LeishuHelloServiceImpl</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">HelloService</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">sayHello</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;你好，磊叔&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>客户端类来调用务必会出现下面的方式：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">if (condition==&quot;英文&quot;)&#123;</span><br><span class=\"line\">    glmapperHelloService.sayHello();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">if (condition==&quot;中文&quot;)&#123;</span><br><span class=\"line\">    leishuHelloService.sayHello();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>如果有一天，老板说我们要做国际化，要实现全球所有的语言来问候。你是说好的，还是控制不住要动手呢？</p>\n<p>那么有没有什么方式可以动态的去决定我的客户端类到底去调用哪一种语言实现，而不是用过if-else方式来罗列呢？是的，对于这些需要动态的去获取对象的场景，<code>BeanFactoryAware</code>就可以很好的搞定。OK，来看代码改造：</p>\n<p>引入<code>BeanFactoryAware</code>：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@description</span>: 实现BeanFactoryAware ，让当前bean本身具有 BeanFactory 的能力</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * 实现 BeanFactoηAware 接口的 bean 可以直接访问 Spring 容器，被容器创建以后，</span></span><br><span class=\"line\"><span class=\"comment\"> * 它会拥有一个指向 Spring</span></span><br><span class=\"line\"><span class=\"comment\"> 容器的引用，可以利用该bean根据传入参数动态获取被spring工厂加载的bean</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@email</span>: &lt;a href=&quot;glmapper_2018@163.com&quot;&gt;&lt;/a&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span>: guolei.sgl</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@date</span>: 18/7/29</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">GlmapperBeanFactory</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">BeanFactoryAware</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> BeanFactory beanFactory;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setBeanFactory</span><span class=\"params\">(BeanFactory beanFactory)</span> <span class=\"keyword\">throws</span></span><br><span class=\"line\">    BeansException &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.beanFactory=beanFactory;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 提供一个execute 方法来实现不同业务实现类的调度器方案。</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> beanName</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">execute</span><span class=\"params\">(String beanName)</span>&#123;</span><br><span class=\"line\">        HelloService helloService=(HelloService)</span><br><span class=\"line\">        beanFactory.getBean(beanName);</span><br><span class=\"line\">        helloService.sayHello();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这里为了逻辑方便理解，再加入一个<code>HelloFacade</code> 类,这个类的作用就是持有一个<code>BeanFactoryAware</code>的实例对象，然后通过<code>HelloFacade</code>实例对象的方法来屏蔽底层<code>BeanFactoryAware</code>实例的实现细节。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">HelloFacade</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> GlmapperBeanFactory glmapperBeanFactory;</span><br><span class=\"line\">    <span class=\"comment\">//调用glmapperBeanFactory的execute方法</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">sayHello</span><span class=\"params\">(String beanName)</span>&#123;</span><br><span class=\"line\">        glmapperBeanFactory.execute(beanName);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setGlmapperBeanFactory</span><span class=\"params\">(GlmapperBeanFactory beanFactory)</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.glmapperBeanFactory = beanFactory;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>客户端类</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">MainTest</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">ApplicationContext</span> <span class=\"variable\">context</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span></span><br><span class=\"line\">        <span class=\"title class_\">ClassPathXmlApplicationContext</span>(<span class=\"string\">&quot;beans.xml&quot;</span>);</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"type\">HelloFacade</span> <span class=\"variable\">helloFacade</span> <span class=\"operator\">=</span> (HelloFacade)</span><br><span class=\"line\">        context.getBean(<span class=\"string\">&quot;helloFacade&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">GlmapperBeanFactory</span> <span class=\"variable\">glmapperBeanFactory</span> <span class=\"operator\">=</span> (GlmapperBeanFactory)</span><br><span class=\"line\">        context.getBean(<span class=\"string\">&quot;glmapperBeanFactory&quot;</span>);</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">//这里其实可以不通过set方法注入到helloFacade中，</span></span><br><span class=\"line\">        <span class=\"comment\">//可以在helloFacade中通过autowired</span></span><br><span class=\"line\">        <span class=\"comment\">//注入；这里在使用main方法来执行验证，所以就手动set进入了</span></span><br><span class=\"line\">        helloFacade.setGlmapperBeanFactory(glmapperBeanFactory);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//这个只需要传入不同HelloService的实现类的beanName，</span></span><br><span class=\"line\">        <span class=\"comment\">//就可以执行不同的业务逻辑</span></span><br><span class=\"line\">        helloFacade.sayHello(<span class=\"string\">&quot;glmapperHelloService&quot;</span>);</span><br><span class=\"line\">        helloFacade.sayHello(<span class=\"string\">&quot;leishuHelloService&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>可以看到在调用者（客户端）类中，只需要通过一个<code>beanName</code>就可以实现不同实现类的切换，而不是通过一堆if-else来判断。另外有的小伙伴可能会说，程序怎么知道用哪个<code>beanName</code>呢？其实这个也很简单，这个参数我们可以通过一些途径来拼接得到，比如使用一个<code>prefix</code>用来指定语言，<code>prefix</code>+<code>HelloService</code>就可以确定唯一的<code>beanName</code>。</p>\n<h2 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h2><p>本来想着在一篇文章里面把扩展点都写一下的，但是实在太长了。后面差不多还有两篇。本系列中所有的<code>demo</code>可以在<code>github</code>获取，也欢迎小伙伴把能够想到的扩展点pr过来。</p>\n<ul>\n<li><a href=\"https://github.com/glmapper/glmapper-spring-extention\">glmapper-spring-extention</a></li>\n</ul>\n","text":" 之前 Spring 源码系列文章中大多是底层源码的分析，通过源码可以让我们能够清晰的了解 Spring 到底是什么，而不是停留于表面的认知。比如当我们要使用 ...","permalink":"/post/spring/spring-extention-listener-awre","photos":[],"count_time":{"symbolsCount":"12k","symbolsTime":"11 mins."},"categories":[{"name":"spring","slug":"spring","count":15,"path":"api/categories/spring.json"}],"tags":[{"name":"spring","slug":"spring","count":11,"path":"api/tags/spring.json"},{"name":"spring 扩展机制","slug":"spring-扩展机制","count":2,"path":"api/tags/spring-扩展机制.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#ApplicationListener-%E6%89%A9%E5%B1%95\"><span class=\"toc-text\">ApplicationListener 扩展</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%BA%8B%E4%BB%B6%E7%B1%BB%EF%BC%9AUserRegisterEvent\"><span class=\"toc-text\">事件类：UserRegisterEvent</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%BA%8B%E4%BB%B6%E5%8F%91%E5%B8%83%E7%B1%BB%EF%BC%9AUserService\"><span class=\"toc-text\">事件发布类：UserService</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%9B%91%E5%90%AC%E7%B1%BB%EF%BC%9ABonusServerListener\"><span class=\"toc-text\">监听类：BonusServerListener</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%B3%A8%E5%86%8C%E5%88%B0%E5%AE%B9%E5%99%A8%E4%B8%AD\"><span class=\"toc-text\">注册到容器中</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%AE%A2%E6%88%B7%E7%AB%AF%E7%B1%BB\"><span class=\"toc-text\">客户端类</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#ApplicationContextAware-%E6%89%A9%E5%B1%95\"><span class=\"toc-text\">ApplicationContextAware 扩展</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#BeanFactoryAware-%E6%89%A9%E5%B1%95\"><span class=\"toc-text\">BeanFactoryAware 扩展</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%B0%8F%E7%BB%93\"><span class=\"toc-text\">小结</span></a></li></ol>","author":{"name":"glmapper","slug":"blog-author","avatar":"https://glmapper-blog.oss-cn-hangzhou.aliyuncs.com/common/favicon.ico","link":"/","description":"开放，开源，分享，共享","socials":{"github":"https://github.com/glmapper","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/2412872703","zhihu":"","csdn":"","juejin":"https://juejin.cn/user/3227821827961806","customs":{"sofastack":{"icon":"https://glmapper-blog.oss-cn-hangzhou.aliyuncs.com/common/sofastack.svg","link":"https://www.sofastack.tech/"}}}},"mapped":true,"hidden":false,"prev_post":{"title":"聊一聊 Spring 中的扩展机制之 NamespaceHandler","uid":"23a4ce7fdfa388085850b04ca0698cfd","slug":"spring/spring-extention-namespace-handler","date":"2018-08-26T15:53:52.000Z","updated":"2024-07-05T04:09:05.816Z","comments":true,"path":"api/articles/spring/spring-extention-namespace-handler.json","keywords":null,"cover":[],"text":" 原文：https://juejin.cn/post/6844903665262657544 前一篇 聊一聊 Spring 中的扩展机制（一） 中聊到了Appl...","permalink":"/post/spring/spring-extention-namespace-handler","photos":[],"count_time":{"symbolsCount":"9.3k","symbolsTime":"8 mins."},"categories":[{"name":"spring","slug":"spring","count":15,"path":"api/categories/spring.json"}],"tags":[{"name":"spring","slug":"spring","count":11,"path":"api/tags/spring.json"},{"name":"spring 扩展机制","slug":"spring-扩展机制","count":2,"path":"api/tags/spring-扩展机制.json"}],"author":{"name":"glmapper","slug":"blog-author","avatar":"https://glmapper-blog.oss-cn-hangzhou.aliyuncs.com/common/favicon.ico","link":"/","description":"开放，开源，分享，共享","socials":{"github":"https://github.com/glmapper","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/2412872703","zhihu":"","csdn":"","juejin":"https://juejin.cn/user/3227821827961806","customs":{"sofastack":{"icon":"https://glmapper-blog.oss-cn-hangzhou.aliyuncs.com/common/sofastack.svg","link":"https://www.sofastack.tech/"}}}}},"next_post":{"title":"Google Guava 在实际场景中的应用封装","uid":"007bfdf0af7a404de7413e60d2f769a0","slug":"middleware/middleware-cache-guava-practice","date":"2018-06-24T16:30:32.000Z","updated":"2024-07-05T04:09:05.788Z","comments":true,"path":"api/articles/middleware/middleware-cache-guava-practice.json","keywords":null,"cover":[],"text":" 原文：https://juejin.cn/post/6844903624519188487 毕竟西湖六月中，风光不与四时同。 接天莲叶无穷碧，映日荷花别样红。...","permalink":"/post/middleware/middleware-cache-guava-practice","photos":[],"count_time":{"symbolsCount":"13k","symbolsTime":"12 mins."},"categories":[{"name":"Middleware","slug":"Middleware","count":11,"path":"api/categories/Middleware.json"}],"tags":[{"name":"cache","slug":"cache","count":2,"path":"api/tags/cache.json"},{"name":"guava","slug":"guava","count":1,"path":"api/tags/guava.json"}],"author":{"name":"glmapper","slug":"blog-author","avatar":"https://glmapper-blog.oss-cn-hangzhou.aliyuncs.com/common/favicon.ico","link":"/","description":"开放，开源，分享，共享","socials":{"github":"https://github.com/glmapper","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/2412872703","zhihu":"","csdn":"","juejin":"https://juejin.cn/user/3227821827961806","customs":{"sofastack":{"icon":"https://glmapper-blog.oss-cn-hangzhou.aliyuncs.com/common/sofastack.svg","link":"https://www.sofastack.tech/"}}}}}}