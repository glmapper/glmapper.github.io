{"title":"Spring 源码系列-BeanDefinition","uid":"8260d6d08a83b75824bdeb2a713c7b70","slug":"spring/spring-ioc-bean-definition","date":"2018-02-07T02:24:11.000Z","updated":"2024-07-05T04:09:05.816Z","comments":true,"path":"api/articles/spring/spring-ioc-bean-definition.json","keywords":null,"cover":[],"content":"<p>Bean的定义主要由 BeanDefinition 来描述的。作为Spring中用于包装Bean的数据结构，今天就来看看它的面纱下的真容吧</p>\n<span id=\"more\"></span>\n<h2 id=\"BeanDefinition-类定义\"><a href=\"#BeanDefinition-类定义\" class=\"headerlink\" title=\"BeanDefinition 类定义\"></a>BeanDefinition 类定义</h2><p>首先就是BeanDefinition的类定义：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">BeanDefinition</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">AttributeAccessor</span>, BeanMetadataElement</span><br></pre></td></tr></table></figure>\n<p>对，没错，这货是个接口，而不是类，是不是有点莫名奇妙呢？我们都知道在JAVA中，接口是不能用来new出新的对象的，那么在Spring中，到底将XML解析出来的Bean包装成了什么呢？（这个密等下揭开）</p>\n<p>先来看看BeanDefinition一个继承结构吧（均是与BeanDefinition有直接关联的类或者接口）！</p>\n<p><img src=\"https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2018/1/20/16112753255accae~tplv-t2oaga2asx-image.image\"><br>从类图中可以看出，BeanDefinition继承了AttributeAccessor和BeanMetadataElement两个接口；一个一个看。</p>\n<h3 id=\"AttributeAccessor\"><a href=\"#AttributeAccessor\" class=\"headerlink\" title=\"AttributeAccessor\"></a>AttributeAccessor</h3><p>AttributeAccessor 接口定义了最基本的对任意对象的元数据的修改或者获取，主要方法有：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//将name定义的属性设置为提供的value值。如果value的值为null，则该属性为&#123;@link #removeAttribute removed&#125;。</span></span><br><span class=\"line\"><span class=\"comment\">//通常，用户应该注意通过使用完全限定的名称（可能使用类或包名称作为前缀）来防止与其他元数据属性重叠。</span></span><br><span class=\"line\"><span class=\"keyword\">void</span> <span class=\"title function_\">setAttribute</span><span class=\"params\">(String name, Object value)</span>;</span><br><span class=\"line\"><span class=\"comment\">//获取标识为name的属性的值。</span></span><br><span class=\"line\">Object <span class=\"title function_\">getAttribute</span><span class=\"params\">(String name)</span>;</span><br><span class=\"line\"><span class=\"comment\">//删除标识为name的属性，并返回属性值</span></span><br><span class=\"line\">Object <span class=\"title function_\">removeAttribute</span><span class=\"params\">(String name)</span>;</span><br><span class=\"line\"><span class=\"comment\">//如果名为name的属性是否存在，存在返回true，否则返回false。</span></span><br><span class=\"line\"><span class=\"type\">boolean</span> <span class=\"title function_\">hasAttribute</span><span class=\"params\">(String name)</span>;</span><br><span class=\"line\"><span class=\"comment\">//返回所有属性的名称。</span></span><br><span class=\"line\">String[] attributeNames();</span><br></pre></td></tr></table></figure>\n<h3 id=\"BeanMetadataElement\"><a href=\"#BeanMetadataElement\" class=\"headerlink\" title=\"BeanMetadataElement\"></a>BeanMetadataElement</h3><p>BeanMetadataElement 接口提供了一个 getResource() 方法,用来传输一个可配置的源对象。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//返回此元数据元素的配置源对象（可能为null）。</span></span><br><span class=\"line\">Object <span class=\"title function_\">getSource</span><span class=\"params\">()</span>;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"BeanDifinition-源码分析\"><a href=\"#BeanDifinition-源码分析\" class=\"headerlink\" title=\"BeanDifinition 源码分析\"></a>BeanDifinition 源码分析</h3><p>一个BeanDefinition描述了一个bean的实例，包括属性值，构造方法参数值和继承自它的类的更多信息。BeanDefinition仅仅是一个最简单的接口，主要功能是允许BeanFactoryPostProcessor 例如PropertyPlaceHolderConfigure 能够检索并修改属性值和别的bean的元数据（译注）。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//标准单例作用域的作用域标识符：“singleton”。</span></span><br><span class=\"line\"><span class=\"comment\">//对于扩展的bean工厂可能支持更多的作用域。</span></span><br><span class=\"line\"><span class=\"type\">String</span> <span class=\"variable\">SCOPE_SINGLETON</span> <span class=\"operator\">=</span> ConfigurableBeanFactory.SCOPE_SINGLETON;</span><br><span class=\"line\"><span class=\"comment\">//标准原型作用域的范围标识符：“prototype”。</span></span><br><span class=\"line\"><span class=\"comment\">//对于扩展的bean工厂可能支持更多的作用域。</span></span><br><span class=\"line\"><span class=\"type\">String</span> <span class=\"variable\">SCOPE_PROTOTYPE</span> <span class=\"operator\">=</span> ConfigurableBeanFactory.SCOPE_PROTOTYPE;</span><br><span class=\"line\"><span class=\"comment\">//表示BeanDefinition是应用程序主要部分的角色提示。 通常对应于用户定义的bean。</span></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"variable\">ROLE_APPLICATION</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"comment\">//表示BeanDefinition是某些大型配置的支持部分的角色提示，通常是一个外部ComponentDefinition。</span></span><br><span class=\"line\"><span class=\"comment\">//当查看某个特定的ComponentDefinition时，认为bean非常重要，</span></span><br><span class=\"line\"><span class=\"comment\">//以便在查看应用程序的整体配置时能够意识到这一点。</span></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"variable\">ROLE_SUPPORT</span> <span class=\"operator\">=</span> <span class=\"number\">1</span>; <span class=\"comment\">//1实际上就是说，我这个Bean是用户的，是从配置文件中过来的。</span></span><br><span class=\"line\"><span class=\"comment\">//角色提示表明一个BeanDefinition是提供一个完全背景的角色，并且与最终用户没有关系。</span></span><br><span class=\"line\"><span class=\"comment\">//这个提示用于注册完全是ComponentDefinition内部工作的一部分的bean</span></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"variable\">ROLE_INFRASTRUCTURE</span> <span class=\"operator\">=</span> <span class=\"number\">2</span>; <span class=\"comment\">//2就是我这Bean是Spring自己的，和你用户没有一毛钱关系。</span></span><br></pre></td></tr></table></figure>\n\n<p>上面是BeanDifinition的一些基本属性信息，一个就是标识下当前Bean的作用域，另外就是标识一下这个Bean是内部的还是外部的。下面来看这个接口为其子类都提供了哪些具体的行为方法：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//如果父类存在，设置这个bean定义的父定义的名称。</span></span><br><span class=\"line\"><span class=\"keyword\">void</span> <span class=\"title function_\">setParentName</span><span class=\"params\">(String parentName)</span>;</span><br><span class=\"line\"><span class=\"comment\">//如果父类存在，则返回当前Bean的父类的名称</span></span><br><span class=\"line\">String <span class=\"title function_\">getParentName</span><span class=\"params\">()</span>;</span><br><span class=\"line\"><span class=\"comment\">//指定此bean定义的bean类名称。</span></span><br><span class=\"line\"><span class=\"comment\">//类名称可以在bean factory后期处理中修改，通常用它的解析变体替换原来的类名称。</span></span><br><span class=\"line\"><span class=\"keyword\">void</span> <span class=\"title function_\">setBeanClassName</span><span class=\"params\">(String beanClassName)</span>;</span><br><span class=\"line\"><span class=\"comment\">//返回此bean定义的当前bean类名称。</span></span><br><span class=\"line\"><span class=\"comment\">//需要注意的是，这不一定是在运行时使用的实际类名，以防子类定义覆盖/继承其父类的类名。</span></span><br><span class=\"line\"><span class=\"comment\">//此外，这可能只是调用工厂方法的类，或者它 在调用方法的工厂bean引用的情况下甚至可能是空的。</span></span><br><span class=\"line\"><span class=\"comment\">//因此，不要认为这是在运行时定义的bean类型，而只是将其用于在单独的bean定义级别进行解析。</span></span><br><span class=\"line\">String <span class=\"title function_\">getBeanClassName</span><span class=\"params\">()</span>;</span><br><span class=\"line\"><span class=\"comment\">//覆盖此bean的目标范围，指定一个新的范围名称。</span></span><br><span class=\"line\"><span class=\"keyword\">void</span> <span class=\"title function_\">setScope</span><span class=\"params\">(String scope)</span>;</span><br><span class=\"line\"><span class=\"comment\">//返回此bean的当前目标作用域的名称，如果没有确定，返回null</span></span><br><span class=\"line\">String <span class=\"title function_\">getScope</span><span class=\"params\">()</span>;</span><br><span class=\"line\"><span class=\"comment\">//设置这个bean是否应该被延迟初始化。如果&#123;false&#125;，那么这个bean将在启动时由bean工厂实例化，</span></span><br><span class=\"line\"><span class=\"comment\">//这些工厂执行单例的立即初始化。</span></span><br><span class=\"line\"><span class=\"comment\">//懒加载 &lt;bean lazy-init=&quot;true/false&quot;&gt;</span></span><br><span class=\"line\"><span class=\"keyword\">void</span> <span class=\"title function_\">setLazyInit</span><span class=\"params\">(<span class=\"type\">boolean</span> lazyInit)</span>;</span><br><span class=\"line\"><span class=\"comment\">//返回这个bean是否应该被延迟初始化，即不是在启动时立即实例化。只适用于单例bean。</span></span><br><span class=\"line\"><span class=\"type\">boolean</span> <span class=\"title function_\">isLazyInit</span><span class=\"params\">()</span>;</span><br><span class=\"line\"><span class=\"comment\">//设置这个bean依赖被初始化的bean的名字。 bean工厂将保证这些bean首先被初始化。</span></span><br><span class=\"line\"><span class=\"comment\">//&lt;bean depends-on=&quot;&quot;&gt;</span></span><br><span class=\"line\"><span class=\"keyword\">void</span> <span class=\"title function_\">setDependsOn</span><span class=\"params\">(String... dependsOn)</span>;</span><br><span class=\"line\"><span class=\"comment\">//返回这个bean依赖的bean名称。</span></span><br><span class=\"line\">String[] getDependsOn();</span><br><span class=\"line\"><span class=\"comment\">//设置这个bean是否是获得自动装配到其他bean的候选人。</span></span><br><span class=\"line\"><span class=\"comment\">//需要注意是，此标志旨在仅影响基于类型的自动装配。</span></span><br><span class=\"line\"><span class=\"comment\">//它不会影响按名称的显式引用，即使指定的bean没有标记为autowire候选，也可以解决这个问题。</span></span><br><span class=\"line\"><span class=\"comment\">//因此，如果名称匹配，通过名称的自动装配将注入一个bean。</span></span><br><span class=\"line\"><span class=\"keyword\">void</span> <span class=\"title function_\">setAutowireCandidate</span><span class=\"params\">(<span class=\"type\">boolean</span> autowireCandidate)</span>;</span><br><span class=\"line\"><span class=\"comment\">//返回这个bean是否是自动装配到其他bean的候选者。就是是否在其他类中使用autowired来注入当前Bean的</span></span><br><span class=\"line\"><span class=\"comment\">//是否为被自动装配 &lt;bean autowire-candidate=&quot;true/false&quot;&gt;</span></span><br><span class=\"line\"><span class=\"type\">boolean</span> <span class=\"title function_\">isAutowireCandidate</span><span class=\"params\">()</span>;</span><br><span class=\"line\"><span class=\"comment\">//是否为主候选bean    使用注解：@Primary</span></span><br><span class=\"line\"><span class=\"keyword\">void</span> <span class=\"title function_\">setPrimary</span><span class=\"params\">(<span class=\"type\">boolean</span> primary)</span>;</span><br><span class=\"line\"><span class=\"comment\">//返回这个bean是否是主要的autowire候选者。</span></span><br><span class=\"line\"><span class=\"type\">boolean</span> <span class=\"title function_\">isPrimary</span><span class=\"params\">()</span>;</span><br><span class=\"line\"><span class=\"comment\">//指定要使用的工厂bean（如果有的话）。 这是调用指定的工厂方法的bean的名称。</span></span><br><span class=\"line\"><span class=\"keyword\">void</span> <span class=\"title function_\">setFactoryBeanName</span><span class=\"params\">(String factoryBeanName)</span>;</span><br><span class=\"line\"><span class=\"comment\">//返回工厂bean的名字，如果有的话。</span></span><br><span class=\"line\">String <span class=\"title function_\">getFactoryBeanName</span><span class=\"params\">()</span>;</span><br><span class=\"line\"><span class=\"comment\">//如果有的话，指定工厂方法。</span></span><br><span class=\"line\"><span class=\"comment\">//这个方法先将通过构造函数参数被调用，或者如果参数，将调用该方法的无参数构造。</span></span><br><span class=\"line\"><span class=\"comment\">//方法将在指定的工厂bean（如果有的话）上被调用，或者作为本地bean类的静态方法被调用。</span></span><br><span class=\"line\"><span class=\"keyword\">void</span> <span class=\"title function_\">setFactoryMethodName</span><span class=\"params\">(String factoryMethodName)</span>;</span><br><span class=\"line\"><span class=\"comment\">//如果存在，返回工厂方法名</span></span><br><span class=\"line\">String <span class=\"title function_\">getFactoryMethodName</span><span class=\"params\">()</span>;</span><br><span class=\"line\"><span class=\"comment\">//返回此bean的构造函数参数值。</span></span><br><span class=\"line\">ConstructorArgumentValues <span class=\"title function_\">getConstructorArgumentValues</span><span class=\"params\">()</span>;</span><br><span class=\"line\"><span class=\"comment\">//获取普通属性集合</span></span><br><span class=\"line\">MutablePropertyValues <span class=\"title function_\">getPropertyValues</span><span class=\"params\">()</span>;</span><br><span class=\"line\"><span class=\"comment\">//是否是单例的</span></span><br><span class=\"line\"><span class=\"type\">boolean</span> <span class=\"title function_\">isSingleton</span><span class=\"params\">()</span>;</span><br><span class=\"line\"><span class=\"comment\">//是否是多例的</span></span><br><span class=\"line\"><span class=\"type\">boolean</span> <span class=\"title function_\">isPrototype</span><span class=\"params\">()</span>;</span><br><span class=\"line\"><span class=\"comment\">//是否是抽象类</span></span><br><span class=\"line\"><span class=\"type\">boolean</span> <span class=\"title function_\">isAbstract</span><span class=\"params\">()</span>;</span><br><span class=\"line\"><span class=\"comment\">//获取这个bean的应用</span></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">getRole</span><span class=\"params\">()</span>;</span><br><span class=\"line\"><span class=\"comment\">//返回对bean定义的可读描述。</span></span><br><span class=\"line\">String <span class=\"title function_\">getDescription</span><span class=\"params\">()</span>;</span><br><span class=\"line\"><span class=\"comment\">//返回该bean定义来自的资源的描述</span></span><br><span class=\"line\">String <span class=\"title function_\">getResourceDescription</span><span class=\"params\">()</span>;</span><br><span class=\"line\"><span class=\"comment\">//返回原始的BeanDefinition;如果没有，则返回null。允许检索装饰的bean定义（如果有的话）。</span></span><br><span class=\"line\"><span class=\"comment\">//注意，这个方法返回直接的发起者。 迭代原始链，找到用户定义的原始BeanDefinition。</span></span><br><span class=\"line\">BeanDefinition <span class=\"title function_\">getOriginatingBeanDefinition</span><span class=\"params\">()</span>;</span><br></pre></td></tr></table></figure>\n\n<p>从上面的属性和方法分析可以看出，BeanDefinition 对于一个Bean的描述做了较为完整的一套约束。这为后续的子类提供的最基本的职责和属性。</p>\n<h2 id=\"beanFactory-创建\"><a href=\"#beanFactory-创建\" class=\"headerlink\" title=\"beanFactory 创建\"></a>beanFactory 创建</h2><p>Spring的Ioc容器其实就是一个bean的关系网，依赖于core，bean，context三个组件来构建的。在spring中最核心的就是对于bean的管理。而bean又依托于我们的容器。本文将从顶层分析一下spring中beanFactory的具体创建过程，为后续的bean的生命周期提供一个基础。</p>\n<h3 id=\"BeanFactory的继承体系\"><a href=\"#BeanFactory的继承体系\" class=\"headerlink\" title=\"BeanFactory的继承体系\"></a>BeanFactory的继承体系</h3><p><img src=\"https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2018/1/29/16141a440ba09c49~tplv-t2oaga2asx-image.image\"><br>从上图可以看到，BeanFactory有三个子类：</p>\n<ul>\n<li>ListableBeanFactory</li>\n<li>HierarchicalBeanFactory</li>\n<li>AutowireCapableBeanFactory</li>\n</ul>\n<p><em>（上述三个类的子类体系小伙伴们可以自己对着源码看下，实在太多）</em></p>\n<p>看下上图中最底层的DefaultListableBeanFactory类的定义：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">DefaultListableBeanFactory</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">AbstractAutowireCapableBeanFactory</span></span><br><span class=\"line\">\t<span class=\"keyword\">implements</span> <span class=\"title class_\">ConfigurableListableBeanFactory</span>, BeanDefinitionRegistry, Serializable</span><br></pre></td></tr></table></figure>\n<p>这个其实就是BeanFactory的默认实现类，它直接或者间接的实现了所有的接口。其实在看spring源码的时候都会遇到类似的设计模式，对于某一个具体的功能，通常都会定义很多层的接口，层层包装，层层委托。这种做法的好处就是，对于不同的场合都会有特定的接口；这样一来就可以在spring内部对对象的传递和转化操作都会有一些访问限制。</p>\n<p>例如ListableBeanFactory接口表示这些Bean是可列表的，而HierarchicalBeanFactory表示的是这些Bean是有继承关系的，也就是每个Bean有可能有父Bean。AutowireCapableBeanFactory接口定义Bean的自动装配规则。这四个接口共同定义了Bean的集合、Bean之间的关系、以及Bean行为。</p>\n<h3 id=\"BeanFactory的创建\"><a href=\"#BeanFactory的创建\" class=\"headerlink\" title=\"BeanFactory的创建\"></a>BeanFactory的创建</h3><p>在之前的文章中说过了容器的刷新过程。BeanFactory的创建也在wac.refresh()方法中。具体看下到底是通过哪些子类来完成的：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 通知子类刷新内部的bean工厂。</span></span><br><span class=\"line\"><span class=\"type\">ConfigurableListableBeanFactory</span> <span class=\"variable\">beanFactory</span> <span class=\"operator\">=</span> obtainFreshBeanFactory();</span><br></pre></td></tr></table></figure>\n<p><em><strong>1.AbstractApplicationContext中的obtainFreshBeanFactory</strong></em></p>\n<p>下面是obtainFreshBeanFactory的方法逻辑：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">protected</span> ConfigurableListableBeanFactory <span class=\"title function_\">obtainFreshBeanFactory</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">//这个是具体创建的方法，由子类实现</span></span><br><span class=\"line\">\trefreshBeanFactory();</span><br><span class=\"line\">\t<span class=\"comment\">//获取BeanFactory实例对象（ConfigurableListableBeanFactory类型的）</span></span><br><span class=\"line\">\t<span class=\"type\">ConfigurableListableBeanFactory</span> <span class=\"variable\">beanFactory</span> <span class=\"operator\">=</span> getBeanFactory();</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (logger.isDebugEnabled()) &#123;</span><br><span class=\"line\">\t\tlogger.debug(<span class=\"string\">&quot;Bean factory for &quot;</span> + getDisplayName() + <span class=\"string\">&quot;: &quot;</span> + beanFactory);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> beanFactory;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>refreshBeanFactory并未有具体的实现逻辑，这个方法主要是通过委托给子类的refreshBeanFactory方法来实现，在AbstractApplicationContext中refreshBeanFactory是一个抽象模板方法：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">protected</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title function_\">refreshBeanFactory</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> BeansException, IllegalStateException;</span><br></pre></td></tr></table></figure>\n\n<p><em><strong>2.refreshBeanFactory方法(AbstractRefreshableApplicationContext类中)：</strong></em></p>\n<p><code>下面只注释与beanFactory创建相关的代码</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">protected</span> <span class=\"keyword\">final</span> <span class=\"keyword\">void</span> <span class=\"title function_\">refreshBeanFactory</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> BeansException &#123;</span><br><span class=\"line\">    <span class=\"comment\">//是否已经有BeanFactory了</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (hasBeanFactory()) &#123;</span><br><span class=\"line\">        <span class=\"comment\">//销毁原有的Bean</span></span><br><span class=\"line\">    \tdestroyBeans();</span><br><span class=\"line\">    \t<span class=\"comment\">//关闭工厂</span></span><br><span class=\"line\">    \tcloseBeanFactory();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">//创建一个新的beanFactory</span></span><br><span class=\"line\">    \t<span class=\"type\">DefaultListableBeanFactory</span> <span class=\"variable\">beanFactory</span> <span class=\"operator\">=</span> createBeanFactory();</span><br><span class=\"line\">    \tbeanFactory.setSerializationId(getId());</span><br><span class=\"line\">    \tcustomizeBeanFactory(beanFactory);</span><br><span class=\"line\">    \tloadBeanDefinitions(beanFactory);</span><br><span class=\"line\">    \t<span class=\"keyword\">synchronized</span> (<span class=\"built_in\">this</span>.beanFactoryMonitor) &#123;</span><br><span class=\"line\">    \t\t<span class=\"built_in\">this</span>.beanFactory = beanFactory;</span><br><span class=\"line\">    \t&#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">catch</span> (IOException ex) &#123;</span><br><span class=\"line\">    \t<span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ApplicationContextException</span>(<span class=\"string\">&quot;I/O error parsing bean definition </span></span><br><span class=\"line\"><span class=\"string\">    \tsource for &quot;</span> + getDisplayName(), ex);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这个方法是实现执行这个上下文的底层bean工厂的实际刷新，如果有的话之前有BeanFactory存在，则关闭以前的bean工厂。并为上下文生命周期的下一个阶段初始化一个新鲜的bean工厂。</p>\n<p><em><strong>3.createBeanFactory(AbstractRefreshableApplicationContext类中)</strong></em></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">protected</span> DefaultListableBeanFactory <span class=\"title function_\">createBeanFactory</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">DefaultListableBeanFactory</span>(getInternalParentBeanFactory());</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这个方法就是为当前上下文创建一个内部的bean工厂。每次调用refresh()方法是都会创建尝试创建。默认实现是创建一个DefaultListableBeanFactory。并通过getInternalParentBeanFactory（）获取内部bean工厂来作为父级bean工厂。可以在子类中重写，例如自定义DefaultListableBeanFactory的设置。</p>\n<p><em><strong>getInternalParentBeanFactory（AbstractApplicationContext类中）</strong></em></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">protected</span> BeanFactory <span class=\"title function_\">getInternalParentBeanFactory</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> (getParent() <span class=\"keyword\">instanceof</span> ConfigurableApplicationContext) ?</span><br><span class=\"line\">\t((ConfigurableApplicationContext) getParent()).getBeanFactory() : getParent();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><em><strong>4.DefaultListableBeanFactory的构造函数</strong></em></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 通过给定的父类创建一个新的DefaultListableBeanFactory容器</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> parentBeanFactory the parent BeanFactory</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"title function_\">DefaultListableBeanFactory</span><span class=\"params\">(BeanFactory parentBeanFactory)</span> &#123;</span><br><span class=\"line\">\t<span class=\"built_in\">super</span>(parentBeanFactory);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>super(parentBeanFactory)调用的是AbstractAutowireCapableBeanFactory的构造函数</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 通过给定的父类构建新的AbstractAutowireCapableBeanFactory</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> parentBeanFactory parent bean factory, or &#123;<span class=\"doctag\">@code</span> null&#125; if none</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"title function_\">AbstractAutowireCapableBeanFactory</span><span class=\"params\">(BeanFactory parentBeanFactory)</span> &#123;</span><br><span class=\"line\">\t<span class=\"built_in\">this</span>();</span><br><span class=\"line\">\t<span class=\"comment\">//设置父工厂</span></span><br><span class=\"line\">\tsetParentBeanFactory(parentBeanFactory);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>this(),还是AbstractAutowireCapableBeanFactory的构造函数：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 构建一个新的AbstractAutowireCapableBeanFactory.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"title function_\">AbstractAutowireCapableBeanFactory</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">\t<span class=\"built_in\">super</span>();</span><br><span class=\"line\">\tignoreDependencyInterface(BeanNameAware.class);</span><br><span class=\"line\">\tignoreDependencyInterface(BeanFactoryAware.class);</span><br><span class=\"line\">\tignoreDependencyInterface(BeanClassLoaderAware.class);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>super()  ;     AbstractBeanFactory的构造函数</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 构建一个新的 AbstractBeanFactory.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"title function_\">AbstractBeanFactory</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"BeanDefinition-载入（上）\"><a href=\"#BeanDefinition-载入（上）\" class=\"headerlink\" title=\"BeanDefinition 载入（上）\"></a>BeanDefinition 载入（上）</h2><div class=\"output_wrapper\" id=\"output_wrapper_id\" style=\"font-size: 16px; color: rgb(62, 62, 62); line-height: 1.6; word-spacing: 0px; letter-spacing: 0px; font-family: 'Helvetica Neue', Helvetica, 'Hiragino Sans GB', 'Microsoft YaHei', Arial, sans-serif;\"><p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.5em 0px;\">继上一篇BeanFactory的创建之后，其实就是BeanDefinition载入了。同样也是在AbstractRefreshableApplicationContext类的refreshBeanFactory方法中完成：</p>\n<pre style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><code class=\"java language-java hljs\" style=\"margin: 0px 2px; line-height: 18px; font-size: 14px; font-weight: normal; word-spacing: 0px; letter-spacing: 0px; font-family: Consolas, Inconsolata, Courier, monospace; border-radius: 0px; color: rgb(169, 183, 198); background: rgb(40, 43, 46); overflow-x: auto; padding: 0.5em; display: block !important; word-wrap: normal !important; word-break: normal !important; white-space: pre !important; overflow: auto !important;\"><span class=\"hljs-comment\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(128, 128, 128); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;\">//创建默认的DefaultListableBeanFactory工厂</span><br>DefaultListableBeanFactory beanFactory = createBeanFactory();<br><span class=\"hljs-comment\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(128, 128, 128); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;\">//设置Id</span><br>beanFactory.setSerializationId(getId());<br><span class=\"hljs-comment\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(128, 128, 128); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;\">//这个方法其实就是设置了allowBeanDefinitionOverriding和allowCircularReferences两个属性</span><br>customizeBeanFactory(beanFactory);<br><br><span class=\"hljs-comment\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(128, 128, 128); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;\">//调用子类的加载bean定义方法，这里会调用XmlWebApplicationContext子类的复写方法</span><br>loadBeanDefinitions(beanFactory);<br></code></pre>\n<p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.5em 0px;\">这里的loadBeanDefinitions也是一个抽象方法，AbstractRefreshableApplicationContext类中并没有给出具体的实现，二是通过子类XmlWebApplicationContext的loadBeanDefinitions完成具体实现。</p>\n<pre style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><code class=\"java language-java hljs\" style=\"margin: 0px 2px; line-height: 18px; font-size: 14px; font-weight: normal; word-spacing: 0px; letter-spacing: 0px; font-family: Consolas, Inconsolata, Courier, monospace; border-radius: 0px; color: rgb(169, 183, 198); background: rgb(40, 43, 46); overflow-x: auto; padding: 0.5em; display: block !important; word-wrap: normal !important; word-break: normal !important; white-space: pre !important; overflow: auto !important;\"><span class=\"hljs-function\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;\"><span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;\">protected</span> <span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;\">void</span> <span class=\"hljs-title\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(165, 218, 45); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;\">loadBeanDefinitions</span><span class=\"hljs-params\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(255, 152, 35); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;\">(DefaultListableBeanFactory beanFactory)</span> <br>        <span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;\">throws</span> BeansException, IOException </span>&#123;<br>    <span class=\"hljs-comment\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(128, 128, 128); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;\">//创建XmlBeanDefinitionReader，并通过回调设置到BeanFactory中</span><br>    XmlBeanDefinitionReader beanDefinitionReader = <span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;\">new</span> XmlBeanDefinitionReader(beanFactory);<br>    <span class=\"hljs-comment\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(128, 128, 128); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;\">//为XmlBeanDefinitionReader配置Environment</span><br>    beanDefinitionReader.setEnvironment(getEnvironment());<br>    <span class=\"hljs-comment\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(128, 128, 128); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;\">//为XmlBeanDefinitionReader配置ResourceLoader，</span><br>    <span class=\"hljs-comment\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(128, 128, 128); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;\">//因为DefaultResourceLoader是父类，所以this可以直接被使用</span><br>    beanDefinitionReader.setResourceLoader(<span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;\">this</span>);<br>    beanDefinitionReader.setEntityResolver(<span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;\">new</span> ResourceEntityResolver(<span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;\">this</span>));<br><br>    <span class=\"hljs-comment\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(128, 128, 128); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;\">// 允许子类提供reader的自定义初始化，然后继续实际加载bean定义。</span><br>    initBeanDefinitionReader(beanDefinitionReader);<br>    loadBeanDefinitions(beanDefinitionReader);<br>&#125;<br></code></pre>\n<p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.5em 0px;\">initBeanDefinitionReader初始化用于加载此上下文的bean定义的bean定义读取器；默认实现是空的。然后下面通过重载的loadBeanDefinitions来做具体的bean解析（这里用到的是XmlBeanDefinitionReader这个解析器）；使用给定的XmlBeanDefinitionReader加载bean definitions。</p>\n<pre style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><code class=\"java language-java hljs\" style=\"margin: 0px 2px; line-height: 18px; font-size: 14px; font-weight: normal; word-spacing: 0px; letter-spacing: 0px; font-family: Consolas, Inconsolata, Courier, monospace; border-radius: 0px; color: rgb(169, 183, 198); background: rgb(40, 43, 46); overflow-x: auto; padding: 0.5em; display: block !important; word-wrap: normal !important; word-break: normal !important; white-space: pre !important; overflow: auto !important;\"><span class=\"hljs-function\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;\"><span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;\">protected</span> <span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;\">void</span> <span class=\"hljs-title\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(165, 218, 45); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;\">loadBeanDefinitions</span><span class=\"hljs-params\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(255, 152, 35); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;\">(XmlBeanDefinitionReader reader)</span> <span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;\">throws</span> IOException </span>&#123;<br>    String[] configLocations = getConfigLocations();<br>    <span class=\"hljs-comment\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(128, 128, 128); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;\">//遍历xml文件</span><br>    <span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;\">if</span> (configLocations != <span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;\">null</span>) &#123;<br>        <span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;\">for</span> (String configLocation : configLocations) &#123;<br>            reader.loadBeanDefinitions(configLocation);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre>\n<p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.5em 0px;\">此时会将我们的applicationContext.xml读入（当然如何还有其他的spring配置文件，同样会一块拿到路径），如下图所示：<br><img src=\"https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2018/1/30/1614658d1b8432d5~tplv-t2oaga2asx-image.image\" alt=\"\" style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; display: block; margin: 0px auto; max-width: 100%;\"><br>然后继续通过loadBeanDefinitions的重载方法继续委托调用。最后交给AbstractBeanDefinitionReader的loadBeanDefinitions来完成；这个代码比较长，拆开一步一步来说，先看下整体的：</p>\n<pre style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><code class=\"java language-java hljs\" style=\"margin: 0px 2px; line-height: 18px; font-size: 14px; font-weight: normal; word-spacing: 0px; letter-spacing: 0px; font-family: Consolas, Inconsolata, Courier, monospace; border-radius: 0px; color: rgb(169, 183, 198); background: rgb(40, 43, 46); overflow-x: auto; padding: 0.5em; display: block !important; word-wrap: normal !important; word-break: normal !important; white-space: pre !important; overflow: auto !important;\"><span class=\"hljs-function\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;\"><span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;\">public</span> <span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;\">int</span> <span class=\"hljs-title\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(165, 218, 45); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;\">loadBeanDefinitions</span><span class=\"hljs-params\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(255, 152, 35); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;\">(String location, Set&lt;Resource&gt; actualResources)</span> <span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;\">throws</span> BeanDefinitionStoreException </span>&#123;<br>    <span class=\"hljs-comment\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(128, 128, 128); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;\">//获取ResourceLoader资源定位器</span><br>    ResourceLoader resourceLoader = getResourceLoader();<br>    <span class=\"hljs-comment\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(128, 128, 128); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;\">//如果定位器为null，则抛出异常</span><br>    <span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;\">if</span> (resourceLoader == <span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;\">null</span>) &#123;<br>        <span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;\">throw</span> <span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;\">new</span> BeanDefinitionStoreException(<br>                <span class=\"hljs-string\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;\">\"Cannot import bean definitions from location [\"</span> + location + <span class=\"hljs-string\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;\">\"]: no ResourceLoader available\"</span>);<br>    &#125;<br>    <span class=\"hljs-comment\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(128, 128, 128); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;\">//是否是ResourcePatternResolver类型的定位器</span><br>    <span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;\">if</span> (resourceLoader <span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;\">instanceof</span> ResourcePatternResolver) &#123;<br>        <span class=\"hljs-comment\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(128, 128, 128); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;\">// Resource pattern matching available.</span><br>        <span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;\">try</span> &#123;<br>            Resource[] resources = ((ResourcePatternResolver) resourceLoader).getResources(location);<br>            <span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;\">int</span> loadCount = loadBeanDefinitions(resources);<br>            <span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;\">if</span> (actualResources != <span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;\">null</span>) &#123;<br>                <span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;\">for</span> (Resource resource : resources) &#123;<br>                    actualResources.add(resource);<br>                &#125;<br>            &#125;<br>            <span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;\">if</span> (logger.isDebugEnabled()) &#123;<br>                logger.debug(<span class=\"hljs-string\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;\">\"Loaded \"</span> + loadCount + <span class=\"hljs-string\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;\">\" bean definitions from location pattern [\"</span> + location + <span class=\"hljs-string\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;\">\"]\"</span>);<br>            &#125;<br>            <span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;\">return</span> loadCount;<br>        &#125;<br>        <span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;\">catch</span> (IOException ex) &#123;<br>            <span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;\">throw</span> <span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;\">new</span> BeanDefinitionStoreException(<br>                    <span class=\"hljs-string\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;\">\"Could not resolve bean definition resource pattern [\"</span> + location + <span class=\"hljs-string\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;\">\"]\"</span>, ex);<br>        &#125;<br>    &#125;<br>    <span class=\"hljs-comment\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(128, 128, 128); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;\">//非ResourcePatternResolver类型的</span><br>    <span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;\">else</span> &#123;<br>        <span class=\"hljs-comment\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(128, 128, 128); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;\">// Can only load single resources by absolute URL.</span><br>        Resource resource = resourceLoader.getResource(location);<br>        <span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;\">int</span> loadCount = loadBeanDefinitions(resource);<br>        <span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;\">if</span> (actualResources != <span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;\">null</span>) &#123;<br>            actualResources.add(resource);<br>        &#125;<br>        <span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;\">if</span> (logger.isDebugEnabled()) &#123;<br>            logger.debug(<span class=\"hljs-string\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;\">\"Loaded \"</span> + loadCount + <span class=\"hljs-string\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;\">\" bean definitions from location [\"</span> + location + <span class=\"hljs-string\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;\">\"]\"</span>);<br>        &#125;<br>        <span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;\">return</span> loadCount;<br>    &#125;<br>&#125;<br></code></pre>\n<p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.5em 0px;\"><code style=\"font-size: inherit; line-height: inherit; word-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(233, 105, 0); background: rgb(248, 248, 248);\">上面的代码中需要说明下为什么要判断当前resourceLoader是否是ResourcePatternResolver类型的，因为ResourceLoader只是提供了对classpath前缀的支持。而ResourcePatternResolver提供了对classpath*前缀的支持。也就是说ResourceLoader提供classpath下单资源文件的载入，而ResourcePatternResolver提供多资源文件的载入。</code><br>先看下假如是ResourcePatternResolver类型的（略去了部分log代码）：</p>\n<pre style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><code class=\"java language-java hljs\" style=\"margin: 0px 2px; line-height: 18px; font-size: 14px; font-weight: normal; word-spacing: 0px; letter-spacing: 0px; font-family: Consolas, Inconsolata, Courier, monospace; border-radius: 0px; color: rgb(169, 183, 198); background: rgb(40, 43, 46); overflow-x: auto; padding: 0.5em; display: block !important; word-wrap: normal !important; word-break: normal !important; white-space: pre !important; overflow: auto !important;\"><span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;\">try</span> &#123;<br>    <span class=\"hljs-comment\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(128, 128, 128); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;\">//先得到我们的resources</span><br>    Resource[] resources = ((ResourcePatternResolver) resourceLoader).getResources(location);<br>    <span class=\"hljs-comment\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(128, 128, 128); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;\">//解析并返回beanDefinition的数量</span><br>    <span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;\">int</span> loadCount = loadBeanDefinitions(resources);<br>    <span class=\"hljs-comment\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(128, 128, 128); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;\">//加载过程中已经被解析过的实际的Resource的填充集合</span><br>    <span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;\">if</span> (actualResources != <span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;\">null</span>) &#123;<br>        <span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;\">for</span> (Resource resource : resources) &#123;<br>            actualResources.add(resource);<br>        &#125;<br>    &#125;<br>    <span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;\">return</span> loadCount;<br>&#125;<br><span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;\">catch</span> (IOException ex) &#123;<br>    <span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;\">throw</span> <span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;\">new</span> BeanDefinitionStoreException(<br>        <span class=\"hljs-string\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;\">\"Could not resolve bean definition resource pattern [\"</span> + location + <span class=\"hljs-string\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;\">\"]\"</span>, ex);<br>&#125;<br></code></pre>\n<p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.5em 0px;\">非ResourcePatternResolver类型情况：</p>\n<pre style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><code class=\"java language-java hljs\" style=\"margin: 0px 2px; line-height: 18px; font-size: 14px; font-weight: normal; word-spacing: 0px; letter-spacing: 0px; font-family: Consolas, Inconsolata, Courier, monospace; border-radius: 0px; color: rgb(169, 183, 198); background: rgb(40, 43, 46); overflow-x: auto; padding: 0.5em; display: block !important; word-wrap: normal !important; word-break: normal !important; white-space: pre !important; overflow: auto !important;\"><span class=\"hljs-comment\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(128, 128, 128); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;\">// Can only load single resources by absolute URL.</span><br><span class=\"hljs-comment\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(128, 128, 128); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;\">//只能通过绝对URL加载单个资源</span><br>Resource resource = resourceLoader.getResource(location);<br><span class=\"hljs-comment\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(128, 128, 128); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;\">//解析并返回beanDefinition的数量</span><br><span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;\">int</span> loadCount = loadBeanDefinitions(resource);<br><span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;\">if</span> (actualResources != <span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;\">null</span>) &#123;<br>    actualResources.add(resource);<br>&#125;<br><span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;\">return</span> loadCount;<br></code></pre>\n<p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.5em 0px;\">然后继续通过重载方法loadBeanDefinitions(Resource… resources)来解析（AbstractBeanDefinitionReader类中）</p>\n<pre style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><code class=\"java language-java hljs\" style=\"margin: 0px 2px; line-height: 18px; font-size: 14px; font-weight: normal; word-spacing: 0px; letter-spacing: 0px; font-family: Consolas, Inconsolata, Courier, monospace; border-radius: 0px; color: rgb(169, 183, 198); background: rgb(40, 43, 46); overflow-x: auto; padding: 0.5em; display: block !important; word-wrap: normal !important; word-break: normal !important; white-space: pre !important; overflow: auto !important;\"><span class=\"hljs-function\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;\"><span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;\">public</span> <span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;\">int</span> <span class=\"hljs-title\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(165, 218, 45); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;\">loadBeanDefinitions</span><span class=\"hljs-params\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(255, 152, 35); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;\">(Resource... resources)</span> <span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;\">throws</span> BeanDefinitionStoreException </span>&#123;<br>    Assert.notNull(resources, <span class=\"hljs-string\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;\">\"Resource array must not be null\"</span>);<br>    <span class=\"hljs-comment\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(128, 128, 128); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;\">//初始化beanDefiniton个数</span><br>    <span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;\">int</span> counter = <span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;\">0</span>;<br>    <span class=\"hljs-comment\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(128, 128, 128); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;\">//遍历当前资源数组</span><br>    <span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;\">for</span> (Resource resource : resources) &#123;<br>        <span class=\"hljs-comment\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(128, 128, 128); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;\">//解析具体resource中的bean</span><br>        counter += loadBeanDefinitions(resource);<br>    &#125;<br>    <span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;\">return</span> counter;<br>&#125;<br></code></pre>\n<p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.5em 0px;\">然后交给子类XmlBeanDefinitionReader中的loadBeanDefinitions(Resource resource)方法：</p>\n<pre style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><code class=\"java language-java hljs\" style=\"margin: 0px 2px; line-height: 18px; font-size: 14px; font-weight: normal; word-spacing: 0px; letter-spacing: 0px; font-family: Consolas, Inconsolata, Courier, monospace; border-radius: 0px; color: rgb(169, 183, 198); background: rgb(40, 43, 46); overflow-x: auto; padding: 0.5em; display: block !important; word-wrap: normal !important; word-break: normal !important; white-space: pre !important; overflow: auto !important;\"><span class=\"hljs-function\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;\"><span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;\">public</span> <span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;\">int</span> <span class=\"hljs-title\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(165, 218, 45); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;\">loadBeanDefinitions</span><span class=\"hljs-params\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(255, 152, 35); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;\">(Resource resource)</span> <span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;\">throws</span> BeanDefinitionStoreException </span>&#123;<br>    <span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;\">return</span> loadBeanDefinitions(<span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;\">new</span> EncodedResource(resource));<br>&#125;<br></code></pre>\n<p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.5em 0px;\">继续通过重载方法loadBeanDefinitions(EncodedResource encodedResource)执行，这个方法我们只关注最核心的代码：</p>\n<pre style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><code class=\"java language-java hljs\" style=\"margin: 0px 2px; line-height: 18px; font-size: 14px; font-weight: normal; word-spacing: 0px; letter-spacing: 0px; font-family: Consolas, Inconsolata, Courier, monospace; border-radius: 0px; color: rgb(169, 183, 198); background: rgb(40, 43, 46); overflow-x: auto; padding: 0.5em; display: block !important; word-wrap: normal !important; word-break: normal !important; white-space: pre !important; overflow: auto !important;\"><span class=\"hljs-comment\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(128, 128, 128); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;\">//获取输入流</span><br>InputStream inputStream = encodedResource.getResource().getInputStream();<br><span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;\">try</span> &#123;<br>    <span class=\"hljs-comment\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(128, 128, 128); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;\">//资源读取inputSource</span><br>    InputSource inputSource = <span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;\">new</span> InputSource(inputStream);<br>    <span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;\">if</span> (encodedResource.getEncoding() != <span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;\">null</span>) &#123;<br>        inputSource.setEncoding(encodedResource.getEncoding());<br>    &#125;<br>    <span class=\"hljs-comment\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(128, 128, 128); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;\">//委托给doLoadBeanDefinitions来完成</span><br>    <span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;\">return</span> doLoadBeanDefinitions(inputSource, encodedResource.getResource());<br>&#125;<br><span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;\">finally</span> &#123;<br>    inputStream.close();<br>&#125;<br></code></pre>\n<p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.5em 0px;\">doLoadBeanDefinitions是XmlBeanDefinitionReader中的方法，来看核心代码：</p>\n<pre style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><code class=\"java language-java hljs\" style=\"margin: 0px 2px; line-height: 18px; font-size: 14px; font-weight: normal; word-spacing: 0px; letter-spacing: 0px; font-family: Consolas, Inconsolata, Courier, monospace; border-radius: 0px; color: rgb(169, 183, 198); background: rgb(40, 43, 46); overflow-x: auto; padding: 0.5em; display: block !important; word-wrap: normal !important; word-break: normal !important; white-space: pre !important; overflow: auto !important;\"><span class=\"hljs-comment\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(128, 128, 128); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;\">//解析成符合w3c标准的Document</span><br>Document doc = doLoadDocument(inputSource, resource);<br><span class=\"hljs-comment\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(128, 128, 128); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;\">//继续交给registerBeanDefinitions来处理</span><br><span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;\">return</span> registerBeanDefinitions(doc, resource);<br></code></pre>\n<p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.5em 0px;\">这个时候已经将loadBeanDefinitions换成registerBeanDefinitions了，也就是载入并注册；registerBeanDefinitions同样也是XmlBeanDefinitionReader中的方法：</p>\n<pre style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><code class=\"java language-java hljs\" style=\"margin: 0px 2px; line-height: 18px; font-size: 14px; font-weight: normal; word-spacing: 0px; letter-spacing: 0px; font-family: Consolas, Inconsolata, Courier, monospace; border-radius: 0px; color: rgb(169, 183, 198); background: rgb(40, 43, 46); overflow-x: auto; padding: 0.5em; display: block !important; word-wrap: normal !important; word-break: normal !important; white-space: pre !important; overflow: auto !important;\"><span class=\"hljs-function\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;\"><span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;\">public</span> <span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;\">int</span> <span class=\"hljs-title\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(165, 218, 45); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;\">registerBeanDefinitions</span><span class=\"hljs-params\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(255, 152, 35); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;\">(Document doc, Resource resource)</span> <span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;\">throws</span><br>BeanDefinitionStoreException </span>&#123;<br>    <span class=\"hljs-comment\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(128, 128, 128); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;\">//得到documentReader用来读取document文档</span><br>    BeanDefinitionDocumentReader documentReader = createBeanDefinitionDocumentReader();<br>    <span class=\"hljs-comment\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(128, 128, 128); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;\">//注册之前的bean个数</span><br>    <span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;\">int</span> countBefore = getRegistry().getBeanDefinitionCount();<br>    <span class=\"hljs-comment\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(128, 128, 128); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;\">//解析并注册bean</span><br>    documentReader.registerBeanDefinitions(doc, createReaderContext(resource));<br>    <span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;\">return</span> getRegistry().getBeanDefinitionCount() - countBefore;<br>&#125;<br></code></pre>\n<p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.5em 0px;\">仍然没有处理，继续交给<code style=\"font-size: inherit; line-height: inherit; word-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(233, 105, 0); background: rgb(248, 248, 248);\">BeanDefinitionDocumentReader</code>的registerBeanDefinitions方法来完成：</p>\n<pre style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><code class=\"java language-java hljs\" style=\"margin: 0px 2px; line-height: 18px; font-size: 14px; font-weight: normal; word-spacing: 0px; letter-spacing: 0px; font-family: Consolas, Inconsolata, Courier, monospace; border-radius: 0px; color: rgb(169, 183, 198); background: rgb(40, 43, 46); overflow-x: auto; padding: 0.5em; display: block !important; word-wrap: normal !important; word-break: normal !important; white-space: pre !important; overflow: auto !important;\"><span class=\"hljs-comment\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(128, 128, 128); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;\">//这个实现根据“spring-beans”XSD（或DTD）解析bean定义。</span><br><span class=\"hljs-function\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;\"><span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;\">public</span> <span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;\">void</span> <span class=\"hljs-title\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(165, 218, 45); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;\">registerBeanDefinitions</span><span class=\"hljs-params\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(255, 152, 35); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;\">(Document doc, XmlReaderContext readerContext)</span> </span>&#123;<br>    <span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;\">this</span>.readerContext = readerContext;<br>    logger.debug(<span class=\"hljs-string\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;\">\"Loading bean definitions\"</span>);<br>    Element root = doc.getDocumentElement();<br>    doRegisterBeanDefinitions(root);<br>&#125;<br></code></pre>\n<p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.5em 0px;\">还是没处理，又细化一步，交给<code style=\"font-size: inherit; line-height: inherit; word-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(233, 105, 0); background: rgb(248, 248, 248);\">DefaultBeanDefinitionDocumentReader</code>的doRegisterBeanDefinitions(Element root)方法：</p>\n<pre style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><code class=\"java language-java hljs\" style=\"margin: 0px 2px; line-height: 18px; font-size: 14px; font-weight: normal; word-spacing: 0px; letter-spacing: 0px; font-family: Consolas, Inconsolata, Courier, monospace; border-radius: 0px; color: rgb(169, 183, 198); background: rgb(40, 43, 46); overflow-x: auto; padding: 0.5em; display: block !important; word-wrap: normal !important; word-break: normal !important; white-space: pre !important; overflow: auto !important;\"><span class=\"hljs-function\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;\"><span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;\">protected</span> <span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;\">void</span> <span class=\"hljs-title\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(165, 218, 45); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;\">doRegisterBeanDefinitions</span><span class=\"hljs-params\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(255, 152, 35); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;\">(Element root)</span> </span>&#123;<br>    BeanDefinitionParserDelegate parent = <span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;\">this</span>.delegate;<br>    <span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;\">this</span>.delegate = createDelegate(getReaderContext(), root, parent);<br>    <span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;\">if</span> (<span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;\">this</span>.delegate.isDefaultNamespace(root)) &#123;<br>        String profileSpec = root.getAttribute(PROFILE_ATTRIBUTE);<br>        <span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;\">if</span> (StringUtils.hasText(profileSpec)) &#123;<br>            String[] specifiedProfiles = StringUtils.tokenizeToStringArray(<br>                    profileSpec, BeanDefinitionParserDelegate.MULTI_VALUE_ATTRIBUTE_DELIMITERS);<br>            <span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;\">if</span> (!getReaderContext().getEnvironment().acceptsProfiles(specifiedProfiles)) &#123;<br>                <span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;\">if</span> (logger.isInfoEnabled()) &#123;<br>                    logger.info(<span class=\"hljs-string\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;\">\"Skipped XML bean definition file due to specified profiles [\"</span> + profileSpec +<br>                            <span class=\"hljs-string\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;\">\"] not matching: \"</span> + getReaderContext().getResource());<br>                &#125;<br>                <span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;\">return</span>;<br>            &#125;<br>        &#125;<br>    &#125;<br>    preProcessXml(root);<br>    parseBeanDefinitions(root, <span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;\">this</span>.delegate);<br>    postProcessXml(root);<br>    <span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;\">this</span>.delegate = parent;<br>&#125;<br></code></pre>\n<p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.5em 0px;\"><code style=\"font-size: inherit; line-height: inherit; word-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(233, 105, 0); background: rgb(248, 248, 248);\">任何嵌套的&lt;beans&gt;元素都将导致此方法的递归。 为了正确传播和保存&lt;beans&gt; default- *属性，请跟踪当前（父）委托，该委托可能为null。 为了回退的目的，创建一个引用父对象的新（子）委托，然后最终重置this.delegate回到它的原始（父）引用。这个行为模仿了一堆委托，而实际上并不需要一个委托。（翻译的有点蹩脚，大概意思就是这）</code></p>\n<p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.5em 0px;\">所以说<code style=\"font-size: inherit; line-height: inherit; word-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(233, 105, 0); background: rgb(248, 248, 248);\">DefaultBeanDefinitionDocumentReader</code>自己也没干这事，又给了<code style=\"font-size: inherit; line-height: inherit; word-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(233, 105, 0); background: rgb(248, 248, 248);\">BeanDefinitionParserDelegate</code>，然后就是preProcessXml()、parseBeanDefinitions()、postProcessXml()方法；其中preProcessXml()和postProcessXml()默认是空方法，自己没有实现。具体解析在parseBeanDefinitions(root, this.delegate)中完成。</p>\n<p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.5em 0px;\"><code style=\"font-size: inherit; line-height: inherit; word-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(233, 105, 0); background: rgb(248, 248, 248);\">BeanDefinitionParserDelegate</code>用于将<code style=\"font-size: inherit; line-height: inherit; word-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(233, 105, 0); background: rgb(248, 248, 248);\"> Document</code> 的内容转成 <code style=\"font-size: inherit; line-height: inherit; word-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(233, 105, 0); background: rgb(248, 248, 248);\">BeanDefinition</code>实例；<code style=\"font-size: inherit; line-height: inherit; word-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(233, 105, 0); background: rgb(248, 248, 248);\">BeanDefinitionDocumentReader</code> 本身不具备该功能而是交给了该类来完成。</p>\n<pre style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><code class=\"java language-java hljs\" style=\"margin: 0px 2px; line-height: 18px; font-size: 14px; font-weight: normal; word-spacing: 0px; letter-spacing: 0px; font-family: Consolas, Inconsolata, Courier, monospace; border-radius: 0px; color: rgb(169, 183, 198); background: rgb(40, 43, 46); overflow-x: auto; padding: 0.5em; display: block !important; word-wrap: normal !important; word-break: normal !important; white-space: pre !important; overflow: auto !important;\"><span class=\"hljs-function\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;\"><span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;\">protected</span> <span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;\">void</span> <span class=\"hljs-title\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(165, 218, 45); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;\">parseBeanDefinitions</span><span class=\"hljs-params\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(255, 152, 35); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;\">(Element root, BeanDefinitionParserDelegate delegate)</span> </span>&#123;<br>    <span class=\"hljs-comment\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(128, 128, 128); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;\">//查看定义的命名空间是否为默认的命名空间</span><br>    <span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;\">if</span> (delegate.isDefaultNamespace(root)) &#123;<br>        NodeList nl = root.getChildNodes();<br>        <span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;\">for</span> (<span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;\">int</span> i = <span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;\">0</span>; i &lt; nl.getLength(); i++) &#123;<br>            Node node = nl.item(i);<br>            <span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;\">if</span> (node <span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;\">instanceof</span> Element) &#123;<br>                Element ele = (Element) node;<br>                <span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;\">if</span> (delegate.isDefaultNamespace(ele)) &#123;<br>                    parseDefaultElement(ele, delegate);<br>                &#125;<br>                <span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;\">else</span> &#123;<br>                    delegate.parseCustomElement(ele);<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;\">else</span> &#123;<br>        delegate.parseCustomElement(root);<br>    &#125;<br>&#125;<br></code></pre>\n<p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.5em 0px;\">这个方法就是解析文档中根目录下的元素：“import”，“alias”，“bean”。</p>\n<pre style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><code class=\"java language-java hljs\" style=\"margin: 0px 2px; line-height: 18px; font-size: 14px; font-weight: normal; word-spacing: 0px; letter-spacing: 0px; font-family: Consolas, Inconsolata, Courier, monospace; border-radius: 0px; color: rgb(169, 183, 198); background: rgb(40, 43, 46); overflow-x: auto; padding: 0.5em; display: block !important; word-wrap: normal !important; word-break: normal !important; white-space: pre !important; overflow: auto !important;\"><span class=\"hljs-function\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;\"><span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;\">private</span> <span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;\">void</span> <span class=\"hljs-title\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(165, 218, 45); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;\">parseDefaultElement</span><span class=\"hljs-params\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(255, 152, 35); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;\">(Element ele, BeanDefinitionParserDelegate delegate)</span> </span>&#123;<br>    <span class=\"hljs-comment\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(128, 128, 128); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;\">//解析一个“import”元素，并将给定资源的bean定义加载到bean工厂中。</span><br>    <span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;\">if</span> (delegate.nodeNameEquals(ele, IMPORT_ELEMENT)) &#123;<br>        importBeanDefinitionResource(ele);<br>    &#125;<br>    <span class=\"hljs-comment\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(128, 128, 128); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;\">//处理给定的别名元素，向注册表注册别名。</span><br>    <span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;\">else</span> <span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;\">if</span> (delegate.nodeNameEquals(ele, ALIAS_ELEMENT)) &#123;<br>        processAliasRegistration(ele);<br>    &#125;<br>    <span class=\"hljs-comment\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(128, 128, 128); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;\">//处理给定的bean元素，解析bean定义并将其注册到注册表中。</span><br>    <span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;\">else</span> <span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;\">if</span> (delegate.nodeNameEquals(ele, BEAN_ELEMENT)) &#123;<br>        processBeanDefinition(ele, delegate);<br>    &#125;<br>    <span class=\"hljs-comment\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(128, 128, 128); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;\">//在给定的根&lt;beans /&gt;元素内注册每个bean定义。</span><br>    <span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;\">else</span> <span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;\">if</span> (delegate.nodeNameEquals(ele, NESTED_BEANS_ELEMENT)) &#123;<br>        <span class=\"hljs-comment\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(128, 128, 128); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;\">// recurse</span><br>        doRegisterBeanDefinitions(ele);<br>    &#125;<br>&#125;<br></code></pre>\n<p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.5em 0px;\">先来看<code style=\"font-size: inherit; line-height: inherit; word-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(233, 105, 0); background: rgb(248, 248, 248);\">processBeanDefinition</code>这个方法；</p>\n<p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.5em 0px;\"><code style=\"font-size: inherit; line-height: inherit; word-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(233, 105, 0); background: rgb(248, 248, 248);\">BeanDefinitionHolder是一个BeanDefinition的持有者，其定义了一下变量，并对以下变量提供get和set操作。这个在后面的说道BeanDefinition体系的时候再聊。</code></p>\n<pre style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><code class=\"java language-java hljs\" style=\"margin: 0px 2px; line-height: 18px; font-size: 14px; font-weight: normal; word-spacing: 0px; letter-spacing: 0px; font-family: Consolas, Inconsolata, Courier, monospace; border-radius: 0px; color: rgb(169, 183, 198); background: rgb(40, 43, 46); overflow-x: auto; padding: 0.5em; display: block !important; word-wrap: normal !important; word-break: normal !important; white-space: pre !important; overflow: auto !important;\"><span class=\"hljs-function\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;\"><span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;\">protected</span> <span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;\">void</span> <span class=\"hljs-title\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(165, 218, 45); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;\">processBeanDefinition</span><span class=\"hljs-params\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(255, 152, 35); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;\">(Element ele, BeanDefinitionParserDelegate delegate)</span> </span>&#123;<br>    <span class=\"hljs-comment\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(128, 128, 128); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;\">//获取一个BeanDefinitionHolder</span><br>    BeanDefinitionHolder bdHolder = delegate.parseBeanDefinitionElement(ele);<br>    <span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;\">if</span> (bdHolder != <span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;\">null</span>) &#123;<br>        <span class=\"hljs-comment\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(128, 128, 128); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;\">//首先根据自定义属性进行装饰。</span><br>        <span class=\"hljs-comment\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(128, 128, 128); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;\">//基于自定义嵌套元素进行装饰。</span><br>        bdHolder = delegate.decorateBeanDefinitionIfRequired(ele, bdHolder);<br>        <span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;\">try</span> &#123;<br>            <span class=\"hljs-comment\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(128, 128, 128); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;\">// 注册最终装饰的实例。</span><br>            BeanDefinitionReaderUtils.registerBeanDefinition(bdHolder,<br>            getReaderContext().getRegistry());<br>        &#125;<br>        <span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;\">catch</span> (BeanDefinitionStoreException ex) &#123;<br>            getReaderContext().error(<span class=\"hljs-string\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;\">\"Failed to register bean definition with name '\"</span> +<br>                    bdHolder.getBeanName() + <span class=\"hljs-string\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;\">\"'\"</span>, ele, ex);<br>        &#125;<br>        <span class=\"hljs-comment\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(128, 128, 128); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;\">// 发送注册事件。</span><br>        getReaderContext().fireComponentRegistered(<span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;\">new</span> BeanComponentDefinition(bdHolder));<br>    &#125;<br>&#125;<br></code></pre>\n<p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.5em 0px;\">接着看<code style=\"font-size: inherit; line-height: inherit; word-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(233, 105, 0); background: rgb(248, 248, 248);\">registerBeanDefinition</code>这个方法：通过给定的bean工厂注册给定的bean definition 。</p>\n<pre style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><code class=\"java language-java hljs\" style=\"margin: 0px 2px; line-height: 18px; font-size: 14px; font-weight: normal; word-spacing: 0px; letter-spacing: 0px; font-family: Consolas, Inconsolata, Courier, monospace; border-radius: 0px; color: rgb(169, 183, 198); background: rgb(40, 43, 46); overflow-x: auto; padding: 0.5em; display: block !important; word-wrap: normal !important; word-break: normal !important; white-space: pre !important; overflow: auto !important;\"><span class=\"hljs-function\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;\"><span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;\">public</span> <span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;\">static</span> <span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;\">void</span> <span class=\"hljs-title\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(165, 218, 45); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;\">registerBeanDefinition</span><span class=\"hljs-params\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(255, 152, 35); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;\">(<br>    BeanDefinitionHolder definitionHolder, BeanDefinitionRegistry registry)</span><br>    <span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;\">throws</span> BeanDefinitionStoreException </span>&#123;<br><br>    <span class=\"hljs-comment\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(128, 128, 128); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;\">// 在主名称下注册bean定义。</span><br>    String beanName = definitionHolder.getBeanName();<br>    registry.registerBeanDefinition(beanName, definitionHolder.getBeanDefinition());<br><br>    <span class=\"hljs-comment\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(128, 128, 128); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;\">// 如果有的话，注册bean名称的别名，</span><br>    String[] aliases = definitionHolder.getAliases();<br>    <span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;\">if</span> (aliases != <span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;\">null</span>) &#123;<br>        <span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;\">for</span> (String alias : aliases) &#123;<br>            registry.registerAlias(beanName, alias);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre>\n<p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.5em 0px;\"><code style=\"font-size: inherit; line-height: inherit; word-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(233, 105, 0); background: rgb(248, 248, 248);\">registerBeanDefinition</code>里面又通过调用<code style=\"font-size: inherit; line-height: inherit; word-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(233, 105, 0); background: rgb(248, 248, 248);\">BeanDefinitionRegistry</code>接口的实现<code style=\"font-size: inherit; line-height: inherit; word-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(233, 105, 0); background: rgb(248, 248, 248);\">DefaultListableBeanFactory</code>来完成具体的注册过程。\n\n\n\n<h2 id=\"BeanDefinition载入（中）\"><a href=\"#BeanDefinition载入（中）\" class=\"headerlink\" title=\"BeanDefinition载入（中）\"></a>BeanDefinition载入（中）</h2><p>上面对于一些细节问题没有进行细究，比如说元素属性值的处理，构造函数的处理等等。本篇就学习记录一下相关点。</p>\n<p>首先来看下是在哪个地方具体生成BeanDefinitiond的。下面是方法请求的顺序。</p>\n<ul>\n<li><ol>\n<li>DefaultBeanDefinitionDocumentReader.parseDefaultElement</li>\n</ol>\n</li>\n<li><ol start=\"2\">\n<li>DefaultBeanDefinitionDocumentReader.processBeanDefinition</li>\n</ol>\n</li>\n<li><ol start=\"3\">\n<li>BeanDefinitionParserDelegate.parseBeanDefinitionElement</li>\n</ol>\n</li>\n</ul>\n<p>关于元素的解析绝大多数都是在 BeanDefinitionParserDelegate 及其子类中完成的。OK，来看下 parseBeanDefinitionElement 这个方法：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> AbstractBeanDefinition <span class=\"title function_\">parseBeanDefinitionElement</span><span class=\"params\">(</span></span><br><span class=\"line\"><span class=\"params\">\t\tElement ele, String beanName, BeanDefinition containingBean)</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">this</span>.parseState.push(<span class=\"keyword\">new</span> <span class=\"title class_\">BeanEntry</span>(beanName));</span><br><span class=\"line\">\t<span class=\"type\">String</span> <span class=\"variable\">className</span> <span class=\"operator\">=</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">\t<span class=\"comment\">//在这里是读取&lt;bean&gt;的class名字，然后载入到BeanDefinition中，并未做实例化</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (ele.hasAttribute(CLASS_ATTRIBUTE)) &#123;</span><br><span class=\"line\">\t\tclassName = ele.getAttribute(CLASS_ATTRIBUTE).trim();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"type\">String</span> <span class=\"variable\">parent</span> <span class=\"operator\">=</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (ele.hasAttribute(PARENT_ATTRIBUTE)) &#123;</span><br><span class=\"line\">\t\t\tparent = ele.getAttribute(PARENT_ATTRIBUTE);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"comment\">//生成BeanDefinition对象</span></span><br><span class=\"line\">\t\t<span class=\"type\">AbstractBeanDefinition</span> <span class=\"variable\">bd</span> <span class=\"operator\">=</span> createBeanDefinition(className, parent);</span><br><span class=\"line\">\t\t<span class=\"comment\">//解析当前bean的属性</span></span><br><span class=\"line\">\t\tparseBeanDefinitionAttributes(ele, beanName, containingBean, bd);</span><br><span class=\"line\">\t\t<span class=\"comment\">//设置description信息</span></span><br><span class=\"line\">\t\tbd.setDescription(DomUtils.getChildElementValueByTagName(ele, DESCRIPTION_ELEMENT));</span><br><span class=\"line\">\t\t<span class=\"comment\">//对bean的元素信息进行解析</span></span><br><span class=\"line\">\t\tparseMetaElements(ele, bd);</span><br><span class=\"line\">\t\tparseLookupOverrideSubElements(ele, bd.getMethodOverrides());</span><br><span class=\"line\">\t\tparseReplacedMethodSubElements(ele, bd.getMethodOverrides());</span><br><span class=\"line\">\t\t<span class=\"comment\">//解析bean的构造函数设置</span></span><br><span class=\"line\">\t\tparseConstructorArgElements(ele, bd);</span><br><span class=\"line\">\t\t<span class=\"comment\">//解析property设置</span></span><br><span class=\"line\">\t\tparsePropertyElements(ele, bd);</span><br><span class=\"line\">\t\tparseQualifierElements(ele, bd);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tbd.setResource(<span class=\"built_in\">this</span>.readerContext.getResource());</span><br><span class=\"line\">\t\tbd.setSource(extractSource(ele));</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> bd;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">//异常1：ClassNotFoundException</span></span><br><span class=\"line\">\t<span class=\"keyword\">catch</span> (ClassNotFoundException ex) &#123;</span><br><span class=\"line\">\t\terror(<span class=\"string\">&quot;Bean class [&quot;</span> + className + <span class=\"string\">&quot;] not found&quot;</span>, ele, ex);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">//异常2：NoClassDefFoundError</span></span><br><span class=\"line\">\t<span class=\"keyword\">catch</span> (NoClassDefFoundError err) &#123;</span><br><span class=\"line\">\t\terror(<span class=\"string\">&quot;Class that bean class [&quot;</span> + className + <span class=\"string\">&quot;] depends on not found&quot;</span>, ele, err);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">//其他未知错误</span></span><br><span class=\"line\">\t<span class=\"keyword\">catch</span> (Throwable ex) &#123;</span><br><span class=\"line\">\t\terror(<span class=\"string\">&quot;Unexpected failure during bean definition parsing&quot;</span>, ele, ex);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">this</span>.parseState.pop();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>此处我们以解析property为例，看下具体的处理细节：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//解析给定bean元素的属性子元素。</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">parsePropertyElements</span><span class=\"params\">(Element beanEle, BeanDefinition bd)</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">//获取子元素节点</span></span><br><span class=\"line\">    <span class=\"type\">NodeList</span> <span class=\"variable\">nl</span> <span class=\"operator\">=</span> beanEle.getChildNodes();</span><br><span class=\"line\">    <span class=\"comment\">//遍历</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; nl.getLength(); i++) &#123;</span><br><span class=\"line\">    \t<span class=\"type\">Node</span> <span class=\"variable\">node</span> <span class=\"operator\">=</span> nl.item(i);</span><br><span class=\"line\">    \t<span class=\"comment\">//是否包含property标识</span></span><br><span class=\"line\">    \t<span class=\"keyword\">if</span> (isCandidateElement(node) &amp;&amp; nodeNameEquals(node, PROPERTY_ELEMENT)) &#123;</span><br><span class=\"line\">    \t\tparsePropertyElement((Element) node, bd);</span><br><span class=\"line\">    \t&#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>接着是执行具体property,在parsePropertyElement中完成：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//解析一个property元素。</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">parsePropertyElement</span><span class=\"params\">(Element ele, BeanDefinition bd)</span> &#123;  </span><br><span class=\"line\">    <span class=\"comment\">//首先获取到property的名称</span></span><br><span class=\"line\">\t<span class=\"type\">String</span> <span class=\"variable\">propertyName</span> <span class=\"operator\">=</span> ele.getAttribute(NAME_ATTRIBUTE);</span><br><span class=\"line\">\t<span class=\"comment\">//检查是否有name</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (!StringUtils.hasLength(propertyName)) &#123;</span><br><span class=\"line\">\t\terror(<span class=\"string\">&quot;Tag &#x27;property&#x27; must have a &#x27;name&#x27; attribute&quot;</span>, ele);</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"built_in\">this</span>.parseState.push(<span class=\"keyword\">new</span> <span class=\"title class_\">PropertyEntry</span>(propertyName));</span><br><span class=\"line\">\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t   <span class=\"comment\">//验证在同一个bean中存在同名的property，存在的话就不解析了，直接返回</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (bd.getPropertyValues().contains(propertyName)) &#123;</span><br><span class=\"line\">\t\t\terror(<span class=\"string\">&quot;Multiple &#x27;property&#x27; definitions for property &#x27;&quot;</span> + propertyName + <span class=\"string\">&quot;&#x27;&quot;</span>, ele);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"comment\">//解析出property的值</span></span><br><span class=\"line\">\t\t<span class=\"type\">Object</span> <span class=\"variable\">val</span> <span class=\"operator\">=</span> parsePropertyValue(ele, bd, propertyName);</span><br><span class=\"line\">\t\t<span class=\"comment\">//封装成PropertyValue对象</span></span><br><span class=\"line\">\t\t<span class=\"type\">PropertyValue</span> <span class=\"variable\">pv</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">PropertyValue</span>(propertyName, val);</span><br><span class=\"line\">\t\tparseMetaElements(ele, pv);</span><br><span class=\"line\">\t\tpv.setSource(extractSource(ele));</span><br><span class=\"line\">\t\tbd.getPropertyValues().addPropertyValue(pv);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">this</span>.parseState.pop();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在parsePropertyValue中，是对所有的property子元素进行具体解析的。我们知道property中除了单值之外，还会包括如：list，set，map，prop等集合元素；这些都会被封装成对应的Managerd对象。比如：ManagedList等。不同的集合类型页同样对应一种解析方法，比如解析list的是使用parseListElement。这些解析都是在BeanDefinitionParserDelegate类中完成的。这个后面我会抽一篇来学习BeanDefinitionParserDelegate这个类。</p>\n<p>Bean的载入过程就是这样通过层层解析来完成的，但是对于目前的Ioc容器来说，仅仅是完成了对Bean对象管理的一些数据准备工作，也就是初始化工作，目前的BeanDefginiton中包含的就是一些静态的配置信息，Bean的实例化还没有进行，这个实例化的过程是在依赖注入时候完成的。</p>\n<h2 id=\"BeanDefinition载入-下\"><a href=\"#BeanDefinition载入-下\" class=\"headerlink\" title=\"BeanDefinition载入(下)\"></a>BeanDefinition载入(下)</h2><div class=\"output_wrapper\" id=\"output_wrapper_id\" style=\"font-size: 16px; color: rgb(62, 62, 62); line-height: 1.6; word-spacing: 0px; letter-spacing: 0px; font-family: 'Helvetica Neue', Helvetica, 'Hiragino Sans GB', 'Microsoft YaHei', Arial, sans-serif;\"><p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.5em 0px;\">在<a href=\"https://juejin.im/post/6844903557863309325\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; text-decoration: none; color: rgb(30, 107, 184); word-wrap: break-word;\">BeanDefinition载入(上)</a>中已经大概捋了一下解析过程，本篇将记录一下bean的注册过程。</p>\n<p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.5em 0px;\">bean的注册就是DefaultListableBeanFactory中registerBeanDefinition方法来完成的。那我就来看registerBeanDefinition这个方法的具体逻辑。</p>\n<p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.5em 0px;\"><strong style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold;\">1、beanDefinition类型判断和验证</strong></p>\n<p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.5em 0px;\">这里的验证主要是验证不能将静态工厂方法与方法重写相结合(静态工厂方法必须创建实例);</p>\n<pre style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><code class=\"java language-java hljs\" style=\"margin: 0px 2px; line-height: 18px; font-size: 14px; font-weight: normal; word-spacing: 0px; letter-spacing: 0px; font-family: Consolas, Inconsolata, Courier, monospace; border-radius: 0px; color: rgb(169, 183, 198); background: rgb(40, 43, 46); overflow-x: auto; padding: 0.5em; display: block !important; word-wrap: normal !important; word-break: normal !important; white-space: pre !important; overflow: auto !important;\"><span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;\">if</span> (beanDefinition <span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;\">instanceof</span> AbstractBeanDefinition) &#123;<br>    <span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;\">try</span> &#123;<br>        ((AbstractBeanDefinition) beanDefinition).validate();<br>    &#125;<br>    <span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;\">catch</span> (BeanDefinitionValidationException ex) &#123;<br>        <span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;\">throw</span> <span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;\">new</span> BeanDefinitionStoreException(beanDefinition.getResourceDescription(),<br>        beanName,<span class=\"hljs-string\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;\">\"Validation of bean definition failed\"</span>, ex);<br>    &#125;<br>&#125;<br></code></pre>\n<p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.5em 0px;\"><strong style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold;\">2、尝试从beanDefinitionMap中获取老的bean</strong></p>\n<p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.5em 0px;\">这里就是先根据beanName从beanDefinitionMap去取BeanDefinition，并将结果给oldBeanDefinition。</p>\n<pre style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><code class=\"java language-java hljs\" style=\"margin: 0px 2px; line-height: 18px; font-size: 14px; font-weight: normal; word-spacing: 0px; letter-spacing: 0px; font-family: Consolas, Inconsolata, Courier, monospace; border-radius: 0px; color: rgb(169, 183, 198); background: rgb(40, 43, 46); overflow-x: auto; padding: 0.5em; display: block !important; word-wrap: normal !important; word-break: normal !important; white-space: pre !important; overflow: auto !important;\">BeanDefinition oldBeanDefinition;<br>oldBeanDefinition = <span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;\">this</span>.beanDefinitionMap.get(beanName);<br></code></pre>\n<p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.5em 0px;\"><strong style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold;\">3、beanDefinitionMap中已经存在名为beanName的Beandefinition</strong></p>\n<p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.5em 0px;\">如果当前beanDefinitionMap中已经存在名为beanName的Beandefinition了(即检查是否有相同名称的beanDefinition已经在Ioc容器中注册过了)。，如果有，则进行以下具体策略：</p>\n<ul style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; padding-left: 32px; list-style-type: disc;\">\n<li style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; margin-bottom: 0.5em;\"><span style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\">如果不允许bean被覆盖，则直接抛出不能重新注册，bean已经存在这样的异常信息</span></li>\n<li style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; margin-bottom: 0.5em;\"><span style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\">使用框架生成的Bean来代替用户自定义的bean</span></li>\n<li style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; margin-bottom: 0.5em;\"><span style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\">覆盖原有的Beandefinition</span></li>\n</ul>\n<pre style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><code class=\"java language-java hljs\" style=\"margin: 0px 2px; line-height: 18px; font-size: 14px; font-weight: normal; word-spacing: 0px; letter-spacing: 0px; font-family: Consolas, Inconsolata, Courier, monospace; border-radius: 0px; color: rgb(169, 183, 198); background: rgb(40, 43, 46); overflow-x: auto; padding: 0.5em; display: block !important; word-wrap: normal !important; word-break: normal !important; white-space: pre !important; overflow: auto !important;\"><span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;\">if</span> (oldBeanDefinition != <span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;\">null</span>) &#123;<br>    <span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;\">if</span> (!isAllowBeanDefinitionOverriding()) &#123;<br>        <span class=\"hljs-comment\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(128, 128, 128); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;\">//省略异常代码</span><br>    &#125;<br>    <span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;\">else</span> <span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;\">if</span> (oldBeanDefinition.getRole() &lt; beanDefinition.getRole()) &#123;<br>        <span class=\"hljs-comment\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(128, 128, 128); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;\">//省略异常代码</span><br>    &#125;<br>    <span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;\">else</span> <span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;\">if</span> (!beanDefinition.equals(oldBeanDefinition)) &#123;<br>        <span class=\"hljs-comment\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(128, 128, 128); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;\">//提示覆盖log信息</span><br>    &#125;<br>    <span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;\">else</span> &#123;<br>        <span class=\"hljs-comment\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(128, 128, 128); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;\">//提示覆盖log信息</span><br>    &#125;<br>    <span class=\"hljs-comment\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(128, 128, 128); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;\">//覆盖原有的Beandefinition</span><br>    <span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;\">this</span>.beanDefinitionMap.put(beanName, beanDefinition);<br>&#125;<br></code></pre>\n<p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.5em 0px;\"><strong style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold;\">4、beanDefinitionMap不存在名为beanName的Beandefinition</strong></p>\n<pre style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><code class=\"java language-java hljs\" style=\"margin: 0px 2px; line-height: 18px; font-size: 14px; font-weight: normal; word-spacing: 0px; letter-spacing: 0px; font-family: Consolas, Inconsolata, Courier, monospace; border-radius: 0px; color: rgb(169, 183, 198); background: rgb(40, 43, 46); overflow-x: auto; padding: 0.5em; display: block !important; word-wrap: normal !important; word-break: normal !important; white-space: pre !important; overflow: auto !important;\"><span class=\"hljs-comment\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(128, 128, 128); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;\">//检查bean的创建阶段是否已经开始，也就是说是否已经创建了</span><br><span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;\">if</span> (hasBeanCreationStarted()) &#123;<br>    <span class=\"hljs-comment\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(128, 128, 128); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;\">//Cannot modify startup-time collection elements anymore (for stable iteration)</span><br>    <span class=\"hljs-comment\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(128, 128, 128); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;\">// 无法修改启动时间收集元素（用于稳定迭代）（译注）</span><br>    <span class=\"hljs-comment\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(128, 128, 128); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;\">//注册过程需要保证数据的一致性，所有需要加锁同步</span><br>    <span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;\">synchronized</span> (<span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;\">this</span>.beanDefinitionMap) &#123;<br>        <span class=\"hljs-comment\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(128, 128, 128); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;\">//注册到beanDefinitionMap中</span><br>        <span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;\">this</span>.beanDefinitionMap.put(beanName, beanDefinition);<br>        <span class=\"hljs-comment\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(128, 128, 128); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;\">//下面就是将当前beanName存放到beanDefinitionNames中</span><br>        List&lt;String&gt; updatedDefinitions = <span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;\">new</span> ArrayList&lt;String&gt;(<br>        <span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;\">this</span>.beanDefinitionNames.size() + <span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;\">1</span>);<br>        updatedDefinitions.addAll(<span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;\">this</span>.beanDefinitionNames);<br>        updatedDefinitions.add(beanName);<br>        <span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;\">this</span>.beanDefinitionNames = updatedDefinitions;<br>        <span class=\"hljs-comment\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(128, 128, 128); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;\">//如果单例模式的bean名单中有该bean的name，那么移除掉它。</span><br>        <span class=\"hljs-comment\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(128, 128, 128); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;\">//也就是说着，将一个原本是单例模式的bean重新注册成一个普通的bean</span><br>        <span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;\">if</span> (<span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;\">this</span>.manualSingletonNames.contains(beanName)) &#123;<br>            Set&lt;String&gt; updatedSingletons = <span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;\">new</span><br>            LinkedHashSet&lt;String&gt;(<span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;\">this</span>.manualSingletonNames);<br>            updatedSingletons.remove(beanName);<br>            <span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;\">this</span>.manualSingletonNames = updatedSingletons;<br>        &#125;<br>    &#125;<br>&#125;<br><span class=\"hljs-comment\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(128, 128, 128); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;\">// 仍处于启动阶段，bean还没有开始注册</span><br><span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;\">else</span> &#123;<br>    <span class=\"hljs-comment\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(128, 128, 128); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;\">// Still in startup registration phase</span><br>    <span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;\">this</span>.beanDefinitionMap.put(beanName, beanDefinition);<br>    <span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;\">this</span>.beanDefinitionNames.add(beanName);<br>    <span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;\">this</span>.manualSingletonNames.remove(beanName);<br>&#125;<br><span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;\">this</span>.frozenBeanDefinitionNames = <span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;\">null</span>;<br></code></pre>\n<p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.5em 0px;\"><strong style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold;\">5、执行缓存清除</strong></p>\n<ul style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; padding-left: 32px; list-style-type: disc;\">\n<li style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; margin-bottom: 0.5em;\"><p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.5em 0px;\">1：oldBeanDefinition如果存在，且执行到了这里也没有抛出异常，说明该BeanDefinition已经被覆盖，缓存需要更新。</p></li>\n<li style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; margin-bottom: 0.5em;\"><p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.5em 0px;\">2：如果是单例模式的bean对象则Set中包含该beanName，执行到这里说明该BeanDefinition已经从一个单例模式的bean变为了一个普通的bean，所以缓存也需要更新。</p></li>\n</ul>\n<pre style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><code class=\"java language-java hljs\" style=\"margin: 0px 2px; line-height: 18px; font-size: 14px; font-weight: normal; word-spacing: 0px; letter-spacing: 0px; font-family: Consolas, Inconsolata, Courier, monospace; border-radius: 0px; color: rgb(169, 183, 198); background: rgb(40, 43, 46); overflow-x: auto; padding: 0.5em; display: block !important; word-wrap: normal !important; word-break: normal !important; white-space: pre !important; overflow: auto !important;\"><span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;\">if</span> (oldBeanDefinition != <span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;\">null</span> || containsSingleton(beanName)) &#123;<br>    resetBeanDefinition(beanName);<br>&#125;<br></code></pre>\n<p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.5em 0px;\">OK，我们来看下resetBeanDefinition这个方法:</p>\n<p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.5em 0px;\"><code style=\"font-size: inherit; line-height: inherit; word-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(233, 105, 0); background: rgb(248, 248, 248);\">这个方法的作用就是重置给定bean的所有bean定义缓存，包括从它派生的bean的缓存。</code></p>\n<pre style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><code class=\"java language-java hljs\" style=\"margin: 0px 2px; line-height: 18px; font-size: 14px; font-weight: normal; word-spacing: 0px; letter-spacing: 0px; font-family: Consolas, Inconsolata, Courier, monospace; border-radius: 0px; color: rgb(169, 183, 198); background: rgb(40, 43, 46); overflow-x: auto; padding: 0.5em; display: block !important; word-wrap: normal !important; word-break: normal !important; white-space: pre !important; overflow: auto !important;\"><span class=\"hljs-function\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;\"><span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;\">protected</span> <span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;\">void</span> <span class=\"hljs-title\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(165, 218, 45); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;\">resetBeanDefinition</span><span class=\"hljs-params\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(255, 152, 35); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;\">(String beanName)</span> </span>&#123;<br>    <span class=\"hljs-comment\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(128, 128, 128); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;\">// 如果已经创建，则删除给定bean的合并bean定义。</span><br>    clearMergedBeanDefinition(beanName);<br><br>    <span class=\"hljs-comment\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(128, 128, 128); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;\">// 如果有的话，从singleton 高速缓存中删除相应的bean。</span><br>    <span class=\"hljs-comment\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(128, 128, 128); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;\">//但是这也不是必须的，而只是为了覆盖上下文的默认bean</span><br>    <span class=\"hljs-comment\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(128, 128, 128); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;\">//（就是从manualSingletonNames中移除）</span><br>    destroySingleton(beanName);<br>    <span class=\"hljs-comment\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(128, 128, 128); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;\">//递归的方式来 重置具有给定bean作为父项的所有bean定义。</span><br>    <span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;\">for</span> (String bdName : <span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;\">this</span>.beanDefinitionNames) &#123;<br>        <span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;\">if</span> (!beanName.equals(bdName)) &#123;<br>            BeanDefinition bd = <span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;\">this</span>.beanDefinitionMap.get(bdName);<br>            <span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important; white-space: inherit !important;\">if</span> (beanName.equals(bd.getParentName())) &#123;<br>                resetBeanDefinition(bdName);<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre>\n<p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.5em 0px;\">Bean的注册就到这里了</p></div>","text":"Bean的定义主要由 BeanDefinition 来描述的。作为Spring中用于包装Bean的数据结构，今天就来看看它的面纱下的真容吧 BeanDefini...","permalink":"/post/spring/spring-ioc-bean-definition","photos":[],"count_time":{"symbolsCount":"29k","symbolsTime":"27 mins."},"categories":[{"name":"spring","slug":"spring","count":15,"path":"api/categories/spring.json"}],"tags":[{"name":"spring","slug":"spring","count":11,"path":"api/tags/spring.json"},{"name":"依赖注入","slug":"依赖注入","count":3,"path":"api/tags/依赖注入.json"},{"name":"Ioc","slug":"Ioc","count":3,"path":"api/tags/Ioc.json"},{"name":"BeanDefinition","slug":"BeanDefinition","count":1,"path":"api/tags/BeanDefinition.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#BeanDefinition-%E7%B1%BB%E5%AE%9A%E4%B9%89\"><span class=\"toc-text\">BeanDefinition 类定义</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#AttributeAccessor\"><span class=\"toc-text\">AttributeAccessor</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#BeanMetadataElement\"><span class=\"toc-text\">BeanMetadataElement</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#BeanDifinition-%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90\"><span class=\"toc-text\">BeanDifinition 源码分析</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#beanFactory-%E5%88%9B%E5%BB%BA\"><span class=\"toc-text\">beanFactory 创建</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#BeanFactory%E7%9A%84%E7%BB%A7%E6%89%BF%E4%BD%93%E7%B3%BB\"><span class=\"toc-text\">BeanFactory的继承体系</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#BeanFactory%E7%9A%84%E5%88%9B%E5%BB%BA\"><span class=\"toc-text\">BeanFactory的创建</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#BeanDefinition-%E8%BD%BD%E5%85%A5%EF%BC%88%E4%B8%8A%EF%BC%89\"><span class=\"toc-text\">BeanDefinition 载入（上）</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#BeanDefinition%E8%BD%BD%E5%85%A5%EF%BC%88%E4%B8%AD%EF%BC%89\"><span class=\"toc-text\">BeanDefinition载入（中）</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#BeanDefinition%E8%BD%BD%E5%85%A5-%E4%B8%8B\"><span class=\"toc-text\">BeanDefinition载入(下)</span></a></li></ol>","author":{"name":"glmapper","slug":"blog-author","avatar":"https://glmapper-blog.oss-cn-hangzhou.aliyuncs.com/common/favicon.ico","link":"/","description":"开放，开源，分享，共享","socials":{"github":"https://github.com/glmapper","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/2412872703","zhihu":"","csdn":"","juejin":"https://juejin.cn/user/3227821827961806","customs":{"sofastack":{"icon":"https://glmapper-blog.oss-cn-hangzhou.aliyuncs.com/common/sofastack.svg","link":"https://www.sofastack.tech/"}}}},"mapped":true,"hidden":false,"prev_post":{"title":"Spring 源码系列-依赖注入","uid":"33cd3345dbbaff282fcbe2e14cfaf78c","slug":"spring/spring-ioc-dependency-inject","date":"2018-02-07T02:24:12.000Z","updated":"2024-07-05T04:09:05.817Z","comments":true,"path":"api/articles/spring/spring-ioc-dependency-inject.json","keywords":null,"cover":[],"text":"在Spring源码系列-BeanDefinition文章中大概分析了一下 Bean 的载入，其实这个过程就是在Ioc容器中建立BeanDefinition的数据...","permalink":"/post/spring/spring-ioc-dependency-inject","photos":[],"count_time":{"symbolsCount":"36k","symbolsTime":"33 mins."},"categories":[{"name":"spring","slug":"spring","count":15,"path":"api/categories/spring.json"}],"tags":[{"name":"spring","slug":"spring","count":11,"path":"api/tags/spring.json"},{"name":"依赖注入","slug":"依赖注入","count":3,"path":"api/tags/依赖注入.json"},{"name":"Ioc","slug":"Ioc","count":3,"path":"api/tags/Ioc.json"}],"author":{"name":"glmapper","slug":"blog-author","avatar":"https://glmapper-blog.oss-cn-hangzhou.aliyuncs.com/common/favicon.ico","link":"/","description":"开放，开源，分享，共享","socials":{"github":"https://github.com/glmapper","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/2412872703","zhihu":"","csdn":"","juejin":"https://juejin.cn/user/3227821827961806","customs":{"sofastack":{"icon":"https://glmapper-blog.oss-cn-hangzhou.aliyuncs.com/common/sofastack.svg","link":"https://www.sofastack.tech/"}}}}},"next_post":{"title":"Spring 源码系列-BeanWrapper","uid":"670500c2d4f523a72ee6e1b2edadead0","slug":"spring/spring-ioc-bean-wrapper","date":"2018-02-07T02:24:10.000Z","updated":"2024-07-05T04:09:05.817Z","comments":true,"path":"api/articles/spring/spring-ioc-bean-wrapper.json","keywords":null,"cover":null,"text":"BeanWrapper 是 Spring 提供的一个用来操作javaBean 属性的工具，使用它可以直接修改一个对象的属性。 对于 bean 属性的操作，大家熟...","permalink":"/post/spring/spring-ioc-bean-wrapper","photos":[],"count_time":{"symbolsCount":"2.3k","symbolsTime":"2 mins."},"categories":[{"name":"spring","slug":"spring","count":15,"path":"api/categories/spring.json"}],"tags":[{"name":"spring","slug":"spring","count":11,"path":"api/tags/spring.json"},{"name":"依赖注入","slug":"依赖注入","count":3,"path":"api/tags/依赖注入.json"},{"name":"Ioc","slug":"Ioc","count":3,"path":"api/tags/Ioc.json"},{"name":"BeanWrapper","slug":"BeanWrapper","count":1,"path":"api/tags/BeanWrapper.json"}],"author":{"name":"glmapper","slug":"blog-author","avatar":"https://glmapper-blog.oss-cn-hangzhou.aliyuncs.com/common/favicon.ico","link":"/","description":"开放，开源，分享，共享","socials":{"github":"https://github.com/glmapper","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/2412872703","zhihu":"","csdn":"","juejin":"https://juejin.cn/user/3227821827961806","customs":{"sofastack":{"icon":"https://glmapper-blog.oss-cn-hangzhou.aliyuncs.com/common/sofastack.svg","link":"https://www.sofastack.tech/"}}}}}}