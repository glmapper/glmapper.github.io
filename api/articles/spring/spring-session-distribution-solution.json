{"title":"SpringSession系列-分布式Session实现方案","uid":"46a9cf97b63fb53bbaac01eae86dbdc2","slug":"spring/spring-session-distribution-solution","date":"2018-12-10T01:14:52.000Z","updated":"2024-07-05T04:09:05.818Z","comments":true,"path":"api/articles/spring/spring-session-distribution-solution.json","keywords":null,"cover":[],"content":"<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p><a href=\"https://juejin.cn/post/6844903721206300685\">https://juejin.cn/post/6844903721206300685</a></p></blockquote>\n<p>上一篇文章 <a href=\"https://juejin.im/post/6844903703921557517\">SpringSession：集成SpringBoot</a> 中介绍了如何在<code>SpringBoot</code>中来集成 <code>SpringSession</code>，整个过程非常简单，同时也简单分析了下<code>SpringSession</code>的作用原理。继上一篇实践之后，本文主要来分析 <code>SpringSession</code> 的原理。</p>\n<span id=\"more\"></span>\n\n<h2 id=\"1、从-session-的一致性方案说起\"><a href=\"#1、从-session-的一致性方案说起\" class=\"headerlink\" title=\"1、从 session 的一致性方案说起\"></a>1、从 session 的一致性方案说起</h2><p>关于 <code>session</code> 和<code> cookie</code> 的一些知识，大家可以参考下我之前写的一篇文章：<a href=\"https://juejin.im/post/6844903605175058439\">聊一聊 session 和 cookie </a>。</p>\n<p><code>Session</code>作为服务器端使用的一种记录客户端状态的机制，其对客户端是透明的；但是<code>Session</code> 的正常运作仍然需要客户端浏览器的支持。我们都知道，<code>HTTP</code>协议是无状态的，<code>Session</code>不能依据<code>HTTP</code>连接来判断是否为同一客户，因此服务器需要向客户端浏览器发送一个识别标志（<code>sessionId</code>）,这个识别标志通过是通过<code>Cookie</code>机制来完成。</p>\n<h3 id=\"1-1、session-一致性问题的由来\"><a href=\"#1-1、session-一致性问题的由来\" class=\"headerlink\" title=\"1.1、session 一致性问题的由来\"></a>1.1、session 一致性问题的由来</h3><p>当用户首次访问我们的<code>Servlet</code>时，应用服务器端会给用户创建一个独立的<code>Session</code>，并且存储在内存中。这种情况在单应用服务器场景下是可以满足的（这里不讨论其一个弊端，就是内存占用给服务器带来的压力的问题）。在集群场景下，这种机制就会到来问题：</p>\n<h4 id=\"1-1-1、单机场景\"><a href=\"#1-1-1、单机场景\" class=\"headerlink\" title=\"1.1.1、单机场景\"></a>1.1.1、单机场景</h4><p><img src=\"https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2018/11/4/166dee5cad0e35b8~tplv-t2oaga2asx-image.image\"></p>\n<p>因为是一台应用服务器，用户的每次请求都是由这台机器来处理，所以不会有<code>session</code>共享问题。</p>\n<h4 id=\"1-1-2、集群场景\"><a href=\"#1-1-2、集群场景\" class=\"headerlink\" title=\"1.1.2、集群场景\"></a>1.1.2、集群场景</h4><p><img src=\"https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2018/11/4/166dee88ddb7d0ee~tplv-t2oaga2asx-image.image\"></p>\n<p>假设现在集群中有三台机器，（从上到下：A-&gt;B-&gt;C）。当前用户首次发起访问时，请求被分配到 A 机器处理，<code>Session </code>数据被写入 A 机器的内存中；当再次发起访问 时，请求被分配的 B 处理，但此时 B 内存中并没有当前用户的任何数据，这样就出现了<code>session</code>不一致的情况了。</p>\n<h3 id=\"1-2、Session-一致性问题的方案\"><a href=\"#1-2、Session-一致性问题的方案\" class=\"headerlink\" title=\"1.2、Session 一致性问题的方案\"></a>1.2、Session 一致性问题的方案</h3><p>对于当前服务化、单元化应用盛行的时代，简单的内存型的 <code>Session</code> 已经不能够满足我们的要求了。那么我们就需要寻求一种方案来替换目前单机内存存储实现的方案。</p>\n<h4 id=\"1-2-1-基于-IP-HASH-的实现机制\"><a href=\"#1-2-1-基于-IP-HASH-的实现机制\" class=\"headerlink\" title=\"1.2.1 基于 IP-HASH 的实现机制\"></a>1.2.1 基于 IP-HASH 的实现机制</h4><p>在 1.1.2 中因为我们无法知道请求会被分配到哪台机器来处理，所以会导致<code>session</code>不一致的问题出现。如果我们可以解决让每个用户的请求能够固定的打到某一台机器上，那么上面提到的问题其实也就不存在了。<code>IP-HASH</code> 就是这样一种方案。通过对请求的客户端 <code>IP</code> 进行 <code>HASH</code> 计算，并将计算结果映射到具体一台机器，这样就可以将请求固定分配到某一台机器上，从而有效的避免<code>session</code>一致性问题的出现。</p>\n<p>这种方案的好处在于:</p>\n<ul>\n<li>不需要修改任何应用代码，0 侵入。</li>\n<li>安全性高，不依赖其他三方缓存框架带来的风险</li>\n<li>成本低</li>\n</ul>\n<p>但是问题也很明显，这种方式实际上是规避了<code>session</code>一致性问题的出现，并非是针对<code>session</code>一致性问题给出的解决方案。主要问题：</p>\n<ul>\n<li>基于应用内存，会给应用服务器带来一定的压力</li>\n<li>服务重启会导致<code>session</code>数据丢失</li>\n<li>不利于水平扩展，水平扩展也可能丢失<code>session</code></li>\n<li>存在单点负载高的情况，就是多数请求经过<code>HASH</code>计算之后打到同一台机器，而其他机器处于空闲状态。</li>\n</ul>\n<h4 id=\"1-2-2-session-复制\"><a href=\"#1-2-2-session-复制\" class=\"headerlink\" title=\"1.2.2 session 复制\"></a>1.2.2 session 复制</h4><p>这种方式的实现原理是应用服务器创建<code>session</code>之后通过组播的方式将<code>session</code>发送到组播地址内的其他应用服务器上。这种方式相较于<code>IP-HASH</code> 的方式要靠谱一点：</p>\n<ul>\n<li>同样不需要更改任何业务代码</li>\n<li>能够适应多种负载策略</li>\n<li>机器重启或者宕机之后不怕丢失，因为有冗余备份</li>\n</ul>\n<p>但是这种方式也有比较大的问题：</p>\n<ul>\n<li>首先就是服务器之间同步<code>session</code>会占用一定的网络资源，同时<code>session</code>在不同的机器之间进行同步存在延迟。</li>\n<li>还是基于内存存储，局限于机器内存容量影响，水平扩展能力差</li>\n<li>服务器内存因为需要存储其他机器上的<code>session</code>数据，对内存的消耗会随着集群的规模变大而变大，可能会导致机器频繁触发<code>GC</code>。</li>\n</ul>\n<h4 id=\"1-2-3-借助三方缓存框架实现-session-集中管理\"><a href=\"#1-2-3-借助三方缓存框架实现-session-集中管理\" class=\"headerlink\" title=\"1.2.3 借助三方缓存框架实现 session 集中管理\"></a>1.2.3 借助三方缓存框架实现 session 集中管理</h4><p>上面两种方式都是有服务器自己来管理<code>session</code>的，主要问题还是在于对于性能和内存的影响。而这种方式的原理是将<code>session</code>托管给三方软件（如<code>redis</code>）来统一管理。这种方式可以有效的解决性能、内存占用以及水平扩展等问题。但是因为引入了三方软件，在实现复杂度、运维成本等方面会有所增加。</p>\n<p>目前所接触到的分布式<code>session</code>的实现方案，大多都是基于这种方式来实现的；<code>SpringSession</code> 也不例外。</p>\n<h2 id=\"2、SpringSession-功能结构分析\"><a href=\"#2、SpringSession-功能结构分析\" class=\"headerlink\" title=\"2、SpringSession 功能结构分析\"></a>2、SpringSession 功能结构分析</h2><p>前面对分布式场景下的 <code>Session</code>一致性问题进行了说明，并对解决<code>Session</code>一致性的问题的几种策略进行的分析（有点糙，网上这些知识有很多）。在了解这些背景之后，我们来看下 <code>SpringSession</code> 的实现原理。</p>\n<h3 id=\"2-1-简介\"><a href=\"#2-1-简介\" class=\"headerlink\" title=\"2.1 简介\"></a>2.1 简介</h3><p><code>Spring Session</code> 提供了用于管理用户会话信息的<code>API</code>和实现，在不依赖特定于应用程序容器的解决方案的情况下，使得支持群集会话变得更加简单。它还提供了透明的集成：</p>\n<ul>\n<li>允许以应用程序容器（<code>Tomcat</code>等）中立的方式替换 <code>HttpSesseion</code>，支持在 <code>headers </code>中提供 <code>session IDs </code>来使用 <code>RESTful API</code>。</li>\n<li>提供在接收 <code>WebSocket</code> 消息时保持<code> HTTP</code> 会话存活的能力</li>\n<li>允许以应用程序容器中立的方式替换 <code>Spring WebFlux</code> 的 <code>WebSession</code>。</li>\n</ul>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>以上来自官网文档翻译 <a href=\"https://github.com/spring-projects/spring-session\">Spring Session </a></p></blockquote>\n<h3 id=\"2-2-模块\"><a href=\"#2-2-模块\" class=\"headerlink\" title=\"2.2 模块\"></a>2.2 模块</h3><p><code>Spring Session</code> 主要包括 4 个模块：</p>\n<ul>\n<li><code>spring-session-core</code> ：提供了 <code>Spring Session</code> 核心功能和<code>API</code></li>\n<li><code>spring-session-data-redis</code>：以 <code>redis</code> 作为存储机制的 <code>SessionRepository</code> 实现</li>\n<li><code>spring-session-hazelcast</code>：以 <code>Hazelcast</code> 作为存储机制的 <code>SessionRepository</code> 实现</li>\n<li><code>spring-session-jdbc</code>：以关系型数据库作为存储机制的 <code>SessionRepository</code> 实现</li>\n</ul>\n<p>总体来说就是 核心<code>API</code>+存储实现；工程模块截图如下：</p>\n<p><img src=\"https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2018/11/4/166dec2555f6da9e~tplv-t2oaga2asx-image.image\"></p>\n<h3 id=\"2-3-功能结构\"><a href=\"#2-3-功能结构\" class=\"headerlink\" title=\"2.3 功能结构\"></a>2.3 功能结构</h3><p>SpringSession整体上可以分为三块：</p>\n<ul>\n<li>对于Web层的处理，这里包括对于请求的重写，自定义的filter加入到filter chain，cookie处理，http header处理等</li>\n<li>公共基础封装，比如存储类的顶层抽象接口定义，自定配置，事件处理等。</li>\n<li>存储部分，这部分实际上是对公共基础封装接口的实现，提供了丰富的存储实现，包括redis，内存存储，jdbc等。</li>\n</ul>\n<h3 id=\"2-4-多-session-支持\"><a href=\"#2-4-多-session-支持\" class=\"headerlink\" title=\"2.4 多 session 支持\"></a>2.4 多 session 支持</h3><p>对于常用的分布式session，在实现上一般会依赖于 cookie。但是在 springsession 中提供了基于header来传递jessionID的策略实现。同时在 2.0.4 版本之前，对于同一个浏览器同一个网站，springsession 支持多个<code>session</code>问题，但是在此版本之后抛弃了对于对 session 的支持。关于更多关于多session支持可以查看 SpringSession 的<a href=\"https://docs.spring.io/spring-session/docs/1.3.5.BUILD-SNAPSHOT/reference/html5/\">官方文档</a>。</p>\n<h2 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h2><p>本文对分布式 session 的几种实现策略进行了简单的介绍。对于分布式 session 而言，如何解决一致性问题是关键，目前我见过的绝大多数方案均是以 【借助三方缓存框架实现 session 集中管理】 这种来实现的，包括本系列文章中所要介绍的 SpringSession。</p>\n<p>除分布式session一致性方式解决方案的介绍之外，作为SpringSession 的第二篇文章，在这里简单分析了下Springsession的功能模块，以便后续展开对源码的分析。</p>\n","text":" https://juejin.cn/post/6844903721206300685 上一篇文章 SpringSession：集成SpringBoot 中介绍...","permalink":"/post/spring/spring-session-distribution-solution","photos":[],"count_time":{"symbolsCount":"3.3k","symbolsTime":"3 mins."},"categories":[{"name":"spring","slug":"spring","count":15,"path":"api/categories/spring.json"}],"tags":[{"name":"session","slug":"session","count":6,"path":"api/tags/session.json"},{"name":"分布式","slug":"分布式","count":6,"path":"api/tags/分布式.json"},{"name":"redis","slug":"redis","count":5,"path":"api/tags/redis.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#1%E3%80%81%E4%BB%8E-session-%E7%9A%84%E4%B8%80%E8%87%B4%E6%80%A7%E6%96%B9%E6%A1%88%E8%AF%B4%E8%B5%B7\"><span class=\"toc-text\">1、从 session 的一致性方案说起</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-1%E3%80%81session-%E4%B8%80%E8%87%B4%E6%80%A7%E9%97%AE%E9%A2%98%E7%9A%84%E7%94%B1%E6%9D%A5\"><span class=\"toc-text\">1.1、session 一致性问题的由来</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#1-1-1%E3%80%81%E5%8D%95%E6%9C%BA%E5%9C%BA%E6%99%AF\"><span class=\"toc-text\">1.1.1、单机场景</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#1-1-2%E3%80%81%E9%9B%86%E7%BE%A4%E5%9C%BA%E6%99%AF\"><span class=\"toc-text\">1.1.2、集群场景</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-2%E3%80%81Session-%E4%B8%80%E8%87%B4%E6%80%A7%E9%97%AE%E9%A2%98%E7%9A%84%E6%96%B9%E6%A1%88\"><span class=\"toc-text\">1.2、Session 一致性问题的方案</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#1-2-1-%E5%9F%BA%E4%BA%8E-IP-HASH-%E7%9A%84%E5%AE%9E%E7%8E%B0%E6%9C%BA%E5%88%B6\"><span class=\"toc-text\">1.2.1 基于 IP-HASH 的实现机制</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#1-2-2-session-%E5%A4%8D%E5%88%B6\"><span class=\"toc-text\">1.2.2 session 复制</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#1-2-3-%E5%80%9F%E5%8A%A9%E4%B8%89%E6%96%B9%E7%BC%93%E5%AD%98%E6%A1%86%E6%9E%B6%E5%AE%9E%E7%8E%B0-session-%E9%9B%86%E4%B8%AD%E7%AE%A1%E7%90%86\"><span class=\"toc-text\">1.2.3 借助三方缓存框架实现 session 集中管理</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#2%E3%80%81SpringSession-%E5%8A%9F%E8%83%BD%E7%BB%93%E6%9E%84%E5%88%86%E6%9E%90\"><span class=\"toc-text\">2、SpringSession 功能结构分析</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-1-%E7%AE%80%E4%BB%8B\"><span class=\"toc-text\">2.1 简介</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-2-%E6%A8%A1%E5%9D%97\"><span class=\"toc-text\">2.2 模块</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-3-%E5%8A%9F%E8%83%BD%E7%BB%93%E6%9E%84\"><span class=\"toc-text\">2.3 功能结构</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-4-%E5%A4%9A-session-%E6%94%AF%E6%8C%81\"><span class=\"toc-text\">2.4 多 session 支持</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%B0%8F%E7%BB%93\"><span class=\"toc-text\">小结</span></a></li></ol>","author":{"name":"glmapper","slug":"blog-author","avatar":"https://glmapper-blog.oss-cn-hangzhou.aliyuncs.com/common/favicon.ico","link":"/","description":"开放，开源，分享，共享","socials":{"github":"https://github.com/glmapper","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/2412872703","zhihu":"","csdn":"","juejin":"https://juejin.cn/user/3227821827961806","customs":{"sofastack":{"icon":"https://glmapper-blog.oss-cn-hangzhou.aliyuncs.com/common/sofastack.svg","link":"https://www.sofastack.tech/"}}}},"mapped":true,"hidden":false,"prev_post":{"title":"SpringSession系列-请求与响应重写","uid":"a51f93717fc52b7309abb94021410992","slug":"spring/spring-session-rewrite-req-resp","date":"2018-12-10T01:15:21.000Z","updated":"2024-07-05T04:09:05.818Z","comments":true,"path":"api/articles/spring/spring-session-rewrite-req-resp.json","keywords":null,"cover":null,"text":"我们知道，HttpServletRequset和HttpServletResponse是Servlet标准所指定的Java语言与Web容器进行交互的接口。接口本...","permalink":"/post/spring/spring-session-rewrite-req-resp","photos":[],"count_time":{"symbolsCount":"7.6k","symbolsTime":"7 mins."},"categories":[{"name":"spring","slug":"spring","count":15,"path":"api/categories/spring.json"}],"tags":[{"name":"session","slug":"session","count":6,"path":"api/tags/session.json"},{"name":"分布式","slug":"分布式","count":6,"path":"api/tags/分布式.json"},{"name":"redis","slug":"redis","count":5,"path":"api/tags/redis.json"}],"author":{"name":"glmapper","slug":"blog-author","avatar":"https://glmapper-blog.oss-cn-hangzhou.aliyuncs.com/common/favicon.ico","link":"/","description":"开放，开源，分享，共享","socials":{"github":"https://github.com/glmapper","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/2412872703","zhihu":"","csdn":"","juejin":"https://juejin.cn/user/3227821827961806","customs":{"sofastack":{"icon":"https://glmapper-blog.oss-cn-hangzhou.aliyuncs.com/common/sofastack.svg","link":"https://www.sofastack.tech/"}}}}},"next_post":{"title":"SpringSession系列-存储机制之Redis&Map","uid":"13e3061ae0f9c367c54ed2cb6b629b40","slug":"spring/spring-session-store-redis","date":"2018-12-10T01:14:11.000Z","updated":"2024-07-05T04:09:05.819Z","comments":true,"path":"api/articles/spring/spring-session-store-redis.json","keywords":null,"cover":[],"text":"在之前的文章中已经对SpringSession的功能结构，请求/响应重写等做了介绍。本文将继续来介绍下SpringSession中存储部分的设计。存储是分布式s...","permalink":"/post/spring/spring-session-store-redis","photos":[],"count_time":{"symbolsCount":"9.7k","symbolsTime":"9 mins."},"categories":[{"name":"spring","slug":"spring","count":15,"path":"api/categories/spring.json"}],"tags":[{"name":"session","slug":"session","count":6,"path":"api/tags/session.json"},{"name":"分布式","slug":"分布式","count":6,"path":"api/tags/分布式.json"},{"name":"redis","slug":"redis","count":5,"path":"api/tags/redis.json"}],"author":{"name":"glmapper","slug":"blog-author","avatar":"https://glmapper-blog.oss-cn-hangzhou.aliyuncs.com/common/favicon.ico","link":"/","description":"开放，开源，分享，共享","socials":{"github":"https://github.com/glmapper","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/2412872703","zhihu":"","csdn":"","juejin":"https://juejin.cn/user/3227821827961806","customs":{"sofastack":{"icon":"https://glmapper-blog.oss-cn-hangzhou.aliyuncs.com/common/sofastack.svg","link":"https://www.sofastack.tech/"}}}}}}