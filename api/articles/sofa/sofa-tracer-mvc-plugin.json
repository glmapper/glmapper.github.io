{"title":"SOFATracer 插件埋点机制详解","uid":"0b1e2bd1c4a4b8d7f121fe03a5fb0ef3","slug":"sofa/sofa-tracer-mvc-plugin","date":"2018-12-07T11:09:56.000Z","updated":"2024-07-05T04:09:05.803Z","comments":true,"path":"api/articles/sofa/sofa-tracer-mvc-plugin.json","keywords":"宋国磊, glmapper, 卫恒, 分享, 开源","cover":[],"content":"<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>SOFATracer 是一个用于分布式系统调用跟踪的组件，通过统一的 <code>traceId</code> 将调用链路中的各种网络调用情况以日志的方式记录下来，以达到透视化网络调用的目的。这些日志可用于故障的快速发现，服务治理等。</p></blockquote>\n<p>从 <a href=\"http://www.sofastack.tech/sofa-tracer/docs/roadmap\">RoadMap</a> 和 <a href=\"https://github.com/alipay/sofa-tracer/pulls\">PR</a> 来看，目前 SOFATracer 已经支持了丰富的组件插件埋点。</p>\n<p><img src=\"https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2018/12/7/16789157353dfeed~tplv-t2oaga2asx-image.image\"></p>\n<span id=\"more\"></span>\n\n<p>目前还未支持的主要是 Dubbo、MQ 以及 Redis 等。本文将从 SOFATracer 已提供的一个插件源码来分析下 SOFATracer 插件的埋点实现。</p>\n<h2 id=\"1-SOFATracer-插件埋点机制\"><a href=\"#1-SOFATracer-插件埋点机制\" class=\"headerlink\" title=\"1 SOFATracer 插件埋点机制\"></a>1 SOFATracer 插件埋点机制</h2><p>SOFATracer 插件的作用实际上就是对于不同组件进行埋点，以便于收集这些组件的链路数据。SOFATracer 埋点方式一般是通过 Filter、Interceptor 机制实现的。</p>\n<p>另一个是，SOFATracer 的埋点方式并不是基于 OT-api 进行埋点的，而是基于 SOFATracer 自己的 api 进行埋点的，详见 <a href=\"https://github.com/alipay/sofa-tracer/issues/126\">issue#126</a>。</p>\n<h3 id=\"1-1-Filter-or-Interceptor\"><a href=\"#1-1-Filter-or-Interceptor\" class=\"headerlink\" title=\"1.1 Filter or Interceptor\"></a>1.1 Filter or Interceptor</h3><p>目前已实现的插件中，像 MVC 插件是基于 Filter 进行埋点的，httpclient、resttemplate 等是基于Interceptor进行埋点的。在实现插件时，要根据不同插件的特性来选择具体的埋点方式。</p>\n<p> 当然除了这两种方式之外还可以通过静态代理的方式来实现埋点。比如 sofa-tracer-datasource-plugin 插件就是将不同的数据源进行统一代理给 SmartDatasource，从而实现埋点的。</p>\n<h3 id=\"1-2-AbstractTracer-API\"><a href=\"#1-2-AbstractTracer-API\" class=\"headerlink\" title=\"1.2 AbstractTracer API\"></a>1.2 AbstractTracer API</h3><p>SOFATracer 中所有的插件均需要实现自己的 Tracer 实例，如 Mvc 的 SpringMvcTracer 、HttpClient的 HttpClientTracer 等，这一点与基于 Opentracing-api 接口埋点的实现有所区别。</p>\n<ul>\n<li>1、基于 SOFATracer api 埋点方式插件扩展</li>\n</ul>\n<p><img src=\"https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2018/12/7/1678915732e9c76e~tplv-t2oaga2asx-image.image\" alt=\"img\"></p>\n<p>AbstractTracer 是 SOFATracer 用于插件扩展使用的一个抽象类，根据插件类型不同，又可以分为 clientTracer 和 serverTracer，分别对应于：AbstractClientTracer 和 AbstractServerTracer，再通过 AbstractClientTracer 和 AbstractServerTracer 衍生出具体的组件 Tracer 实现。这种方式的好处在于，所有的插件实现均由 SOFATracer 本身来管控，对于不同的组件可以轻松的实现差异化和定制化。缺点也源于此，每增加一个组件都需要做一些重复工作。</p>\n<ul>\n<li>2、基于 OpenTracing-api 埋点方式插件扩展</li>\n</ul>\n<p><img src=\"https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2018/12/7/16789157375492be~tplv-t2oaga2asx-image.image\" alt=\"img\"></p>\n<p>这种埋点方式不基于 SOFATracer  自身提供的 API，而是基于 OpenTracing-api 接口。因为均遵循 OpenTracing-api 规范，所以组件和 Tracer 实现可以独立分开来维护。这样就可以对接开源的一些基于 OpenTracing-api 规范实现的组件。例如：<a href=\"https://github.com/opentracing-contrib\">OpenTracing API Contributions</a>。</p>\n<p>SOFATracer 在后面将会在 4.0 版本中支持基于 OT-api 的埋点方式，对外部组件接入扩展提供支持。</p>\n<h3 id=\"1-3-AbstractTracer\"><a href=\"#1-3-AbstractTracer\" class=\"headerlink\" title=\"1.3 AbstractTracer\"></a>1.3 AbstractTracer</h3><p>这里先来看下 AbstractTracer  这个抽象类中具体提供了哪些抽象方法，也就是对于 AbstractClientTracer 和 AbstractServerTracer 需要分别扩展哪些能力。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 获取client端 摘要日志日志名</span></span><br><span class=\"line\"><span class=\"keyword\">protected</span> <span class=\"keyword\">abstract</span> String <span class=\"title function_\">getClientDigestReporterLogName</span><span class=\"params\">()</span>;</span><br><span class=\"line\"><span class=\"comment\">// 获取client端 摘要日志滚动策略key</span></span><br><span class=\"line\"><span class=\"keyword\">protected</span> <span class=\"keyword\">abstract</span> String <span class=\"title function_\">getClientDigestReporterRollingKey</span><span class=\"params\">()</span>;</span><br><span class=\"line\"><span class=\"comment\">// 获取client端 摘要日志日志名key</span></span><br><span class=\"line\"><span class=\"keyword\">protected</span> <span class=\"keyword\">abstract</span> String <span class=\"title function_\">getClientDigestReporterLogNameKey</span><span class=\"params\">()</span>;</span><br><span class=\"line\"><span class=\"comment\">// 获取client端 摘要日志编码器</span></span><br><span class=\"line\"><span class=\"keyword\">protected</span> <span class=\"keyword\">abstract</span> SpanEncoder&lt;SofaTracerSpan&gt; <span class=\"title function_\">getClientDigestEncoder</span><span class=\"params\">()</span>;</span><br><span class=\"line\"><span class=\"comment\">// 创建client端 统计日志Reporter类</span></span><br><span class=\"line\"><span class=\"keyword\">protected</span> <span class=\"keyword\">abstract</span> AbstractSofaTracerStatisticReporter <span class=\"title function_\">generateClientStatReporter</span><span class=\"params\">()</span>;</span><br><span class=\"line\"><span class=\"comment\">// 获取server端 摘要日志日志名</span></span><br><span class=\"line\"><span class=\"keyword\">protected</span> <span class=\"keyword\">abstract</span> String <span class=\"title function_\">getServerDigestReporterLogName</span><span class=\"params\">()</span>;</span><br><span class=\"line\"><span class=\"comment\">// 获取server端 摘要日志滚动策略key</span></span><br><span class=\"line\"><span class=\"keyword\">protected</span> <span class=\"keyword\">abstract</span> String <span class=\"title function_\">getServerDigestReporterRollingKey</span><span class=\"params\">()</span>;</span><br><span class=\"line\"><span class=\"comment\">// 获取server端 摘要日志日志名key</span></span><br><span class=\"line\"><span class=\"keyword\">protected</span> <span class=\"keyword\">abstract</span> String <span class=\"title function_\">getServerDigestReporterLogNameKey</span><span class=\"params\">()</span>;</span><br><span class=\"line\"><span class=\"comment\">// 获取server端 摘要日志编码器</span></span><br><span class=\"line\"><span class=\"keyword\">protected</span> <span class=\"keyword\">abstract</span> SpanEncoder&lt;SofaTracerSpan&gt; <span class=\"title function_\">getServerDigestEncoder</span><span class=\"params\">()</span>;</span><br><span class=\"line\"><span class=\"comment\">// 创建server端 统计日志Reporter类</span></span><br><span class=\"line\"><span class=\"keyword\">protected</span> <span class=\"keyword\">abstract</span> AbstractSofaTracerStatisticReporter <span class=\"title function_\">generateServerStatReporter</span><span class=\"params\">()</span>;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<p>从  AbstractTracer 类提供的抽象方法来看，不管是 client 还是 server，在具体的 Tracer 组件实现中，都必须提供以下实现：</p>\n<ul>\n<li>DigestReporterLogName :当前组件摘要日志的日志名称</li>\n<li>DigestReporterRollingKey : 当前组件摘要日志的滚动策略</li>\n<li>SpanEncoder：对摘要日志进行编码的编码器实现</li>\n<li>AbstractSofaTracerStatisticReporter : 统计日志 reporter 类的实现类。</li>\n</ul>\n<h2 id=\"2-SpringMVC-插件埋点分析\"><a href=\"#2-SpringMVC-插件埋点分析\" class=\"headerlink\" title=\"2 SpringMVC 插件埋点分析\"></a>2 SpringMVC 插件埋点分析</h2><p>这里我们以 SpringMVC 插件为例，来分析下如何实现一个埋点插件的。这里是官方给出的案例工程：基于 <a href=\"https://github.com/alipay/sofa-tracer/blob/master/tracer-samples/tracer-sample-with-springmvc\">Spring MVC 示例落地日志</a> 。</p>\n<h3 id=\"2-1-实现-Tracer-实例\"><a href=\"#2-1-实现-Tracer-实例\" class=\"headerlink\" title=\"2.1 实现 Tracer 实例\"></a>2.1 实现 Tracer 实例</h3><p>SpringMvcTracer 继承了 AbstractServerTracer 类，是对 serverTracer 的扩展。</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>PS：如何确定一个组件是client端还是server端呢？就是看当前组件是请求的发起方还是请求的接受方，如果是请求发起方则一般是client端，如果是请求接收方则是 server 端。那么对于 MVC 来说，是请求接受方，因此这里实现了 AbstractServerTracer 类。</p></blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">SpringMvcTracer</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">AbstractServerTracer</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"2-1-1-构造函数与单例对象\"><a href=\"#2-1-1-构造函数与单例对象\" class=\"headerlink\" title=\"2.1.1 构造函数与单例对象\"></a>2.1.1 构造函数与单例对象</h4><p>在构造函数中，需要传入当前 Tracer 的 traceType，SpringMvcTracer 的 traceType 为 “springmvc”。这里也可以看到，tracer 实例是一个单例对象，对于其他插件也是一样的。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">volatile</span> <span class=\"keyword\">static</span> <span class=\"type\">SpringMvcTracer</span> <span class=\"variable\">springMvcTracer</span> <span class=\"operator\">=</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\"><span class=\"comment\">/***</span></span><br><span class=\"line\"><span class=\"comment\"> * Spring MVC Tracer Singleton</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> singleton</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> SpringMvcTracer <span class=\"title function_\">getSpringMvcTracerSingleton</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (springMvcTracer == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">synchronized</span> (SpringMvcTracer.class) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (springMvcTracer == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">                springMvcTracer = <span class=\"keyword\">new</span> <span class=\"title class_\">SpringMvcTracer</span>();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> springMvcTracer;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"title function_\">SpringMvcTracer</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">super</span>(<span class=\"string\">&quot;springmvc&quot;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-1-2-AbstractServerTracer-抽象类\"><a href=\"#2-1-2-AbstractServerTracer-抽象类\" class=\"headerlink\" title=\"2.1.2 AbstractServerTracer 抽象类\"></a>2.1.2 AbstractServerTracer 抽象类</h4><p>在看 SpringMvcTracer 实现之前，先来看下 AbstractServerTracer。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">class</span> <span class=\"title class_\">AbstractServerTracer</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">AbstractTracer</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 构造函数，子类必须提供一个构造函数</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">AbstractServerTracer</span><span class=\"params\">(String tracerType)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">super</span>(tracerType, <span class=\"literal\">false</span>, <span class=\"literal\">true</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 因为是server端，所以Client先关的提供了默认实现，返回null</span></span><br><span class=\"line\">    <span class=\"keyword\">protected</span> String <span class=\"title function_\">getClientDigestReporterLogName</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">protected</span> String <span class=\"title function_\">getClientDigestReporterRollingKey</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">protected</span> String <span class=\"title function_\">getClientDigestReporterLogNameKey</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">protected</span> SpanEncoder&lt;SofaTracerSpan&gt; <span class=\"title function_\">getClientDigestEncoder</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">protected</span> AbstractSofaTracerStatisticReporter <span class=\"title function_\">generateClientStatReporter</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>结合上面  AbstractTracer 小节中抽象方法分析，这里在 AbstractServerTracer 中将 client 对应的抽象方法提供了默认实现，也就是说如果要继承 AbstractServerTracer 类，那么就必须实现 server 对应的所有抽象方法。</p>\n<h4 id=\"2-1-3-SpringMVCTracer-实现\"><a href=\"#2-1-3-SpringMVCTracer-实现\" class=\"headerlink\" title=\"2.1.3 SpringMVCTracer 实现\"></a>2.1.3 SpringMVCTracer 实现</h4><p>下面是 SpringMvcTracer 部分对 server 部分抽象方法的实现。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"keyword\">protected</span> String <span class=\"title function_\">getServerDigestReporterLogName</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> SpringMvcLogEnum.SPRING_MVC_DIGEST.getDefaultLogName();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"keyword\">protected</span> String <span class=\"title function_\">getServerDigestReporterRollingKey</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> SpringMvcLogEnum.SPRING_MVC_DIGEST.getRollingKey();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"keyword\">protected</span> String <span class=\"title function_\">getServerDigestReporterLogNameKey</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> SpringMvcLogEnum.SPRING_MVC_DIGEST.getLogNameKey();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"keyword\">protected</span> SpanEncoder&lt;SofaTracerSpan&gt; <span class=\"title function_\">getServerDigestEncoder</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (Boolean.TRUE.toString().equalsIgnoreCase(</span><br><span class=\"line\">        SofaTracerConfiguration.getProperty(SPRING_MVC_JSON_FORMAT_OUTPUT))) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">SpringMvcDigestJsonEncoder</span>();</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">SpringMvcDigestEncoder</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"keyword\">protected</span> AbstractSofaTracerStatisticReporter <span class=\"title function_\">generateServerStatReporter</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> generateSofaMvcStatReporter();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>目前 SOFATracer 日志名、滚动策略key等都是通过枚举类来定义的，也就是一个组件会对应这样一个枚举类，在枚举类里面定义这些常量。</p>\n<h3 id=\"2-2-SpringMvcLogEnum-类实现\"><a href=\"#2-2-SpringMvcLogEnum-类实现\" class=\"headerlink\" title=\"2.2 SpringMvcLogEnum 类实现\"></a>2.2 SpringMvcLogEnum 类实现</h3><p>SpringMVC 插件中的枚举类是 SpringMvcLogEnum。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">enum</span> <span class=\"title class_\">SpringMvcLogEnum</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 摘要日志相关</span></span><br><span class=\"line\">    SPRING_MVC_DIGEST(<span class=\"string\">&quot;spring_mvc_digest_log_name&quot;</span>, </span><br><span class=\"line\">                      <span class=\"string\">&quot;spring-mvc-digest.log&quot;</span>,</span><br><span class=\"line\">                      <span class=\"string\">&quot;spring_mvc_digest_rolling&quot;</span>), </span><br><span class=\"line\">    <span class=\"comment\">// 统计日志相关</span></span><br><span class=\"line\">    SPRING_MVC_STAT(<span class=\"string\">&quot;spring_mvc_stat_log_name&quot;</span>, </span><br><span class=\"line\">                    <span class=\"string\">&quot;spring-mvc-stat.log&quot;</span>, </span><br><span class=\"line\">                    <span class=\"string\">&quot;spring_mvc_stat_rolling&quot;</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 省略部分代码....</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>在 XXXLogEnum 枚举类中定义了当前组件对应的摘要日志和统计日志的日志名和滚动策略，因为 SOFATracer 目前还没有服务端的能力，链路数据不是直接上报给 server 的，因此 SOFATracer 提供了落到磁盘的能力。不同插件的链路日志也会通过 XXXLogEnum 指定的名称将链路日志输出到各个组件对应的日志目录下。</p>\n<h3 id=\"2-3-统计日志-Reportor-实现\"><a href=\"#2-3-统计日志-Reportor-实现\" class=\"headerlink\" title=\"2.3 统计日志 Reportor 实现\"></a>2.3 统计日志 Reportor 实现</h3><p>SOFATracer 中统计日志打印的实现需要各个组件自己来完成，具体就是需要实现一个AbstractSofaTracerStatisticReporter 的子类，然后实现 doReportStat 这个方法。当然对于目前的实现来说，我们也会重写 print 方法。</p>\n<h4 id=\"2-3-1-doReportStat\"><a href=\"#2-3-1-doReportStat\" class=\"headerlink\" title=\"2.3.1 doReportStat\"></a>2.3.1 doReportStat</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">doReportStat</span><span class=\"params\">(SofaTracerSpan sofaTracerSpan)</span> &#123;</span><br><span class=\"line\">    Map&lt;String, String&gt; tagsWithStr = sofaTracerSpan.getTagsWithStr();</span><br><span class=\"line\">    <span class=\"comment\">// 构建StatMapKey对象</span></span><br><span class=\"line\">    <span class=\"type\">StatMapKey</span> <span class=\"variable\">statKey</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">StatMapKey</span>();</span><br><span class=\"line\">    <span class=\"comment\">// 增加 key:当前应用名</span></span><br><span class=\"line\">    statKey.addKey(CommonSpanTags.LOCAL_APP, tagsWithStr.get(CommonSpanTags.LOCAL_APP));</span><br><span class=\"line\">    <span class=\"comment\">// 增加 key:请求 url</span></span><br><span class=\"line\">    statKey.addKey(CommonSpanTags.REQUEST_URL, tagsWithStr.get(CommonSpanTags.REQUEST_URL));</span><br><span class=\"line\">    <span class=\"comment\">// 增加 key:请求方法</span></span><br><span class=\"line\">    statKey.addKey(CommonSpanTags.METHOD, tagsWithStr.get(CommonSpanTags.METHOD));</span><br><span class=\"line\">    <span class=\"comment\">// 压测标志</span></span><br><span class=\"line\">    statKey.setLoadTest(TracerUtils.isLoadTest(sofaTracerSpan));</span><br><span class=\"line\">    <span class=\"comment\">// 请求响应码</span></span><br><span class=\"line\">    <span class=\"type\">String</span> <span class=\"variable\">resultCode</span> <span class=\"operator\">=</span> tagsWithStr.get(CommonSpanTags.RESULT_CODE);</span><br><span class=\"line\">    <span class=\"comment\">// 请求成功标识</span></span><br><span class=\"line\">    <span class=\"type\">boolean</span> <span class=\"variable\">success</span> <span class=\"operator\">=</span> (resultCode != <span class=\"literal\">null</span> &amp;&amp; resultCode.length() &gt; <span class=\"number\">0</span> &amp;&amp; <span class=\"built_in\">this</span></span><br><span class=\"line\">        .isHttpOrMvcSuccess(resultCode));</span><br><span class=\"line\">    statKey.setResult(success ? <span class=\"string\">&quot;true&quot;</span> : <span class=\"string\">&quot;false&quot;</span>);</span><br><span class=\"line\">    <span class=\"comment\">//end</span></span><br><span class=\"line\">    statKey.setEnd(TracerUtils.getLoadTestMark(sofaTracerSpan));</span><br><span class=\"line\">    <span class=\"comment\">//value the count and duration</span></span><br><span class=\"line\">    <span class=\"type\">long</span> <span class=\"variable\">duration</span> <span class=\"operator\">=</span> sofaTracerSpan.getEndTime() - sofaTracerSpan.getStartTime();</span><br><span class=\"line\">    <span class=\"type\">long</span> values[] = <span class=\"keyword\">new</span> <span class=\"title class_\">long</span>[] &#123; <span class=\"number\">1</span>, duration &#125;;</span><br><span class=\"line\">    <span class=\"comment\">// reserve</span></span><br><span class=\"line\">    <span class=\"built_in\">this</span>.addStat(statKey, values);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p> 这里就是就是将统计日志添加到日志槽里，等待被消费(输出到日志)。具体可以参考：SofaTracerStatisticReporterManager.StatReporterPrinter。</p>\n<h4 id=\"2-3-2-print\"><a href=\"#2-3-2-print\" class=\"headerlink\" title=\"2.3.2 print\"></a>2.3.2 print</h4><p>print 方法是实际将数据写入到磁盘的方法。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">print</span><span class=\"params\">(StatKey statKey, <span class=\"type\">long</span>[] values)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"built_in\">this</span>.isClosePrint.get()) &#123;</span><br><span class=\"line\">        <span class=\"comment\">//关闭统计日志输出</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!(statKey <span class=\"keyword\">instanceof</span> StatMapKey)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"type\">StatMapKey</span> <span class=\"variable\">statMapKey</span> <span class=\"operator\">=</span> (StatMapKey) statKey;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 构建需要打印的数据串</span></span><br><span class=\"line\">        jsonBuffer.reset();</span><br><span class=\"line\">        jsonBuffer.appendBegin();</span><br><span class=\"line\">        jsonBuffer.append(<span class=\"string\">&quot;time&quot;</span>, Timestamp.currentTime());</span><br><span class=\"line\">        jsonBuffer.append(<span class=\"string\">&quot;stat.key&quot;</span>, <span class=\"built_in\">this</span>.statKeySplit(statMapKey));</span><br><span class=\"line\">        jsonBuffer.append(<span class=\"string\">&quot;count&quot;</span>, values[<span class=\"number\">0</span>]);</span><br><span class=\"line\">        jsonBuffer.append(<span class=\"string\">&quot;total.cost.milliseconds&quot;</span>, values[<span class=\"number\">1</span>]);</span><br><span class=\"line\">        jsonBuffer.append(<span class=\"string\">&quot;success&quot;</span>, statMapKey.getResult());</span><br><span class=\"line\">        <span class=\"comment\">//压测</span></span><br><span class=\"line\">        jsonBuffer.appendEnd(<span class=\"string\">&quot;load.test&quot;</span>, statMapKey.getEnd());</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (appender <span class=\"keyword\">instanceof</span> LoadTestAwareAppender) &#123;</span><br><span class=\"line\">            ((LoadTestAwareAppender) appender).append(jsonBuffer.toString(),</span><br><span class=\"line\">                statMapKey.isLoadTest());</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            appender.append(jsonBuffer.toString());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 这里强制刷一次</span></span><br><span class=\"line\">        appender.flush();</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (Throwable t) &#123;</span><br><span class=\"line\">        SelfLog.error(<span class=\"string\">&quot;统计日志&lt;&quot;</span> + statTracerName + <span class=\"string\">&quot;&gt;输出异常&quot;</span>, t);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>print 这个方法里面就是将 statMapKey 中，也就是 doReportStat 中塞进来的数据转换成  json 格式，然后刷到磁盘。需要注意的是这里是强制 flush 了一次。如果没有重写 print 这个方法的话，则是在SofaTracerStatisticReporterManager.StatReporterPrinter 里面调用 print 方法刷到磁盘。</p>\n<h3 id=\"2-4-数据传播格式实现\"><a href=\"#2-4-数据传播格式实现\" class=\"headerlink\" title=\"2.4 数据传播格式实现\"></a>2.4 数据传播格式实现</h3><p>SOFATracer 支持使用 OpenTracing 的内建格式进行上下文传播。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">SpringMvcHeadersCarrier</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">TextMap</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> HashMap&lt;String, String&gt; headers;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">SpringMvcHeadersCarrier</span><span class=\"params\">(HashMap&lt;String, String&gt; headers)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.headers = headers;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">put</span><span class=\"params\">(String key, String value)</span> &#123;</span><br><span class=\"line\">        headers.put(key, value);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Iterator&lt;Map.Entry&lt;String, String&gt;&gt; iterator() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> headers.entrySet().iterator();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-5-自定义编码格式实现\"><a href=\"#2-5-自定义编码格式实现\" class=\"headerlink\" title=\"2.5 自定义编码格式实现\"></a>2.5 自定义编码格式实现</h3><p>这个决定了摘要日志打印的格式，和在统计日志里面的实现要有所区分。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">SpringMvcDigestJsonEncoder</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">AbstractDigestSpanEncoder</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 重写encode,对span进行编码处理</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">encode</span><span class=\"params\">(SofaTracerSpan span)</span> <span class=\"keyword\">throws</span> IOException &#123;</span><br><span class=\"line\">        <span class=\"type\">JsonStringBuilder</span> <span class=\"variable\">jsonStringBuilder</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">JsonStringBuilder</span>();</span><br><span class=\"line\">        <span class=\"comment\">//日志打印时间</span></span><br><span class=\"line\">        jsonStringBuilder.appendBegin(<span class=\"string\">&quot;time&quot;</span>, Timestamp.format(span.getEndTime()));</span><br><span class=\"line\">        appendSlot(jsonStringBuilder, span);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> jsonStringBuilder.toString();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 具体字段处理</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title function_\">appendSlot</span><span class=\"params\">(JsonStringBuilder jsonStringBuilder, SofaTracerSpan sofaTracerSpan)</span> &#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">        <span class=\"type\">SofaTracerSpanContext</span> <span class=\"variable\">context</span> <span class=\"operator\">=</span> sofaTracerSpan.getSofaTracerSpanContext();</span><br><span class=\"line\">        Map&lt;String, String&gt; tagWithStr = sofaTracerSpan.getTagsWithStr();</span><br><span class=\"line\">        Map&lt;String, Number&gt; tagWithNumber = sofaTracerSpan.getTagsWithNumber();</span><br><span class=\"line\">        <span class=\"comment\">//当前应用名</span></span><br><span class=\"line\">        jsonStringBuilder</span><br><span class=\"line\">            .append(CommonSpanTags.LOCAL_APP, tagWithStr.get(CommonSpanTags.LOCAL_APP));</span><br><span class=\"line\">        <span class=\"comment\">//TraceId</span></span><br><span class=\"line\">        jsonStringBuilder.append(<span class=\"string\">&quot;traceId&quot;</span>, context.getTraceId());</span><br><span class=\"line\">        <span class=\"comment\">//RpcId</span></span><br><span class=\"line\">        jsonStringBuilder.append(<span class=\"string\">&quot;spanId&quot;</span>, context.getSpanId());</span><br><span class=\"line\">        <span class=\"comment\">//请求 URL</span></span><br><span class=\"line\">        jsonStringBuilder.append(CommonSpanTags.REQUEST_URL,</span><br><span class=\"line\">            tagWithStr.get(CommonSpanTags.REQUEST_URL));</span><br><span class=\"line\">        <span class=\"comment\">//请求方法</span></span><br><span class=\"line\">        jsonStringBuilder.append(CommonSpanTags.METHOD, tagWithStr.get(CommonSpanTags.METHOD));</span><br><span class=\"line\">        <span class=\"comment\">//Http 状态码</span></span><br><span class=\"line\">        jsonStringBuilder.append(CommonSpanTags.RESULT_CODE,</span><br><span class=\"line\">            tagWithStr.get(CommonSpanTags.RESULT_CODE));</span><br><span class=\"line\">        <span class=\"type\">Number</span> <span class=\"variable\">requestSize</span> <span class=\"operator\">=</span> tagWithNumber.get(CommonSpanTags.REQ_SIZE);</span><br><span class=\"line\">        <span class=\"comment\">//Request Body 大小 单位为byte</span></span><br><span class=\"line\">        jsonStringBuilder.append(CommonSpanTags.REQ_SIZE,</span><br><span class=\"line\">            (requestSize == <span class=\"literal\">null</span> ? <span class=\"number\">0L</span> : requestSize.longValue()));</span><br><span class=\"line\">        <span class=\"type\">Number</span> <span class=\"variable\">responseSize</span> <span class=\"operator\">=</span> tagWithNumber.get(CommonSpanTags.RESP_SIZE);</span><br><span class=\"line\">        <span class=\"comment\">//Response Body 大小，单位为byte</span></span><br><span class=\"line\">        jsonStringBuilder.append(CommonSpanTags.RESP_SIZE, (responseSize == <span class=\"literal\">null</span> ? <span class=\"number\">0L</span></span><br><span class=\"line\">            : responseSize.longValue()));</span><br><span class=\"line\">        <span class=\"comment\">//请求耗时（MS）</span></span><br><span class=\"line\">        jsonStringBuilder.append(<span class=\"string\">&quot;time.cost.milliseconds&quot;</span>,</span><br><span class=\"line\">            (sofaTracerSpan.getEndTime() - sofaTracerSpan.getStartTime()));</span><br><span class=\"line\">        jsonStringBuilder.append(CommonSpanTags.CURRENT_THREAD_NAME,</span><br><span class=\"line\">            tagWithStr.get(CommonSpanTags.CURRENT_THREAD_NAME));</span><br><span class=\"line\">        <span class=\"comment\">//穿透数据放在最后</span></span><br><span class=\"line\">        jsonStringBuilder.appendEnd(<span class=\"string\">&quot;baggage&quot;</span>, baggageSerialized(context));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>从这里其实也可以看出，统计日志和摘要日志的不同点。统计日志里面核心的数据是 span 里面的 tags 数据，但是其主要作用是统计当前组件的次数。摘要日志里面除了 tags 里面的数据之外还会包括例如 traceId 和 spanId 等信息。</p>\n<ul>\n<li>统计日志</li>\n</ul>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span><span class=\"attr\">&quot;time&quot;</span><span class=\"punctuation\">:</span><span class=\"string\">&quot;2018-11-28 14:42:25.127&quot;</span><span class=\"punctuation\">,</span><span class=\"attr\">&quot;stat.key&quot;</span><span class=\"punctuation\">:</span><span class=\"punctuation\">&#123;</span><span class=\"attr\">&quot;method&quot;</span><span class=\"punctuation\">:</span><span class=\"string\">&quot;GET&quot;</span><span class=\"punctuation\">,</span><span class=\"attr\">&quot;local.app&quot;</span><span class=\"punctuation\">:</span><span class=\"string\">&quot;SOFATracerSpringMVC&quot;</span><span class=\"punctuation\">,</span><span class=\"attr\">&quot;request.url&quot;</span><span class=\"punctuation\">:</span><span class=\"string\">&quot;http://localhost:8080/springmvc&quot;</span><span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span><span class=\"attr\">&quot;count&quot;</span><span class=\"punctuation\">:</span><span class=\"number\">3</span><span class=\"punctuation\">,</span><span class=\"attr\">&quot;total.cost.milliseconds&quot;</span><span class=\"punctuation\">:</span><span class=\"number\">86</span><span class=\"punctuation\">,</span><span class=\"attr\">&quot;success&quot;</span><span class=\"punctuation\">:</span><span class=\"string\">&quot;true&quot;</span><span class=\"punctuation\">,</span><span class=\"attr\">&quot;load.test&quot;</span><span class=\"punctuation\">:</span><span class=\"string\">&quot;F&quot;</span><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>摘要日志</li>\n</ul>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span><span class=\"attr\">&quot;time&quot;</span><span class=\"punctuation\">:</span><span class=\"string\">&quot;2018-11-28 14:46:08.216&quot;</span><span class=\"punctuation\">,</span><span class=\"attr\">&quot;local.app&quot;</span><span class=\"punctuation\">:</span><span class=\"string\">&quot;SOFATracerSpringMVC&quot;</span><span class=\"punctuation\">,</span><span class=\"attr\">&quot;traceId&quot;</span><span class=\"punctuation\">:</span><span class=\"string\">&quot;0a0fe91b1543387568214100259231&quot;</span><span class=\"punctuation\">,</span><span class=\"attr\">&quot;spanId&quot;</span><span class=\"punctuation\">:</span><span class=\"string\">&quot;0.1&quot;</span><span class=\"punctuation\">,</span><span class=\"attr\">&quot;request.url&quot;</span><span class=\"punctuation\">:</span><span class=\"string\">&quot;http://localhost:8080/springmvc&quot;</span><span class=\"punctuation\">,</span><span class=\"attr\">&quot;method&quot;</span><span class=\"punctuation\">:</span><span class=\"string\">&quot;GET&quot;</span><span class=\"punctuation\">,</span><span class=\"attr\">&quot;result.code&quot;</span><span class=\"punctuation\">:</span><span class=\"string\">&quot;200&quot;</span><span class=\"punctuation\">,</span><span class=\"attr\">&quot;req.size.bytes&quot;</span><span class=\"punctuation\">:</span><span class=\"number\">-1</span><span class=\"punctuation\">,</span><span class=\"attr\">&quot;resp.size.bytes&quot;</span><span class=\"punctuation\">:</span><span class=\"number\">0</span><span class=\"punctuation\">,</span><span class=\"attr\">&quot;time.cost.milliseconds&quot;</span><span class=\"punctuation\">:</span><span class=\"number\">2</span><span class=\"punctuation\">,</span><span class=\"attr\">&quot;current.thread.name&quot;</span><span class=\"punctuation\">:</span><span class=\"string\">&quot;http-nio-8080-exec-2&quot;</span><span class=\"punctuation\">,</span><span class=\"attr\">&quot;baggage&quot;</span><span class=\"punctuation\">:</span><span class=\"string\">&quot;&quot;</span><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"2-6-请求拦截埋点\"><a href=\"#2-6-请求拦截埋点\" class=\"headerlink\" title=\"2.6 请求拦截埋点\"></a>2.6 请求拦截埋点</h3><p>对于基于标准 servlet 实现的组件，要实现对请求的拦截过滤，通常就是 Filter 了。sofa-tracer-springmvc-plugin 插件埋点的实现就是基于 Filter 机制完成的。</p>\n<p>SpringMvcSofaTracerFilter 实现了 javax.servlet.Filter 接口，因此遵循标准的 servlet 规范的容器也可以通过此插件进行埋点。参考文档：<a href=\"https://github.com/alipay/sofa-tracer/tree/master/tracer-samples/tracer-sample-with-springmvc\">对于标准 servlet 容器的支持（ tomcat&#x2F;jetty 等）</a>。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">SpringMvcSofaTracerFilter</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">Filter</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-6-1-基本埋点思路\"><a href=\"#2-6-1-基本埋点思路\" class=\"headerlink\" title=\"2.6.1 基本埋点思路\"></a>2.6.1 基本埋点思路</h4><p>对于一个组件来说，一次处理过程一般是产生一个 span。这个span的生命周期是从接收到请求到返回响应这段过程。</p>\n<p>但是这里需要考虑的问题是如何与上下游链路关联起来呢？在 Opentracing 规范中，可以在 Tracer 中 extract 出一个跨进程传递的 SpanContext 。然后通过这个 SpanContext 所携带的信息将当前节点关联到整个 tracer 链路中去。当然有提取(extract)就会有对应的注入(inject)。</p>\n<p>链路的构建一般是 client-server-client-server 这种模式的，那这里就很清楚了，就是会在 client 端进行注入(inject)，然后再 server 端进行提取(extract)，反复进行，然后一直传递下去。</p>\n<p> 在拿到 SpanContext 之后，此时当前的 span 就可以关联到这条链路中了，那么剩余的事情就是收集当前组件的一些数据。</p>\n<p>整个过程大概分为以下几个阶段：</p>\n<ul>\n<li>从请求中提取 spanContext</li>\n<li>构建 span，并将当前 span 存入当前 tracer上下文中（SofaTraceContext.push(span)） 。</li>\n<li>设置一些信息到span中</li>\n<li>返回响应</li>\n<li>span结束&amp;上报</li>\n</ul>\n<p>下面逐一分析下这几个过程。</p>\n<h4 id=\"2-6-2-从请求中提取-spanContext\"><a href=\"#2-6-2-从请求中提取-spanContext\" class=\"headerlink\" title=\"2.6.2 从请求中提取 spanContext\"></a>2.6.2 从请求中提取 spanContext</h4><p>这里的提取用到了上面我们提到的#数据传播格式实现#SpringMvcHeadersCarrier 这个类。上面分析到，因为mvc 做作为 server 端存在的，所以在 server 端就是从请求中 extract 出 SpanContext。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> SofaTracerSpanContext <span class=\"title function_\">getSpanContextFromRequest</span><span class=\"params\">(HttpServletRequest request)</span> &#123;</span><br><span class=\"line\">    HashMap&lt;String, String&gt; headers = <span class=\"keyword\">new</span> <span class=\"title class_\">HashMap</span>&lt;String, String&gt;();</span><br><span class=\"line\">    <span class=\"comment\">// 获取请求头信息 </span></span><br><span class=\"line\">    <span class=\"type\">Enumeration</span> <span class=\"variable\">headerNames</span> <span class=\"operator\">=</span> request.getHeaderNames();</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (headerNames.hasMoreElements()) &#123;</span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">key</span> <span class=\"operator\">=</span> (String) headerNames.nextElement();</span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">value</span> <span class=\"operator\">=</span> request.getHeader(key);</span><br><span class=\"line\">        headers.put(key, value);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 拿到 SofaTracer 实例对象</span></span><br><span class=\"line\">    <span class=\"type\">SofaTracer</span> <span class=\"variable\">tracer</span> <span class=\"operator\">=</span> springMvcTracer.getSofaTracer();</span><br><span class=\"line\">    <span class=\"comment\">// 解析出 SofaTracerSpanContext（SpanContext的实现类）</span></span><br><span class=\"line\">    <span class=\"type\">SofaTracerSpanContext</span> <span class=\"variable\">spanContext</span> <span class=\"operator\">=</span> (SofaTracerSpanContext) tracer.extract(</span><br><span class=\"line\">        ExtendFormat.Builtin.B3_HTTP_HEADERS, <span class=\"keyword\">new</span> <span class=\"title class_\">SpringMvcHeadersCarrier</span>(headers));</span><br><span class=\"line\">    spanContext.setSpanId(spanContext.nextChildContextId());</span><br><span class=\"line\">    <span class=\"keyword\">return</span> spanContext;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-6-3-获取-span-数据获取\"><a href=\"#2-6-3-获取-span-数据获取\" class=\"headerlink\" title=\"2.6.3 获取 span &amp; 数据获取\"></a>2.6.3 获取 span &amp; 数据获取</h4><p>serverReceive 这个方法是在 AbstractTracer 类中提供了实现，子类不需要关注这个。在 SOFATracer 中将请求大致分为以下几个过程：</p>\n<ul>\n<li>客户端发送请求  clientSend      cs</li>\n<li>服务端接受请求  serverReceive sr</li>\n<li>服务端返回结果  serverSend     ss</li>\n<li>客户端接受结果  clientReceive  cr</li>\n</ul>\n<p>无论是哪个插件，在请求处理周期内都可以从上述几个阶段中找到对应的处理方法。因此，SOFATracer 对这几个阶段处理进行了封装。这四个阶段实际上会产生两个 span，第一个 span 的起点是 cs，到 cr 结束；第二个 span是从 sr 开始，到 ss 结束。也就是说当执行 clientSend 和 serverReceive 时会返回一个 span 对象。来看下MVC中的实现：</p>\n<p><img src=\"https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2018/12/7/1678915739271fc9~tplv-t2oaga2asx-image.image\" alt=\"img\"></p>\n<p>红色框内对应的服务端接受请求，也就是 sr 阶段，产生了一个 span 。红色框下面的这段代码是为当前这个 span 设置一些基本的信息，包括当前应用的应用名、当前请求的url、当前请求的请求方法以及请求大小。</p>\n<h4 id=\"2-6-4-返回响应与结束-span\"><a href=\"#2-6-4-返回响应与结束-span\" class=\"headerlink\" title=\"2.6.4 返回响应与结束 span\"></a>2.6.4 返回响应与结束 span</h4><p>在 filter 链执行结束之后，在 finally 块中又补充了当前请求响应结果的一些信息到 span 中去。然后调用serverSend 结束当前 span。这里关于 serverSend 里面的逻辑就不展开说了，不过能够想到的是这里肯定是调用span.finish 这个方法( opentracing 规范中，span.finish 的执行标志着一个 span 的结束)，当前也会包括对于数据上报的一些逻辑处理等。</p>\n<p><img src=\"https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2018/12/7/167891573b151faf~tplv-t2oaga2asx-image.image\" alt=\"img\"></p>\n<h2 id=\"3-思路总结与插件编写流程\"><a href=\"#3-思路总结与插件编写流程\" class=\"headerlink\" title=\"3 思路总结与插件编写流程\"></a>3 思路总结与插件编写流程</h2><p>在第2节中以 SpringMVC 插件为例，分析了下  SOFATracer 插件埋点实现的一些细节。那么本节则从整体思路上来总结下如何编写一个 SOFATracer 的插件。</p>\n<ul>\n<li>1、确定所要实现的插件，然后确定以哪种方式来埋点</li>\n<li>2、实现当前插件的 Tracer 实例，这里需要明确当前插件是以 client 存在还是以 server 存在。</li>\n<li>3、实现一个枚举类，用来描述当前组件的日志名称和滚动策略 key 值等</li>\n<li>4、实现插件摘要日志的 encoder ，实现当前组件的定制化输出</li>\n<li>5、实现插件的统计日志 Reporter 实现类，通过继承 AbstractSofaTracerStatisticReporter 类并重写doReportStat。</li>\n<li>6、定义当前插件的传播格式</li>\n</ul>\n<p> 当然最重要的还是对于要实现插件的理解，要明确我们需要收集哪些数据。</p>\n<h2 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h2><p>本文先介绍了SOFATracer的埋点方式与标准OT-api 埋点方式的区别，然后对 SOFATracer 中 SpringMVC 插件的埋点实现进行了分析。希望通过本文能够让更多的同学理解埋点实现这样一个过程以及需要关注的一些点。如果有兴趣或者有什么实际的需求，欢迎来讨论。</p>\n","text":" SOFATracer 是一个用于分布式系统调用跟踪的组件，通过统一的 traceId 将调用链路中的各种网络调用情况以日志的方式记录下来，以达到透视化网络调用...","permalink":"/post/sofa/sofa-tracer-mvc-plugin","photos":[],"count_time":{"symbolsCount":"17k","symbolsTime":"15 mins."},"categories":[{"name":"SOFA","slug":"SOFA","count":9,"path":"api/categories/SOFA.json"}],"tags":[{"name":"分布式链路跟踪","slug":"分布式链路跟踪","count":4,"path":"api/tags/分布式链路跟踪.json"},{"name":"Tracer","slug":"Tracer","count":4,"path":"api/tags/Tracer.json"},{"name":"spring mvc","slug":"spring-mvc","count":1,"path":"api/tags/spring-mvc.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#1-SOFATracer-%E6%8F%92%E4%BB%B6%E5%9F%8B%E7%82%B9%E6%9C%BA%E5%88%B6\"><span class=\"toc-text\">1 SOFATracer 插件埋点机制</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-1-Filter-or-Interceptor\"><span class=\"toc-text\">1.1 Filter or Interceptor</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-2-AbstractTracer-API\"><span class=\"toc-text\">1.2 AbstractTracer API</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-3-AbstractTracer\"><span class=\"toc-text\">1.3 AbstractTracer</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#2-SpringMVC-%E6%8F%92%E4%BB%B6%E5%9F%8B%E7%82%B9%E5%88%86%E6%9E%90\"><span class=\"toc-text\">2 SpringMVC 插件埋点分析</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-1-%E5%AE%9E%E7%8E%B0-Tracer-%E5%AE%9E%E4%BE%8B\"><span class=\"toc-text\">2.1 实现 Tracer 实例</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#2-1-1-%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0%E4%B8%8E%E5%8D%95%E4%BE%8B%E5%AF%B9%E8%B1%A1\"><span class=\"toc-text\">2.1.1 构造函数与单例对象</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#2-1-2-AbstractServerTracer-%E6%8A%BD%E8%B1%A1%E7%B1%BB\"><span class=\"toc-text\">2.1.2 AbstractServerTracer 抽象类</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#2-1-3-SpringMVCTracer-%E5%AE%9E%E7%8E%B0\"><span class=\"toc-text\">2.1.3 SpringMVCTracer 实现</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-2-SpringMvcLogEnum-%E7%B1%BB%E5%AE%9E%E7%8E%B0\"><span class=\"toc-text\">2.2 SpringMvcLogEnum 类实现</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-3-%E7%BB%9F%E8%AE%A1%E6%97%A5%E5%BF%97-Reportor-%E5%AE%9E%E7%8E%B0\"><span class=\"toc-text\">2.3 统计日志 Reportor 实现</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#2-3-1-doReportStat\"><span class=\"toc-text\">2.3.1 doReportStat</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#2-3-2-print\"><span class=\"toc-text\">2.3.2 print</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-4-%E6%95%B0%E6%8D%AE%E4%BC%A0%E6%92%AD%E6%A0%BC%E5%BC%8F%E5%AE%9E%E7%8E%B0\"><span class=\"toc-text\">2.4 数据传播格式实现</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-5-%E8%87%AA%E5%AE%9A%E4%B9%89%E7%BC%96%E7%A0%81%E6%A0%BC%E5%BC%8F%E5%AE%9E%E7%8E%B0\"><span class=\"toc-text\">2.5 自定义编码格式实现</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-6-%E8%AF%B7%E6%B1%82%E6%8B%A6%E6%88%AA%E5%9F%8B%E7%82%B9\"><span class=\"toc-text\">2.6 请求拦截埋点</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#2-6-1-%E5%9F%BA%E6%9C%AC%E5%9F%8B%E7%82%B9%E6%80%9D%E8%B7%AF\"><span class=\"toc-text\">2.6.1 基本埋点思路</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#2-6-2-%E4%BB%8E%E8%AF%B7%E6%B1%82%E4%B8%AD%E6%8F%90%E5%8F%96-spanContext\"><span class=\"toc-text\">2.6.2 从请求中提取 spanContext</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#2-6-3-%E8%8E%B7%E5%8F%96-span-%E6%95%B0%E6%8D%AE%E8%8E%B7%E5%8F%96\"><span class=\"toc-text\">2.6.3 获取 span &amp; 数据获取</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#2-6-4-%E8%BF%94%E5%9B%9E%E5%93%8D%E5%BA%94%E4%B8%8E%E7%BB%93%E6%9D%9F-span\"><span class=\"toc-text\">2.6.4 返回响应与结束 span</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#3-%E6%80%9D%E8%B7%AF%E6%80%BB%E7%BB%93%E4%B8%8E%E6%8F%92%E4%BB%B6%E7%BC%96%E5%86%99%E6%B5%81%E7%A8%8B\"><span class=\"toc-text\">3 思路总结与插件编写流程</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%B0%8F%E7%BB%93\"><span class=\"toc-text\">小结</span></a></li></ol>","author":{"name":"glmapper","slug":"blog-author","avatar":"https://glmapper-blog.oss-cn-hangzhou.aliyuncs.com/common/favicon.ico","link":"/","description":"开放，开源，分享，共享","socials":{"github":"https://github.com/glmapper","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/2412872703","zhihu":"","csdn":"","juejin":"https://juejin.cn/user/3227821827961806","customs":{"sofastack":{"icon":"https://glmapper-blog.oss-cn-hangzhou.aliyuncs.com/common/sofastack.svg","link":"https://www.sofastack.tech/"}}}},"mapped":true,"hidden":false,"prev_post":{"title":"SpringSession系列-sessionId解析和Cookie读写策略","uid":"a69e5cb15ae185e57bcc31169f7e2e99","slug":"spring/spring-session-id-resolver","date":"2018-12-10T01:13:31.000Z","updated":"2024-07-05T04:09:05.818Z","comments":true,"path":"api/articles/spring/spring-session-id-resolver.json","keywords":"宋国磊, glmapper, 卫恒, 分享, 开源","cover":[],"text":" 原文：https://blog.csdn.net/sinat_25518349/article/details/85042029 首先需求在这里说明下，Spr...","permalink":"/post/spring/spring-session-id-resolver","photos":[],"count_time":{"symbolsCount":"8.1k","symbolsTime":"7 mins."},"categories":[{"name":"spring","slug":"spring","count":15,"path":"api/categories/spring.json"}],"tags":[{"name":"session","slug":"session","count":6,"path":"api/tags/session.json"},{"name":"分布式","slug":"分布式","count":6,"path":"api/tags/分布式.json"},{"name":"redis","slug":"redis","count":5,"path":"api/tags/redis.json"}],"author":{"name":"glmapper","slug":"blog-author","avatar":"https://glmapper-blog.oss-cn-hangzhou.aliyuncs.com/common/favicon.ico","link":"/","description":"开放，开源，分享，共享","socials":{"github":"https://github.com/glmapper","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/2412872703","zhihu":"","csdn":"","juejin":"https://juejin.cn/user/3227821827961806","customs":{"sofastack":{"icon":"https://glmapper-blog.oss-cn-hangzhou.aliyuncs.com/common/sofastack.svg","link":"https://www.sofastack.tech/"}}}}},"next_post":{"title":"SOFABoot 健康检查能力分析","uid":"1e1a697103974a7aac0ac3d3d33e9f33","slug":"sofa/sofa-boot-health-analizy","date":"2018-11-16T11:14:43.000Z","updated":"2024-07-05T04:09:05.801Z","comments":true,"path":"api/articles/sofa/sofa-boot-health-analizy.json","keywords":"宋国磊, glmapper, 卫恒, 分享, 开源","cover":[],"text":"Liveness Check & Readiness CheckSpring Boot 提供了一个基础的健康检查的能力，中间件和应用都可以扩展来实现自己的健康检...","permalink":"/post/sofa/sofa-boot-health-analizy","photos":[],"count_time":{"symbolsCount":"21k","symbolsTime":"19 mins."},"categories":[{"name":"SOFA","slug":"SOFA","count":9,"path":"api/categories/SOFA.json"}],"tags":[{"name":"框架","slug":"框架","count":1,"path":"api/tags/框架.json"},{"name":"Readiness Check","slug":"Readiness-Check","count":1,"path":"api/tags/Readiness-Check.json"}],"author":{"name":"glmapper","slug":"blog-author","avatar":"https://glmapper-blog.oss-cn-hangzhou.aliyuncs.com/common/favicon.ico","link":"/","description":"开放，开源，分享，共享","socials":{"github":"https://github.com/glmapper","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/2412872703","zhihu":"","csdn":"","juejin":"https://juejin.cn/user/3227821827961806","customs":{"sofastack":{"icon":"https://glmapper-blog.oss-cn-hangzhou.aliyuncs.com/common/sofastack.svg","link":"https://www.sofastack.tech/"}}}}}}