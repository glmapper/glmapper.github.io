{"title":"log4j2 日志 PatternLayout 配置对 SOFAArk PluginClassLoader 的影响","uid":"d159ca8c012acf521f858fbe565b5e98","slug":"sofa/sofa-ark-plugin-classloader-log4j","date":"2021-11-01T03:10:19.000Z","updated":"2024-07-05T04:09:05.800Z","comments":true,"path":"api/articles/sofa/sofa-ark-plugin-classloader-log4j.json","keywords":null,"cover":[],"content":"<p>log4j2 相关类在 sofaark 插件中是导出的，因此当出现 log4j2 的类需要被加载时，会委托给 PluginClassLoader 进行加载。</p>\n<span id=\"more\"></span>\n\n<h2 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;Log4j2-TF-7-AsyncLoggerConfig-8&quot; Id=52 BLOCKED on sun.misc.URLClassPath@26eb1b56 owned by &quot;Log4j2-TF-7-AsyncLoggerConfig-4&quot; Id=17</span><br><span class=\"line\">    at sun.misc.URLClassPath.getNextLoader(URLClassPath.java:479)</span><br><span class=\"line\">    -  blocked on sun.misc.URLClassPath@26eb1b56</span><br><span class=\"line\">    at sun.misc.URLClassPath.getResource(URLClassPath.java:248)</span><br><span class=\"line\">    at java.net.URLClassLoader$1.run(URLClassLoader.java:366)</span><br><span class=\"line\">    at java.net.URLClassLoader$1.run(URLClassLoader.java:363)</span><br><span class=\"line\">    at java.security.AccessController.doPrivileged(Native Method)</span><br><span class=\"line\">    at java.net.URLClassLoader.findClass(URLClassLoader.java:362)</span><br><span class=\"line\">    at java.lang.ClassLoader.loadClass(ClassLoader.java:448)</span><br><span class=\"line\">    at com.alipay.sofa.ark.container.service.classloader.AbstractClasspathClassLoader.resolveLocalClass(AbstractClasspathClassLoader.java:302)</span><br><span class=\"line\">    at com.alipay.sofa.ark.container.service.classloader.PluginClassLoader.loadClassInternal(PluginClassLoader.java:102)</span><br><span class=\"line\">\t  // 插件加载  </span><br><span class=\"line\">\t\tat com.alipay.sofa.ark.container.service.classloader.AbstractClasspathClassLoader.loadClass(AbstractClasspathClassLoader.java:71)</span><br><span class=\"line\">    at java.lang.ClassLoader.loadClass(ClassLoader.java:380)</span><br><span class=\"line\">    at org.apache.logging.log4j.core.impl.ThrowableProxy.loadClass(ThrowableProxy.java:563)</span><br><span class=\"line\">    at org.apache.logging.log4j.core.impl.ThrowableProxy.toExtendedStackTrace(ThrowableProxy.java:689)</span><br><span class=\"line\">    at org.apache.logging.log4j.core.impl.ThrowableProxy.&lt;init&gt;(ThrowableProxy.java:138)</span><br><span class=\"line\">    at org.apache.logging.log4j.core.impl.ThrowableProxy.&lt;init&gt;(ThrowableProxy.java:122)</span><br><span class=\"line\">    at org.apache.logging.log4j.core.impl.Log4jLogEvent.getThrownProxy(Log4jLogEvent.java:564)</span><br><span class=\"line\">    at org.apache.logging.log4j.core.pattern.ExtendedThrowablePatternConverter.format(ExtendedThrowablePatternConverter.java:63)</span><br><span class=\"line\">    at org.apache.logging.log4j.core.pattern.PatternFormatter.format(PatternFormatter.java:38)</span><br><span class=\"line\">    at org.apache.logging.log4j.core.layout.PatternLayout$PatternSerializer.toSerializable(PatternLayout.java:333)</span><br><span class=\"line\">    at org.apache.logging.log4j.core.layout.PatternLayout.toText(PatternLayout.java:232)</span><br><span class=\"line\">    at org.apache.logging.log4j.core.layout.PatternLayout.encode(PatternLayout.java:217)</span><br><span class=\"line\">    at org.apache.logging.log4j.core.layout.PatternLayout.encode(PatternLayout.java:57)</span><br><span class=\"line\">    at org.apache.logging.log4j.core.appender.AbstractOutputStreamAppender.directEncodeEvent(AbstractOutputStreamAppender.java:177)</span><br><span class=\"line\">    at org.apache.logging.log4j.core.appender.AbstractOutputStreamAppender.tryAppend(AbstractOutputStreamAppender.java:170)</span><br><span class=\"line\">    at org.apache.logging.log4j.core.appender.AbstractOutputStreamAppender.append(AbstractOutputStreamAppender.java:161)</span><br><span class=\"line\">    at org.apache.logging.log4j.core.appender.RollingFileAppender.append(RollingFileAppender.java:268)</span><br><span class=\"line\">    at org.apache.logging.log4j.core.config.AppenderControl.tryCallAppender(AppenderControl.java:156)</span><br><span class=\"line\">    at org.apache.logging.log4j.core.config.AppenderControl.callAppender0(AppenderControl.java:129)</span><br><span class=\"line\">    at org.apache.logging.log4j.core.config.AppenderControl.callAppenderPreventRecursion(AppenderControl.java:120)</span><br><span class=\"line\">    at org.apache.logging.log4j.core.config.AppenderControl.callAppender(AppenderControl.java:84)</span><br><span class=\"line\">    at org.apache.logging.log4j.core.config.LoggerConfig.callAppenders(LoggerConfig.java:448)</span><br><span class=\"line\">    at org.apache.logging.log4j.core.async.AsyncLoggerConfig.asyncCallAppenders(AsyncLoggerConfig.java:115)</span><br><span class=\"line\">    at org.apache.logging.log4j.core.async.AsyncLoggerConfigDisruptor$Log4jEventWrapperHandler.onEvent(AsyncLoggerConfigDisruptor.java:112)</span><br><span class=\"line\">    at org.apache.logging.log4j.core.async.AsyncLoggerConfigDisruptor$Log4jEventWrapperHandler.onEvent(AsyncLoggerConfigDisruptor.java:98)</span><br><span class=\"line\">    at com.lmax.disruptor.BatchEventProcessor.run(BatchEventProcessor.java:128)</span><br><span class=\"line\">    at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1152)</span><br><span class=\"line\">    at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:627)</span><br><span class=\"line\">    at java.lang.Thread.run(Thread.java:861)</span><br></pre></td></tr></table></figure>\n\n<p>log4j2 相关类在 sofaark 插件中是导出的，因此当出现 log4j2 的类需要被加载时，会委托给 PluginClassLoader 进行加载。</p>\n<h2 id=\"PatternLayout-中配置-throwable-对于产生不同-Converter-的影响\"><a href=\"#PatternLayout-中配置-throwable-对于产生不同-Converter-的影响\" class=\"headerlink\" title=\"PatternLayout 中配置 %throwable 对于产生不同 Converter 的影响\"></a>PatternLayout 中配置 %throwable 对于产生不同 Converter 的影响</h2><p>SOFABoot 开始执行加载 log4j2 的配置文件</p>\n<p><img src=\"https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/d885a3270e2f4df8abe25c5fac5bfa62~tplv-k3u1fbpfcp-watermark.image\" alt=\"image.png\"></p>\n<p>解析配置文件，并根据 PatternLayout 中的各个配置创建不同的 pc</p>\n<p><img src=\"https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/b51cda273db74d9097054b9f085e604f~tplv-k3u1fbpfcp-watermark.image\" alt=\"image.png\"></p>\n<p>规则映射列表</p>\n<p><img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/1b1962881d1649bdb5b7086c49e28fa1~tplv-k3u1fbpfcp-watermark.image\" alt=\"image.png\"></p>\n<p>找到对应 Converter，然后通过反射创建此对象，然后放在 patternConverters 中去。</p>\n<p><img src=\"https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/ef1a773b19544abca7eb64c1ad16d103~tplv-k3u1fbpfcp-watermark.image\" alt=\"image.png\"></p>\n<h2 id=\"什么情况下会产生-ExtendedThrowablePatternConverter-？\"><a href=\"#什么情况下会产生-ExtendedThrowablePatternConverter-？\" class=\"headerlink\" title=\"什么情况下会产生 ExtendedThrowablePatternConverter ？\"></a>什么情况下会产生 ExtendedThrowablePatternConverter ？</h2><p>这里有两个条件会产生这个 Converter</p>\n<h3 id=\"配置-“xEx”-“xThrowable”-“xException”\"><a href=\"#配置-“xEx”-“xThrowable”-“xException”\" class=\"headerlink\" title=\"配置 “xEx”, “xThrowable”, “xException”\"></a>配置 “xEx”, “xThrowable”, “xException”</h3><p><img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/08554a09b1144a7f9df05896cd24ee49~tplv-k3u1fbpfcp-watermark.image\" alt=\"image.png\"></p>\n<p>log4j2 的配置文件中 PatternLayout 如果配置了 “xEx”, “xThrowable”, “xException”，由上面分析可以知道，解析时，rules 哪里匹配到对应 converterName，则会创建。</p>\n<h3 id=\"没有配置-throwable-时会创建\"><a href=\"#没有配置-throwable-时会创建\" class=\"headerlink\" title=\"没有配置 %throwable 时会创建\"></a>没有配置 %throwable 时会创建</h3><p>为什么？来看下一段代码：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 给 PatternLayout 创建对应的 PatternFormatter，用于在输出日志时按指定的规则输出。</span></span><br><span class=\"line\"><span class=\"comment\">// PatternFormatter 执行 format 要依赖 Converter</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 1.alwaysWriteExceptions 默认为 true, 只能在配置文件中 配置修改。</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> List&lt;PatternFormatter&gt; <span class=\"title function_\">parse</span><span class=\"params\">(<span class=\"keyword\">final</span> String pattern, <span class=\"keyword\">final</span> <span class=\"type\">boolean</span> alwaysWriteExceptions,</span></span><br><span class=\"line\"><span class=\"params\">           <span class=\"keyword\">final</span> <span class=\"type\">boolean</span> disableAnsi, <span class=\"keyword\">final</span> <span class=\"type\">boolean</span> noConsoleNoAnsi)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">final</span> List&lt;PatternFormatter&gt; list = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;();</span><br><span class=\"line\">    <span class=\"keyword\">final</span> List&lt;PatternConverter&gt; converters = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;();</span><br><span class=\"line\">    <span class=\"keyword\">final</span> List&lt;FormattingInfo&gt; fields = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">    parse(pattern, converters, fields, disableAnsi, noConsoleNoAnsi, <span class=\"literal\">true</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">final</span> Iterator&lt;FormattingInfo&gt; fieldIter = fields.iterator();</span><br><span class=\"line\">    <span class=\"type\">boolean</span> <span class=\"variable\">handlesThrowable</span> <span class=\"operator\">=</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">\t<span class=\"comment\">// 当前 Logger 对应的所有 converters 集合，这里的 converters 是从上面 parse pattern 时按照 </span></span><br><span class=\"line\">    <span class=\"comment\">// pattern 的 style 生成的，</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">final</span> PatternConverter converter : converters) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (converter <span class=\"keyword\">instanceof</span> NanoTimePatternConverter) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// LOG4J2-1074 Switch to actual clock if nanosecond timestamps are required in config.</span></span><br><span class=\"line\">            <span class=\"comment\">// LOG4J2-1248 set config nanoclock</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (config != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">                config.setNanoClock(<span class=\"keyword\">new</span> <span class=\"title class_\">SystemNanoClock</span>());</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        LogEventPatternConverter pc;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (converter <span class=\"keyword\">instanceof</span> LogEventPatternConverter) &#123; </span><br><span class=\"line\">            pc = (LogEventPatternConverter) converter;</span><br><span class=\"line\">            <span class=\"comment\">// 目前官方提供的 converte在，还有 Throwable 的  handlesThrowable 返回是 true</span></span><br><span class=\"line\">            <span class=\"comment\">// 所以，如果 pattern 中没有 %throwable, 这里会一直返回的都是 false</span></span><br><span class=\"line\">            handlesThrowable |= pc.handlesThrowable();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            pc = <span class=\"keyword\">new</span> <span class=\"title class_\">LiteralPatternConverter</span>(config, Strings.EMPTY, <span class=\"literal\">true</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        FormattingInfo field;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (fieldIter.hasNext()) &#123;</span><br><span class=\"line\">            field = fieldIter.next();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            field = FormattingInfo.getDefault();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        list.add(<span class=\"keyword\">new</span> <span class=\"title class_\">PatternFormatter</span>(pc, field));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">\t<span class=\"comment\">// alwaysWriteExceptions = true</span></span><br><span class=\"line\">    <span class=\"comment\">// handlesThrowable 在配置 %throwable 时是 true，其他均为 false</span></span><br><span class=\"line\">    <span class=\"comment\">// 也就是说当前 Logger 没有配置 %throwable 时，就会创建 ExtendedThrowablePatternConverter</span></span><br><span class=\"line\">    <span class=\"comment\">// 作为默认的异常处理 Converter</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (alwaysWriteExceptions &amp;&amp; !handlesThrowable) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">final</span> <span class=\"type\">LogEventPatternConverter</span> <span class=\"variable\">pc</span> <span class=\"operator\">=</span> ExtendedThrowablePatternConverter.newInstance(config, <span class=\"literal\">null</span>);</span><br><span class=\"line\">        list.add(<span class=\"keyword\">new</span> <span class=\"title class_\">PatternFormatter</span>(pc, FormattingInfo.getDefault()));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> list;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>结论：<strong>根据 pattern 中的不同元素类型，产生不同类型的 PatternConverter，如果在日志文件中配置了 %throwable , 则会对应产生一个 ThrowablePatternConverter 类型的 PatternConverter。如果没有配置 %throwable，则默认使用 ExtendedThrowablePatternConverter</strong>。</p>\n<h2 id=\"converter-差异分析\"><a href=\"#converter-差异分析\" class=\"headerlink\" title=\"converter 差异分析\"></a>converter 差异分析</h2><p>不同 PatternConverter 的作用是在日志输出时做相应数据的 format，所以对应 PatternConverter 来说，核心的方法就是 format 方法。下面看 ThrowablePatternConverter 和 ExtendedThrowablePatternConverter 的 format 方法差异。</p>\n<h3 id=\"ThrowablePatternConverter-format\"><a href=\"#ThrowablePatternConverter-format\" class=\"headerlink\" title=\"ThrowablePatternConverter#format\"></a>ThrowablePatternConverter#format</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">format</span><span class=\"params\">(<span class=\"keyword\">final</span> LogEvent event, <span class=\"keyword\">final</span> StringBuilder buffer)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">final</span> <span class=\"type\">Throwable</span> <span class=\"variable\">t</span> <span class=\"operator\">=</span> event.getThrown();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (isSubShortOption()) &#123;</span><br><span class=\"line\">        formatSubShortOption(t, getSuffix(event), buffer);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (t != <span class=\"literal\">null</span> &amp;&amp; options.anyLines()) &#123;</span><br><span class=\"line\">        formatOption(t, getSuffix(event), buffer);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>formatOption 就是把 Throwable 的 stackTracer 写到 buffer 中</p>\n<h3 id=\"ExtendedThrowablePatternConverter-format\"><a href=\"#ExtendedThrowablePatternConverter-format\" class=\"headerlink\" title=\"ExtendedThrowablePatternConverter#format\"></a>ExtendedThrowablePatternConverter#format</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">format</span><span class=\"params\">(<span class=\"keyword\">final</span> LogEvent event, <span class=\"keyword\">final</span> StringBuilder toAppendTo)</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 这里多了一个 getThrownProxy</span></span><br><span class=\"line\">    <span class=\"keyword\">final</span> <span class=\"type\">ThrowableProxy</span> <span class=\"variable\">proxy</span> <span class=\"operator\">=</span> event.getThrownProxy();</span><br><span class=\"line\">    <span class=\"keyword\">final</span> <span class=\"type\">Throwable</span> <span class=\"variable\">throwable</span> <span class=\"operator\">=</span> event.getThrown();</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ((throwable != <span class=\"literal\">null</span> || proxy != <span class=\"literal\">null</span>) &amp;&amp; options.anyLines()) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (proxy == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">super</span>.format(event, toAppendTo);</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">suffix</span> <span class=\"operator\">=</span> getSuffix(event);</span><br><span class=\"line\">        <span class=\"keyword\">final</span> <span class=\"type\">String</span> <span class=\"variable\">extStackTrace</span> <span class=\"operator\">=</span> proxy.getExtendedStackTraceAsString(options.getIgnorePackages(), options.getTextRenderer(), suffix);</span><br><span class=\"line\">        <span class=\"keyword\">final</span> <span class=\"type\">int</span> <span class=\"variable\">len</span> <span class=\"operator\">=</span> toAppendTo.length();</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (len &gt; <span class=\"number\">0</span> &amp;&amp; !Character.isWhitespace(toAppendTo.charAt(len - <span class=\"number\">1</span>))) &#123;</span><br><span class=\"line\">            toAppendTo.append(<span class=\"string\">&#x27; &#x27;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!options.allLines() || !Strings.LINE_SEPARATOR.equals(options.getSeparator())) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">final</span> <span class=\"type\">StringBuilder</span> <span class=\"variable\">sb</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">StringBuilder</span>();</span><br><span class=\"line\">            <span class=\"keyword\">final</span> String[] array = extStackTrace.split(Strings.LINE_SEPARATOR);</span><br><span class=\"line\">            <span class=\"keyword\">final</span> <span class=\"type\">int</span> <span class=\"variable\">limit</span> <span class=\"operator\">=</span> options.minLines(array.length) - <span class=\"number\">1</span>;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt;= limit; ++i) &#123;</span><br><span class=\"line\">                sb.append(array[i]);</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (i &lt; limit) &#123;</span><br><span class=\"line\">                    sb.append(options.getSeparator());</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            toAppendTo.append(sb.toString());</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            toAppendTo.append(extStackTrace);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><code>final ThrowableProxy proxy = event.getThrownProxy()</code> 结合最上面的异常堆栈来看，在构建 ThrowableProxy 对象实例时会去对堆栈中的数据进行序列化操作构建 CacheEntry（toExtendedStackTrace）,从而触发类加载动作。</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>A proxy is used to represent a throwable that may not exist in a different class loader or JVM. When an application deserializes a ThrowableProxy, the throwable may not be set, but the throwable’s information is preserved in other fields of the proxy like the message and stack trace.</p></blockquote>\n<h2 id=\"附1：Disruptor-消费者的等待策略\"><a href=\"#附1：Disruptor-消费者的等待策略\" class=\"headerlink\" title=\"附1：Disruptor 消费者的等待策略\"></a>附1：Disruptor 消费者的等待策略</h2><p>-DAsyncLoggerConfig.WaitStrategy&#x3D;xxx</p>\n<table>\n<thead>\n<tr>\n<th>名称</th>\n<th>措施</th>\n<th>场景</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>BlockingWaitStrategy</td>\n<td>加锁</td>\n<td>CPU资源紧缺，吞吐量和延迟并不重要的场景</td>\n</tr>\n<tr>\n<td>BusySpinWaitStrategy</td>\n<td>自旋</td>\n<td>通过不断重试，减少切换线程导致的系统调用，而降低延迟。推荐在线程绑定到固定的CPU的场景下使用</td>\n</tr>\n<tr>\n<td>PhasedBackoffWaitStrategy</td>\n<td>自旋 + yield + 自定义策略</td>\n<td>CPU资源紧缺，吞吐量和延迟并不重要的场景</td>\n</tr>\n<tr>\n<td>SleepingWaitStrategy</td>\n<td>自旋 + yield + sleep</td>\n<td>性能和CPU资源之间有很好的折中。延迟不均匀</td>\n</tr>\n<tr>\n<td>TimeoutBlockingWaitStrategy</td>\n<td>加锁，有超时限制</td>\n<td>CPU资源紧缺，吞吐量和延迟并不重要的场景</td>\n</tr>\n<tr>\n<td>YieldingWaitStrategy</td>\n<td>自旋 + yield + 自旋</td>\n<td>性能和CPU资源之间有很好的折中。延迟比较均匀</td>\n</tr>\n</tbody></table>\n<p>深色底纹为默认策略</p>\n<h2 id=\"附2：Disruptor-队列长度并配置队列堵塞丢弃策略\"><a href=\"#附2：Disruptor-队列长度并配置队列堵塞丢弃策略\" class=\"headerlink\" title=\"附2：Disruptor 队列长度并配置队列堵塞丢弃策略\"></a>附2：Disruptor 队列长度并配置队列堵塞丢弃策略</h2><ul>\n<li><p>-Dlog4j2.AsyncQueueFullPolicy&#x3D;Default&#x2F;Discard   (默认 Default )</p>\n</li>\n<li><p>-Dlog4j2.DiscardThreshold&#x3D;ERROR&#x2F;INFO&#x2F;…    （默认 info)</p>\n</li>\n</ul>\n<h3 id=\"1、DefaultAsyncQueueFullPolicy—等待队列，转为同步操作策略-默认\"><a href=\"#1、DefaultAsyncQueueFullPolicy—等待队列，转为同步操作策略-默认\" class=\"headerlink\" title=\"1、DefaultAsyncQueueFullPolicy—等待队列，转为同步操作策略(默认)\"></a>1、DefaultAsyncQueueFullPolicy—等待队列，转为同步操作策略(默认)</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">DefaultAsyncQueueFullPolicy</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">AsyncQueueFullPolicy</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> EventRoute <span class=\"title function_\">getRoute</span><span class=\"params\">(<span class=\"keyword\">final</span> <span class=\"type\">long</span> backgroundThreadId, <span class=\"keyword\">final</span> Level level)</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// LOG4J2-1518: prevent deadlock when RingBuffer is full and object being logged calls</span></span><br><span class=\"line\">        <span class=\"comment\">// Logger.log in application thread</span></span><br><span class=\"line\">        <span class=\"comment\">// See also LOG4J2-471: prevent deadlock when RingBuffer is full and object</span></span><br><span class=\"line\">        <span class=\"comment\">// being logged calls Logger.log() from its toString() method in background thread</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> EventRoute.SYNCHRONOUS;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2、DiscardingAsyncQueueFullPolicy—按照日志等级抛弃日志策略\"><a href=\"#2、DiscardingAsyncQueueFullPolicy—按照日志等级抛弃日志策略\" class=\"headerlink\" title=\"2、DiscardingAsyncQueueFullPolicy—按照日志等级抛弃日志策略\"></a>2、DiscardingAsyncQueueFullPolicy—按照日志等级抛弃日志策略</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> EventRoute <span class=\"title function_\">getRoute</span><span class=\"params\">(<span class=\"keyword\">final</span> <span class=\"type\">long</span> backgroundThreadId, <span class=\"keyword\">final</span> Level level)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (level.isLessSpecificThan(thresholdLevel)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (discardCount.getAndIncrement() == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            LOGGER.warn(<span class=\"string\">&quot;Async queue is full, discarding event with level &#123;&#125;. &quot;</span> +</span><br><span class=\"line\">                        <span class=\"string\">&quot;This message will only appear once; future events from &#123;&#125; &quot;</span> +</span><br><span class=\"line\">                        <span class=\"string\">&quot;are silently discarded until queue capacity becomes available.&quot;</span>,</span><br><span class=\"line\">                        level, thresholdLevel);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> EventRoute.DISCARD;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">super</span>.getRoute(backgroundThreadId, level);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"附3：Disruptor-默认队列大小\"><a href=\"#附3：Disruptor-默认队列大小\" class=\"headerlink\" title=\"附3：Disruptor 默认队列大小\"></a>附3：Disruptor 默认队列大小</h2><ul>\n<li>-DAsyncLogger.RingBufferSize&#x3D;xxx</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// propertyName -&gt; AsyncLoggerConfig.RingBufferSize</span></span><br><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"type\">int</span> <span class=\"title function_\">calculateRingBufferSize</span><span class=\"params\">(<span class=\"keyword\">final</span> String propertyName)</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// Constants.ENABLE_THREADLOCALS 默认 false</span></span><br><span class=\"line\">    <span class=\"comment\">// RINGBUFFER_NO_GC_DEFAULT_SIZE 4096</span></span><br><span class=\"line\">    <span class=\"comment\">// 256 * 1024=262144</span></span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">ringBufferSize</span> <span class=\"operator\">=</span> Constants.ENABLE_THREADLOCALS ? RINGBUFFER_NO_GC_DEFAULT_SIZE : RINGBUFFER_DEFAULT_SIZE;</span><br><span class=\"line\">    <span class=\"keyword\">final</span> <span class=\"type\">String</span> <span class=\"variable\">userPreferredRBSize</span> <span class=\"operator\">=</span> PropertiesUtil.getProperties().getStringProperty(propertyName,</span><br><span class=\"line\">                                                                                        String.valueOf(ringBufferSize));</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">size</span> <span class=\"operator\">=</span> Integer.parseInt(userPreferredRBSize);</span><br><span class=\"line\">        <span class=\"comment\">// RINGBUFFER_MIN_SIZE=128</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (size &lt; RINGBUFFER_MIN_SIZE) &#123;</span><br><span class=\"line\">            size = RINGBUFFER_MIN_SIZE;</span><br><span class=\"line\">            LOGGER.warn(<span class=\"string\">&quot;Invalid RingBufferSize &#123;&#125;, using minimum size &#123;&#125;.&quot;</span>, userPreferredRBSize,</span><br><span class=\"line\">                        RINGBUFFER_MIN_SIZE);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        ringBufferSize = size;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (<span class=\"keyword\">final</span> Exception ex) &#123;</span><br><span class=\"line\">        LOGGER.warn(<span class=\"string\">&quot;Invalid RingBufferSize &#123;&#125;, using default size &#123;&#125;.&quot;</span>, userPreferredRBSize, ringBufferSize);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> Integers.ceilingNextPowerOfTwo(ringBufferSize);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<p>Constants.ENABLE_THREADLOCALS 这个值分为 web 和 非 web 应用两种情况，非 web 应用时，默认是 true，web 应用默认是 false，判断依据是，classpath 是否有 javax.servlet.Servlet 类。可以通过 <code>-Dlog4j2.is.webapp=true/false</code> 来手动设定。</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>ps: -Dlog4j2.enable.threadlocals：  This system property can be used to switch off the use of threadlocals, which will partly disable Log4j’s garbage-free behaviour: to be fully garbage-free, Log4j stores objects in ThreadLocal fields to reuse them, otherwise new objects are created for each log event. Note that this property is not effective when Log4j detects it is running in a web application.</p></blockquote>\n","text":"log4j2 相关类在 sofaark 插件中是导出的，因此当出现 log4j2 的类需要被加载时，会委托给 PluginClassLoader 进行加载。 背...","permalink":"/post/sofa/sofa-ark-plugin-classloader-log4j","photos":[],"count_time":{"symbolsCount":"14k","symbolsTime":"12 mins."},"categories":[{"name":"SOFA","slug":"SOFA","count":9,"path":"api/categories/SOFA.json"}],"tags":[{"name":"gc","slug":"gc","count":3,"path":"api/tags/gc.json"},{"name":"ClassLoader","slug":"ClassLoader","count":4,"path":"api/tags/ClassLoader.json"},{"name":"SOFAArk","slug":"SOFAArk","count":4,"path":"api/tags/SOFAArk.json"},{"name":"log","slug":"log","count":5,"path":"api/tags/log.json"},{"name":"类加载","slug":"类加载","count":2,"path":"api/tags/类加载.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E8%83%8C%E6%99%AF\"><span class=\"toc-text\">背景</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#PatternLayout-%E4%B8%AD%E9%85%8D%E7%BD%AE-throwable-%E5%AF%B9%E4%BA%8E%E4%BA%A7%E7%94%9F%E4%B8%8D%E5%90%8C-Converter-%E7%9A%84%E5%BD%B1%E5%93%8D\"><span class=\"toc-text\">PatternLayout 中配置 %throwable 对于产生不同 Converter 的影响</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%BB%80%E4%B9%88%E6%83%85%E5%86%B5%E4%B8%8B%E4%BC%9A%E4%BA%A7%E7%94%9F-ExtendedThrowablePatternConverter-%EF%BC%9F\"><span class=\"toc-text\">什么情况下会产生 ExtendedThrowablePatternConverter ？</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E9%85%8D%E7%BD%AE-%E2%80%9CxEx%E2%80%9D-%E2%80%9CxThrowable%E2%80%9D-%E2%80%9CxException%E2%80%9D\"><span class=\"toc-text\">配置 “xEx”, “xThrowable”, “xException”</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%B2%A1%E6%9C%89%E9%85%8D%E7%BD%AE-throwable-%E6%97%B6%E4%BC%9A%E5%88%9B%E5%BB%BA\"><span class=\"toc-text\">没有配置 %throwable 时会创建</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#converter-%E5%B7%AE%E5%BC%82%E5%88%86%E6%9E%90\"><span class=\"toc-text\">converter 差异分析</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#ThrowablePatternConverter-format\"><span class=\"toc-text\">ThrowablePatternConverter#format</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#ExtendedThrowablePatternConverter-format\"><span class=\"toc-text\">ExtendedThrowablePatternConverter#format</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E9%99%841%EF%BC%9ADisruptor-%E6%B6%88%E8%B4%B9%E8%80%85%E7%9A%84%E7%AD%89%E5%BE%85%E7%AD%96%E7%95%A5\"><span class=\"toc-text\">附1：Disruptor 消费者的等待策略</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E9%99%842%EF%BC%9ADisruptor-%E9%98%9F%E5%88%97%E9%95%BF%E5%BA%A6%E5%B9%B6%E9%85%8D%E7%BD%AE%E9%98%9F%E5%88%97%E5%A0%B5%E5%A1%9E%E4%B8%A2%E5%BC%83%E7%AD%96%E7%95%A5\"><span class=\"toc-text\">附2：Disruptor 队列长度并配置队列堵塞丢弃策略</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1%E3%80%81DefaultAsyncQueueFullPolicy%E2%80%94%E7%AD%89%E5%BE%85%E9%98%9F%E5%88%97%EF%BC%8C%E8%BD%AC%E4%B8%BA%E5%90%8C%E6%AD%A5%E6%93%8D%E4%BD%9C%E7%AD%96%E7%95%A5-%E9%BB%98%E8%AE%A4\"><span class=\"toc-text\">1、DefaultAsyncQueueFullPolicy—等待队列，转为同步操作策略(默认)</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2%E3%80%81DiscardingAsyncQueueFullPolicy%E2%80%94%E6%8C%89%E7%85%A7%E6%97%A5%E5%BF%97%E7%AD%89%E7%BA%A7%E6%8A%9B%E5%BC%83%E6%97%A5%E5%BF%97%E7%AD%96%E7%95%A5\"><span class=\"toc-text\">2、DiscardingAsyncQueueFullPolicy—按照日志等级抛弃日志策略</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E9%99%843%EF%BC%9ADisruptor-%E9%BB%98%E8%AE%A4%E9%98%9F%E5%88%97%E5%A4%A7%E5%B0%8F\"><span class=\"toc-text\">附3：Disruptor 默认队列大小</span></a></li></ol>","author":{"name":"glmapper","slug":"blog-author","avatar":"https://glmapper-blog.oss-cn-hangzhou.aliyuncs.com/common/favicon.ico","link":"/","description":"开放，开源，分享，共享","socials":{"github":"https://github.com/glmapper","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/2412872703","zhihu":"","csdn":"","juejin":"https://juejin.cn/user/3227821827961806","customs":{"sofastack":{"icon":"https://glmapper-blog.oss-cn-hangzhou.aliyuncs.com/common/sofastack.svg","link":"https://www.sofastack.tech/"}}}},"mapped":true,"hidden":false,"prev_post":{"title":"finalize 方法重写对 GC 的影响分析","uid":"47efb9065838ed77b0a81f4071199b1e","slug":"java/java-advance-gc-finalize","date":"2021-11-02T03:17:56.000Z","updated":"2024-07-05T04:09:05.761Z","comments":true,"path":"api/articles/java/java-advance-gc-finalize.json","keywords":null,"cover":[],"text":"关于 Object 的 finalize 方法，在日常开发中可能有超过 99% 的人都没有关注过，因为业务开发很少有重写 finalize 方法的场景；开发者对...","permalink":"/post/java/java-advance-gc-finalize","photos":[],"count_time":{"symbolsCount":"14k","symbolsTime":"12 mins."},"categories":[{"name":"SOFA","slug":"SOFA","count":9,"path":"api/categories/SOFA.json"}],"tags":[{"name":"gc","slug":"gc","count":3,"path":"api/tags/gc.json"},{"name":"ClassLoader","slug":"ClassLoader","count":4,"path":"api/tags/ClassLoader.json"},{"name":"SOFAArk","slug":"SOFAArk","count":4,"path":"api/tags/SOFAArk.json"}],"author":{"name":"glmapper","slug":"blog-author","avatar":"https://glmapper-blog.oss-cn-hangzhou.aliyuncs.com/common/favicon.ico","link":"/","description":"开放，开源，分享，共享","socials":{"github":"https://github.com/glmapper","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/2412872703","zhihu":"","csdn":"","juejin":"https://juejin.cn/user/3227821827961806","customs":{"sofastack":{"icon":"https://glmapper-blog.oss-cn-hangzhou.aliyuncs.com/common/sofastack.svg","link":"https://www.sofastack.tech/"}}}}},"next_post":{"title":"记：SOFA Meepup 合肥站-SOFA 微服务体系技术生态于实践","uid":"9622fa03747232916676b6477e1a4975","slug":"share/shares-sofa-meetup-7","date":"2021-07-25T08:06:55.000Z","updated":"2024-07-05T04:09:05.797Z","comments":true,"path":"api/articles/share/shares-sofa-meetup-7.json","keywords":null,"cover":"https://glmapper-blog.oss-cn-hangzhou.aliyuncs.com/meetup-hf/hf/team.jpeg","text":"SOFA Meepup 合肥站从 5 月份开始筹划，至 7.24 在合肥成功举办，历时 2 个多月的时间，从到场人数来看，并没有受到大雨的影响，合肥开发者同学对...","permalink":"/post/share/shares-sofa-meetup-7","photos":[],"count_time":{"symbolsCount":"2k","symbolsTime":"2 mins."},"categories":[{"name":"experience","slug":"experience","count":2,"path":"api/categories/experience.json"}],"tags":[{"name":"SOFA","slug":"SOFA","count":2,"path":"api/tags/SOFA.json"}],"author":{"name":"glmapper","slug":"blog-author","avatar":"https://glmapper-blog.oss-cn-hangzhou.aliyuncs.com/common/favicon.ico","link":"/","description":"开放，开源，分享，共享","socials":{"github":"https://github.com/glmapper","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/2412872703","zhihu":"","csdn":"","juejin":"https://juejin.cn/user/3227821827961806","customs":{"sofastack":{"icon":"https://glmapper-blog.oss-cn-hangzhou.aliyuncs.com/common/sofastack.svg","link":"https://www.sofastack.tech/"}}}}}}