{"title":"一文详解蚂蚁金服分布式链路组件 SOFATracer 的埋点机制","uid":"8594734a788b611179d7e2206570ce2a","slug":"sofa/sofa-tracer-integration-analysis","date":"2020-01-20T08:27:53.000Z","updated":"2024-07-05T04:09:05.802Z","comments":true,"path":"api/articles/sofa/sofa-tracer-integration-analysis.json","keywords":null,"cover":[],"content":"<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>原文链接 <a href=\"https://juejin.cn/post/6844904055391666190\">一文详解蚂蚁金服分布式链路组件 SOFATracer 的埋点机制</a></p></blockquote>\n<div class=\"output_wrapper\" id=\"output_wrapper_id\" style=\"font-size: 16px; color: rgb(62, 62, 62); line-height: 1.6; word-spacing: 0px; letter-spacing: 0px; font-family: 'Helvetica Neue', Helvetica, 'Hiragino Sans GB', 'Microsoft YaHei', Arial, sans-serif;\"><p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.5em 0px;\">SOFATracer 是一个用于分布式系统调用跟踪的组件，通过统一的 TraceId 将调用链路中的各种网络调用情况以日志的方式记录下来，以达到透视化网络调用的目的，这些链路数据可用于故障的快速发现，服务治理等。</p>\n<blockquote style=\"line-height: inherit; display: block; padding: 15px 15px 15px 1rem; font-size: 0.9em; margin: 1em 0px; color: rgb(129, 145, 152); border-left: 6px solid rgb(220, 230, 240); background: rgb(242, 247, 251); overflow: auto; overflow-wrap: normal; word-break: normal;\">\n  <p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 0px;\">GITHUB 地址：https://github.com/sofastack/sofa-tracer/pulls （欢迎 star）<br>官方文件地址：https://www.sofastack.tech/projects/sofa-tracer/overview/</p>\n</blockquote>\n<p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.5em 0px;\">2018 年末时至 2019 年初，SOFA 团队发起过 <a href=\"https://www.sofastack.tech/tags/%E5%89%96%E6%9E%90-sofatracer-%E6%A1%86%E6%9E%B6/\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; text-decoration: none; color: rgb(30, 107, 184); overflow-wrap: break-word;\">剖析-sofatracer-框架</a> 的源码解析系列文章。这个系列中，基本对 SOFATracer 所提供的能力及实现原理都做了比较全面的分析，有兴趣的同学可以看下。</p>\n\n<span id=\"more\"></span>\n\n<p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.5em 0px;\">从官方文档及 PR 来看，目前 SOFATracer 已经支持了对以下开源组件的埋点支持：</p>\n<ul style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; padding-left: 32px; list-style-type: disc;\">\n<li style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; margin-bottom: 0.5em;\"><span style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\">Spring MVC</span></li>\n<li style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; margin-bottom: 0.5em;\"><span style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\">RestTemplate</span></li>\n<li style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; margin-bottom: 0.5em;\"><span style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\">HttpClient</span></li>\n<li style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; margin-bottom: 0.5em;\"><span style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\">OkHttp3</span></li>\n<li style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; margin-bottom: 0.5em;\"><span style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\">JDBC </span></li>\n<li style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; margin-bottom: 0.5em;\"><span style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\">Dubbo(2.6/2.7)</span></li>\n<li style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; margin-bottom: 0.5em;\"><span style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\">SOFARPC</span></li>\n<li style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; margin-bottom: 0.5em;\"><span style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\">Redis</span></li>\n<li style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; margin-bottom: 0.5em;\"><span style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\">MongoDB</span></li>\n<li style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; margin-bottom: 0.5em;\"><span style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\">Spring Message</span></li>\n<li style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; margin-bottom: 0.5em;\"><span style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\">Spring Cloud Stream (基于 Spring Message 的埋点)</span></li>\n<li style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; margin-bottom: 0.5em;\"><span style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\">RocketMQ</span></li>\n<li style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; margin-bottom: 0.5em;\"><span style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\">Spring Cloud FeignClient</span></li>\n<li style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; margin-bottom: 0.5em;\"><span style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\">Hystrix</span></li>\n</ul>\n<blockquote style=\"line-height: inherit; display: block; padding: 15px 15px 15px 1rem; font-size: 0.9em; margin: 1em 0px; color: rgb(129, 145, 152); border-left: 6px solid rgb(220, 230, 240); background: rgb(242, 247, 251); overflow: auto; overflow-wrap: normal; word-break: normal;\">\n  <p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 0px;\">大多数能力提供在 3.x 版本，2.x 版本从官方 issue 中可以看到后续将不在继续提供新的功能更新；这也是和 SpringBoot 宣布不在继续维护 1.x 版本有关系。</p>\n</blockquote>\n<p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.5em 0px;\">本文将从插件的角度来分析，SOFATracer 是如何实现对上述组件进行埋点的；通过本文，除了了解 SOFATracer 的埋点机制之外，也可以对上述组件的基本扩展机制以及基本原理有一点学习。</p>\n<h3 id=\"hservlet\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.5em 0px; font-weight: bold; font-size: 1.3em; border-bottom: 2px solid rgb(0, 172, 193);\"><span style=\"font-size: inherit; line-height: inherit; margin: 0px; display: inline-block; font-weight: normal; background: rgb(0, 172, 193); color: rgb(255, 255, 255); padding: 3px 10px 0px; border-top-right-radius: 3px; border-top-left-radius: 4px; margin-right: 2px;\">标准 Servlet 规范埋点原理</span></h3>\n<p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.5em 0px;\">SOFATracer 支持对标准 Servlet 规范的 web mvc 埋点，包括普通的 servlet 和 Springmvc 等；基本原理就是基于 Servelt 规范所提供的 <code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(233, 105, 0); background: rgb(248, 248, 248);\">javax.servlet.Filter</code> 过滤器接口扩展实现。</p>\n<blockquote style=\"line-height: inherit; display: block; padding: 15px 15px 15px 1rem; font-size: 0.9em; margin: 1em 0px; color: rgb(129, 145, 152); border-left: 6px solid rgb(220, 230, 240); background: rgb(242, 247, 251); overflow: auto; overflow-wrap: normal; word-break: normal;\">\n  <p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 0px;\">过滤器位于 client 和 web 应用程序之间，用于检查和修改两者之间流过的请求和响应信息。在请求到达 Servlet 之前，过滤器截获请求。在响应送给客户端之前，过滤器截获响应。多个过滤器形成一个 FilterChain，FilterChain 中不同过滤器的先后顺序由部署文件 web.xml 中过滤器映射<filter-mapping style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\">的顺序决定。最先截获客户端请求的过滤器将最后截获 Servlet 的响应信息。</filter-mapping></p>\n</blockquote>\n<p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.5em 0px;\">web 应用程序一般作为请求的接收方，在 Tracer 中应用是作为 server 存在的，其在解析 SpanContext 时所对应的事件为 sr (server receive)。</p>\n<p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.5em 0px;\">SOFATracer 在 sofa-tracer-springmvc-plugin 插件中解析及产生 span 的过程大致如下：</p>\n<ul style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; padding-left: 32px; list-style-type: disc;\">\n<li style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; margin-bottom: 0.5em;\"><span style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\">Servlet Filter 拦截到 request 请求</span></li>\n<li style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; margin-bottom: 0.5em;\"><span style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\">从请求中解析 SpanContext </span></li>\n<li style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; margin-bottom: 0.5em;\"><span style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\">通过 SpanContext 构建当前 MVC 的 span </span></li>\n<li style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; margin-bottom: 0.5em;\"><span style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\">给当前 span 设置 tag、log。</span></li>\n<li style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; margin-bottom: 0.5em;\"><span style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\">在 filter 处理的最后，结束 span。</span></li>\n</ul>\n<p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.5em 0px;\">当然这里面还会设计到其他很多细节，比如给 span 设置哪些 tag 属性、如果处理异步线程透传等等。本篇不展开细节探讨，有兴趣的同学可以自行阅读代码或者和我交流。</p>\n<h3 id=\"hdubbo\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.5em 0px; font-weight: bold; font-size: 1.3em; border-bottom: 2px solid rgb(0, 172, 193);\"><span style=\"font-size: inherit; line-height: inherit; margin: 0px; display: inline-block; font-weight: normal; background: rgb(0, 172, 193); color: rgb(255, 255, 255); padding: 3px 10px 0px; border-top-right-radius: 3px; border-top-left-radius: 4px; margin-right: 2px;\">Dubbo 埋点原理</span></h3>\n<p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.5em 0px;\">Dubbo 埋点在 SOFATracer 中实际上提供了两个插件，分别用于支持 Dubbo 2.6.x 和 Dubbo 2.7.x；Duddo 埋点也是基于 Filter ，此Filter 是 Dubbo 提供的 SPI 扩展-<a href=\"http://dubbo.apache.org/zh-cn/docs/dev/impls/filter.html\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; text-decoration: none; color: rgb(30, 107, 184); overflow-wrap: break-word;\">调用拦截扩展</a> 机制实现。</p>\n<p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.5em 0px;\">像 Dubbo 或者 SOFARpc 等 rpc 框架的埋点，通常需要考虑的点比较多，首先是 rpc 框架分客户端和服务端，所以在埋点时 rpc 的客户端和服务端必须要有所区分；再者就是 rpc 的调用方式包括很多种，如常见的同步调用、异步调用、oneway 等等，调用方式不同，所对应的 span 的结束时机也不同，重要是的基本所有的 rpc 框架都会使用线程池用来发起和处理请求，那么如何保证 tracer 在多线程环境下不串也很重要。</p>\n<p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.5em 0px;\">另外 Dubbo 2.6.x 和 Dubbo 2.7.x 在异步回调处理上差异比较大，Dubbo 2.7.x 中提供了 onResponse 方法（后面又升级为 Listener，包括 onResponse 和 onError 两个方法）；而 Dubbo 2.6.x 中则并未提供相应的机制，只能通过对 future 的硬编码处理来完成埋点和上报。</p>\n<blockquote style=\"line-height: inherit; display: block; padding: 15px 15px 15px 1rem; font-size: 0.9em; margin: 1em 0px; color: rgb(129, 145, 152); border-left: 6px solid rgb(220, 230, 240); background: rgb(242, 247, 251); overflow: auto; overflow-wrap: normal; word-break: normal;\">\n  <p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 0px;\">这个问题 zipkin brave 对 Dubbo 2.6.x 的埋点时其实也没有考虑到，在做 SOFATracer 支持 Dubbo 2.6.x 时发现了这个 bug，并做了修复。</p>\n</blockquote>\n<p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.5em 0px;\">SOFATracer 中提供的 DubboSofaTracerFilter 类： </p>\n<pre style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><code class=\"java language-java hljs\" style=\"overflow-wrap: break-word; margin: 0px 2px; line-height: 15px; font-size: 11px; font-weight: normal; word-spacing: -3px; letter-spacing: 0px; font-family: Consolas, Inconsolata, Courier, monospace; border-radius: 0px; color: rgb(169, 183, 198); background: rgb(40, 43, 46); overflow-x: auto; padding: 0.5em; white-space: pre !important; word-wrap: normal !important; word-break: normal !important; overflow: auto !important; display: -webkit-box !important;\"><span class=\"hljs-meta\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(91, 218, 237); word-wrap: inherit !important; word-break: inherit !important;\">@Activate</span>(group&nbsp;=&nbsp;&#123;&nbsp;CommonConstants.PROVIDER,&nbsp;CommonConstants.CONSUMER&nbsp;&#125;,&nbsp;value&nbsp;=&nbsp;<span class=\"hljs-string\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;\">\"dubboSofaTracerFilter\"</span>,&nbsp;order&nbsp;=&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(174, 135, 250); word-wrap: inherit !important; word-break: inherit !important;\">1</span>)<br><span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;\">public</span>&nbsp;<span class=\"hljs-class\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; word-wrap: inherit !important; word-break: inherit !important;\"><span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;\">class</span>&nbsp;<span class=\"hljs-title\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(165, 218, 45); word-wrap: inherit !important; word-break: inherit !important;\">DubboSofaTracerFilter</span>&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;\">implements</span>&nbsp;<span class=\"hljs-title\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(165, 218, 45); word-wrap: inherit !important; word-break: inherit !important;\">Filter</span>&nbsp;</span>&#123;<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-comment\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(128, 128, 128); word-wrap: inherit !important; word-break: inherit !important;\">//&nbsp;todo&nbsp;trace</span><br>&#125;<br></code></pre>\n<p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.5em 0px;\">SOFATracer 中用于处理 Dubbo 2.6.x 版本中异步回调处理的核心代码：</p>\n<blockquote style=\"line-height: inherit; display: block; padding: 15px 15px 15px 1rem; font-size: 0.9em; margin: 1em 0px; color: rgb(129, 145, 152); border-left: 6px solid rgb(220, 230, 240); background: rgb(242, 247, 251); overflow: auto; overflow-wrap: normal; word-break: normal;\">\n  <p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 0px;\">Dubbo 异步处理依赖 ResponseFuture 接口，但是 ResponseFuture 在核心链路上并非是以数据或者 list 的形式存在，所以在链路上只会存在一个 ResponseFuture，因此如果我自定义一个类来实现 ResponseFuture 接口是没法达到预期目的的，因为运行期会存在覆盖 ResponseFuture 的问题。所以在设计上，SOFATracer 会通过 ResponseFuture 构建一个新的 FutureAdapter出来用于传递。</p>\n</blockquote>\n<pre style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><code class=\"java language-java hljs\" style=\"overflow-wrap: break-word; margin: 0px 2px; line-height: 15px; font-size: 11px; font-weight: normal; word-spacing: -3px; letter-spacing: 0px; font-family: Consolas, Inconsolata, Courier, monospace; border-radius: 0px; color: rgb(169, 183, 198); background: rgb(40, 43, 46); overflow-x: auto; padding: 0.5em; white-space: pre !important; word-wrap: normal !important; word-break: normal !important; overflow: auto !important; display: -webkit-box !important;\"><span class=\"hljs-function\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;\"><span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;\">boolean</span>&nbsp;<span class=\"hljs-title\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(165, 218, 45); word-wrap: inherit !important; word-break: inherit !important;\">ensureSpanFinishes</span><span class=\"hljs-params\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(255, 152, 35); word-wrap: inherit !important; word-break: inherit !important;\">(Future&lt;Object&gt;&nbsp;future,&nbsp;Invocation&nbsp;invocation,&nbsp;Invoker&lt;?&gt;&nbsp;invoker)</span>&nbsp;</span>&#123;<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;\">boolean</span>&nbsp;deferFinish&nbsp;=&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;\">false</span>;<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;\">if</span>&nbsp;(future&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;\">instanceof</span>&nbsp;FutureAdapter)&nbsp;&#123;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;deferFinish&nbsp;=&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;\">true</span>;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ResponseFuture&nbsp;original&nbsp;=&nbsp;((FutureAdapter&lt;Object&gt;)&nbsp;future).getFuture();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ResponseFuture&nbsp;wrapped&nbsp;=&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;\">new</span>&nbsp;AsyncResponseFutureDelegate(invocation,&nbsp;invoker,&nbsp;original);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-comment\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(128, 128, 128); word-wrap: inherit !important; word-break: inherit !important;\">//&nbsp;Ensures&nbsp;even&nbsp;if&nbsp;no&nbsp;callback&nbsp;added&nbsp;later,&nbsp;for&nbsp;example&nbsp;when&nbsp;a&nbsp;consumer,&nbsp;we&nbsp;finish&nbsp;the&nbsp;span</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;wrapped.setCallback(<span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;\">null</span>);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;RpcContext.getContext().setFuture(<span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;\">new</span>&nbsp;FutureAdapter&lt;&gt;(wrapped));<br>&nbsp;&nbsp;&nbsp;&nbsp;&#125;<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;\">return</span>&nbsp;deferFinish;<br>&#125;<br></code></pre>\n<h3 id=\"hhttp\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.5em 0px; font-weight: bold; font-size: 1.3em; border-bottom: 2px solid rgb(0, 172, 193);\"><span style=\"font-size: inherit; line-height: inherit; margin: 0px; display: inline-block; font-weight: normal; background: rgb(0, 172, 193); color: rgb(255, 255, 255); padding: 3px 10px 0px; border-top-right-radius: 3px; border-top-left-radius: 4px; margin-right: 2px;\">http 客户端埋点原理</span></h3>\n<p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.5em 0px;\">http 客户端埋点包括 HttpClient、OkHttp、RestTemplate 等，此类埋点一般都是基于拦截器机制来实现的，如 HttpClient 使用的 HttpRequestInterceptor、HttpResponseInterceptor；OkHttp 使用的 okhttp3.Interceptor；RestTemplate 使用的 ClientHttpRequestInterceptor。</p>\n<p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.5em 0px;\">以 OkHttp 为例，简单分析下 http 客户端埋点的实现原理：</p>\n<pre style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><code class=\"java language-java hljs\" style=\"overflow-wrap: break-word; margin: 0px 2px; line-height: 15px; font-size: 11px; font-weight: normal; word-spacing: -3px; letter-spacing: 0px; font-family: Consolas, Inconsolata, Courier, monospace; border-radius: 0px; color: rgb(169, 183, 198); background: rgb(40, 43, 46); overflow-x: auto; padding: 0.5em; white-space: pre !important; word-wrap: normal !important; word-break: normal !important; overflow: auto !important; display: -webkit-box !important;\"><span class=\"hljs-meta\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(91, 218, 237); word-wrap: inherit !important; word-break: inherit !important;\">@Override</span><br><span class=\"hljs-function\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;\"><span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;\">public</span>&nbsp;Response&nbsp;<span class=\"hljs-title\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(165, 218, 45); word-wrap: inherit !important; word-break: inherit !important;\">intercept</span><span class=\"hljs-params\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(255, 152, 35); word-wrap: inherit !important; word-break: inherit !important;\">(Chain&nbsp;chain)</span>&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;\">throws</span>&nbsp;IOException&nbsp;</span>&#123;<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-comment\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(128, 128, 128); word-wrap: inherit !important; word-break: inherit !important;\">//&nbsp;获取请求</span><br>&nbsp;&nbsp;&nbsp;&nbsp;Request&nbsp;request&nbsp;=&nbsp;chain.request();<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-comment\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(128, 128, 128); word-wrap: inherit !important; word-break: inherit !important;\">//&nbsp;解析出&nbsp;SpanContext&nbsp;，然后构建&nbsp;Span</span><br>&nbsp;&nbsp;&nbsp;&nbsp;SofaTracerSpan&nbsp;sofaTracerSpan&nbsp;=&nbsp;okHttpTracer.clientSend(request.method());<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-comment\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(128, 128, 128); word-wrap: inherit !important; word-break: inherit !important;\">//&nbsp;发起具体的调用</span><br>&nbsp;&nbsp;&nbsp;&nbsp;Response&nbsp;response&nbsp;=&nbsp;chain.proceed(appendOkHttpRequestSpanTags(request,&nbsp;sofaTracerSpan));<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-comment\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(128, 128, 128); word-wrap: inherit !important; word-break: inherit !important;\">//&nbsp;结束&nbsp;span</span><br>&nbsp;&nbsp;&nbsp;&nbsp;okHttpTracer.clientReceive(String.valueOf(response.code()));<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;\">return</span>&nbsp;response;<br>&#125;<br></code></pre>\n<h3 id=\"hdatasource\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.5em 0px; font-weight: bold; font-size: 1.3em; border-bottom: 2px solid rgb(0, 172, 193);\"><span style=\"font-size: inherit; line-height: inherit; margin: 0px; display: inline-block; font-weight: normal; background: rgb(0, 172, 193); color: rgb(255, 255, 255); padding: 3px 10px 0px; border-top-right-radius: 3px; border-top-left-radius: 4px; margin-right: 2px;\">Datasource 埋点原理</span></h3>\n<p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.5em 0px;\">和标准 servlet 规范实现一样，所有基于 <code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(233, 105, 0); background: rgb(248, 248, 248);\">javax.sql.DataSource</code> 实现的 DataSource 均可以使用 SOFATracer 进行埋点。因为 DataSource 并没有提供像 Servlet 那样的过滤器或者拦截器，所以 SOFATracer 中没法直接通过常规的方式（Filter/SPI扩展拦截/拦截器等）进行埋点，而是使用了代理模式的方式来实现的。</p>\n<figure style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><img src=\"https://glmapper-blog.oss-cn-hangzhou.aliyuncs.com/blogs/tracers/datasource.jpg\" alt=\"\" title=\"\" style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; display: block; margin: 0px auto; max-width: 100%;\"><figcaption style=\"line-height: inherit; margin: 0px; padding: 0px; margin-top: 10px; text-align: center; color: rgb(153, 153, 153); font-size: 0.7em;\"></figcaption></figure>\n<p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.5em 0px;\">上图为 SOFATracer 中 DataSource 代理类实现的类继承结构体系；可以看出，SOFATracer 中自定义了一个 BaseDataSource 抽象类，该抽象类继承 <code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(233, 105, 0); background: rgb(248, 248, 248);\">javax.sql.DataSource</code> 接口，SmartDataSource 作为 BaseDataSource 的唯一子类，也就是 SOFATracer 中所使用的 代理类。所以如果你使用了 <code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(233, 105, 0); background: rgb(248, 248, 248);\">sofa-tracer-datasource-plugin</code> 插件的话，可以看到最终运行时的 Datasource 类型是 <code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(233, 105, 0); background: rgb(248, 248, 248);\">com.alipay.sofa.tracer.plugins.datasource.SmartDataSource</code>。</p>\n<pre style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><code class=\"java language-java hljs\" style=\"overflow-wrap: break-word; margin: 0px 2px; line-height: 15px; font-size: 11px; font-weight: normal; word-spacing: -3px; letter-spacing: 0px; font-family: Consolas, Inconsolata, Courier, monospace; border-radius: 0px; color: rgb(169, 183, 198); background: rgb(40, 43, 46); overflow-x: auto; padding: 0.5em; white-space: pre !important; word-wrap: normal !important; word-break: normal !important; overflow: auto !important; display: -webkit-box !important;\"><span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;\">public</span>&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;\">abstract</span>&nbsp;<span class=\"hljs-class\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; word-wrap: inherit !important; word-break: inherit !important;\"><span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;\">class</span>&nbsp;<span class=\"hljs-title\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(165, 218, 45); word-wrap: inherit !important; word-break: inherit !important;\">BaseDataSource</span>&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;\">implements</span>&nbsp;<span class=\"hljs-title\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(165, 218, 45); word-wrap: inherit !important; word-break: inherit !important;\">DataSource</span>&nbsp;</span>&#123;<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-comment\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(128, 128, 128); word-wrap: inherit !important; word-break: inherit !important;\">//&nbsp;实际被代理的&nbsp;datasource</span><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;\">protected</span>&nbsp;DataSource&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;delegate;<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-comment\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(128, 128, 128); word-wrap: inherit !important; word-break: inherit !important;\">//&nbsp;&nbsp;sofatracer&nbsp;中自定义的拦截器，用于对连接操作、db操作等进行拦截埋点</span><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;\">protected</span>&nbsp;List&lt;Interceptor&gt;&nbsp;interceptors;<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;\">protected</span>&nbsp;List&lt;Interceptor&gt;&nbsp;dataSourceInterceptors;<br>&#125;<br></code></pre>\n<p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.5em 0px;\">Interceptor 主要包括以下三种类型：</p>\n<figure style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><img src=\"https://glmapper-blog.oss-cn-hangzhou.aliyuncs.com/blogs/tracers/datasourceinteceptor.jpg\" alt=\"\" title=\"\" style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; display: block; margin: 0px auto; max-width: 100%;\"><figcaption style=\"line-height: inherit; margin: 0px; padding: 0px; margin-top: 10px; text-align: center; color: rgb(153, 153, 153); font-size: 0.7em;\"></figcaption></figure>\n<p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.5em 0px;\">以 StatementTracerInterceptor 为例 StatementTracerInterceptor 将将会拦截到所有 PreparedStatement 接口的方法，代码如下：</p>\n<pre style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><code class=\"java language-java hljs\" style=\"overflow-wrap: break-word; margin: 0px 2px; line-height: 15px; font-size: 11px; font-weight: normal; word-spacing: -3px; letter-spacing: 0px; font-family: Consolas, Inconsolata, Courier, monospace; border-radius: 0px; color: rgb(169, 183, 198); background: rgb(40, 43, 46); overflow-x: auto; padding: 0.5em; white-space: pre !important; word-wrap: normal !important; word-break: normal !important; overflow: auto !important; display: -webkit-box !important;\"><span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;\">public</span>&nbsp;<span class=\"hljs-class\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; word-wrap: inherit !important; word-break: inherit !important;\"><span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;\">class</span>&nbsp;<span class=\"hljs-title\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(165, 218, 45); word-wrap: inherit !important; word-break: inherit !important;\">StatementTracerInterceptor</span>&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;\">implements</span>&nbsp;<span class=\"hljs-title\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(165, 218, 45); word-wrap: inherit !important; word-break: inherit !important;\">Interceptor</span>&nbsp;</span>&#123;<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-comment\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(128, 128, 128); word-wrap: inherit !important; word-break: inherit !important;\">//&nbsp;tracer&nbsp;类型为&nbsp;client&nbsp;</span><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;\">private</span>&nbsp;DataSourceClientTracer&nbsp;clientTracer;<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-function\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;\"><span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;\">public</span>&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;\">void</span>&nbsp;<span class=\"hljs-title\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(165, 218, 45); word-wrap: inherit !important; word-break: inherit !important;\">setClientTracer</span><span class=\"hljs-params\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(255, 152, 35); word-wrap: inherit !important; word-break: inherit !important;\">(DataSourceClientTracer&nbsp;clientTracer)</span>&nbsp;</span>&#123;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-comment\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(128, 128, 128); word-wrap: inherit !important; word-break: inherit !important;\">//&nbsp;tracer&nbsp;对象实例</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;\">this</span>.clientTracer&nbsp;=&nbsp;clientTracer;<br>&nbsp;&nbsp;&nbsp;&nbsp;&#125;<br><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-meta\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(91, 218, 237); word-wrap: inherit !important; word-break: inherit !important;\">@Override</span><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-function\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;\"><span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;\">public</span>&nbsp;Object&nbsp;<span class=\"hljs-title\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(165, 218, 45); word-wrap: inherit !important; word-break: inherit !important;\">intercept</span><span class=\"hljs-params\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(255, 152, 35); word-wrap: inherit !important; word-break: inherit !important;\">(Chain&nbsp;chain)</span>&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;\">throws</span>&nbsp;Exception&nbsp;</span>&#123;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-comment\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(128, 128, 128); word-wrap: inherit !important; word-break: inherit !important;\">//&nbsp;记录当前系统时间</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;\">long</span>&nbsp;start&nbsp;=&nbsp;System.currentTimeMillis();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;String&nbsp;resultCode&nbsp;=&nbsp;SofaTracerConstant.RESULT_SUCCESS;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;\">try</span>&nbsp;&#123;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-comment\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(128, 128, 128); word-wrap: inherit !important; word-break: inherit !important;\">//&nbsp;开始一个&nbsp;span</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;clientTracer.startTrace(chain.getOriginalSql());<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-comment\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(128, 128, 128); word-wrap: inherit !important; word-break: inherit !important;\">//&nbsp;执行</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;\">return</span>&nbsp;chain.proceed();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&#125;&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;\">catch</span>&nbsp;(Exception&nbsp;e)&nbsp;&#123;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;resultCode&nbsp;=&nbsp;SofaTracerConstant.RESULT_FAILED;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;\">throw</span>&nbsp;e;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&#125;&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;\">finally</span>&nbsp;&#123;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-comment\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(128, 128, 128); word-wrap: inherit !important; word-break: inherit !important;\">//&nbsp;这里计算执行时间&nbsp;System.currentTimeMillis()&nbsp;-&nbsp;start</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-comment\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(128, 128, 128); word-wrap: inherit !important; word-break: inherit !important;\">//&nbsp;结束一个&nbsp;span</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;clientTracer.endTrace(System.currentTimeMillis()&nbsp;-&nbsp;start,&nbsp;resultCode);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&#125;<br>&nbsp;&nbsp;&nbsp;&nbsp;&#125;<br>&#125;<br></code></pre>\n<p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.5em 0px;\">总体思路是，Datasource 通过组合的方式自定义一个代理类（实际上也可以理解为适配器模式中的对象适配模型方式），对所有目标对象的方式进行代理拦截，在执行具体的 sql 或者连接操作之前创建 datasource 的 span，在操作结束之后结束 span，并进行上报。</p>\n<h3 id=\"h\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.5em 0px; font-weight: bold; font-size: 1.3em; border-bottom: 2px solid rgb(0, 172, 193);\"><span style=\"font-size: inherit; line-height: inherit; margin: 0px; display: inline-block; font-weight: normal; background: rgb(0, 172, 193); color: rgb(255, 255, 255); padding: 3px 10px 0px; border-top-right-radius: 3px; border-top-left-radius: 4px; margin-right: 2px;\">消息埋点</span></h3>\n<p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.5em 0px;\">消息框架组件包括很多，像常见的 RocketMQ、Kafka 等；处理各个组件自己提供的客户端之外，像 Spring 就提供了很多消息组件的封装，包括Spring Cloud Stream、Spring Integration、Spring Message 等等。SOFATracer 基于 Spring Message 标准实现了对常见消息组件和 Spring Cloud Stream 的埋点支持，同时也提供了基于 RocketMQ 客户端模式的埋点实现。</p>\n<h3 id=\"hspringmessaging\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.5em 0px; font-weight: bold; font-size: 1.3em; border-bottom: 2px solid rgb(0, 172, 193);\"><span style=\"font-size: inherit; line-height: inherit; margin: 0px; display: inline-block; font-weight: normal; background: rgb(0, 172, 193); color: rgb(255, 255, 255); padding: 3px 10px 0px; border-top-right-radius: 3px; border-top-left-radius: 4px; margin-right: 2px;\">Spring Messaging 埋点实现原理</span></h3>\n<p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.5em 0px;\">spring-messaging 模块为集成 messaging api 和消息协议提供支持。这里我们先看一个 pipes-and-filters 架构模型：</p>\n<figure style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><img src=\"https://glmapper-blog.oss-cn-hangzhou.aliyuncs.com/blogs/mq/spring-messaging.jpg\" alt=\"\" title=\"\" style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; display: block; margin: 0px auto; max-width: 100%;\"><figcaption style=\"line-height: inherit; margin: 0px; padding: 0px; margin-top: 10px; text-align: center; color: rgb(153, 153, 153); font-size: 0.7em;\"></figcaption></figure>\n<p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.5em 0px;\">spring-messaging 的 support 模块中提供了各种不同的 MessageChannel 实现和 channel interceptor 支持，因此在对 spring-messaging 进行埋点时我们自然就会想到去使用 channel interceptor。</p>\n<pre style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><code class=\"java language-java hljs\" style=\"overflow-wrap: break-word; margin: 0px 2px; line-height: 15px; font-size: 11px; font-weight: normal; word-spacing: -3px; letter-spacing: 0px; font-family: Consolas, Inconsolata, Courier, monospace; border-radius: 0px; color: rgb(169, 183, 198); background: rgb(40, 43, 46); overflow-x: auto; padding: 0.5em; white-space: pre !important; word-wrap: normal !important; word-break: normal !important; overflow: auto !important; display: -webkit-box !important;\"><span class=\"hljs-comment\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(128, 128, 128); word-wrap: inherit !important; word-break: inherit !important;\">//&nbsp;SOFATracer&nbsp;实现的基于&nbsp;spring-messaging&nbsp;消息拦截器</span><br><span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;\">public</span>&nbsp;<span class=\"hljs-class\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; word-wrap: inherit !important; word-break: inherit !important;\"><span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;\">class</span>&nbsp;<span class=\"hljs-title\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(165, 218, 45); word-wrap: inherit !important; word-break: inherit !important;\">SofaTracerChannelInterceptor</span>&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;\">implements</span>&nbsp;<span class=\"hljs-title\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(165, 218, 45); word-wrap: inherit !important; word-break: inherit !important;\">ChannelInterceptor</span>,&nbsp;<span class=\"hljs-title\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(165, 218, 45); word-wrap: inherit !important; word-break: inherit !important;\">ExecutorChannelInterceptor</span>&nbsp;</span>&#123;<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-comment\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(128, 128, 128); word-wrap: inherit !important; word-break: inherit !important;\">//&nbsp;todo&nbsp;trace</span><br>&#125;<br><br><span class=\"hljs-comment\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(128, 128, 128); word-wrap: inherit !important; word-break: inherit !important;\">//&nbsp;THIS&nbsp;IS&nbsp;ChannelInterceptor</span><br><span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;\">public</span>&nbsp;<span class=\"hljs-class\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; word-wrap: inherit !important; word-break: inherit !important;\"><span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;\">interface</span>&nbsp;<span class=\"hljs-title\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(165, 218, 45); word-wrap: inherit !important; word-break: inherit !important;\">ChannelInterceptor</span>&nbsp;</span>&#123;<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-comment\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(128, 128, 128); word-wrap: inherit !important; word-break: inherit !important;\">//&nbsp;发送之前</span><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-meta\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(91, 218, 237); word-wrap: inherit !important; word-break: inherit !important;\">@Nullable</span><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;\">default</span>&nbsp;Message&lt;?&gt;&nbsp;preSend(Message&lt;?&gt;&nbsp;message,&nbsp;MessageChannel&nbsp;channel)&nbsp;&#123;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;\">return</span>&nbsp;message;<br>&nbsp;&nbsp;&nbsp;&nbsp;&#125;<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-comment\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(128, 128, 128); word-wrap: inherit !important; word-break: inherit !important;\">//&nbsp;发送后</span><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-function\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;\"><span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;\">default</span>&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;\">void</span>&nbsp;<span class=\"hljs-title\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(165, 218, 45); word-wrap: inherit !important; word-break: inherit !important;\">postSend</span><span class=\"hljs-params\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(255, 152, 35); word-wrap: inherit !important; word-break: inherit !important;\">(Message&lt;?&gt;&nbsp;message,&nbsp;MessageChannel&nbsp;channel,&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;\">boolean</span>&nbsp;sent)</span>&nbsp;</span>&#123;<br>&nbsp;&nbsp;&nbsp;&nbsp;&#125;<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-comment\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(128, 128, 128); word-wrap: inherit !important; word-break: inherit !important;\">//&nbsp;完成发送之后</span><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-function\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;\"><span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;\">default</span>&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;\">void</span>&nbsp;<span class=\"hljs-title\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(165, 218, 45); word-wrap: inherit !important; word-break: inherit !important;\">afterSendCompletion</span><span class=\"hljs-params\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(255, 152, 35); word-wrap: inherit !important; word-break: inherit !important;\">(Message&lt;?&gt;&nbsp;message,&nbsp;MessageChannel&nbsp;channel,&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;\">boolean</span>&nbsp;sent,&nbsp;@Nullable&nbsp;Exception&nbsp;ex)</span>&nbsp;</span>&#123;<br>&nbsp;&nbsp;&nbsp;&nbsp;&#125;<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-comment\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(128, 128, 128); word-wrap: inherit !important; word-break: inherit !important;\">//&nbsp;接收消息之前</span><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-function\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;\"><span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;\">default</span>&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;\">boolean</span>&nbsp;<span class=\"hljs-title\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(165, 218, 45); word-wrap: inherit !important; word-break: inherit !important;\">preReceive</span><span class=\"hljs-params\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(255, 152, 35); word-wrap: inherit !important; word-break: inherit !important;\">(MessageChannel&nbsp;channel)</span>&nbsp;</span>&#123;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;\">return</span>&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;\">true</span>;<br>&nbsp;&nbsp;&nbsp;&nbsp;&#125;<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-comment\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(128, 128, 128); word-wrap: inherit !important; word-break: inherit !important;\">//&nbsp;接收后</span><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-meta\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(91, 218, 237); word-wrap: inherit !important; word-break: inherit !important;\">@Nullable</span><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;\">default</span>&nbsp;Message&lt;?&gt;&nbsp;postReceive(Message&lt;?&gt;&nbsp;message,&nbsp;MessageChannel&nbsp;channel)&nbsp;&#123;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;\">return</span>&nbsp;message;<br>&nbsp;&nbsp;&nbsp;&nbsp;&#125;<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-comment\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(128, 128, 128); word-wrap: inherit !important; word-break: inherit !important;\">//&nbsp;完成接收消息之后</span><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-function\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;\"><span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;\">default</span>&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;\">void</span>&nbsp;<span class=\"hljs-title\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(165, 218, 45); word-wrap: inherit !important; word-break: inherit !important;\">afterReceiveCompletion</span><span class=\"hljs-params\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(255, 152, 35); word-wrap: inherit !important; word-break: inherit !important;\">(@Nullable&nbsp;Message&lt;?&gt;&nbsp;message,&nbsp;MessageChannel&nbsp;channel,&nbsp;@Nullable&nbsp;Exception&nbsp;ex)</span>&nbsp;</span>&#123;<br>&nbsp;&nbsp;&nbsp;&nbsp;&#125;<br>&#125;<br></code></pre>\n<p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.5em 0px;\">可以看到 ChannelInterceptor 实现了消息传递全生命周期的管控，通过暴露出来的方法，可以轻松的实现各个阶段的扩展埋点。</p>\n<h3 id=\"hrocketmq\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.5em 0px; font-weight: bold; font-size: 1.3em; border-bottom: 2px solid rgb(0, 172, 193);\"><span style=\"font-size: inherit; line-height: inherit; margin: 0px; display: inline-block; font-weight: normal; background: rgb(0, 172, 193); color: rgb(255, 255, 255); padding: 3px 10px 0px; border-top-right-radius: 3px; border-top-left-radius: 4px; margin-right: 2px;\">RocketMQ 埋点实现原理</span></h3>\n<p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.5em 0px;\">RocketMQ 本身是提供了对 Opentracing 规范支持的，由于其支持的版本较高，与 SOFATracer 所实现的 Opentracing 版本不一致，所以在一定程度上不兼容；因此 SOFATracer（opentracing 0.22.0 版本）自身又单独提供了 RocketMQ  的插件。</p>\n<p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.5em 0px;\">RocketMQ 埋点其实是通过两个 hook 接口来完成，实际上在 RocketMQ 的官方文档中貌似并没有提到这两个点。</p>\n<pre style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><code class=\"java language-java hljs\" style=\"overflow-wrap: break-word; margin: 0px 2px; line-height: 15px; font-size: 11px; font-weight: normal; word-spacing: -3px; letter-spacing: 0px; font-family: Consolas, Inconsolata, Courier, monospace; border-radius: 0px; color: rgb(169, 183, 198); background: rgb(40, 43, 46); overflow-x: auto; padding: 0.5em; white-space: pre !important; word-wrap: normal !important; word-break: normal !important; overflow: auto !important; display: -webkit-box !important;\"><span class=\"hljs-comment\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(128, 128, 128); word-wrap: inherit !important; word-break: inherit !important;\">//&nbsp;RocketMQ&nbsp;消息消费端&nbsp;hook&nbsp;接口埋点实现类</span><br><span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;\">public</span>&nbsp;<span class=\"hljs-class\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; word-wrap: inherit !important; word-break: inherit !important;\"><span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;\">class</span>&nbsp;<span class=\"hljs-title\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(165, 218, 45); word-wrap: inherit !important; word-break: inherit !important;\">SofaTracerConsumeMessageHook</span>&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;\">implements</span>&nbsp;<span class=\"hljs-title\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(165, 218, 45); word-wrap: inherit !important; word-break: inherit !important;\">ConsumeMessageHook</span>&nbsp;</span>&#123;<br>&#125;<br><span class=\"hljs-comment\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(128, 128, 128); word-wrap: inherit !important; word-break: inherit !important;\">//&nbsp;RocketMQ&nbsp;消息发送端&nbsp;hook&nbsp;接口埋点实现类</span><br><span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;\">public</span>&nbsp;<span class=\"hljs-class\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; word-wrap: inherit !important; word-break: inherit !important;\"><span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;\">class</span>&nbsp;<span class=\"hljs-title\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(165, 218, 45); word-wrap: inherit !important; word-break: inherit !important;\">SofaTracerSendMessageHook</span>&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;\">implements</span>&nbsp;<span class=\"hljs-title\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(165, 218, 45); word-wrap: inherit !important; word-break: inherit !important;\">SendMessageHook</span>&nbsp;</span>&#123;&#125;<br></code></pre>\n<p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.5em 0px;\">首先是 SendMessageHook 接口，SendMessageHook 接口提供了两个方法，sendMessageBefore 和 sendMessageAfter，SOFATracer 在实现埋点时，sendMessageBefore 中用来解析和构建 span，sendMessageAfter 中用于拿到结果然后结束 span。</p>\n<p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.5em 0px;\">同样的，ConsumeMessageHook 中也提供了两个方法（consumeMessageBefore和consumeMessageAfter），可以提供给 SOFATracer 来从消息中解析出透传的 tracer 信息然后再将 tracer 信息透传到下游链路中去。</p>\n<h3 id=\"hredis\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.5em 0px; font-weight: bold; font-size: 1.3em; border-bottom: 2px solid rgb(0, 172, 193);\"><span style=\"font-size: inherit; line-height: inherit; margin: 0px; display: inline-block; font-weight: normal; background: rgb(0, 172, 193); color: rgb(255, 255, 255); padding: 3px 10px 0px; border-top-right-radius: 3px; border-top-left-radius: 4px; margin-right: 2px;\">redis 埋点原理</span></h3>\n<p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.5em 0px;\">SOFATracer 中的 redis 埋点是基于 spring data redis 实现的，没有针对具体的 redis 客户端来埋点。另外 redis 埋点部分参考的是开源社区<a href=\"https://github.com/opentracing-contrib/java-spring-cloud/tree/master/instrument-starters/opentracing-spring-cloud-redis-starter\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; text-decoration: none; color: rgb(30, 107, 184); overflow-wrap: break-word;\">opentracing-spring-cloud-redis-starter</a>中的实现逻辑。</p>\n<p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.5em 0px;\">redis 的埋点实现与 Datasource 的锚点实现基本思路是一致的，都是通过一层代理来是实现的拦截。<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(233, 105, 0); background: rgb(248, 248, 248);\">sofa-tracer-redis-plugin</code> 中对所有的 redis 操作都通过 RedisActionWrapperHelper 进行了一层包装，在执行具体的命令前后通过 SOFATracer 自己提供的 API 进行埋点操作。代码如下：</p>\n<pre style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><code class=\"java language-java hljs\" style=\"overflow-wrap: break-word; margin: 0px 2px; line-height: 15px; font-size: 11px; font-weight: normal; word-spacing: -3px; letter-spacing: 0px; font-family: Consolas, Inconsolata, Courier, monospace; border-radius: 0px; color: rgb(169, 183, 198); background: rgb(40, 43, 46); overflow-x: auto; padding: 0.5em; white-space: pre !important; word-wrap: normal !important; word-break: normal !important; overflow: auto !important; display: -webkit-box !important;\"><span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;\">public</span>&nbsp;&lt;T&gt;&nbsp;<span class=\"hljs-function\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;\">T&nbsp;<span class=\"hljs-title\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(165, 218, 45); word-wrap: inherit !important; word-break: inherit !important;\">doInScope</span><span class=\"hljs-params\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(255, 152, 35); word-wrap: inherit !important; word-break: inherit !important;\">(String&nbsp;command,&nbsp;Supplier&lt;T&gt;&nbsp;supplier)</span>&nbsp;</span>&#123;<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-comment\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(128, 128, 128); word-wrap: inherit !important; word-break: inherit !important;\">//&nbsp;构建&nbsp;span</span><br>&nbsp;&nbsp;&nbsp;&nbsp;Span&nbsp;span&nbsp;=&nbsp;buildSpan(command);<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;\">return</span>&nbsp;activateAndCloseSpan(span,&nbsp;supplier);<br>&#125;<br><br><span class=\"hljs-comment\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(128, 128, 128); word-wrap: inherit !important; word-break: inherit !important;\">//&nbsp;在&nbsp;span&nbsp;的生命周期内执行具体命令</span><br><span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;\">private</span>&nbsp;&lt;T&gt;&nbsp;<span class=\"hljs-function\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;\">T&nbsp;<span class=\"hljs-title\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(165, 218, 45); word-wrap: inherit !important; word-break: inherit !important;\">activateAndCloseSpan</span><span class=\"hljs-params\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(255, 152, 35); word-wrap: inherit !important; word-break: inherit !important;\">(Span&nbsp;span,&nbsp;Supplier&lt;T&gt;&nbsp;supplier)</span>&nbsp;</span>&#123;<br>&nbsp;&nbsp;&nbsp;&nbsp;Throwable&nbsp;candidateThrowable&nbsp;=&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;\">null</span>;<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;\">try</span>&nbsp;&#123;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-comment\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(128, 128, 128); word-wrap: inherit !important; word-break: inherit !important;\">//&nbsp;执行命令</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;\">return</span>&nbsp;supplier.get();<br>&nbsp;&nbsp;&nbsp;&nbsp;&#125;&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;\">catch</span>&nbsp;(Throwable&nbsp;t)&nbsp;&#123;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;candidateThrowable&nbsp;=&nbsp;t;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;\">throw</span>&nbsp;t;<br>&nbsp;&nbsp;&nbsp;&nbsp;&#125;&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;\">finally</span>&nbsp;&#123;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;\">if</span>&nbsp;(candidateThrowable&nbsp;!=&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;\">null</span>)&nbsp;&#123;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-comment\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(128, 128, 128); word-wrap: inherit !important; word-break: inherit !important;\">//&nbsp;...</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&#125;&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(248, 35, 117); word-wrap: inherit !important; word-break: inherit !important;\">else</span>&nbsp;&#123;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-comment\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(128, 128, 128); word-wrap: inherit !important; word-break: inherit !important;\">//&nbsp;...</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&#125;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-comment\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(128, 128, 128); word-wrap: inherit !important; word-break: inherit !important;\">//&nbsp;通过&nbsp;tracer&nbsp;api&nbsp;结束一个span</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;redisSofaTracer.clientReceiveTagFinish((SofaTracerSpan)&nbsp;span,&nbsp;<span class=\"hljs-string\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(238, 220, 112); word-wrap: inherit !important; word-break: inherit !important;\">\"00\"</span>);<br>&nbsp;&nbsp;&nbsp;&nbsp;&#125;<br>&#125;<br></code></pre>\n<p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.5em 0px;\">除此之后 mongodb 的埋点也是基于 spring data 实现，埋点的实现思路和 redis 基本相同，这里就不在单独分析。</p>\n<h3 id=\"h-1\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.5em 0px; font-weight: bold; font-size: 1.3em; border-bottom: 2px solid rgb(0, 172, 193);\"><span style=\"font-size: inherit; line-height: inherit; margin: 0px; display: inline-block; font-weight: normal; background: rgb(0, 172, 193); color: rgb(255, 255, 255); padding: 3px 10px 0px; border-top-right-radius: 3px; border-top-left-radius: 4px; margin-right: 2px;\">总结</span></h3>\n<p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.5em 0px;\">本文对蚂蚁金服分布式链路组件 SOFATracer 的埋点机制做了简要的介绍；从各个组件的埋点机制来看，整体思路就是对组件操作进行包装，在请求或者命令执行的前后进行 span 构建和上报。目前一些主流的链路跟踪组件像 brave 也是基于此思路，区别在于 brave 并非是直接基于 opentracing 规范进行编码，而是其自己封装了一整套 api ，然后通过面向 opentracing api 进行一层适配；另外一个非常流行的 skywalking 则是基于 java agent 实现，埋点实现的机制上与 SOFATracer 和 brave 不同。</p>\n<h3 id=\"h-2\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.5em 0px; font-weight: bold; font-size: 1.3em; border-bottom: 2px solid rgb(0, 172, 193);\"><span style=\"font-size: inherit; line-height: inherit; margin: 0px; display: inline-block; font-weight: normal; background: rgb(0, 172, 193); color: rgb(255, 255, 255); padding: 3px 10px 0px; border-top-right-radius: 3px; border-top-left-radius: 4px; margin-right: 2px;\">参考</span></h3>\n<ul style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; padding-left: 32px; list-style-type: disc;\">\n<li style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; margin-bottom: 0.5em;\"><a href=\"https://www.sofastack.tech/projects/sofa-tracer/overview/\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; text-decoration: none; color: rgb(30, 107, 184); overflow-wrap: break-word;\">SOFATracer</a></li>\n<li style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; margin-bottom: 0.5em;\"><a href=\"https://www.cnblogs.com/davidwang456/p/4446796.html\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; text-decoration: none; color: rgb(30, 107, 184); overflow-wrap: break-word;\">spring源码分析之spring-messaging模块详解</a></li>\n</ul></div>","text":" 原文链接 一文详解蚂蚁金服分布式链路组件 SOFATracer 的埋点机制 SOFATracer 是一个用于分布式系统调用跟踪的组件，通过统一的 TraceI...","permalink":"/post/sofa/sofa-tracer-integration-analysis","photos":[],"count_time":{"symbolsCount":"9.1k","symbolsTime":"8 mins."},"categories":[{"name":"SOFA","slug":"SOFA","count":9,"path":"api/categories/SOFA.json"}],"tags":[{"name":"分布式链路跟踪","slug":"分布式链路跟踪","count":4,"path":"api/tags/分布式链路跟踪.json"},{"name":"Tracer","slug":"Tracer","count":4,"path":"api/tags/Tracer.json"},{"name":"OpenTracing","slug":"OpenTracing","count":1,"path":"api/tags/OpenTracing.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#hservlet\"><span class=\"toc-text\">标准 Servlet 规范埋点原理</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#hdubbo\"><span class=\"toc-text\">Dubbo 埋点原理</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#hhttp\"><span class=\"toc-text\">http 客户端埋点原理</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#hdatasource\"><span class=\"toc-text\">Datasource 埋点原理</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#h\"><span class=\"toc-text\">消息埋点</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#hspringmessaging\"><span class=\"toc-text\">Spring Messaging 埋点实现原理</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#hrocketmq\"><span class=\"toc-text\">RocketMQ 埋点实现原理</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#hredis\"><span class=\"toc-text\">redis 埋点原理</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#h-1\"><span class=\"toc-text\">总结</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#h-2\"><span class=\"toc-text\">参考</span></a></li></ol>","author":{"name":"glmapper","slug":"blog-author","avatar":"https://glmapper-blog.oss-cn-hangzhou.aliyuncs.com/common/favicon.ico","link":"/","description":"开放，开源，分享，共享","socials":{"github":"https://github.com/glmapper","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/2412872703","zhihu":"","csdn":"","juejin":"https://juejin.cn/user/3227821827961806","customs":{"sofastack":{"icon":"https://glmapper-blog.oss-cn-hangzhou.aliyuncs.com/common/sofastack.svg","link":"https://www.sofastack.tech/"}}}},"mapped":true,"hidden":false,"prev_post":{"title":"SpringBoot 实践系列-Filter 中的异常处理和 Controller 中的异常处理","uid":"0df03a60d15d7b7ab424fe228bc8cf70","slug":"springboot/springboot-series-filter-exception","date":"2020-02-12T08:24:11.000Z","updated":"2024-07-05T04:09:05.829Z","comments":true,"path":"api/articles/springboot/springboot-series-filter-exception.json","keywords":null,"cover":null,"text":"本篇主要是记录如何使用 SpringBoot 所提供的 ErrorController 这个接口能力；其内置了一个 BasicErrorController 对...","permalink":"/post/springboot/springboot-series-filter-exception","photos":[],"count_time":{"symbolsCount":"4.6k","symbolsTime":"4 mins."},"categories":[{"name":"SpringBoot","slug":"SpringBoot","count":17,"path":"api/categories/SpringBoot.json"}],"tags":[{"name":"SpringBoot","slug":"SpringBoot","count":17,"path":"api/tags/SpringBoot.json"},{"name":"Exception","slug":"Exception","count":1,"path":"api/tags/Exception.json"}],"author":{"name":"glmapper","slug":"blog-author","avatar":"https://glmapper-blog.oss-cn-hangzhou.aliyuncs.com/common/favicon.ico","link":"/","description":"开放，开源，分享，共享","socials":{"github":"https://github.com/glmapper","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/2412872703","zhihu":"","csdn":"","juejin":"https://juejin.cn/user/3227821827961806","customs":{"sofastack":{"icon":"https://glmapper-blog.oss-cn-hangzhou.aliyuncs.com/common/sofastack.svg","link":"https://www.sofastack.tech/"}}}}},"next_post":{"title":"SpringBoot 源码系列-自动配置及 starter 机制解析","uid":"e42097f5a6c0cf4efef189a5728220a9","slug":"springboot/springboot-series-auto-configure","date":"2020-01-05T08:36:19.000Z","updated":"2024-07-05T04:09:05.827Z","comments":true,"path":"api/articles/springboot/springboot-series-auto-configure.json","keywords":null,"cover":null,"text":" 一家之言，如有任何错误，请批评指出，不胜感激 本篇主要来讨论研究两个问题：1、什么自动配置，2、如何编写自动配置 在使用 Spring 作为项目开发框架的过程...","permalink":"/post/springboot/springboot-series-auto-configure","photos":[],"count_time":{"symbolsCount":"8.1k","symbolsTime":"7 mins."},"categories":[{"name":"SpringBoot","slug":"SpringBoot","count":17,"path":"api/categories/SpringBoot.json"}],"tags":[{"name":"SpringBoot","slug":"SpringBoot","count":17,"path":"api/tags/SpringBoot.json"},{"name":"自动配置","slug":"自动配置","count":2,"path":"api/tags/自动配置.json"},{"name":"starter 机制","slug":"starter-机制","count":1,"path":"api/tags/starter-机制.json"}],"author":{"name":"glmapper","slug":"blog-author","avatar":"https://glmapper-blog.oss-cn-hangzhou.aliyuncs.com/common/favicon.ico","link":"/","description":"开放，开源，分享，共享","socials":{"github":"https://github.com/glmapper","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/2412872703","zhihu":"","csdn":"","juejin":"https://juejin.cn/user/3227821827961806","customs":{"sofastack":{"icon":"https://glmapper-blog.oss-cn-hangzhou.aliyuncs.com/common/sofastack.svg","link":"https://www.sofastack.tech/"}}}}}}