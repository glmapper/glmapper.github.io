{"title":"SOFATracer 中 Disruptor 实践","uid":"ef8677c434be29d2befc4ae95f7a33d3","slug":"sofa/sofa-tracer-disruptor","date":"2018-11-10T04:26:20.000Z","updated":"2024-07-05T04:09:05.802Z","comments":true,"path":"api/articles/sofa/sofa-tracer-disruptor.json","keywords":null,"cover":[],"content":"<h2 id=\"OpenTraceing-规范\"><a href=\"#OpenTraceing-规范\" class=\"headerlink\" title=\"OpenTraceing 规范\"></a>OpenTraceing 规范</h2><ul>\n<li><a href=\"https://github.com/opentracing-contrib/opentracing-specification-zh/blob/master/specification.md\">OpenTracing语义标准</a></li>\n<li><a href=\"https://github.com/opentracing-contrib/opentracing-specification-zh/blob/master/semantic_conventions.md\">语义惯例</a></li>\n<li><a href=\"http://opentracing.io/documentation/pages/spec\">官方文档</a></li>\n</ul>\n<span id=\"more\"></span>\n\n<h2 id=\"SOFATracer-对-OpenTraceing-的实现\"><a href=\"#SOFATracer-对-OpenTraceing-的实现\" class=\"headerlink\" title=\"SOFATracer 对 OpenTraceing 的实现\"></a>SOFATracer 对 OpenTraceing 的实现</h2><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>SOFATracer  就是根据 OpenTracing 规范 衍生出来的分布式 链路跟 踪的解决方案。</p></blockquote>\n<ul>\n<li><a href=\"https://github.com/alipay/sofa-tracer\">GitHub SOFATrcer</a></li>\n</ul>\n<h3 id=\"概念\"><a href=\"#概念\" class=\"headerlink\" title=\"概念\"></a>概念</h3><p><code>OpenTracing</code> 标准中有三个重要的相互关联的类型，分别是<code>Tracer</code>, <code>Span</code>和 <code>SpanContext</code>。</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>【下面的概念说明过程中，如不做说明，所使用的案例代码均以SOFATracer中的实现为例。】</p></blockquote>\n<h3 id=\"Tracer\"><a href=\"#Tracer\" class=\"headerlink\" title=\"Tracer\"></a>Tracer</h3><p>一个 <code>trace</code> 代表一个潜在的，分布式的，存在并行数据或并行执行轨迹（潜在的分布式、并行）的系统。一个<code>trace</code>可以认为是多个<code>span</code>的有向无环图（<code>DAG</code>）。</p>\n<p>Tracer接口用来创建Span，以及处理如何处理Inject(serialize) 和 Extract (deserialize)，用于跨进程边界传递。</p>\n<p><code>SOFATracer</code> 中 <code>SofaTracer </code>这个类实现了 <code>opentracing</code> 的 <code>Tracer</code> 接口，并在此规范接口上做了一些扩展。看下<code>Tracer</code> 中声明的方法：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">Tracer</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">//启动一个新的span</span></span><br><span class=\"line\">    SpanBuilder <span class=\"title function_\">buildSpan</span><span class=\"params\">(String operationName)</span>;</span><br><span class=\"line\">    <span class=\"comment\">//将SpanContext上下文Inject（注入）到carrier</span></span><br><span class=\"line\">    &lt;C&gt; <span class=\"keyword\">void</span> <span class=\"title function_\">inject</span><span class=\"params\">(SpanContext spanContext, Format&lt;C&gt; format, C carrier)</span>;</span><br><span class=\"line\">    <span class=\"comment\">//将SpanContext上下文从carrier中Extract（提取）</span></span><br><span class=\"line\">    &lt;C&gt; SpanContext <span class=\"title function_\">extract</span><span class=\"params\">(Format&lt;C&gt; format, C carrier)</span>;   </span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">interface</span> <span class=\"title class_\">SpanBuilder</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 省略</span></span><br><span class=\"line\">    &#125; </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>所以从接口定义来看，要实现一个Tracer，必须要实现其以下的几个能力：</p>\n<h4 id=\"启动一个新的span\"><a href=\"#启动一个新的span\" class=\"headerlink\" title=\"启动一个新的span\"></a>启动一个新的span</h4><p><code>SOFATracer</code> 实现了 <code>Tracer</code> 中 <code>buildSpan</code> 方法：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> SpanBuilder <span class=\"title function_\">buildSpan</span><span class=\"params\">(String operationName)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">SofaTracerSpanBuilder</span>(operationName);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><code>operationName</code> :操作名称，字符串类型，表示由Span完成的工作 (例如，RPC方法名称、函数名称或一个较大的计算任务中的阶段的名称)。操作名称应该用泛化的字符串形式标识出一个Span实例。</p>\n<p>何为泛化的字符串形式，比如现在有一个操作：获取用户 ；下面有几种标识方式：</p>\n<ul>\n<li>1、&#x2F;get</li>\n<li>2、&#x2F;get&#x2F;user</li>\n<li>3、&#x2F;get&#x2F;user&#x2F;123</li>\n</ul>\n<p>方式1过于抽象，方式3过于具体。方式2是正确的操作名。</p>\n<h4 id=\"将SpanContext上下文Inject（注入）到carrier\"><a href=\"#将SpanContext上下文Inject（注入）到carrier\" class=\"headerlink\" title=\"将SpanContext上下文Inject（注入）到carrier\"></a>将SpanContext上下文Inject（注入）到carrier</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> &lt;C&gt; <span class=\"keyword\">void</span> <span class=\"title function_\">inject</span><span class=\"params\">(SpanContext spanContext, Format&lt;C&gt; format, C carrier)</span> &#123;</span><br><span class=\"line\">    RegistryExtractorInjector&lt;C&gt; registryInjector = TracerFormatRegistry.getRegistry(format);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (registryInjector == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">IllegalArgumentException</span>(<span class=\"string\">&quot;Unsupported injector format: &quot;</span> + format);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    registryInjector.inject((SofaTracerSpanContext) spanContext, carrier);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><code>SpanContext</code> :实例</li>\n<li><code>format</code>（格式化）描述，一般会是一个字符串常量，但不做强制要求。通过此描述，通知Tracer实现，如何对SpanContext进行编码放入到carrier中。<br>carrier，根据format确定。Tracer实现根据format声明的格式，将SpanContext序列化到carrier对象中。</li>\n</ul>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>RegistryExtractorInjector 见后面</p></blockquote>\n<h4 id=\"将SpanContext上下文从carrier中Extract（提取）\"><a href=\"#将SpanContext上下文从carrier中Extract（提取）\" class=\"headerlink\" title=\"将SpanContext上下文从carrier中Extract（提取）\"></a>将SpanContext上下文从carrier中Extract（提取）</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> &lt;C&gt; SpanContext <span class=\"title function_\">extract</span><span class=\"params\">(Format&lt;C&gt; format, C carrier)</span> &#123;</span><br><span class=\"line\">    RegistryExtractorInjector&lt;C&gt; registryExtractor = TracerFormatRegistry.getRegistry(format);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (registryExtractor == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">IllegalArgumentException</span>(<span class=\"string\">&quot;Unsupported extractor format: &quot;</span> + format);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> registryExtractor.extract(carrier);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>格式描述符(<code>format descriptor</code>)(通常但不一定是字符串常量)，告诉<code>Tracer</code>的实现如何在载体对象中对<code>SpanContext</code>进行编码</li>\n<li>载体(<code>carrier</code>)，其类型由格式描述符指定<code>。Tracer</code>的实现将根据格式描述对此载体对象中的<code>SpanContext</code>进行编码</li>\n</ul>\n<p>返回一个<code>SpanContext</code>实例，可以使用这个<code>SpanContext</code>实例，通过<code>Tracer</code>创建新的<code>Span</code>。</p>\n<h4 id=\"Format\"><a href=\"#Format\" class=\"headerlink\" title=\"Format\"></a>Format</h4><p>从<code>Tracer</code>的注入和提取来看，<code>format</code>都是必须的。</p>\n<p><code>Inject</code>（注入）和<code>Extract</code>（提取）依赖于可扩展的<code>format</code>参数。<code>forma</code>t参数规定了另一个参数<code>&quot;carrier&quot;</code>的类型，同时约束了<code>&quot;carrier&quot;</code>中<code>SpanContext</code>是如何编码的。所有的<code>Tracer</code>实现，都必须支持下面的<code>format</code>。</p>\n<ul>\n<li><code>Text Map</code>: 基于字符串：字符串的<code>map</code>,对于<code>key</code>和<code>value</code>不约束字符集。</li>\n<li><code>HTTP Headers</code>: 适合作为<code>HTTP</code>头信息的，基于字符串：字符串的<code>map</code>。（<code>RFC 7230.</code>在工程实践中，如何处理<code>HTTP</code>头具有多样性，强烈建议<code>tracer</code>的使用者谨慎使用<code>HTTP</code>头的键值空间和转义符）</li>\n<li><code>Binary</code>: 一个简单的二进制大对象，记录<code>SpanContext</code>的信息。</li>\n</ul>\n<p>在上面的注入和提取代码中，有如下代码片段：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//注入</span></span><br><span class=\"line\">RegistryExtractorInjector&lt;C&gt; registryInjector  = </span><br><span class=\"line\">    TracerFormatRegistry.getRegistry(format);</span><br><span class=\"line\"><span class=\"comment\">//提取</span></span><br><span class=\"line\">RegistryExtractorInjector&lt;C&gt; registryExtractor = </span><br><span class=\"line\">    TracerFormatRegistry.getRegistry(format);</span><br></pre></td></tr></table></figure>\n\n<p>来通过<code>TracerFormatRegistry</code>这个类来来看下 <code>SOFATracer</code> 中的 <code>Format</code> 的具体实现。</p>\n<h4 id=\"X-B3\"><a href=\"#X-B3\" class=\"headerlink\" title=\"X-B3\"></a>X-B3</h4><p>在看<code>Format</code>之前，先了解下<code>X-B3</code>。</p>\n<figure class=\"highlight http\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">Access-Control-Expose-Headers</span><span class=\"punctuation\">: </span></span><br><span class=\"line\">X-B3-TraceId,X-B3-ParentSpanId,X-B3-SpanId</span><br></pre></td></tr></table></figure>\n\n<p><code>HTTP</code>请求时其<code>span</code>参数通过<code>http headers</code>来传递追踪信息；<code>header</code>中对应的<code>key</code>分别是:</p>\n<ul>\n<li>X-B3-TraceId: 64 encoded bits（id被encode为hex Strings）</li>\n<li>X-B3-SpanId : 64 encoded bits</li>\n<li>X-B3-ParentSpanId: 64 encoded bits</li>\n<li>X-B3-Sampled:(是否采样) Boolean (either “1” or “0”)（下面的调用是否进行采样）</li>\n<li>X-B3-Flags:a Long</li>\n</ul>\n<h4 id=\"SOFATracer-中的-Format\"><a href=\"#SOFATracer-中的-Format\" class=\"headerlink\" title=\"SOFATracer 中的 Format\"></a>SOFATracer 中的 Format</h4><p>具体代码在 <code>tracer-core -&gt; com.alipay.common.tracer.core.registy</code> 包下:</p>\n<ul>\n<li>TextMapFormatter</li>\n<li>TextMapB3Formatter</li>\n<li>HttpHeadersFormatter</li>\n<li>HttpHeadersB3Formatter</li>\n<li>BinaryFormater</li>\n</ul>\n<p><strong>BinaryFormater</strong>：这个的注入和提取实现没有编解码一说；本身就是基于二进制流的操作。</p>\n<p><strong>TextMapB3Formatter&#x2F;TextMapFormatter</strong> 和 <strong>HttpHeadersB3Formatter&#x2F;HttpHeadersFormatter</strong> 区别就在于编解码不同。<code>HttpHeadersB3Formatter</code>使用的是 <code>URLDecoder.decode</code> &amp;&amp; <code>URLDecoder.encode</code> ; <code>TextMapB3Formatter</code> 返回的是值本身（如果为空或者<code>null</code>则返回空字符串）。</p>\n<p><strong>TextMapFormatter</strong>和<strong>TextMapB3Formatter</strong>区别在于注入或者提取是使用的<code>key</code>不用。<code>TextMapB3Formatter</code>中使用的是 <code>x-b3-&#123;&#125;</code> 的字符串作为<code>key</code>。</p>\n<h3 id=\"Span\"><a href=\"#Span\" class=\"headerlink\" title=\"Span\"></a>Span</h3><p>一个<code>span</code>代表系统中具有开始时间和执行时长的逻辑运行单元。<code>span</code>之间通过嵌套或者顺序排列建立逻辑因果关系。当<code>Span</code>结束后(<code>span.finish()</code>)，除了通过<code>Span</code>获取<code>SpanContext</code>外，下列其他所有方法都不允许被调用。</p>\n<p>同样先来看下<code>opentracing</code>规范<code> api</code> 定义的 <code>span</code> 的定义及方法：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">Span</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">Closeable</span> &#123;</span><br><span class=\"line\">    SpanContext <span class=\"title function_\">context</span><span class=\"params\">()</span>;</span><br><span class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title function_\">finish</span><span class=\"params\">()</span>;</span><br><span class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title function_\">finish</span><span class=\"params\">(<span class=\"type\">long</span> finishMicros)</span>;</span><br><span class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title function_\">close</span><span class=\"params\">()</span>;</span><br><span class=\"line\">    Span <span class=\"title function_\">setTag</span><span class=\"params\">(String key, String value)</span>;</span><br><span class=\"line\">    Span <span class=\"title function_\">setTag</span><span class=\"params\">(String key, <span class=\"type\">boolean</span> value)</span>;</span><br><span class=\"line\">    Span <span class=\"title function_\">setTag</span><span class=\"params\">(String key, Number value)</span>;</span><br><span class=\"line\">    Span <span class=\"title function_\">log</span><span class=\"params\">(Map&lt;String, ?&gt; fields)</span>;</span><br><span class=\"line\">    Span <span class=\"title function_\">log</span><span class=\"params\">(<span class=\"type\">long</span> timestampMicroseconds, Map&lt;String, ?&gt; fields)</span>;</span><br><span class=\"line\">    Span <span class=\"title function_\">log</span><span class=\"params\">(String event)</span>;</span><br><span class=\"line\">    Span <span class=\"title function_\">log</span><span class=\"params\">(<span class=\"type\">long</span> timestampMicroseconds, String event)</span>;</span><br><span class=\"line\">    Span <span class=\"title function_\">setBaggageItem</span><span class=\"params\">(String key, String value)</span>;</span><br><span class=\"line\">    String <span class=\"title function_\">getBaggageItem</span><span class=\"params\">(String key)</span>;</span><br><span class=\"line\">    Span <span class=\"title function_\">setOperationName</span><span class=\"params\">(String operationName)</span>;</span><br><span class=\"line\">    Span <span class=\"title function_\">log</span><span class=\"params\">(String eventName, <span class=\"comment\">/* @Nullable */</span> Object payload)</span>;</span><br><span class=\"line\">    Span <span class=\"title function_\">log</span><span class=\"params\">(<span class=\"type\">long</span> timestampMicroseconds, String eventName, <span class=\"comment\">/* @Nullable */</span> Object payload)</span>;</span><br><span class=\"line\">&#125; </span><br></pre></td></tr></table></figure>\n\n<h4 id=\"通过Span获取SpanContext\"><a href=\"#通过Span获取SpanContext\" class=\"headerlink\" title=\"通过Span获取SpanContext\"></a>通过Span获取SpanContext</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//SOFATracerSpan</span></span><br><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> SpanContext <span class=\"title function_\">context</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">this</span>.sofaTracerSpanContext;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>返回值，<code>Span</code>构建时传入的<code>SpanContext</code>。这个返回值在<code>Span</code>结束后(<code>span.finish()</code>)，依然可以使用。</p>\n<h4 id=\"复写操作名\"><a href=\"#复写操作名\" class=\"headerlink\" title=\"复写操作名\"></a>复写操作名</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> Span <span class=\"title function_\">setOperationName</span><span class=\"params\">(String operationName)</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.operationName = operationName;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">this</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>operationName</strong>:新的操作名，覆盖构建<code>Span</code>时，传入的操作名。</p>\n<h4 id=\"结束Span\"><a href=\"#结束Span\" class=\"headerlink\" title=\"结束Span\"></a>结束Span</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">finish</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.finish(System.currentTimeMillis());</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">finish</span><span class=\"params\">(<span class=\"type\">long</span> endTime)</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.setEndTime(endTime);</span><br><span class=\"line\">    <span class=\"comment\">//关键记录:report span</span></span><br><span class=\"line\">    <span class=\"built_in\">this</span>.sofaTracer.reportSpan(<span class=\"built_in\">this</span>);</span><br><span class=\"line\">    SpanExtensionFactory.logStoppedSpan(<span class=\"built_in\">this</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>有一个可选参数，如果指定完成时间则使用当前指定的时间；如果省略此参数，使用当前时间作为完成时间。<code>finish</code>方法中会将当前<code>span</code>进行<code>report</code>操作。</p>\n<h4 id=\"为Span设置tag\"><a href=\"#为Span设置tag\" class=\"headerlink\" title=\"为Span设置tag\"></a>为Span设置tag</h4><p><code>Tag </code>是一个<code>key:value</code>格式的数据。<code>key</code>必须是<code>String</code>类型，<code>value</code>可以是<strong>字符串、布尔或者数字</strong>。</p>\n<ul>\n<li>字符串类型的value 设置tag</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> Span <span class=\"title function_\">setTag</span><span class=\"params\">(String key, String value)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (StringUtils.isBlank(key) || StringUtils.isBlank(value)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">this</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.tagsWithStr.put(key, value);</span><br><span class=\"line\">    <span class=\"comment\">//注意:server 还是 client 在 OpenTracing 标准中是用 tags 标识的,所以在这里进行判断</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (isServer()) &#123;</span><br><span class=\"line\">        <span class=\"type\">Reporter</span> <span class=\"variable\">serverReporter</span> <span class=\"operator\">=</span> <span class=\"built_in\">this</span>.sofaTracer.getServerReporter();</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (serverReporter != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">this</span>.setLogType(serverReporter.getReporterType());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (isClient()) &#123;</span><br><span class=\"line\">        <span class=\"type\">Reporter</span> <span class=\"variable\">clientReporter</span> <span class=\"operator\">=</span> <span class=\"built_in\">this</span>.sofaTracer.getClientReporter();</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (clientReporter != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">this</span>.setLogType(clientReporter.getReporterType());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">this</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>布尔类型的value 设置tag</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> Span <span class=\"title function_\">setTag</span><span class=\"params\">(String key, <span class=\"type\">boolean</span> value)</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.tagsWithBool.put(key, value);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">this</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>数字类型的value 设置tag</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> Span <span class=\"title function_\">setTag</span><span class=\"params\">(String key, Number number)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (number == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">this</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.tagsWithNumber.put(key, number);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">this</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Log结构化数据\"><a href=\"#Log结构化数据\" class=\"headerlink\" title=\"Log结构化数据\"></a>Log结构化数据</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> Span <span class=\"title function_\">log</span><span class=\"params\">(<span class=\"type\">long</span> currentTime, Map&lt;String, ?&gt; map)</span> &#123;</span><br><span class=\"line\">    AssertUtils.isTrue(currentTime &gt;= startTime, <span class=\"string\">&quot;current time must greater than start time&quot;</span>);</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.logs.add(<span class=\"keyword\">new</span> <span class=\"title class_\">LogData</span>(currentTime, map));</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">this</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> Span <span class=\"title function_\">log</span><span class=\"params\">(Map&lt;String, ?&gt; map)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">this</span>.log(System.currentTimeMillis(), map);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><strong>Map&lt;String, ?&gt; map</strong> : 键必须是字符串类型，值可以是任意类型</li>\n<li><strong>currentTime</strong> : 时间戳。如果指定时间戳，那么它必须在<code>span</code>的开始和结束时间之内。</li>\n</ul>\n<h4 id=\"设置一个baggage（随行数据）元素\"><a href=\"#设置一个baggage（随行数据）元素\" class=\"headerlink\" title=\"设置一个baggage（随行数据）元素\"></a>设置一个baggage（随行数据）元素</h4><p><code>Baggage</code>元素是一个键值对集合，将这些值设置给给定的<code>Span</code>，<code>Span</code>的<code>SpanContext</code>，以及所有和此<code>Span</code>有直接或者间接关系的本地<code>Span</code>。 也就是说，<code>baggage</code>元素随<code>trace</code>一起保持在带内传递。（译者注：带内传递，在这里指，随应用程序调用过程一起传递）</p>\n<p><code>Baggage</code>元素为<code>OpenTracing</code>的实现全栈集成，提供了强大的功能 （例如：任意的应用程序数据，可以在移动端创建它，显然的，它会一直传递了系统最底层的存储系统。由于它如此强大的功能，他也会产生巨大的开销，请小心使用此特性。</p>\n<p>再次强调，请谨慎使用此特性。每一个键值都会被拷贝到每一个本地和远程的下级相关的<code>span</code>中，因此，总体上，他会有明显的网络和<code>CPU</code>开销。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> Span <span class=\"title function_\">setBaggageItem</span><span class=\"params\">(String key, String value)</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.sofaTracerSpanContext.setBizBaggageItem(key, value);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">this</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"SofaTracerSpan-中的属性\"><a href=\"#SofaTracerSpan-中的属性\" class=\"headerlink\" title=\"SofaTracerSpan 中的属性\"></a>SofaTracerSpan 中的属性</h4><ul>\n<li>sofaTracer  : 当前 tracer</li>\n<li>spanReferences : 当前span的关系，ChildOf(引用) or FollowsFrom（跟随）</li>\n<li>tagsWithStr : String 类型的tag 集合</li>\n<li>tagsWithBool : 布尔类型的tag集合</li>\n<li>tagsWithNumber : 数值类型的tag集合</li>\n<li>logs : log结构化数据列表，通过span.log（map）操作的map,均存储在logs中。</li>\n<li>operationName：当前span的操作名</li>\n<li>sofaTracerSpanContext：当前 spanContext</li>\n<li>startTime : 当前span 开始时间</li>\n<li>endTime  : 当前span 结束时间，在finish方法中传入。</li>\n<li>logType : report时才有意义:摘要日志类型,日志能够正确打印的关键信息；当前 span 的日志类型,如:客户端为 rpc-client-digest.log,服务端为 rpc-server-digest.log</li>\n<li>parentSofaTracerSpan：父亲 span,当作为客户端结束并弹出线程上下文时,需要将父亲 span 再放入</li>\n</ul>\n<h4 id=\"SpanContext\"><a href=\"#SpanContext\" class=\"headerlink\" title=\"SpanContext\"></a>SpanContext</h4><p><code>opentracing</code> 中 <code>SpanContext</code> 接口中只有一个<code>baggageItems</code>方法，通过这个方法来遍历所有的<code>baggage</code>元素。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">SpanContext</span> &#123;</span><br><span class=\"line\">    Iterable&lt;Map.Entry&lt;String, String&gt;&gt; baggageItems();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>相对于<code>OpenTracing</code>中其他的功能，<code>SpanContext</code>更多的是一个“概念”。也就是说，<code>OpenTracing</code>实现中，需要重点考虑，并提供一套自己的<code>API</code>。</p>\n<p><code>OpenTracing</code>的使用者仅仅需要，在创建<code>span</code>、向传输协议<code>Inject</code>（注入）和从传输协议中<code>Extract</code>（提取）时，使用<code>SpanContext</code>和<code>references</code>，</p>\n<p><code>OpenTracing</code>要求，<code>SpanContext</code>是不可变的，目的是防止由于<code>Span</code>的结束和相互关系，造成的复杂生命周期问题。</p>\n<h2 id=\"Disruptor-简介\"><a href=\"#Disruptor-简介\" class=\"headerlink\" title=\"Disruptor 简介\"></a>Disruptor 简介</h2><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>A High Performance Inter-Thread Messaging Library 高性能的线程间消息传递库</p></blockquote>\n<p>关于 Disruptor 的 一些原理分析可以参考：<a href=\"https://ifeve.com/disruptor/\">disruptor</a></p>\n<h2 id=\"案例\"><a href=\"#案例\" class=\"headerlink\" title=\"案例\"></a>案例</h2><p>先通过 <code>Disruptor</code> 的一个小例子来有个直观的认识；先看下它的构造函数：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"title function_\">Disruptor</span><span class=\"params\">(</span></span><br><span class=\"line\"><span class=\"params\">        <span class=\"keyword\">final</span> EventFactory&lt;T&gt; eventFactory,</span></span><br><span class=\"line\"><span class=\"params\">        <span class=\"keyword\">final</span> <span class=\"type\">int</span> ringBufferSize,</span></span><br><span class=\"line\"><span class=\"params\">        <span class=\"keyword\">final</span> ThreadFactory threadFactory,</span></span><br><span class=\"line\"><span class=\"params\">        <span class=\"keyword\">final</span> ProducerType producerType,</span></span><br><span class=\"line\"><span class=\"params\">        <span class=\"keyword\">final</span> WaitStrategy waitStrategy)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>(</span><br><span class=\"line\">        RingBuffer.create(producerType, eventFactory, ringBufferSize, waitStrategy),</span><br><span class=\"line\">        <span class=\"keyword\">new</span> <span class=\"title class_\">BasicExecutor</span>(threadFactory));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>eventFactory : 在环形缓冲区中创建事件的 <code>factory</code></li>\n<li>ringBufferSize:环形缓冲区的大小，必须是2的幂。</li>\n<li>threadFactory：用于为处理器创建线程。</li>\n<li>producerType：生成器类型以支持使用正确的<code>sequencer</code>和<code>publisher</code>创建<code>RingBuffer</code>；枚举类型，<code>SINGLE</code>、<code>MULTI</code>两个项。对应于 <code>SingleProducerSequencer</code>和<code>MultiProducerSequencer</code>两种<code>Sequencer</code>。</li>\n<li>waitStrategy : 等待策略；</li>\n</ul>\n<p>如果我们想构造一个<code>disruptor</code>,那么我们就需要上面的这些组件。从<code>eventFactory</code>来看，还需要一个具体的<code>Event</code>来作为消息事件的载体。【下面按照官方给的案例进行简单的修改作为示例】</p>\n<h3 id=\"消息事件-LongEvent-，能够被消费的数据载体\"><a href=\"#消息事件-LongEvent-，能够被消费的数据载体\" class=\"headerlink\" title=\"消息事件 LongEvent ，能够被消费的数据载体\"></a>消息事件 LongEvent ，能够被消费的数据载体</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">LongEvent</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"type\">long</span> value;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">set</span><span class=\"params\">(<span class=\"type\">long</span> value)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.value = value;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">long</span> <span class=\"title function_\">getValue</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> value;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"创建消息事件的factory\"><a href=\"#创建消息事件的factory\" class=\"headerlink\" title=\"创建消息事件的factory\"></a>创建消息事件的factory</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">LongEventFactory</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">EventFactory</span>&lt;LongEvent&gt; &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> LongEvent <span class=\"title function_\">newInstance</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">LongEvent</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"ConsumerThreadFactory\"><a href=\"#ConsumerThreadFactory\" class=\"headerlink\" title=\"ConsumerThreadFactory\"></a>ConsumerThreadFactory</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ConsumerThreadFactory</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">ThreadFactory</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"type\">AtomicInteger</span> <span class=\"variable\">index</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">AtomicInteger</span>(<span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Thread <span class=\"title function_\">newThread</span><span class=\"params\">(Runnable r)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(r, <span class=\"string\">&quot;disruptor-thread-&quot;</span> + index.getAndIncrement());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>OK ，上面的这些可以满足创建一个<code>disruptor</code>了：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"type\">int</span> <span class=\"variable\">ringBufferCapacity</span> <span class=\"operator\">=</span> <span class=\"number\">8</span>;</span><br><span class=\"line\"><span class=\"comment\">//消息事件生产Factory</span></span><br><span class=\"line\"><span class=\"type\">LongEventFactory</span> <span class=\"variable\">longEventFactory</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">LongEventFactory</span>();</span><br><span class=\"line\"><span class=\"comment\">//执行事件处理器线程Factory</span></span><br><span class=\"line\"><span class=\"type\">ConsumerThreadFactory</span> <span class=\"variable\">consumerThreadFactory</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ConsumerThreadFactory</span>();</span><br><span class=\"line\"><span class=\"comment\">//用于环形缓冲区的等待策略。</span></span><br><span class=\"line\"><span class=\"type\">WaitStrategy</span> <span class=\"variable\">waitStrategy</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">BlockingWaitStrategy</span>();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//构建disruptor</span></span><br><span class=\"line\">Disruptor&lt;LongEvent&gt; disruptor = <span class=\"keyword\">new</span> <span class=\"title class_\">Disruptor</span>&lt;&gt;(</span><br><span class=\"line\">    longEventFactory,</span><br><span class=\"line\">    ringBufferCapacity,</span><br><span class=\"line\">    longEventThreadFactory,</span><br><span class=\"line\">    ProducerType.SINGLE,</span><br><span class=\"line\">    waitStrategy);</span><br></pre></td></tr></table></figure>\n\n<p>现在是已经有了 <code>disruptor</code> 了，然后通过：<code>start</code> 来启动：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//启动 disruptor</span></span><br><span class=\"line\"> disruptor.start();</span><br></pre></td></tr></table></figure>\n\n<p>到这里，已经构建了一个<code>disruptor</code>；但是目前怎么使用它来发布消息和消费消息呢？</p>\n<h3 id=\"发布消息\"><a href=\"#发布消息\" class=\"headerlink\" title=\"发布消息\"></a>发布消息</h3><p>下面在 <code>for</code> 循环中 发布 5 条数据：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">RingBuffer&lt;LongEvent&gt; ringBuffer = disruptor.getRingBuffer();</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"type\">long</span> <span class=\"variable\">l</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; l &lt; <span class=\"number\">5</span>; l++)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"type\">long</span> <span class=\"variable\">sequence</span> <span class=\"operator\">=</span> ringBuffer.next();</span><br><span class=\"line\">    <span class=\"type\">LongEvent</span> <span class=\"variable\">event</span> <span class=\"operator\">=</span> ringBuffer.get(sequence);</span><br><span class=\"line\">    event.set(<span class=\"number\">100</span>+l);</span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;publish event :&quot;</span> + l);</span><br><span class=\"line\">    ringBuffer.publish(sequence);</span><br><span class=\"line\">    Thread.sleep(<span class=\"number\">1000</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>消息已经发布，下面需要设定当前<code>disruptor</code>的消费处理器。前面已经有个<code>LongEvent</code> 和 <code>EventFactory</code> ; 在<code>disruptor</code>中是通过 <code>EventHandler</code> 来进行消息消费的。</p>\n<h3 id=\"编写消费者代码\"><a href=\"#编写消费者代码\" class=\"headerlink\" title=\"编写消费者代码\"></a>编写消费者代码</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">LongEventHandler</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">EventHandler</span>&lt;LongEvent&gt; &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">onEvent</span><span class=\"params\">(LongEvent event, <span class=\"type\">long</span> sequence, <span class=\"type\">boolean</span> endOfBatch)</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;Event: &quot;</span> + event.getValue()+<span class=\"string\">&quot; -&gt; &quot;</span> + Thread.currentThread().getName());</span><br><span class=\"line\">        Thread.sleep(<span class=\"number\">2000</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>将 <code>eventHandler</code> 设置到 <code>disruptor</code> 的处理链上</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//将处理事件的事件处理程序 -&gt; 消费事件的处理程序</span></span><br><span class=\"line\"><span class=\"type\">LongEventHandler</span> <span class=\"variable\">longEventHandler</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">LongEventHandler</span>();</span><br><span class=\"line\">disruptor.handleEventsWith(longEventHandler);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"运行结果（这里）：\"><a href=\"#运行结果（这里）：\" class=\"headerlink\" title=\"运行结果（这里）：\"></a>运行结果（这里）：</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">publish event :0</span><br><span class=\"line\">Event: 0 -&gt; disruptor-thread-1</span><br><span class=\"line\">--------------------------------&gt;</span><br><span class=\"line\">publish event :1</span><br><span class=\"line\">Event: 1 -&gt; disruptor-thread-1</span><br><span class=\"line\">--------------------------------&gt;</span><br><span class=\"line\">publish event :2</span><br><span class=\"line\">Event: 2 -&gt; disruptor-thread-1</span><br><span class=\"line\">--------------------------------&gt;</span><br><span class=\"line\">publish event :3</span><br><span class=\"line\">Event: 3 -&gt; disruptor-thread-1</span><br><span class=\"line\">--------------------------------&gt;</span><br><span class=\"line\">publish event :4</span><br><span class=\"line\">Event: 4 -&gt; disruptor-thread-1</span><br><span class=\"line\">--------------------------------&gt;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"基本概念和原理\"><a href=\"#基本概念和原理\" class=\"headerlink\" title=\"基本概念和原理\"></a>基本概念和原理</h2><h3 id=\"Disruptor\"><a href=\"#Disruptor\" class=\"headerlink\" title=\"Disruptor\"></a>Disruptor</h3><p>整个基于<code>ringBuffer</code>实现的生产者消费者模式的容器。主要属性</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">final</span> RingBuffer&lt;T&gt; ringBuffer;</span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">final</span> Executor executor;</span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">final</span> ConsumerRepository&lt;T&gt; consumerRepository = <span class=\"keyword\">new</span> <span class=\"title class_\">ConsumerRepository</span>&lt;&gt;();</span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"type\">AtomicBoolean</span> <span class=\"variable\">started</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">AtomicBoolean</span>(<span class=\"literal\">false</span>);</span><br><span class=\"line\"><span class=\"keyword\">private</span> ExceptionHandler&lt;? <span class=\"built_in\">super</span> T&gt; exceptionHandler = <span class=\"keyword\">new</span> <span class=\"title class_\">ExceptionHandlerWrapper</span>&lt;&gt;();</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><code>ringBuffer</code>：内部持有一个 <code>RingBuffer</code> 对象，<code>Disruptor</code> 内部的事件发布都是依赖这个<code>RingBuffer</code>对象完成的。</li>\n<li><code>executor</code>：消费事件的线程池</li>\n<li><code>consumerRepository</code>：提供存储库机制，用于将<code>EventHandler</code>与<code>EventProcessor</code>关联起来</li>\n<li><code>started</code> : 用于标志当前<code>Disruptor</code>是否已经启动</li>\n<li><code>exceptionHandler</code> : 异常处理器，用于处理<code>BatchEventProcessor</code>事件周期中 <code>uncaught exceptions</code> 。</li>\n</ul>\n<h3 id=\"RingBuffer\"><a href=\"#RingBuffer\" class=\"headerlink\" title=\"RingBuffer\"></a>RingBuffer</h3><p>环形队列[实现上是一个数组]，可以类比为<code>BlockingQueue</code>之类的队列，<code>ringBuffer</code>的使用，使得内存被循环使用，减少了某些场景的内存分配回收扩容等耗时操作。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">class</span> <span class=\"title class_\">RingBuffer</span>&lt;E&gt; <span class=\"keyword\">extends</span> <span class=\"title class_\">RingBufferFields</span>&lt;E&gt; </span><br><span class=\"line\"><span class=\"keyword\">implements</span> <span class=\"title class_\">Cursored</span>, EventSequencer&lt;E&gt;, EventSink&lt;E&gt; </span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>E：在事件的交换或并行协调期间存储用于共享的数据的实现 -&gt; 消息事件</li>\n</ul>\n<h3 id=\"Sequencer\"><a href=\"#Sequencer\" class=\"headerlink\" title=\"Sequencer\"></a>Sequencer</h3><p> <code>RingBuffer</code> 中 生产者的顶级父接口，其直接实现有<code>SingleProducerSequencer</code>和<code>MultiProducerSequencer</code>；对应 <code>SINGLE</code>、<code>MULTI</code> 两个枚举值。</p>\n<p><img src=\"https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2018/8/4/16504080427c32c5~tplv-t2oaga2asx-image.image\"></p>\n<h3 id=\"EventHandler\"><a href=\"#EventHandler\" class=\"headerlink\" title=\"EventHandler\"></a>EventHandler</h3><p>事件处置器，改接口用于对外扩展来实现具体的消费逻辑。如上面 <code>demo</code> 中的 <code>LongEventHandler</code> ;</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//回调接口，用于处理&#123;@link RingBuffer&#125;中可用的事件</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">EventHandler</span>&lt;T&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title function_\">onEvent</span><span class=\"params\">(T event, <span class=\"type\">long</span> sequence, <span class=\"type\">boolean</span> endOfBatch)</span> <span class=\"keyword\">throws</span> Exception;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><code>event</code> : <code>RingBuffer</code> 已经发布的事件</li>\n<li><code>sequence</code> : 正在处理的事件 的序列号</li>\n<li><code>endOfBatch</code> : 用来标识否是来自 <code>RingBuffer</code> 的批次中的最后一个事件</li>\n</ul>\n<h3 id=\"SequenceBarrier\"><a href=\"#SequenceBarrier\" class=\"headerlink\" title=\"SequenceBarrier\"></a>SequenceBarrier</h3><p>消费者路障。规定了消费者如何向下走。事实上，该路障算是变向的锁。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">final</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ProcessingSequenceBarrier</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">SequenceBarrier</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">//当等待（探测）的需要不可用时，等待的策略</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> WaitStrategy waitStrategy;</span><br><span class=\"line\">    <span class=\"comment\">//依赖的其它Consumer的序号，这个用于依赖的消费的情况，</span></span><br><span class=\"line\">    <span class=\"comment\">//比如A、B两个消费者，只有A消费完，B才能消费。</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> Sequence     dependentSequence;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">volatile</span> <span class=\"type\">boolean</span>   <span class=\"variable\">alerted</span> <span class=\"operator\">=</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    <span class=\"comment\">//Ringbuffer的写入指针</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> Sequence     cursorSequence;</span><br><span class=\"line\">    <span class=\"comment\">//RingBuffer对应的Sequencer</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> Sequencer    sequencer;</span><br><span class=\"line\">    <span class=\"comment\">//exclude method</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><code>waitStrategy</code> 决定了消费者采用何种等待策略。</p>\n<h3 id=\"WaitStrategy\"><a href=\"#WaitStrategy\" class=\"headerlink\" title=\"WaitStrategy\"></a>WaitStrategy</h3><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>Strategy employed for making {@link EventProcessor}s wait on a cursor {@link Sequence}.</p></blockquote>\n<p><code>EventProcessor</code> 的等待策略；具体实现在 <code>disruptor</code> 中有8种，</p>\n<p><img src=\"https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2018/8/4/165040897c8cd0fd~tplv-t2oaga2asx-image.image\"></p>\n<p>这些等待策略不同的核心体现是在如何实现 <code>waitFor</code> 这个方法上。</p>\n<h3 id=\"EventProcessor\"><a href=\"#EventProcessor\" class=\"headerlink\" title=\"EventProcessor\"></a>EventProcessor</h3><p>事件处理器，实际上可以理解为消费者模型的框架，实现了线程<code>Runnable</code>的<code>run</code>方法，将循环判断等操作封在了里面。该接口有三个实现类:</p>\n<p><strong>1、BatchEventProcessor</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">class</span> <span class=\"title class_\">BatchEventProcessor</span>&lt;T&gt; <span class=\"keyword\">implements</span> <span class=\"title class_\">EventProcessor</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"type\">AtomicBoolean</span>           <span class=\"variable\">running</span>          <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">AtomicBoolean</span>(<span class=\"literal\">false</span>);</span><br><span class=\"line\">    <span class=\"keyword\">private</span> ExceptionHandler&lt;? <span class=\"built_in\">super</span> T&gt;   exceptionHandler = <span class=\"keyword\">new</span> <span class=\"title class_\">FatalExceptionHandler</span>();</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> DataProvider&lt;T&gt;         dataProvider;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> SequenceBarrier         sequenceBarrier;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> EventHandler&lt;? <span class=\"built_in\">super</span> T&gt; eventHandler;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"type\">Sequence</span>                <span class=\"variable\">sequence</span>         <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Sequence</span>(                                      Sequencer.INITIAL_CURSOR_VALUE);</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> TimeoutHandler          timeoutHandler;</span><br><span class=\"line\">    <span class=\"comment\">//exclude method</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>ExceptionHandler：异常处理器</li>\n<li>DataProvider：数据来源，对应 <code>RingBuffer</code></li>\n<li>EventHandler：处理 <code>Event</code> 的回调对象</li>\n<li>SequenceBarrier：对应的序号屏障</li>\n<li>TimeoutHandler：超时处理器，默认情况为空，如果要设置，只需要要将关联的<code>EventHandler</code>实现<code>TimeOutHandler</code>即可。</li>\n</ul>\n<p>如果我们选择使用 <code>EventHandler</code> 的时候，默认使用的就是 <code>BatchEventProcessor</code>，它与<code>EventHandler</code>是一一对应，并且是单线程执行。</p>\n<p>如果某个<code>RingBuffer</code>有多个<code>BatchEventProcessor</code>，那么就会每个<code>BatchEventProcessor</code>对应一个线程。</p>\n<p><strong>2、WorkProcessor</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">class</span> <span class=\"title class_\">WorkProcessor</span>&lt;T&gt; <span class=\"keyword\">implements</span> <span class=\"title class_\">EventProcessor</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"type\">AtomicBoolean</span> <span class=\"variable\">running</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">AtomicBoolean</span>(<span class=\"literal\">false</span>);</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"type\">Sequence</span> <span class=\"variable\">sequence</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Sequence</span>(Sequencer.INITIAL_CURSOR_VALUE);</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> RingBuffer&lt;T&gt; ringBuffer;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> SequenceBarrier  sequenceBarrier;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> WorkHandler&lt;? <span class=\"built_in\">super</span> T&gt; workHandler;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> ExceptionHandler&lt;? <span class=\"built_in\">super</span> T&gt; exceptionHandler;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> Sequence workSequence;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"type\">EventReleaser</span> <span class=\"variable\">eventReleaser</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">EventReleaser</span>() &#123;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">release</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">                sequence.set(Long.MAX_VALUE);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> TimeoutHandler timeoutHandler;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>基本和 <code>BatchEventProcessor</code> 类似，不同在于，用于处理<code>Event</code>的回调对象是<code>WorkHandler</code>。</p>\n<h3 id=\"原理图\"><a href=\"#原理图\" class=\"headerlink\" title=\"原理图\"></a>原理图</h3><p><img src=\"https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2018/8/4/165040ee8a2eae73~tplv-t2oaga2asx-image.image\"></p>\n<h2 id=\"无消费者情况下，生产者保持生产，但是-remainingCapacity-保持不变\"><a href=\"#无消费者情况下，生产者保持生产，但是-remainingCapacity-保持不变\" class=\"headerlink\" title=\"无消费者情况下，生产者保持生产，但是 remainingCapacity 保持不变\"></a>无消费者情况下，生产者保持生产，但是 <code>remainingCapacity</code> 保持不变</h2><p>在写<code>demo</code>的过程中，本来想通过不设定 消费者 来观察 <code>RingBuffer</code> 可用容量变化的。但是验证过程中，一直得不到预期的结果，(注：没有设置消费者，只有生产者)，先看结果：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">publish event :0</span><br><span class=\"line\">bufferSie:8</span><br><span class=\"line\">remainingCapacity:8</span><br><span class=\"line\">cursor:0</span><br><span class=\"line\">--------------------------------&gt;</span><br><span class=\"line\">publish event :1</span><br><span class=\"line\">bufferSie:8</span><br><span class=\"line\">remainingCapacity:8</span><br><span class=\"line\">cursor:1</span><br><span class=\"line\">--------------------------------&gt;</span><br><span class=\"line\">publish event :2</span><br><span class=\"line\">bufferSie:8</span><br><span class=\"line\">remainingCapacity:8</span><br><span class=\"line\">cursor:2</span><br><span class=\"line\">--------------------------------&gt;</span><br><span class=\"line\">publish event :3</span><br><span class=\"line\">bufferSie:8</span><br><span class=\"line\">remainingCapacity:8</span><br><span class=\"line\">cursor:3</span><br><span class=\"line\">--------------------------------&gt;</span><br><span class=\"line\">publish event :4</span><br><span class=\"line\">bufferSie:8</span><br><span class=\"line\">remainingCapacity:8</span><br><span class=\"line\">cursor:4</span><br><span class=\"line\">--------------------------------&gt;</span><br><span class=\"line\">publish event :5</span><br><span class=\"line\">bufferSie:8</span><br><span class=\"line\">remainingCapacity:8</span><br><span class=\"line\">cursor:5</span><br><span class=\"line\">--------------------------------&gt;</span><br><span class=\"line\">publish event :6</span><br><span class=\"line\">bufferSie:8</span><br><span class=\"line\">remainingCapacity:8</span><br><span class=\"line\">cursor:6</span><br><span class=\"line\">--------------------------------&gt;</span><br><span class=\"line\">publish event :7</span><br><span class=\"line\">bufferSie:8</span><br><span class=\"line\">remainingCapacity:8</span><br><span class=\"line\">cursor:7</span><br><span class=\"line\">--------------------------------&gt;</span><br><span class=\"line\">publish event :8</span><br><span class=\"line\">bufferSie:8</span><br><span class=\"line\">remainingCapacity:8</span><br><span class=\"line\">cursor:8</span><br><span class=\"line\">--------------------------------&gt;</span><br><span class=\"line\">publish event :9</span><br><span class=\"line\">bufferSie:8</span><br><span class=\"line\">remainingCapacity:8</span><br><span class=\"line\">cursor:9</span><br><span class=\"line\">--------------------------------&gt;</span><br></pre></td></tr></table></figure>\n\n<p>从结果来看，<code>remainingCapacity</code> 的值应该随着 发布的数量 递减的；但是实际上它并没有发生任何变化。</p>\n<p>来看下<code>ringBuffer.remainingCapacity()</code> 这个方法：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Get the remaining capacity for this ringBuffer.</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> The number of slots remaining.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"type\">long</span> <span class=\"title function_\">remainingCapacity</span><span class=\"params\">()</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> sequencer.remainingCapacity();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这里面又使用 <code>sequencer.remainingCapacity()</code>这个方法来计算的。上面的例子中使用的是<code>ProducerType.SINGLE</code>，那来看<code>SingleProducerSequencer</code> 这个里面<code>remainingCapacity</code>的实现。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"type\">long</span> <span class=\"title function_\">remainingCapacity</span><span class=\"params\">()</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"comment\">//上次申请完毕的序列值</span></span><br><span class=\"line\">    <span class=\"type\">long</span> <span class=\"variable\">nextValue</span> <span class=\"operator\">=</span> <span class=\"built_in\">this</span>.nextValue;</span><br><span class=\"line\">    <span class=\"comment\">//计算当前已经消费到的序列值</span></span><br><span class=\"line\">    <span class=\"type\">long</span> <span class=\"variable\">consumed</span> <span class=\"operator\">=</span> Util.getMinimumSequence(gatingSequences, nextValue);</span><br><span class=\"line\">    <span class=\"comment\">//当前生产到的序列值</span></span><br><span class=\"line\">    <span class=\"type\">long</span> <span class=\"variable\">produced</span> <span class=\"operator\">=</span> nextValue;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> getBufferSize() - (produced - consumed);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>来解释下这段代码的含义：</p>\n<p>假设当前 <code>ringBuffer</code> 的 <code>bufferSize</code> 是 8 ；上次申请到的序列号是 5，其实也就是说已经生产过占用的序列号是5；假设当前已经消费到的序列号是 3，那么剩余的容量为： 8-（5-2） &#x3D; 5；</p>\n<p><img src=\"https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2018/8/4/1650414723061ce7~tplv-t2oaga2asx-image.image\"></p>\n<p>因为这里我们可以确定 <code>bufferSize</code> 和 <code>produced</code> 的值了，那么 <code>remainingCapacity</code> 的结果就取决于<code>getMinimumSequence</code>的计算结果了。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"type\">long</span> <span class=\"title function_\">getMinimumSequence</span><span class=\"params\">(<span class=\"keyword\">final</span> Sequence[] sequences, <span class=\"type\">long</span> minimum)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>, n = sequences.length; i &lt; n; i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"type\">long</span> <span class=\"variable\">value</span> <span class=\"operator\">=</span> sequences[i].get();</span><br><span class=\"line\">        minimum = Math.min(minimum, value);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> minimum;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这个方法是从 <code>Sequence</code> 数组中获取最小序列 。如果<code>sequences</code> 为空，则返回 <code>minimum</code>。回到上一步，看下<code>sequences</code>这个数组是从哪里过来的，它的值在哪里设置的。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">long</span> <span class=\"variable\">consumed</span> <span class=\"operator\">=</span> Util.getMinimumSequence(gatingSequences, nextValue);</span><br></pre></td></tr></table></figure>\n\n<p><code>gatingSequences </code>是 <code>SingleProducerSequencer </code>父类  <code>AbstractSequencer</code> 中的成员变量：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">protected</span> <span class=\"keyword\">volatile</span> Sequence[] gatingSequences = <span class=\"keyword\">new</span> <span class=\"title class_\">Sequence</span>[<span class=\"number\">0</span>];</span><br></pre></td></tr></table></figure>\n\n<p><code>gatingSequences</code> 是在下面这个方法里面来管理的。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@see</span> Sequencer#addGatingSequences(Sequence...)</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">void</span> <span class=\"title function_\">addGatingSequences</span><span class=\"params\">(Sequence... gatingSequences)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    SequenceGroups.addSequences(<span class=\"built_in\">this</span>, SEQUENCE_UPDATER, <span class=\"built_in\">this</span>, gatingSequences);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这个方法的调用栈向前追溯有这几个地方调用了：</p>\n<p><img src=\"https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2018/8/4/1650415d0682db8f~tplv-t2oaga2asx-image.image\"></p>\n<p><code>WorkerPool</code>来管理多个消费者；<code>hangdlerEventsWith</code> 这个方法也是用来设置消费者的。但是在上面的测试案例中我们是想通过不设定消费者 只设定生成者 来观察 环形队列的占用情况，所以<code>gatingSequences</code> 会一直是空的，因此在计算时会把 <code>produced</code> 的值作为 <code>minimum</code> 返回。这样每次计算就相当于：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">return</span> getBufferSize() - (produced - produced) === getBufferSize();</span><br></pre></td></tr></table></figure>\n\n<p>也就验证了为何在不设定消费者的情况下，<code>remainingCapacity</code> 的值会一直保持不变。</p>\n<h2 id=\"SOFATracer-中-Disruptor-实践\"><a href=\"#SOFATracer-中-Disruptor-实践\" class=\"headerlink\" title=\"SOFATracer 中 Disruptor 实践\"></a>SOFATracer 中 Disruptor 实践</h2><p><code>SOFATracer</code>中，<code>AsyncCommonDigestAppenderManager</code> 对 <code>disruptor</code> 进行了封装，用于处理外部组件的<code>Tracer</code>摘要日志。该部分借助 <code>AsyncCommonDigestAppenderManager</code> 的源码来分析下<code>SOFATracer</code>如何使用<code>disruptor</code>的。</p>\n<p><code>SOFATracer </code>中使用了两种不同的事件模型，一种是<code>SOFATracer</code>内部使用的 <code>StringEvent</code> , 一种是 外部扩展使用的 <code>SofaTacerSpanEvent</code>。这里以 <code>SofaTacerSpanEvent</code> 这种事件模型来分析。<code>StringEvent</code> 消息事件模型对应的是 <code>AsyncCommonAppenderManager</code> 类封装的<code>disruptor</code>。</p>\n<h3 id=\"SofaTracerSpanEvent-LongEvent\"><a href=\"#SofaTracerSpanEvent-LongEvent\" class=\"headerlink\" title=\"SofaTracerSpanEvent ( -&gt; LongEvent)\"></a>SofaTracerSpanEvent ( -&gt; LongEvent)</h3><p>定义消息事件模型，<code>SofaTacerSpanEvent</code> 和 前面 <code>demo</code> 中的 <code>LongEvent</code> 基本结构是一样的，主要是内部持有的消息数据不同，<code>LongEvent</code> 中是一个<code>long</code>类型的数据，<code>SofaTacerSpanEvent</code>中持有的是 <code>SofaTracerSpan</code> 。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">SofaTracerSpanEvent</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">volatile</span> SofaTracerSpan sofaTracerSpan;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> SofaTracerSpan <span class=\"title function_\">getSofaTracerSpan</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> sofaTracerSpan;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setSofaTracerSpan</span><span class=\"params\">(SofaTracerSpan sofaTracerSpan)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.sofaTracerSpan = sofaTracerSpan;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Consumer-LongEventHandler\"><a href=\"#Consumer-LongEventHandler\" class=\"headerlink\" title=\"Consumer ( -&gt; LongEventHandler)\"></a>Consumer ( -&gt; LongEventHandler)</h3><p><code>Consumer</code> 是 <code>AsyncCommonDigestAppenderManager</code> 的内部类;实现了 <code>EventHandler</code> 接口，这个<code>consumer</code>就是作为消费者存在的。</p>\n<p>在<code>AsyncCommonAppenderManager</code>中也有一个，这个地方个人觉得可以抽出去，这样可以使得<code>AsyncCommonDigestAppenderManager/AsyncCommonAppenderManager</code>的代码看起来更干净；</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Consumer</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">EventHandler</span>&lt;SofaTracerSpanEvent&gt; &#123;</span><br><span class=\"line\">       <span class=\"comment\">//日志类型集合，非该集合内的日志类型将不会被处理</span></span><br><span class=\"line\">        <span class=\"keyword\">protected</span> Set&lt;String&gt; logTypes = Collections.synchronizedSet(<span class=\"keyword\">new</span> <span class=\"title class_\">HashSet</span>&lt;String&gt;());</span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">onEvent</span><span class=\"params\">(SofaTracerSpanEvent event, <span class=\"type\">long</span> sequence, <span class=\"type\">boolean</span> endOfBatch)</span></span><br><span class=\"line\">                                <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 拿到具体的消息数据 sofaTracerSpan</span></span><br><span class=\"line\">            <span class=\"type\">SofaTracerSpan</span> <span class=\"variable\">sofaTracerSpan</span> <span class=\"operator\">=</span> event.getSofaTracerSpan();</span><br><span class=\"line\">            <span class=\"comment\">// 如果没有数据，则不做任何处理</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (sofaTracerSpan != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                    <span class=\"type\">String</span> <span class=\"variable\">logType</span> <span class=\"operator\">=</span> sofaTracerSpan.getLogType();</span><br><span class=\"line\">                    <span class=\"comment\">// 验证当前日志类型是否可以被当前consumer消费</span></span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (logTypes.contains(logType)) &#123;</span><br><span class=\"line\">                        <span class=\"comment\">// 获取编码类型</span></span><br><span class=\"line\">                        <span class=\"type\">SpanEncoder</span> <span class=\"variable\">encoder</span> <span class=\"operator\">=</span> contextEncoders.get(logType);</span><br><span class=\"line\">                        <span class=\"comment\">//获取 appender</span></span><br><span class=\"line\">                        <span class=\"type\">TraceAppender</span> <span class=\"variable\">appender</span> <span class=\"operator\">=</span> appenders.get(logType);</span><br><span class=\"line\">                        <span class=\"comment\">// 对数据进行编码处理</span></span><br><span class=\"line\">                        <span class=\"type\">String</span> <span class=\"variable\">encodedStr</span> <span class=\"operator\">=</span> encoder.encode(sofaTracerSpan);</span><br><span class=\"line\">                        <span class=\"keyword\">if</span> (appender <span class=\"keyword\">instanceof</span> LoadTestAwareAppender) &#123;</span><br><span class=\"line\">                            ((LoadTestAwareAppender) appender).append(encodedStr,</span><br><span class=\"line\">                                TracerUtils.isLoadTest(sofaTracerSpan));</span><br><span class=\"line\">                        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                            appender.append(encodedStr);</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                        <span class=\"comment\">// 刷新缓冲区，日志输出</span></span><br><span class=\"line\">                        appender.flush();</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">                   <span class=\"comment\">// 异常省略</span></span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">addLogType</span><span class=\"params\">(String logType)</span> &#123;</span><br><span class=\"line\">            logTypes.add(logType);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"SofaTracerSpanEventFactory-（-LongEventFactory）\"><a href=\"#SofaTracerSpanEventFactory-（-LongEventFactory）\" class=\"headerlink\" title=\"SofaTracerSpanEventFactory （-&gt; LongEventFactory）\"></a>SofaTracerSpanEventFactory （-&gt; LongEventFactory）</h3><p>用于产生消息事件的 <code>Factory</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">SofaTracerSpanEventFactory</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">EventFactory</span>&lt;SofaTracerSpanEvent&gt; &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> SofaTracerSpanEvent <span class=\"title function_\">newInstance</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">SofaTracerSpanEvent</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"ConsumerThreadFactory-LongEventThreadFactory\"><a href=\"#ConsumerThreadFactory-LongEventThreadFactory\" class=\"headerlink\" title=\"ConsumerThreadFactory (-&gt; LongEventThreadFactory )\"></a>ConsumerThreadFactory (-&gt; LongEventThreadFactory )</h3><p>用来产生消费线程的 <code>Factory</code>。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ConsumerThreadFactory</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">ThreadFactory</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String workName;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">getWorkName</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> workName;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setWorkName</span><span class=\"params\">(String workName)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.workName = workName;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Thread <span class=\"title function_\">newThread</span><span class=\"params\">(Runnable runnable)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">Thread</span> <span class=\"variable\">worker</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(runnable, <span class=\"string\">&quot;Tracer-AsyncConsumer-Thread-&quot;</span> + workName);</span><br><span class=\"line\">        worker.setDaemon(<span class=\"literal\">true</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> worker;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"构建disruptor\"><a href=\"#构建disruptor\" class=\"headerlink\" title=\"构建disruptor\"></a>构建disruptor</h3><p><code>disruptor</code> 的构建是在 <code>AsyncCommonDigestAppenderManager</code> 的构造函数中完成的。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"title function_\">AsyncCommonDigestAppenderManager</span><span class=\"params\">(<span class=\"type\">int</span> queueSize, <span class=\"type\">int</span> consumerNumber)</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 使用这个计算来保证realQueueSize是2的次幂（返回当前 大于等于queueSize的最小的2的次幂数 ）</span></span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">realQueueSize</span> <span class=\"operator\">=</span> <span class=\"number\">1</span> &lt;&lt; (<span class=\"number\">32</span> - Integer.numberOfLeadingZeros(queueSize - <span class=\"number\">1</span>));</span><br><span class=\"line\">    <span class=\"comment\">//构建disruptor，使用的是 ProducerType.MULTI</span></span><br><span class=\"line\">    <span class=\"comment\">//等待策略是 BlockingWaitStrategy</span></span><br><span class=\"line\">    disruptor = <span class=\"keyword\">new</span> <span class=\"title class_\">Disruptor</span>&lt;SofaTracerSpanEvent&gt;(<span class=\"keyword\">new</span> <span class=\"title class_\">SofaTracerSpanEventFactory</span>(),</span><br><span class=\"line\">        realQueueSize, threadFactory, ProducerType.MULTI, <span class=\"keyword\">new</span> <span class=\"title class_\">BlockingWaitStrategy</span>());</span><br><span class=\"line\">    <span class=\"comment\">//消费者列表</span></span><br><span class=\"line\">    <span class=\"built_in\">this</span>.consumers = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;Consumer&gt;(consumerNumber);</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; consumerNumber; i++) &#123;</span><br><span class=\"line\">        <span class=\"type\">Consumer</span> <span class=\"variable\">consumer</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Consumer</span>();</span><br><span class=\"line\">        consumers.add(consumer);</span><br><span class=\"line\">        <span class=\"comment\">//设置异常处理程序</span></span><br><span class=\"line\">        disruptor.setDefaultExceptionHandler(<span class=\"keyword\">new</span> <span class=\"title class_\">ConsumerExceptionHandler</span>());</span><br><span class=\"line\">        <span class=\"comment\">//绑定消费者</span></span><br><span class=\"line\">        disruptor.handleEventsWith(consumer);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//是否允许丢弃，从配置文件获取</span></span><br><span class=\"line\">    <span class=\"built_in\">this</span>.allowDiscard = Boolean.parseBoolean(SofaTracerConfiguration.getProperty(</span><br><span class=\"line\">        SofaTracerConfiguration.TRACER_ASYNC_APPENDER_ALLOW_DISCARD, DEFAULT_ALLOW_DISCARD));</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">if</span> (allowDiscard) &#123;</span><br><span class=\"line\">        <span class=\"comment\">//是否记录丢失日志的数量</span></span><br><span class=\"line\">        <span class=\"built_in\">this</span>.isOutDiscardNumber = Boolean.parseBoolean(SofaTracerConfiguration.getProperty(</span><br><span class=\"line\">            SofaTracerConfiguration.TRACER_ASYNC_APPENDER_IS_OUT_DISCARD_NUMBER,</span><br><span class=\"line\">            DEFAULT_IS_OUT_DISCARD_NUMBER));</span><br><span class=\"line\">        <span class=\"comment\">//是否记录丢失日志的TraceId和RpcId</span></span><br><span class=\"line\">        <span class=\"built_in\">this</span>.isOutDiscardId = Boolean.parseBoolean(SofaTracerConfiguration.getProperty(</span><br><span class=\"line\">            SofaTracerConfiguration.TRACER_ASYNC_APPENDER_IS_OUT_DISCARD_ID,</span><br><span class=\"line\">            DEFAULT_IS_OUT_DISCARD_ID));</span><br><span class=\"line\">        <span class=\"comment\">//丢失日志的数量达到该阈值进行一次日志输出</span></span><br><span class=\"line\">        <span class=\"built_in\">this</span>.discardOutThreshold = Long.parseLong(SofaTracerConfiguration.getProperty(</span><br><span class=\"line\">            SofaTracerConfiguration.TRACER_ASYNC_APPENDER_DISCARD_OUT_THRESHOLD,</span><br><span class=\"line\">            DEFAULT_DISCARD_OUT_THRESHOLD));</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (isOutDiscardNumber) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">this</span>.discardCount = <span class=\"keyword\">new</span> <span class=\"title class_\">PaddedAtomicLong</span>(<span class=\"number\">0L</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"启动-disruptor\"><a href=\"#启动-disruptor\" class=\"headerlink\" title=\"启动 disruptor\"></a>启动 disruptor</h3><p><code>disruptor</code>的启动委托给了<code> AsyncCommonDigestAppenderManager</code> 的<code>start</code>方法来执行。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">start</span><span class=\"params\">(<span class=\"keyword\">final</span> String workerName)</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.threadFactory.setWorkName(workerName);</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.ringBuffer = <span class=\"built_in\">this</span>.disruptor.start();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>来看下，<code>SOFATracer</code> 中 具体是在哪里调用这个<code>start</code> 的：</p>\n<p><img src=\"https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2018/8/4/165041aeac0dc066~tplv-t2oaga2asx-image.image\"></p>\n<ul>\n<li><code>CommonTracerManager</code> : 这个里面持有了<code>AsyncCommonDigestAppenderManager</code> 类的一个单例对象，并且是<code>static</code> 静态代码块中调用了<code>start</code>方法；这个用来输出普通日志。</li>\n<li><code>SofaTracerDigestReporterAsyncManager</code>：这里类里面也是持有了<code>AsyncCommonDigestAppenderManager</code> 类的一个单例对像，并且提供了<code>getSofaTracerDigestReporterAsyncManager</code>方法来获取该单例，在这个方法中调用了<code>start</code>方法；该对象用来输出摘要日志。</li>\n</ul>\n<h3 id=\"发布事件\"><a href=\"#发布事件\" class=\"headerlink\" title=\"发布事件\"></a>发布事件</h3><p>前面的<code>demo</code>中是通过一个<code>for</code>循环来发布事件的，在 <code>SOFATracer</code> 中 的事件发布无非就是当有<code>Tracer</code>日志需要输出时会触发发布，那么对应的就是日志的 <code>append</code> 操作，将日志 <code>append</code> 到环形缓冲区。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">append</span><span class=\"params\">(SofaTracerSpan sofaTracerSpan)</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">long</span> <span class=\"variable\">sequence</span> <span class=\"operator\">=</span> <span class=\"number\">0L</span>;</span><br><span class=\"line\">    <span class=\"comment\">//是否允许丢弃</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (allowDiscard) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">//允许丢弃就使用tryNext尝试申请序列，申请不到抛出异常</span></span><br><span class=\"line\">            sequence = ringBuffer.tryNext();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (InsufficientCapacityException e) &#123;</span><br><span class=\"line\">            <span class=\"comment\">//是否输出丢失日志的TraceId和RpcId</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (isOutDiscardId) &#123;</span><br><span class=\"line\">                <span class=\"type\">SofaTracerSpanContext</span> <span class=\"variable\">sofaTracerSpanContext</span> <span class=\"operator\">=</span> sofaTracerSpan</span><br><span class=\"line\">                    .getSofaTracerSpanContext();</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (sofaTracerSpanContext != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">                    SynchronizingSelfLog.warn(<span class=\"string\">&quot;discarded tracer: traceId[&quot;</span></span><br><span class=\"line\">                                              + sofaTracerSpanContext.getTraceId()</span><br><span class=\"line\">                                              + <span class=\"string\">&quot;];spanId[&quot;</span> + sofaTracerSpanContext.getSpanId()</span><br><span class=\"line\">                                              + <span class=\"string\">&quot;]&quot;</span>);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">             <span class=\"comment\">//是否输出丢失日志的数量</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> ((isOutDiscardNumber) &amp;&amp; discardCount.incrementAndGet() == discardOutThreshold) &#123;</span><br><span class=\"line\">                discardCount.set(<span class=\"number\">0</span>);</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (isOutDiscardNumber) &#123;</span><br><span class=\"line\">                    SynchronizingSelfLog.warn(<span class=\"string\">&quot;discarded &quot;</span> + discardOutThreshold + <span class=\"string\">&quot; logs&quot;</span>);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 不允许丢弃则使用next方法</span></span><br><span class=\"line\">        sequence = ringBuffer.next();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">SofaTracerSpanEvent</span> <span class=\"variable\">event</span> <span class=\"operator\">=</span> ringBuffer.get(sequence);</span><br><span class=\"line\">        event.setSofaTracerSpan(sofaTracerSpan);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">        SynchronizingSelfLog.error(<span class=\"string\">&quot;fail to add event&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//发布</span></span><br><span class=\"line\">    ringBuffer.publish(sequence);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>SOFATracer 事件发布的调用逻辑：</p>\n<p><img src=\"https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2018/8/4/165041c4514a3102~tplv-t2oaga2asx-image.image\"></p>\n<p>追溯调用的流程，可以知道当前 <code>span</code> 调用 <code>finish</code>时或者 <code>SOFATracer</code>中调用<code>reportSpan</code>时 就相当于发布了一个消息事件。</p>\n<h2 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h2><p>本文对 <code>SOFATracer</code> 中使用 <code>Disruptor</code> 来进行日志输出的代码进行了简单的分析，更多内部细节原理可以自行看下<code>SOFATracer</code>的代码。<code>SOFATracer</code> 作为一种比较底层的中间件组件，在实际的业务开发中基本是无法感知的。但是作为技术来学习，还是有很多点可以挖一挖。</p>\n<p><a href=\"https://github.com/alipay/sofa-tracer\">SOFATracer GitHub 传送门</a>。</p>\n","text":"OpenTraceing 规范 OpenTracing语义标准 语义惯例 官方文档 SOFATracer 对 OpenTraceing 的实现 SOFATrac...","permalink":"/post/sofa/sofa-tracer-disruptor","photos":[],"count_time":{"symbolsCount":"29k","symbolsTime":"26 mins."},"categories":[{"name":"SOFA","slug":"SOFA","count":9,"path":"api/categories/SOFA.json"}],"tags":[{"name":"分布式链路跟踪","slug":"分布式链路跟踪","count":4,"path":"api/tags/分布式链路跟踪.json"},{"name":"Tracer","slug":"Tracer","count":4,"path":"api/tags/Tracer.json"},{"name":"Disruptor","slug":"Disruptor","count":1,"path":"api/tags/Disruptor.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#OpenTraceing-%E8%A7%84%E8%8C%83\"><span class=\"toc-text\">OpenTraceing 规范</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#SOFATracer-%E5%AF%B9-OpenTraceing-%E7%9A%84%E5%AE%9E%E7%8E%B0\"><span class=\"toc-text\">SOFATracer 对 OpenTraceing 的实现</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%A6%82%E5%BF%B5\"><span class=\"toc-text\">概念</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Tracer\"><span class=\"toc-text\">Tracer</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%90%AF%E5%8A%A8%E4%B8%80%E4%B8%AA%E6%96%B0%E7%9A%84span\"><span class=\"toc-text\">启动一个新的span</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%B0%86SpanContext%E4%B8%8A%E4%B8%8B%E6%96%87Inject%EF%BC%88%E6%B3%A8%E5%85%A5%EF%BC%89%E5%88%B0carrier\"><span class=\"toc-text\">将SpanContext上下文Inject（注入）到carrier</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%B0%86SpanContext%E4%B8%8A%E4%B8%8B%E6%96%87%E4%BB%8Ecarrier%E4%B8%ADExtract%EF%BC%88%E6%8F%90%E5%8F%96%EF%BC%89\"><span class=\"toc-text\">将SpanContext上下文从carrier中Extract（提取）</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#Format\"><span class=\"toc-text\">Format</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#X-B3\"><span class=\"toc-text\">X-B3</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#SOFATracer-%E4%B8%AD%E7%9A%84-Format\"><span class=\"toc-text\">SOFATracer 中的 Format</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Span\"><span class=\"toc-text\">Span</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E9%80%9A%E8%BF%87Span%E8%8E%B7%E5%8F%96SpanContext\"><span class=\"toc-text\">通过Span获取SpanContext</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%A4%8D%E5%86%99%E6%93%8D%E4%BD%9C%E5%90%8D\"><span class=\"toc-text\">复写操作名</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E7%BB%93%E6%9D%9FSpan\"><span class=\"toc-text\">结束Span</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E4%B8%BASpan%E8%AE%BE%E7%BD%AEtag\"><span class=\"toc-text\">为Span设置tag</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#Log%E7%BB%93%E6%9E%84%E5%8C%96%E6%95%B0%E6%8D%AE\"><span class=\"toc-text\">Log结构化数据</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E8%AE%BE%E7%BD%AE%E4%B8%80%E4%B8%AAbaggage%EF%BC%88%E9%9A%8F%E8%A1%8C%E6%95%B0%E6%8D%AE%EF%BC%89%E5%85%83%E7%B4%A0\"><span class=\"toc-text\">设置一个baggage（随行数据）元素</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#SofaTracerSpan-%E4%B8%AD%E7%9A%84%E5%B1%9E%E6%80%A7\"><span class=\"toc-text\">SofaTracerSpan 中的属性</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#SpanContext\"><span class=\"toc-text\">SpanContext</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Disruptor-%E7%AE%80%E4%BB%8B\"><span class=\"toc-text\">Disruptor 简介</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%A1%88%E4%BE%8B\"><span class=\"toc-text\">案例</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%B6%88%E6%81%AF%E4%BA%8B%E4%BB%B6-LongEvent-%EF%BC%8C%E8%83%BD%E5%A4%9F%E8%A2%AB%E6%B6%88%E8%B4%B9%E7%9A%84%E6%95%B0%E6%8D%AE%E8%BD%BD%E4%BD%93\"><span class=\"toc-text\">消息事件 LongEvent ，能够被消费的数据载体</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%88%9B%E5%BB%BA%E6%B6%88%E6%81%AF%E4%BA%8B%E4%BB%B6%E7%9A%84factory\"><span class=\"toc-text\">创建消息事件的factory</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#ConsumerThreadFactory\"><span class=\"toc-text\">ConsumerThreadFactory</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%8F%91%E5%B8%83%E6%B6%88%E6%81%AF\"><span class=\"toc-text\">发布消息</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%BC%96%E5%86%99%E6%B6%88%E8%B4%B9%E8%80%85%E4%BB%A3%E7%A0%81\"><span class=\"toc-text\">编写消费者代码</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E8%BF%90%E8%A1%8C%E7%BB%93%E6%9E%9C%EF%BC%88%E8%BF%99%E9%87%8C%EF%BC%89%EF%BC%9A\"><span class=\"toc-text\">运行结果（这里）：</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5%E5%92%8C%E5%8E%9F%E7%90%86\"><span class=\"toc-text\">基本概念和原理</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Disruptor\"><span class=\"toc-text\">Disruptor</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#RingBuffer\"><span class=\"toc-text\">RingBuffer</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Sequencer\"><span class=\"toc-text\">Sequencer</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#EventHandler\"><span class=\"toc-text\">EventHandler</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#SequenceBarrier\"><span class=\"toc-text\">SequenceBarrier</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#WaitStrategy\"><span class=\"toc-text\">WaitStrategy</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#EventProcessor\"><span class=\"toc-text\">EventProcessor</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%8E%9F%E7%90%86%E5%9B%BE\"><span class=\"toc-text\">原理图</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%97%A0%E6%B6%88%E8%B4%B9%E8%80%85%E6%83%85%E5%86%B5%E4%B8%8B%EF%BC%8C%E7%94%9F%E4%BA%A7%E8%80%85%E4%BF%9D%E6%8C%81%E7%94%9F%E4%BA%A7%EF%BC%8C%E4%BD%86%E6%98%AF-remainingCapacity-%E4%BF%9D%E6%8C%81%E4%B8%8D%E5%8F%98\"><span class=\"toc-text\">无消费者情况下，生产者保持生产，但是 remainingCapacity 保持不变</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#SOFATracer-%E4%B8%AD-Disruptor-%E5%AE%9E%E8%B7%B5\"><span class=\"toc-text\">SOFATracer 中 Disruptor 实践</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#SofaTracerSpanEvent-LongEvent\"><span class=\"toc-text\">SofaTracerSpanEvent ( -&gt; LongEvent)</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Consumer-LongEventHandler\"><span class=\"toc-text\">Consumer ( -&gt; LongEventHandler)</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#SofaTracerSpanEventFactory-%EF%BC%88-LongEventFactory%EF%BC%89\"><span class=\"toc-text\">SofaTracerSpanEventFactory （-&gt; LongEventFactory）</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#ConsumerThreadFactory-LongEventThreadFactory\"><span class=\"toc-text\">ConsumerThreadFactory (-&gt; LongEventThreadFactory )</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%9E%84%E5%BB%BAdisruptor\"><span class=\"toc-text\">构建disruptor</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%90%AF%E5%8A%A8-disruptor\"><span class=\"toc-text\">启动 disruptor</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%8F%91%E5%B8%83%E4%BA%8B%E4%BB%B6\"><span class=\"toc-text\">发布事件</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%B0%8F%E7%BB%93\"><span class=\"toc-text\">小结</span></a></li></ol>","author":{"name":"glmapper","slug":"blog-author","avatar":"https://glmapper-blog.oss-cn-hangzhou.aliyuncs.com/common/favicon.ico","link":"/","description":"开放，开源，分享，共享","socials":{"github":"https://github.com/glmapper","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/2412872703","zhihu":"","csdn":"","juejin":"https://juejin.cn/user/3227821827961806","customs":{"sofastack":{"icon":"https://glmapper-blog.oss-cn-hangzhou.aliyuncs.com/common/sofastack.svg","link":"https://www.sofastack.tech/"}}}},"mapped":true,"hidden":false,"prev_post":{"title":"分布式链路跟踪组件 SOFATracer 和 Zipkin 模型转换原理","uid":"e760e8eb6263e803ada2984a9066d5b1","slug":"sofa/sofa-tracer-zipkin-model-convert","date":"2018-11-10T04:33:56.000Z","updated":"2024-07-05T04:09:05.803Z","comments":true,"path":"api/articles/sofa/sofa-tracer-zipkin-model-convert.json","keywords":null,"cover":null,"text":" 分布式链路跟踪组件 SOFATracer 和 Zipkin 模型转换 ","permalink":"/post/sofa/sofa-tracer-zipkin-model-convert","photos":[],"count_time":{"symbolsCount":44,"symbolsTime":"1 mins."},"categories":[{"name":"SOFA","slug":"SOFA","count":9,"path":"api/categories/SOFA.json"}],"tags":[{"name":"分布式链路跟踪","slug":"分布式链路跟踪","count":4,"path":"api/tags/分布式链路跟踪.json"},{"name":"Tracer","slug":"Tracer","count":4,"path":"api/tags/Tracer.json"},{"name":"Zipkin","slug":"Zipkin","count":1,"path":"api/tags/Zipkin.json"}],"author":{"name":"glmapper","slug":"blog-author","avatar":"https://glmapper-blog.oss-cn-hangzhou.aliyuncs.com/common/favicon.ico","link":"/","description":"开放，开源，分享，共享","socials":{"github":"https://github.com/glmapper","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/2412872703","zhihu":"","csdn":"","juejin":"https://juejin.cn/user/3227821827961806","customs":{"sofastack":{"icon":"https://glmapper-blog.oss-cn-hangzhou.aliyuncs.com/common/sofastack.svg","link":"https://www.sofastack.tech/"}}}}},"next_post":{"title":"聊一聊 RestTemplate","uid":"081a602eba3d6e39cf0949a624156da5","slug":"middleware/middleware-http-resttemplate","date":"2018-10-30T14:20:07.000Z","updated":"2024-07-05T04:09:05.788Z","comments":true,"path":"api/articles/middleware/middleware-http-resttemplate.json","keywords":null,"cover":[],"text":" 原文：https://juejin.cn/post/6844903695981740046 从 3.0 版本开始，Spring 提供了 RestTemplat...","permalink":"/post/middleware/middleware-http-resttemplate","photos":[],"count_time":{"symbolsCount":"4.5k","symbolsTime":"4 mins."},"categories":[{"name":"Middleware","slug":"Middleware","count":13,"path":"api/categories/Middleware.json"}],"tags":[{"name":"spring","slug":"spring","count":11,"path":"api/tags/spring.json"},{"name":"RestTemplate","slug":"RestTemplate","count":1,"path":"api/tags/RestTemplate.json"},{"name":"http","slug":"http","count":3,"path":"api/tags/http.json"}],"author":{"name":"glmapper","slug":"blog-author","avatar":"https://glmapper-blog.oss-cn-hangzhou.aliyuncs.com/common/favicon.ico","link":"/","description":"开放，开源，分享，共享","socials":{"github":"https://github.com/glmapper","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/2412872703","zhihu":"","csdn":"","juejin":"https://juejin.cn/user/3227821827961806","customs":{"sofastack":{"icon":"https://glmapper-blog.oss-cn-hangzhou.aliyuncs.com/common/sofastack.svg","link":"https://www.sofastack.tech/"}}}}}}