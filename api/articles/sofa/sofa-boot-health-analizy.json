{"title":"SOFABoot 健康检查能力分析","uid":"1e1a697103974a7aac0ac3d3d33e9f33","slug":"sofa/sofa-boot-health-analizy","date":"2018-11-16T11:14:43.000Z","updated":"2024-07-05T04:09:05.801Z","comments":true,"path":"api/articles/sofa/sofa-boot-health-analizy.json","keywords":null,"cover":[],"content":"<h2 id=\"Liveness-Check-Readiness-Check\"><a href=\"#Liveness-Check-Readiness-Check\" class=\"headerlink\" title=\"Liveness Check &amp;  Readiness Check\"></a>Liveness Check &amp;  Readiness Check</h2><p><code>Spring Boot</code> 提供了一个基础的健康检查的能力，中间件和应用都可以扩展来实现自己的健康检查逻辑。但是 Spring Boot 的健康检查只有 <code>Liveness Check</code> 的能力，缺少 <code>Readiness Check</code> 的能力，这样会有比较致命的问题。当一个微服务应用启动的时候，必须要先保证启动后应用是健康的，才可以将上游的流量放进来（来自于 RPC，网关，定时任务等等流量），否则就可能会导致一定时间内大量的错误发生。</p>\n<span id=\"more\"></span>\n\n<p>针对 <code>Spring Boot</code> 缺少 <code>Readiness Check</code> 能力的情况，<code>SOFABoot</code> 增加了 <code>Spring Boot</code> 现有的健康检查的能力，提供了 <code>Readiness Check</code> 的能力。利用 <code>Readiness Check</code> 的能力，<code>SOFA</code> 中间件中的各个组件只有在 <code>Readiness Check</code> 通过之后，才将流量引入到应用的实例中，比如 <code>RPC</code>，只有在 <code>Readiness Check</code> 通过之后，才会向服务注册中心注册，后面来自上游应用的流量才会进入。</p>\n<p>除了中间件可以利用 <code>Readiness Check</code> 的事件来控制流量的进入之外，<code>PAAS</code> 系统也可以通过访问 <code>http://localhost:8080/actuator/readiness</code> 来获取应用的 <code>Readiness Check</code> 的状况，用来控制例如负载均衡设备等等流量的进入。</p>\n<h2 id=\"使用方式\"><a href=\"#使用方式\" class=\"headerlink\" title=\"使用方式\"></a>使用方式</h2><p><code>SOFABoot</code> 的健康检查能力需要引入：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.alipay.sofa<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>healthcheck-sofa-boot-starter<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>区别于<code>SpringBoot</code>的：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>详细工程科参考：<a href=\"https://github.com/alipay/\">sofa-boot</a></p></blockquote>\n<h3 id=\"健康检查启动日志\"><a href=\"#健康检查启动日志\" class=\"headerlink\" title=\"健康检查启动日志\"></a>健康检查启动日志</h3><p><img src=\"https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2018/11/16/1671b3e9d1e81110~tplv-t2oaga2asx-image.image\"></p>\n<h3 id=\"代码分析\"><a href=\"#代码分析\" class=\"headerlink\" title=\"代码分析\"></a>代码分析</h3><p>既然是个Starter，那么就先从 <strong>spring.factories</strong> 文件来看：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">org.springframework.context.ApplicationContextInitializer=\\</span><br><span class=\"line\">com.alipay.sofa.healthcheck.initializer.SofaBootHealthCheckInitializer</span><br><span class=\"line\"></span><br><span class=\"line\">org.springframework.boot.autoconfigure.EnableAutoConfiguration=\\</span><br><span class=\"line\">com.alipay.sofa.healthcheck.configuration.SofaBootHealthCheckAutoConfiguration</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"SofaBootHealthCheckInitializer\"><a href=\"#SofaBootHealthCheckInitializer\" class=\"headerlink\" title=\"SofaBootHealthCheckInitializer\"></a>SofaBootHealthCheckInitializer</h4><p><code>SofaBootHealthCheckInitializer</code> 实现了 <code>ApplicationContextInitializer</code> 接口。</p>\n<p><code>ApplicationContextInitializer</code> 是 <code>Spring</code> 框架原有的概念，这个类的主要目的就是在            <code>ConfigurableApplicationContext</code> 类型（或者子类型）的 <code>ApplicationContext</code> 做 <code>refresh</code> 之前，允许我们                   对 <code>ConfigurableApplicationContext</code> 的实例做进一步的设置或者处理。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">SofaBootHealthCheckInitializer</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">ApplicationContextInitializer</span>&lt;ConfigurableApplicationContext&gt; &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">initialize</span><span class=\"params\">(ConfigurableApplicationContext applicationContext)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">Environment</span> <span class=\"variable\">environment</span> <span class=\"operator\">=</span> applicationContext.getEnvironment();</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (SOFABootEnvUtils.isSpringCloudBootstrapEnvironment(environment)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// init logging.level.com.alipay.sofa.runtime argument</span></span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">healthCheckLogLevelKey</span> <span class=\"operator\">=</span> Constants.LOG_LEVEL_PREFIX</span><br><span class=\"line\">                                        + HealthCheckConstants.SOFABOOT_HEALTH_LOG_SPACE;</span><br><span class=\"line\">        SofaBootLogSpaceIsolationInit.initSofaBootLogger(environment, healthCheckLogLevelKey);</span><br><span class=\"line\">      SofaBootHealthCheckLoggerFactory.getLogger(SofaBootHealthCheckInitializer.class).info(</span><br><span class=\"line\">            <span class=\"string\">&quot;SOFABoot HealthCheck Starting!&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><code>SofaBootHealthCheckInitializer</code> 在 <code>initialize</code> 方法中主要做了两件事：</p>\n<ul>\n<li>验证当前 <code>environment</code> 是否是 <code>SpringCloud</code> 的（3.0.0 开始支持 <code>springCloud</code>，之前版本无此 <code>check</code>）</li>\n<li>初始化 <code>logging.level</code></li>\n</ul>\n<p>这两件事和健康检查没有什么关系，但是既然放在这个模块里面还是来看下。</p>\n<h4 id=\"1、springCloud-环境验证\"><a href=\"#1、springCloud-环境验证\" class=\"headerlink\" title=\"1、springCloud 环境验证\"></a>1、springCloud 环境验证</h4><p>首先就是为什么会有这个验证。<code>SOFABoot</code> 在支持 <code>SpringcLoud</code> 时遇到一个问题，就是当在 <code>classpath</code> 中添加<code>spring-cloud-context</code> 依赖关系时,<code>org.springframework.context.ApplicationContextInitializer</code>会被调用两次。具体背景可参考 <a href=\"https://github.com/spring-cloud/spring-cloud-config/issues/1151\"># issue1151</a>  &amp;&amp; <a href=\"https://github.com/alipay/sofa-boot/issues/232\"># issue 232</a></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">static</span> <span class=\"type\">String</span> <span class=\"variable\">SPRING_CLOUD_MARK_NAME</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;org.springframework.cloud.bootstrap.BootstrapConfiguration&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"type\">boolean</span> <span class=\"title function_\">isSpringCloudBootstrapEnvironment</span><span class=\"params\">(Environment environment)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (environment <span class=\"keyword\">instanceof</span> ConfigurableEnvironment) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> !((ConfigurableEnvironment) environment).getPropertySources().contains(</span><br><span class=\"line\">            SofaBootInfraConstants.SOFA_BOOTSTRAP)</span><br><span class=\"line\">               &amp;&amp; isSpringCloud();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"type\">boolean</span> <span class=\"title function_\">isSpringCloud</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ClassUtils.isPresent(SPRING_CLOUD_MARK_NAME, <span class=\"literal\">null</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>上面这段代码是 <code>SOFABoot</code> 提供的一个用于区分 引导上下文  和 应用上下文 的方法：</p>\n<ul>\n<li>检验是否有<code>&quot;org.springframework.cloud.bootstrap.BootstrapConfiguration&quot;</code>这个类来判断当前是否引入了<code>spingCloud</code>的引导配置类</li>\n<li>从<code>environment</code> 中获取 <code>MutablePropertySources</code> 实例，验证 <code>MutablePropertySources</code> 中是否包括 <code>sofaBootstrap</code> （ 如果当前环境是 <code>SOFA bootstrap environment</code>，则包含 <code>sofaBootstrap</code>；这个是在 <code>SofaBootstrapRunListener</code> 回调方法中设置进行的 ）</li>\n</ul>\n<h4 id=\"2、初始化-logging-level\"><a href=\"#2、初始化-logging-level\" class=\"headerlink\" title=\"2、初始化 logging.level\"></a>2、初始化 logging.level</h4><p>这里是处理 <code>SOFABoot</code> 日志空间隔离的。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">initSofaBootLogger</span><span class=\"params\">(Environment environment, String runtimeLogLevelKey)</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 初始化 logging.path 参数</span></span><br><span class=\"line\">    <span class=\"type\">String</span> <span class=\"variable\">loggingPath</span> <span class=\"operator\">=</span> environment.getProperty(Constants.LOG_PATH);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!StringUtils.isEmpty(loggingPath)) &#123;</span><br><span class=\"line\">        System.setProperty(Constants.LOG_PATH, environment.getProperty(Constants.LOG_PATH));</span><br><span class=\"line\">        ReportUtil.report(<span class=\"string\">&quot;Actual &quot;</span> + Constants.LOG_PATH + <span class=\"string\">&quot; is [ &quot;</span> + loggingPath + <span class=\"string\">&quot; ]&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//for example : init logging.level.com.alipay.sofa.runtime argument</span></span><br><span class=\"line\">    <span class=\"type\">String</span> <span class=\"variable\">runtimeLogLevelValue</span> <span class=\"operator\">=</span> environment.getProperty(runtimeLogLevelKey);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (runtimeLogLevelValue != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">        System.setProperty(runtimeLogLevelKey, runtimeLogLevelValue);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// init file.encoding</span></span><br><span class=\"line\">    <span class=\"type\">String</span> <span class=\"variable\">fileEncoding</span> <span class=\"operator\">=</span> environment.getProperty(Constants.LOG_ENCODING_PROP_KEY);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!StringUtils.isEmpty(fileEncoding)) &#123;</span><br><span class=\"line\">        System.setProperty(Constants.LOG_ENCODING_PROP_KEY, fileEncoding);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"SofaBootHealthCheckAutoConfiguration\"><a href=\"#SofaBootHealthCheckAutoConfiguration\" class=\"headerlink\" title=\"SofaBootHealthCheckAutoConfiguration\"></a>SofaBootHealthCheckAutoConfiguration</h3><p>这个类是 <code>SOFABoot</code> 健康检查机制的自动化配置实现。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">SofaBootHealthCheckAutoConfiguration</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">/** ReadinessCheckListener: 容器刷新之后回调 */</span></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> ReadinessCheckListener <span class=\"title function_\">readinessCheckListener</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ReadinessCheckListener</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">/** HealthCheckerProcessor: HealthChecker处理器 */</span></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> HealthCheckerProcessor <span class=\"title function_\">healthCheckerProcessor</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">HealthCheckerProcessor</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">/** HealthCheckerProcessor: HealthIndicator处理器 */</span></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> HealthIndicatorProcessor <span class=\"title function_\">healthIndicatorProcessor</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">HealthIndicatorProcessor</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">/** AfterReadinessCheckCallbackProcessor: ReadinessCheck之后的回调处理器 */</span></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> AfterReadinessCheckCallbackProcessor <span class=\"title function_\">afterReadinessCheckCallbackProcessor</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">AfterReadinessCheckCallbackProcessor</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">/** 返回 SofaBoot健康检查指标类 实例*/</span></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> SofaBootHealthIndicator <span class=\"title function_\">sofaBootHealthIndicator</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">SofaBootHealthIndicator</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@ConditionalOnClass(Endpoint.class)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ConditionReadinessEndpointConfiguration</span> &#123;</span><br><span class=\"line\">        <span class=\"meta\">@Bean</span></span><br><span class=\"line\">        <span class=\"meta\">@ConditionalOnEnabledEndpoint</span></span><br><span class=\"line\">        <span class=\"keyword\">public</span> SofaBootReadinessCheckEndpoint <span class=\"title function_\">sofaBootReadinessCheckEndpoint</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">SofaBootReadinessCheckEndpoint</span>();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@ConditionalOnClass(Endpoint.class)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ReadinessCheckExtensionConfiguration</span> &#123;</span><br><span class=\"line\">        <span class=\"meta\">@Bean</span></span><br><span class=\"line\">        <span class=\"meta\">@ConditionalOnMissingBean</span></span><br><span class=\"line\">        <span class=\"meta\">@ConditionalOnEnabledEndpoint</span></span><br><span class=\"line\">        <span class=\"keyword\">public</span> ReadinessEndpointWebExtension <span class=\"title function_\">readinessEndpointWebExtension</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ReadinessEndpointWebExtension</span>();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"ReadinessCheckListener\"><a href=\"#ReadinessCheckListener\" class=\"headerlink\" title=\"ReadinessCheckListener\"></a>ReadinessCheckListener</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ReadinessCheckListener</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">PriorityOrdered</span>,</span><br><span class=\"line\">                                   ApplicationListener&lt;ContextRefreshedEvent&gt; </span><br></pre></td></tr></table></figure>\n\n<p>从代码来看，<code>ReadinessCheckListener</code> 实现了 <code>ApplicationListener</code> 监听器接口，其所监听的事件对象是<code>ContextRefreshedEvent</code>，即当容器上下文刷新完成之后回调。 <code>SOFABoot</code> 中通过这个监听器来完成 <code>readniess check</code> 的处理。</p>\n<p><code>onApplicationEvent</code> 回调方法：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">onApplicationEvent</span><span class=\"params\">(ContextRefreshedEvent event)</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// healthCheckerProcessor init</span></span><br><span class=\"line\">    healthCheckerProcessor.init();</span><br><span class=\"line\">    <span class=\"comment\">// healthIndicatorProcessor init</span></span><br><span class=\"line\">    healthIndicatorProcessor.init();</span><br><span class=\"line\">    <span class=\"comment\">// afterReadinessCheckCallbackProcessor init</span></span><br><span class=\"line\">    afterReadinessCheckCallbackProcessor.init();</span><br><span class=\"line\">    <span class=\"comment\">// readiness health check execute</span></span><br><span class=\"line\">    readinessHealthCheck();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>初始化 <code>healthCheckerProcessor</code>，这个里面就是将当前所有的<code>HealthChecker</code>类型的<code>bean</code>找出来，然后放在一个<code>map</code>中，等待后面的 <code>readiness check</code>。</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">init</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 是否已经初始化了</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (isInitiated.compareAndSet(<span class=\"literal\">false</span>, <span class=\"literal\">true</span>)) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// applicationContext 应用上下文不能为null</span></span><br><span class=\"line\">        Assert.notNull(applicationContext, () -&gt; <span class=\"string\">&quot;Application must not be null&quot;</span>);</span><br><span class=\"line\">        <span class=\"comment\">// 获取所有类型是 HealthChecker 的bean</span></span><br><span class=\"line\">        Map&lt;String, HealthChecker&gt; beansOfType = applicationContext</span><br><span class=\"line\">                .getBeansOfType(HealthChecker.class);</span><br><span class=\"line\">        <span class=\"comment\">// 排序</span></span><br><span class=\"line\">        healthCheckers = HealthCheckUtils.sortMapAccordingToValue(beansOfType,</span><br><span class=\"line\">                applicationContext.getAutowireCapableBeanFactory());</span><br><span class=\"line\">        <span class=\"comment\">// 构建日志信息，对应在健康检查日志里面打印出来的是：</span></span><br><span class=\"line\">        <span class=\"comment\">// ./logs/health-check/common-default.log:Found 0 HealthChecker implementation</span></span><br><span class=\"line\">        <span class=\"type\">StringBuilder</span> <span class=\"variable\">healthCheckInfo</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">StringBuilder</span>(<span class=\"number\">512</span>).append(<span class=\"string\">&quot;Found &quot;</span>)</span><br><span class=\"line\">                .append(healthCheckers.size()).append(<span class=\"string\">&quot; HealthChecker implementation:&quot;</span>)</span><br><span class=\"line\">                .append(String.join(<span class=\"string\">&quot;,&quot;</span>, healthCheckers.keySet()));</span><br><span class=\"line\">        logger.info(healthCheckInfo.toString());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>初始化 <code>healthIndicatorProcessor</code>，将所有的<code>healthIndicator</code> 类型的<code>bean</code> 找出来，然后放在一个<code>map</code>中等待<code>readiness check</code>。如果想要在 <code>SOFABoot</code> 的 <code>Readiness Check</code> 里面增加一个检查项，那么可以直接扩展 <code>Spring Boot</code> 的<code>HealthIndicator</code>这个接口。</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">init</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 是否已经初始化</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (isInitiated.compareAndSet(<span class=\"literal\">false</span>, <span class=\"literal\">true</span>)) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// applicationContext 验证</span></span><br><span class=\"line\">        Assert.notNull(applicationContext, () -&gt; <span class=\"string\">&quot;Application must not be null&quot;</span>);</span><br><span class=\"line\">        <span class=\"comment\">// 获取所有HealthIndicator类型的bean</span></span><br><span class=\"line\">        Map&lt;String, HealthIndicator&gt; beansOfType = applicationContext</span><br><span class=\"line\">                .getBeansOfType(HealthIndicator.class);</span><br><span class=\"line\">        <span class=\"comment\">// 支持 Reactive 方式</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (ClassUtils.isPresent(REACTOR_CLASS, <span class=\"literal\">null</span>)) &#123;</span><br><span class=\"line\">            applicationContext.getBeansOfType(ReactiveHealthIndicator.class).forEach(</span><br><span class=\"line\">                    (name, indicator) -&gt; beansOfType.put(name, () -&gt; indicator.health().block()));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 排序</span></span><br><span class=\"line\">        healthIndicators = HealthCheckUtils.sortMapAccordingToValue(beansOfType,</span><br><span class=\"line\">                applicationContext.getAutowireCapableBeanFactory());</span><br><span class=\"line\">        <span class=\"comment\">// 构建日志信息</span></span><br><span class=\"line\">        <span class=\"comment\">// Found 2 HealthIndicator implementation:</span></span><br><span class=\"line\">        <span class=\"comment\">// sofaBootHealthIndicator, diskSpaceHealthIndicator</span></span><br><span class=\"line\">        <span class=\"type\">StringBuilder</span> <span class=\"variable\">healthIndicatorInfo</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">StringBuilder</span>(<span class=\"number\">512</span>).append(<span class=\"string\">&quot;Found &quot;</span>)</span><br><span class=\"line\">                .append(healthIndicators.size()).append(<span class=\"string\">&quot; HealthIndicator implementation:&quot;</span>)</span><br><span class=\"line\">                .append(String.join(<span class=\"string\">&quot;,&quot;</span>, healthIndicators.keySet()));</span><br><span class=\"line\">        logger.info(healthIndicatorInfo.toString());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>初始化 <code>afterReadinessCheckCallbackProcessor</code>。如果想要在 <code>Readiness Check</code> 之后做一些事情，那么可以扩展 <code>SOFABoot</code> 的这个接口</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">init</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">//  是否已经初始化</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (isInitiated.compareAndSet(<span class=\"literal\">false</span>, <span class=\"literal\">true</span>)) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// applicationContext 验证</span></span><br><span class=\"line\">        Assert.notNull(applicationContext, () -&gt; <span class=\"string\">&quot;Application must not be null&quot;</span>);</span><br><span class=\"line\">        <span class=\"comment\">// 找到所有 ReadinessCheckCallback 类型的 bean </span></span><br><span class=\"line\">        Map&lt;String, ReadinessCheckCallback&gt; beansOfType = applicationContext</span><br><span class=\"line\">                .getBeansOfType(ReadinessCheckCallback.class);</span><br><span class=\"line\">        <span class=\"comment\">// 排序</span></span><br><span class=\"line\">        readinessCheckCallbacks = HealthCheckUtils.sortMapAccordingToValue(beansOfType,</span><br><span class=\"line\">                applicationContext.getAutowireCapableBeanFactory());</span><br><span class=\"line\">        <span class=\"comment\">// 构建日志</span></span><br><span class=\"line\">        <span class=\"type\">StringBuilder</span> <span class=\"variable\">applicationCallbackInfo</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">StringBuilder</span>(<span class=\"number\">512</span>).append(<span class=\"string\">&quot;Found &quot;</span>)</span><br><span class=\"line\">                .append(readinessCheckCallbacks.size())</span><br><span class=\"line\">                .append(<span class=\"string\">&quot; ReadinessCheckCallback implementation: &quot;</span>)</span><br><span class=\"line\">                .append(String.join(<span class=\"string\">&quot;,&quot;</span>, beansOfType.keySet()));</span><br><span class=\"line\">        logger.info(applicationCallbackInfo.toString());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p><code>readinessHealthCheck</code>，前面的几个<code>init</code>方法中均是为<code>readinessHealthCheck</code>做准备的，到这里<code>SOFABoot</code>已经拿到了当前多有的<code>HealthChecker</code>、<code>HealthIndicator</code> 和 <code>ReadinessCheckCallback</code> 类型的 <code>bean</code> 信息。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// readiness health check</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">readinessHealthCheck</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 是否跳过所有check,可以通过 com.alipay.sofa.healthcheck.skip.all 配置项配置决定</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (skipAllCheck()) &#123;</span><br><span class=\"line\">        logger.warn(<span class=\"string\">&quot;Skip all readiness health check.&quot;</span>);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 是否跳过所有 HealthChecker 类型bean的 readinessHealthCheck,</span></span><br><span class=\"line\">        <span class=\"comment\">// 可以通过com.alipay.sofa.healthcheck.skip.component配置项配置</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (skipComponent()) &#123;</span><br><span class=\"line\">            logger.warn(<span class=\"string\">&quot;Skip HealthChecker health check.&quot;</span>);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">//HealthChecker 的 readiness check</span></span><br><span class=\"line\">            healthCheckerStatus = healthCheckerProcessor</span><br><span class=\"line\">                .readinessHealthCheck(healthCheckerDetails);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 是否跳过所有HealthIndicator 类型bean的readinessHealthCheck</span></span><br><span class=\"line\">        <span class=\"comment\">// 可以通过 com.alipay.sofa.healthcheck.skip.indicator配置项配置</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (skipIndicator()) &#123;</span><br><span class=\"line\">            logger.warn(<span class=\"string\">&quot;Skip HealthIndicator health check.&quot;</span>);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">//HealthIndicator 的 readiness check</span></span><br><span class=\"line\">            healthIndicatorStatus = healthIndicatorProcessor</span><br><span class=\"line\">                .readinessHealthCheck(healthIndicatorDetails);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// ReadinessCheck 之后的回调函数，做一些后置处理</span></span><br><span class=\"line\">    healthCallbackStatus = afterReadinessCheckCallbackProcessor</span><br><span class=\"line\">        .afterReadinessCheckCallback(healthCallbackDetails);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (healthCheckerStatus &amp;&amp; healthIndicatorStatus &amp;&amp; healthCallbackStatus) &#123;</span><br><span class=\"line\">        logger.info(<span class=\"string\">&quot;Readiness check result: success&quot;</span>);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        logger.error(<span class=\"string\">&quot;Readiness check result: fail&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h4 id=\"Readiness-Check-做了什么\"><a href=\"#Readiness-Check-做了什么\" class=\"headerlink\" title=\"Readiness Check 做了什么\"></a>Readiness Check 做了什么</h4><p>前面是 <code>SOFABoot</code> 健康检查组件处理健康检查逻辑的一个大体流程，了解到了 <code>Readiness</code> 包括检查 <code>HealthChecker</code> 类型的<code>bean</code>和<code>HealthIndicator</code> 类型的 <code>bean</code>。其中<code>HealthIndicator</code>是<code>SpringBoot</code>自己的接口 ，而 <code>HealthChecker</code> 是 <code>SOFABoot</code> 提供的接口。下面继续通过 <code>XXXProcess</code> 来看下 <code>Readiness Check</code> 到底做了什么？</p>\n<h4 id=\"HealthCheckerProcessor\"><a href=\"#HealthCheckerProcessor\" class=\"headerlink\" title=\"HealthCheckerProcessor\"></a>HealthCheckerProcessor</h4><p><code>HealthChecker</code> 的健康检查处理器，<code>readinessHealthCheck</code> 方法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">readinessHealthCheck</span><span class=\"params\">(Map&lt;String, Health&gt; healthMap)</span> &#123;</span><br><span class=\"line\">    Assert.notNull(healthCheckers, <span class=\"string\">&quot;HealthCheckers must not be null.&quot;</span>);</span><br><span class=\"line\">    logger.info(<span class=\"string\">&quot;Begin SOFABoot HealthChecker readiness check.&quot;</span>);</span><br><span class=\"line\">    <span class=\"type\">boolean</span> <span class=\"variable\">result</span> <span class=\"operator\">=</span> healthCheckers.entrySet().stream()</span><br><span class=\"line\">            .map(entry -&gt; doHealthCheck(entry.getKey(), entry.getValue(), <span class=\"literal\">true</span>, healthMap, <span class=\"literal\">true</span>))</span><br><span class=\"line\">            .reduce(<span class=\"literal\">true</span>, BinaryOperators.andBoolean());</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (result) &#123;</span><br><span class=\"line\">        logger.info(<span class=\"string\">&quot;SOFABoot HealthChecker readiness check result: success.&quot;</span>);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        logger.error(<span class=\"string\">&quot;SOFABoot HealthChecker readiness check result: failed.&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这里每个<code>HealthChecker</code>又委托给<code>doHealthCheck</code>来检查</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"type\">boolean</span> <span class=\"title function_\">doHealthCheck</span><span class=\"params\">(String beanId, HealthChecker healthChecker, <span class=\"type\">boolean</span> isRetry,</span></span><br><span class=\"line\"><span class=\"params\">                              Map&lt;String, Health&gt; healthMap, <span class=\"type\">boolean</span> isReadiness)</span> &#123;</span><br><span class=\"line\">    Assert.notNull(healthMap, <span class=\"string\">&quot;HealthMap must not be null&quot;</span>);</span><br><span class=\"line\">    Health health;</span><br><span class=\"line\">    <span class=\"type\">boolean</span> result;</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">retryCount</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"comment\">// check 类型  readiness ？ liveness</span></span><br><span class=\"line\">    <span class=\"type\">String</span> <span class=\"variable\">checkType</span> <span class=\"operator\">=</span> isReadiness ? <span class=\"string\">&quot;readiness&quot;</span> : <span class=\"string\">&quot;liveness&quot;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">do</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 获取 Health 对象</span></span><br><span class=\"line\">        health = healthChecker.isHealthy();</span><br><span class=\"line\">        <span class=\"comment\">// 获取 健康检查状态结果</span></span><br><span class=\"line\">        result = health.getStatus().equals(Status.UP);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (result) &#123;</span><br><span class=\"line\">            logger.info(<span class=\"string\">&quot;HealthChecker[&#123;&#125;] &#123;&#125; check success with &#123;&#125; retry.&quot;</span>, beanId, checkType,retryCount);</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            logger.info(<span class=\"string\">&quot;HealthChecker[&#123;&#125;] &#123;&#125; check fail with &#123;&#125; retry.&quot;</span>, beanId, checkType,retryCount);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 重试 &amp;&amp; 等待</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (isRetry &amp;&amp; retryCount &lt; healthChecker.getRetryCount()) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                retryCount += <span class=\"number\">1</span>;</span><br><span class=\"line\">                TimeUnit.MILLISECONDS.sleep(healthChecker.getRetryTimeInterval());</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">                logger</span><br><span class=\"line\">                    .error(</span><br><span class=\"line\">                        String</span><br><span class=\"line\">                            .format(</span><br><span class=\"line\">                                <span class=\"string\">&quot;Exception occurred while sleeping of %d retry HealthChecker[%s] %s check.&quot;</span>,</span><br><span class=\"line\">                                retryCount, beanId, checkType), e);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">while</span> (isRetry &amp;&amp; retryCount &lt; healthChecker.getRetryCount());</span><br><span class=\"line\">    <span class=\"comment\">// 将当前 实例 bean 的健康检查结果存到结果集healthMap中</span></span><br><span class=\"line\">    healthMap.put(beanId, health);</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!result) &#123;</span><br><span class=\"line\">            logger</span><br><span class=\"line\">                .error(</span><br><span class=\"line\">                    <span class=\"string\">&quot;HealthChecker[&#123;&#125;] &#123;&#125; check fail with &#123;&#125; retry; fail details:&#123;&#125;; strict mode:&#123;&#125;&quot;</span>,</span><br><span class=\"line\">                    beanId, checkType, retryCount,</span><br><span class=\"line\">                    objectMapper.writeValueAsString(health.getDetails()),</span><br><span class=\"line\">                    healthChecker.isStrictCheck());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (JsonProcessingException ex) &#123;</span><br><span class=\"line\">        logger.error(</span><br><span class=\"line\">            String.format(<span class=\"string\">&quot;Error occurred while doing HealthChecker %s check.&quot;</span>, checkType), ex);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 返回健康检查结果</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> !healthChecker.isStrictCheck() || result;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这里的 <code>doHealthCheck</code> 结果需要依赖具体 <code>HealthChecker</code> 实现类的处理。通过这样一种方式可以<code>SOFABoot</code>可以很友好的实现对所以 <code>HealthChecker</code> 的健康检查。<code>HealthIndicatorProcessor</code> 的 <code>readinessHealthCheck</code> 和<code>HealthChecker</code>的基本差不多；有兴趣的可以自行阅读源码 <a href=\"https://github.com/alipay/sofa-boot\">Alipay-SOFABoot</a>。</p>\n<h4 id=\"AfterReadinessCheckCallbackProcessor\"><a href=\"#AfterReadinessCheckCallbackProcessor\" class=\"headerlink\" title=\"AfterReadinessCheckCallbackProcessor\"></a>AfterReadinessCheckCallbackProcessor</h4><p>这个接口是 <code>SOFABoot</code> 提供的一个扩展接口， 用于在 <code>Readiness Check</code> 之后做一些事情。其实现思路和前面的<code>XXXXProcessor</code> 是一样的，对之前初始化时得到的所有的<code>ReadinessCheckCallbacks</code>实例<code>bean</code>逐一进行回调处理。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">afterReadinessCheckCallback</span><span class=\"params\">(Map&lt;String, Health&gt; healthMap)</span> &#123;</span><br><span class=\"line\">    logger.info(<span class=\"string\">&quot;Begin ReadinessCheckCallback readiness check&quot;</span>);</span><br><span class=\"line\">    Assert.notNull(readinessCheckCallbacks, <span class=\"string\">&quot;ReadinessCheckCallbacks must not be null.&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">boolean</span> <span class=\"variable\">result</span> <span class=\"operator\">=</span> readinessCheckCallbacks.entrySet().stream()</span><br><span class=\"line\">            .map(entry -&gt; doHealthCheckCallback(entry.getKey(), entry.getValue(), healthMap))</span><br><span class=\"line\">            .reduce(<span class=\"literal\">true</span>, BinaryOperators.andBoolean());</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (result) &#123;</span><br><span class=\"line\">        logger.info(<span class=\"string\">&quot;ReadinessCheckCallback readiness check result: success.&quot;</span>);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        logger.error(<span class=\"string\">&quot;ReadinessCheckCallback readiness check result: failed.&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>同样也是委托给了<code>doHealthCheckCallback</code>来处理</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"type\">boolean</span> <span class=\"title function_\">doHealthCheckCallback</span><span class=\"params\">(String beanId,</span></span><br><span class=\"line\"><span class=\"params\">                                      ReadinessCheckCallback readinessCheckCallback,</span></span><br><span class=\"line\"><span class=\"params\">                                      Map&lt;String, Health&gt; healthMap)</span> &#123;</span><br><span class=\"line\">    Assert.notNull(healthMap, () -&gt; <span class=\"string\">&quot;HealthMap must not be null&quot;</span>);</span><br><span class=\"line\">    <span class=\"type\">boolean</span> <span class=\"variable\">result</span> <span class=\"operator\">=</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    <span class=\"type\">Health</span> <span class=\"variable\">health</span> <span class=\"operator\">=</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        health = readinessCheckCallback.onHealthy(applicationContext);</span><br><span class=\"line\">        result = health.getStatus().equals(Status.UP);</span><br><span class=\"line\">        <span class=\"comment\">// print log 省略</span></span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (Throwable t) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 异常处理</span></span><br><span class=\"line\">    &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 存入 healthMap</span></span><br><span class=\"line\">        healthMap.put(beanId, health);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"扩展-Readiness-Check-能力\"><a href=\"#扩展-Readiness-Check-能力\" class=\"headerlink\" title=\"扩展 Readiness Check 能力\"></a>扩展 Readiness Check 能力</h4><p>按照上面的分析，我们可以自己来实现下这几个扩展。</p>\n<h4 id=\"实现-HealthChecker-接口\"><a href=\"#实现-HealthChecker-接口\" class=\"headerlink\" title=\"实现 HealthChecker 接口\"></a>实现 HealthChecker 接口</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">GlmapperHealthChecker</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">HealthChecker</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Health <span class=\"title function_\">isHealthy</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 可以检测数据库连接是否成功</span></span><br><span class=\"line\">        <span class=\"comment\">// 可以检测zookeeper是否启动成功</span></span><br><span class=\"line\">        <span class=\"comment\">// 可以检测redis客户端是否启动成功</span></span><br><span class=\"line\">        <span class=\"comment\">// everything you want ...</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(OK)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> Health.up().build();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> Health.down().build();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">getComponentName</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 组件名</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;GlmapperComponent&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">getRetryCount</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 重试次数</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">long</span> <span class=\"title function_\">getRetryTimeInterval</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 重试间隔</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">isStrictCheck</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"实现-ReadinessCheckCallback-接口\"><a href=\"#实现-ReadinessCheckCallback-接口\" class=\"headerlink\" title=\"实现 ReadinessCheckCallback 接口\"></a>实现 ReadinessCheckCallback 接口</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">GlmapperReadinessCheckCallback</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">ReadinessCheckCallback</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Health <span class=\"title function_\">onHealthy</span><span class=\"params\">(ApplicationContext applicationContext)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">Object</span> <span class=\"variable\">glmapperHealthChecker</span> <span class=\"operator\">=</span> applicationContext.getBean(<span class=\"string\">&quot;glmapperHealthChecker&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (glmapperHealthChecker <span class=\"keyword\">instanceof</span> GlmapperHealthChecker)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> Health.up().build();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> Health.down().build();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>再来看下健康检查日志：</p>\n<p><img src=\"https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2018/11/16/1671b484144d1d65~tplv-t2oaga2asx-image.image\"></p>\n<p>可以看到我们自己定义的检查类型<code>ready</code>了。</p>\n<p>从日志看到有一个 <code>sofaBootHealthIndicator</code>，实现了<code>HealthIndicator</code> 接口。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">SofaBootHealthIndicator</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">HealthIndicator</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">String</span>    <span class=\"variable\">CHECK_RESULT_PREFIX</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;Middleware&quot;</span>;</span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> HealthCheckerProcessor healthCheckerProcessor;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Health <span class=\"title function_\">health</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        Map&lt;String, Health&gt; healths = <span class=\"keyword\">new</span> <span class=\"title class_\">HashMap</span>&lt;&gt;();</span><br><span class=\"line\">        <span class=\"comment\">// 调用了 healthCheckerProcessor 的 livenessHealthCheck</span></span><br><span class=\"line\">        <span class=\"type\">boolean</span> <span class=\"variable\">checkSuccessful</span> <span class=\"operator\">=</span> healthCheckerProcessor.livenessHealthCheck(healths);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (checkSuccessful) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> Health.up().withDetail(CHECK_RESULT_PREFIX, healths).build();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> Health.down().withDetail(CHECK_RESULT_PREFIX, healths).build();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><code>livenessHealthCheck</code> 和 <code>readinessHealthCheck</code> 两个方法都是交给 <code>doHealthCheck</code> 来处理的，没有看出来有什么区别。</p>\n<h2 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h2><p>本文基于 <code>SOFABoot 3.0.0</code> 版本，与之前版本有一些区别。详细变更见：<a href=\"http://www.sofastack.tech/sofa-boot/docs/upgrade_3_x\">SOFABoot upgrade_3_x</a>。本篇文章简单介绍了 <code>SOFABoot</code> 对 <code>SpringBoot</code> 健康检查能力扩展的具体实现细节。</p>\n<p>最后再来补充下 <code>liveness</code> 和 <code>readiness</code>，从字面意思来理解，<code>liveness</code>就是是否是活的，<code>readiness</code> 就是意思是否可访问的。</p>\n<ul>\n<li><code>readiness</code>：应用即便已经正在运行了，它仍然需要一定时间才能 提供 服务，这段时间可能用来加载数据，可能用来构建缓存，可能用来注册服务，可能用来选举 <code>Leader</code>等等。总之 <code>Readiness</code> 检查通过前是不会有流量发给应用的。目前 <code>SOFARPC</code> 就是在 <code>readiness check</code> 之后才会将所有的服务注册到注册中心去。</li>\n<li><code>liveness</code>：检测应用程序是否正在运行</li>\n</ul>\n","text":"Liveness Check & Readiness CheckSpring Boot 提供了一个基础的健康检查的能力，中间件和应用都可以扩展来实现自己的健康检...","permalink":"/post/sofa/sofa-boot-health-analizy","photos":[],"count_time":{"symbolsCount":"21k","symbolsTime":"19 mins."},"categories":[{"name":"SOFA","slug":"SOFA","count":9,"path":"api/categories/SOFA.json"}],"tags":[{"name":"框架","slug":"框架","count":1,"path":"api/tags/框架.json"},{"name":"Readiness Check","slug":"Readiness-Check","count":1,"path":"api/tags/Readiness-Check.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Liveness-Check-Readiness-Check\"><span class=\"toc-text\">Liveness Check &amp;  Readiness Check</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%BD%BF%E7%94%A8%E6%96%B9%E5%BC%8F\"><span class=\"toc-text\">使用方式</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%81%A5%E5%BA%B7%E6%A3%80%E6%9F%A5%E5%90%AF%E5%8A%A8%E6%97%A5%E5%BF%97\"><span class=\"toc-text\">健康检查启动日志</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90\"><span class=\"toc-text\">代码分析</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#SofaBootHealthCheckInitializer\"><span class=\"toc-text\">SofaBootHealthCheckInitializer</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#1%E3%80%81springCloud-%E7%8E%AF%E5%A2%83%E9%AA%8C%E8%AF%81\"><span class=\"toc-text\">1、springCloud 环境验证</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#2%E3%80%81%E5%88%9D%E5%A7%8B%E5%8C%96-logging-level\"><span class=\"toc-text\">2、初始化 logging.level</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#SofaBootHealthCheckAutoConfiguration\"><span class=\"toc-text\">SofaBootHealthCheckAutoConfiguration</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#ReadinessCheckListener\"><span class=\"toc-text\">ReadinessCheckListener</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#Readiness-Check-%E5%81%9A%E4%BA%86%E4%BB%80%E4%B9%88\"><span class=\"toc-text\">Readiness Check 做了什么</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#HealthCheckerProcessor\"><span class=\"toc-text\">HealthCheckerProcessor</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#AfterReadinessCheckCallbackProcessor\"><span class=\"toc-text\">AfterReadinessCheckCallbackProcessor</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%89%A9%E5%B1%95-Readiness-Check-%E8%83%BD%E5%8A%9B\"><span class=\"toc-text\">扩展 Readiness Check 能力</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%AE%9E%E7%8E%B0-HealthChecker-%E6%8E%A5%E5%8F%A3\"><span class=\"toc-text\">实现 HealthChecker 接口</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%AE%9E%E7%8E%B0-ReadinessCheckCallback-%E6%8E%A5%E5%8F%A3\"><span class=\"toc-text\">实现 ReadinessCheckCallback 接口</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%B0%8F%E7%BB%93\"><span class=\"toc-text\">小结</span></a></li></ol>","author":{"name":"glmapper","slug":"blog-author","avatar":"https://glmapper-blog.oss-cn-hangzhou.aliyuncs.com/common/favicon.ico","link":"/","description":"开放，开源，分享，共享","socials":{"github":"https://github.com/glmapper","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/2412872703","zhihu":"","csdn":"","juejin":"https://juejin.cn/user/3227821827961806","customs":{"sofastack":{"icon":"https://glmapper-blog.oss-cn-hangzhou.aliyuncs.com/common/sofastack.svg","link":"https://www.sofastack.tech/"}}}},"mapped":true,"hidden":false,"prev_post":{"title":"SOFATracer 插件埋点机制详解","uid":"0b1e2bd1c4a4b8d7f121fe03a5fb0ef3","slug":"sofa/sofa-tracer-mvc-plugin","date":"2018-12-07T11:09:56.000Z","updated":"2024-07-05T04:09:05.803Z","comments":true,"path":"api/articles/sofa/sofa-tracer-mvc-plugin.json","keywords":null,"cover":[],"text":" SOFATracer 是一个用于分布式系统调用跟踪的组件，通过统一的 traceId 将调用链路中的各种网络调用情况以日志的方式记录下来，以达到透视化网络调用...","permalink":"/post/sofa/sofa-tracer-mvc-plugin","photos":[],"count_time":{"symbolsCount":"17k","symbolsTime":"15 mins."},"categories":[{"name":"SOFA","slug":"SOFA","count":9,"path":"api/categories/SOFA.json"}],"tags":[{"name":"分布式链路跟踪","slug":"分布式链路跟踪","count":4,"path":"api/tags/分布式链路跟踪.json"},{"name":"Tracer","slug":"Tracer","count":4,"path":"api/tags/Tracer.json"},{"name":"spring mvc","slug":"spring-mvc","count":1,"path":"api/tags/spring-mvc.json"}],"author":{"name":"glmapper","slug":"blog-author","avatar":"https://glmapper-blog.oss-cn-hangzhou.aliyuncs.com/common/favicon.ico","link":"/","description":"开放，开源，分享，共享","socials":{"github":"https://github.com/glmapper","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/2412872703","zhihu":"","csdn":"","juejin":"https://juejin.cn/user/3227821827961806","customs":{"sofastack":{"icon":"https://glmapper-blog.oss-cn-hangzhou.aliyuncs.com/common/sofastack.svg","link":"https://www.sofastack.tech/"}}}}},"next_post":{"title":"nginx 反向代理和负载均衡策略实战案例","uid":"91728ee079160c4f8cfcf9d960a59096","slug":"middleware/middleware-nginx-proxy","date":"2018-11-15T13:24:52.000Z","updated":"2024-07-05T04:09:05.790Z","comments":true,"path":"api/articles/middleware/middleware-nginx-proxy.json","keywords":null,"cover":[],"text":" 原文：https://juejin.cn/post/6844903594244702215 引言先来看下nginx在web服务器排名上的趋势： 存在即合理，那...","permalink":"/post/middleware/middleware-nginx-proxy","photos":[],"count_time":{"symbolsCount":"7.8k","symbolsTime":"7 mins."},"categories":[{"name":"Middleware","slug":"Middleware","count":14,"path":"api/categories/Middleware.json"}],"tags":[{"name":"nginx","slug":"nginx","count":2,"path":"api/tags/nginx.json"},{"name":"反向代理","slug":"反向代理","count":2,"path":"api/tags/反向代理.json"},{"name":"负载均衡","slug":"负载均衡","count":3,"path":"api/tags/负载均衡.json"}],"author":{"name":"glmapper","slug":"blog-author","avatar":"https://glmapper-blog.oss-cn-hangzhou.aliyuncs.com/common/favicon.ico","link":"/","description":"开放，开源，分享，共享","socials":{"github":"https://github.com/glmapper","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/2412872703","zhihu":"","csdn":"","juejin":"https://juejin.cn/user/3227821827961806","customs":{"sofastack":{"icon":"https://glmapper-blog.oss-cn-hangzhou.aliyuncs.com/common/sofastack.svg","link":"https://www.sofastack.tech/"}}}}}}