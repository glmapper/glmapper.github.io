{"title":"SpringBoot 实践系列-资源访问","uid":"5f271418dba5b05b4849df36b7771e2b","slug":"springboot/springboot-series-access-resource","date":"2019-12-09T09:38:26.000Z","updated":"2024-07-05T04:09:05.827Z","comments":true,"path":"api/articles/springboot/springboot-series-access-resource.json","keywords":null,"cover":null,"content":"<h2 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h2><p>当我们创建一个 SpringBoot web 应用时，有时候需要从 classpath 去加载一些文件，这里记录下在 war 和 jar 两种不同文件格式下加载文件的解决方案</p>\n<span id=\"more\"></span>\n<h2 id=\"The-ResourceLoader\"><a href=\"#The-ResourceLoader\" class=\"headerlink\" title=\"The ResourceLoader\"></a>The ResourceLoader</h2><p>在 Java 中 ，我们可以使用当前线程的 classLoader 去尝试加载文件，但是 Spring Framework 为我们提供了更加优雅的解决方案，例如 ResourceLoader。</p>\n<p>使用 ResourceLoader 时，我们只需要使用 @Autowire 自动注入 ResourceLoader，然后调用 getResource(“somePath”) 方法即可。</p>\n<h3 id=\"在Spring-Boot（WAR）中从资源目录-类路径加载文件的示例\"><a href=\"#在Spring-Boot（WAR）中从资源目录-类路径加载文件的示例\" class=\"headerlink\" title=\"在Spring Boot（WAR）中从资源目录&#x2F;类路径加载文件的示例\"></a>在Spring Boot（WAR）中从资源目录&#x2F;类路径加载文件的示例</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Service(&quot;geolocationservice&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">GeoLocationServiceImpl</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">GeoLocationService</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">Logger</span> <span class=\"variable\">LOGGER</span> <span class=\"operator\">=</span> LoggerFactory.getLogger(GeoLocationServiceImpl.class);</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"type\">DatabaseReader</span> <span class=\"variable\">reader</span> <span class=\"operator\">=</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> ResourceLoader resourceLoader;</span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">GeoLocationServiceImpl</span><span class=\"params\">(ResourceLoader resourceLoader)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.resourceLoader = resourceLoader;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@PostConstruct</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">init</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            LOGGER.info(<span class=\"string\">&quot;GeoLocationServiceImpl: Trying to load GeoLite2-Country database...&quot;</span>);</span><br><span class=\"line\">            <span class=\"type\">Resource</span> <span class=\"variable\">resource</span> <span class=\"operator\">=</span> resourceLoader.getResource(<span class=\"string\">&quot;classpath:GeoLite2-Country.mmdb&quot;</span>);</span><br><span class=\"line\">            <span class=\"type\">File</span> <span class=\"variable\">dbAsFile</span> <span class=\"operator\">=</span> resource.getFile();</span><br><span class=\"line\">            <span class=\"comment\">// Initialize the reader</span></span><br><span class=\"line\">            reader = <span class=\"keyword\">new</span> <span class=\"title class_\">DatabaseReader</span></span><br><span class=\"line\">                        .Builder(dbAsFile)</span><br><span class=\"line\">                        .fileMode(Reader.FileMode.MEMORY)</span><br><span class=\"line\">                        .build();</span><br><span class=\"line\">            LOGGER.info(<span class=\"string\">&quot;GeoLocationServiceImpl: Database was loaded successfully.&quot;</span>);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (IOException | NullPointerException e) &#123;</span><br><span class=\"line\">            LOGGER.error(<span class=\"string\">&quot;Database reader cound not be initialized. &quot;</span>, e);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"meta\">@PreDestroy</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">preDestroy</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (reader != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                reader.close();</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">                LOGGER.error(<span class=\"string\">&quot;Failed to close the reader.&quot;</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"从-SpringBoot-FatJar-中加载资源\"><a href=\"#从-SpringBoot-FatJar-中加载资源\" class=\"headerlink\" title=\"从 SpringBoot FatJar 中加载资源\"></a>从 SpringBoot FatJar 中加载资源</h3><p>如果我们想从 Spring Boot JAR 中的类路径加载文件，则必须使用 resource.getInputStream() 方法将其作为 InputStream 检索。 如果尝试使用resource.getFile()，则会收到错误消息，因为 Spring 尝试访问文件系统路径，但它无法访问 JAR 中的路径。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Service(&quot;geolocationservice&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">GeoLocationServiceImpl</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">GeoLocationService</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">Logger</span> <span class=\"variable\">LOGGER</span> <span class=\"operator\">=</span> LoggerFactory.getLogger(GeoLocationServiceImpl.class);</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"type\">DatabaseReader</span> <span class=\"variable\">reader</span> <span class=\"operator\">=</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> ResourceLoader resourceLoader;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Inject</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">GeoLocationServiceImpl</span><span class=\"params\">(ResourceLoader resourceLoader)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.resourceLoader = resourceLoader;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@PostConstruct</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">init</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            LOGGER.info(<span class=\"string\">&quot;GeoLocationServiceImpl: Trying to load GeoLite2-Country database...&quot;</span>);</span><br><span class=\"line\">            <span class=\"type\">Resource</span> <span class=\"variable\">resource</span> <span class=\"operator\">=</span> resourceLoader.getResource(<span class=\"string\">&quot;classpath:GeoLite2-Country.mmdb&quot;</span>);</span><br><span class=\"line\">            <span class=\"type\">InputStream</span> <span class=\"variable\">dbAsStream</span> <span class=\"operator\">=</span> resource.getInputStream(); <span class=\"comment\">// &lt;-- this is the difference</span></span><br><span class=\"line\">            <span class=\"comment\">// Initialize the reader</span></span><br><span class=\"line\">            reader = <span class=\"keyword\">new</span> <span class=\"title class_\">DatabaseReader</span></span><br><span class=\"line\">                        .Builder(dbAsStream)</span><br><span class=\"line\">                        .fileMode(Reader.FileMode.MEMORY)</span><br><span class=\"line\">                        .build();</span><br><span class=\"line\">            LOGGER.info(<span class=\"string\">&quot;GeoLocationServiceImpl: Database was loaded successfully.&quot;</span>);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (IOException | NullPointerException e) &#123;</span><br><span class=\"line\">            LOGGER.error(<span class=\"string\">&quot;Database reader cound not be initialized. &quot;</span>, e);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@PreDestroy</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">preDestroy</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (reader != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                reader.close();</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">                LOGGER.error(<span class=\"string\">&quot;Failed to close the reader.&quot;</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","text":"简介当我们创建一个 SpringBoot web 应用时，有时候需要从 classpath 去加载一些文件，这里记录下在 war 和 jar 两种不同文件格式下...","permalink":"/post/springboot/springboot-series-access-resource","photos":[],"count_time":{"symbolsCount":"3.8k","symbolsTime":"3 mins."},"categories":[{"name":"SpringBoot","slug":"SpringBoot","count":17,"path":"api/categories/SpringBoot.json"}],"tags":[{"name":"SpringBoot","slug":"SpringBoot","count":17,"path":"api/tags/SpringBoot.json"},{"name":"ResourceLoader","slug":"ResourceLoader","count":1,"path":"api/tags/ResourceLoader.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E7%AE%80%E4%BB%8B\"><span class=\"toc-text\">简介</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#The-ResourceLoader\"><span class=\"toc-text\">The ResourceLoader</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%9C%A8Spring-Boot%EF%BC%88WAR%EF%BC%89%E4%B8%AD%E4%BB%8E%E8%B5%84%E6%BA%90%E7%9B%AE%E5%BD%95-%E7%B1%BB%E8%B7%AF%E5%BE%84%E5%8A%A0%E8%BD%BD%E6%96%87%E4%BB%B6%E7%9A%84%E7%A4%BA%E4%BE%8B\"><span class=\"toc-text\">在Spring Boot（WAR）中从资源目录&#x2F;类路径加载文件的示例</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%BB%8E-SpringBoot-FatJar-%E4%B8%AD%E5%8A%A0%E8%BD%BD%E8%B5%84%E6%BA%90\"><span class=\"toc-text\">从 SpringBoot FatJar 中加载资源</span></a></li></ol></li></ol>","author":{"name":"glmapper","slug":"blog-author","avatar":"https://glmapper-blog.oss-cn-hangzhou.aliyuncs.com/common/favicon.ico","link":"/","description":"开放，开源，分享，共享","socials":{"github":"https://github.com/glmapper","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/2412872703","zhihu":"","csdn":"","juejin":"https://juejin.cn/user/3227821827961806","customs":{"sofastack":{"icon":"https://glmapper-blog.oss-cn-hangzhou.aliyuncs.com/common/sofastack.svg","link":"https://www.sofastack.tech/"}}}},"mapped":true,"hidden":false,"prev_post":{"title":"SpringBoot 源码系列-日志详解","uid":"f5d3246c456264d1eef61369dbcbbbab","slug":"springboot/springboot-series-log","date":"2019-12-14T09:18:07.000Z","updated":"2024-07-05T04:09:05.829Z","comments":true,"path":"api/articles/springboot/springboot-series-log.json","keywords":null,"cover":[],"text":"Spring Boot 使用 Commons Logging 进行所有内部日志记录，但保留底层日志实现。为 Java Util Logging、Log4J2 和...","permalink":"/post/springboot/springboot-series-log","photos":[],"count_time":{"symbolsCount":"30k","symbolsTime":"27 mins."},"categories":[{"name":"SpringBoot","slug":"SpringBoot","count":17,"path":"api/categories/SpringBoot.json"}],"tags":[{"name":"log","slug":"log","count":5,"path":"api/tags/log.json"},{"name":"SpringBoot","slug":"SpringBoot","count":17,"path":"api/tags/SpringBoot.json"}],"author":{"name":"glmapper","slug":"blog-author","avatar":"https://glmapper-blog.oss-cn-hangzhou.aliyuncs.com/common/favicon.ico","link":"/","description":"开放，开源，分享，共享","socials":{"github":"https://github.com/glmapper","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/2412872703","zhihu":"","csdn":"","juejin":"https://juejin.cn/user/3227821827961806","customs":{"sofastack":{"icon":"https://glmapper-blog.oss-cn-hangzhou.aliyuncs.com/common/sofastack.svg","link":"https://www.sofastack.tech/"}}}}},"next_post":{"title":"SpringBoot 源码系列-启动过程分析","uid":"fb1d63795354398f9ac651e5b767f565","slug":"springboot/springboot-series-started","date":"2019-12-07T09:41:01.000Z","updated":"2024-07-05T04:09:05.831Z","comments":true,"path":"api/articles/springboot/springboot-series-started.json","keywords":null,"cover":[],"text":"SpringBoot 作为目前非常流行的微服务框架，它使得构建独立的 Spring 生产级应用变得非常简单，因此受到很多互联网企业的青睐。 最近在写 SOFAT...","permalink":"/post/springboot/springboot-series-started","photos":[],"count_time":{"symbolsCount":"22k","symbolsTime":"20 mins."},"categories":[{"name":"SpringBoot","slug":"SpringBoot","count":17,"path":"api/categories/SpringBoot.json"}],"tags":[{"name":"SpringBoot","slug":"SpringBoot","count":17,"path":"api/tags/SpringBoot.json"}],"author":{"name":"glmapper","slug":"blog-author","avatar":"https://glmapper-blog.oss-cn-hangzhou.aliyuncs.com/common/favicon.ico","link":"/","description":"开放，开源，分享，共享","socials":{"github":"https://github.com/glmapper","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/2412872703","zhihu":"","csdn":"","juejin":"https://juejin.cn/user/3227821827961806","customs":{"sofastack":{"icon":"https://glmapper-blog.oss-cn-hangzhou.aliyuncs.com/common/sofastack.svg","link":"https://www.sofastack.tech/"}}}}}}