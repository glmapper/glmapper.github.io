{"title":"SpringBoot 源码系列-自动配置及 starter 机制解析","uid":"e42097f5a6c0cf4efef189a5728220a9","slug":"springboot/springboot-series-auto-configure","date":"2020-01-05T08:36:19.000Z","updated":"2024-07-05T04:09:05.827Z","comments":true,"path":"api/articles/springboot/springboot-series-auto-configure.json","keywords":null,"cover":null,"content":"<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>一家之言，如有任何错误，请批评指出，不胜感激</p></blockquote>\n<p><strong>本篇主要来讨论研究两个问题：1、什么自动配置，2、如何编写自动配置</strong></p>\n<p>在使用 <code>Spring</code> 作为项目开发框架的过程中，当需要集成某个组件时，通常需要大量的 <code>xml</code> 配置才可以让项目工程 <code>run</code> 起来，下面先以 <code>mybatis</code> 为例，来看下如何使用 <code>mybatis-Spring</code> 模块，需要哪些必不可少的依赖和配置。</p>\n<span id=\"more\"></span>\n\n<h2 id=\"使用-mybatis-spring\"><a href=\"#使用-mybatis-spring\" class=\"headerlink\" title=\"使用 mybatis-spring\"></a>使用 mybatis-spring</h2><p>任何组件的集成都绕不过两个问题：依赖和配置，关于配置在这篇文章中介绍了配置的一些点，有兴趣的可以看下。</p>\n<h3 id=\"依赖\"><a href=\"#依赖\" class=\"headerlink\" title=\"依赖\"></a>依赖</h3><p>从 <code>mybatis</code> 的官方文当可以了解到，要使用 <code>MyBatis-Spring</code> 模块，需要在类路径下包含 <code>mybatis-spring.jar</code> 文件和相关依赖（如：<code>mysql-connector-java</code>）即可。如果使用 <code>Maven</code> 作为构建工具，则在 <code>pom.xml</code> 中加入以下代码即可：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.mybatis<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>mybatis-spring<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>$&#123;latest.version&#125;<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"bean-配置\"><a href=\"#bean-配置\" class=\"headerlink\" title=\"bean 配置\"></a>bean 配置</h3><p><code>Spirng</code> 集成 <code>mybatis</code> 通常需要以下 <code>bean</code> 配置：</p>\n<p><strong>1.dataSource</strong></p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;dataSource&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;com.alibaba.druid.pool.DruidDataSource&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">init-method</span>=<span class=\"string\">&quot;init&quot;</span> <span class=\"attr\">destroy-method</span>=<span class=\"string\">&quot;close&quot;</span>&gt;</span></span><br><span class=\"line\">    // 省略其他配置</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p><strong>2.sqlSessionFactory</strong></p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;sqlSessionFactory&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;org.mybatis.spring.SqlSessionFactoryBean&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;dataSource&quot;</span> <span class=\"attr\">ref</span>=<span class=\"string\">&quot;dataSource&quot;</span> /&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p><strong>3.其他：包扫描和事务配置</strong></p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- DAO 接口所在包名，Spring 会自动查找其下的类，并将其定义为一个 Spring Bean --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;org.mybatis.spring.mapper.MapperScannerConfigurer&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;basePackage&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;com.glmapper.bridge.boot.dao&quot;</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;sqlSessionFactoryBeanName&quot;</span> <span class=\"attr\">value</span>=<span class=\"string\">&quot;sqlSessionFactory&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- (事务管理)transaction manager --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;transactionManager&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">class</span>=<span class=\"string\">&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;dataSource&quot;</span> <span class=\"attr\">ref</span>=<span class=\"string\">&quot;dataSource&quot;</span> /&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>这些个 bean 是在 Spring 中使用 mybatis 框架时基本必不可少的配置。那么在 SpringBoot 中呢？</p>\n<h2 id=\"SpringBoot-中如何集成-mybatis-的\"><a href=\"#SpringBoot-中如何集成-mybatis-的\" class=\"headerlink\" title=\"SpringBoot 中如何集成 mybatis 的\"></a>SpringBoot 中如何集成 mybatis 的</h2><p>SpringBoot 集成 mybatis 非常简单，加一下下面的 starter ，再在 application.properties 配置下数据库连接配置即可；不需要配置 datasource，sqlSessionFactory 等这些 bean。</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.mybatis.spring.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>2.1.1<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>官方文档：<a href=\"https://mybatis.org/spring-boot-starter/mybatis-spring-boot-autoconfigure/\">https://mybatis.org/spring-boot-starter/mybatis-spring-boot-autoconfigure/</a></p></blockquote>\n<h3 id=\"mybatis-starter-是如何规避-bean-配置的\"><a href=\"#mybatis-starter-是如何规避-bean-配置的\" class=\"headerlink\" title=\"mybatis starter 是如何规避 bean 配置的\"></a>mybatis starter 是如何规避 bean 配置的</h3><p>引用 <code>mybatis-spring-boot-starter</code> 既然可以不用在 <code>xml</code> 中配置 <code>bean</code> ，那肯定是这些 <code>bean</code> 是在 <code>mybatis-spring-boot-starter</code> 中通过某种方式被创建了。</p>\n<p>在 <code>SpringBoot</code> 官方文档的描述中，<code>starter</code> 只是用来管理依赖的，一般不会有代码，自动配置的代码一般在 <code>xxxx-autoconfigure</code> 中。<code>mybatis</code> 的自动配置相关代码是在 <code>mybatis-spring-boot-autoconfigure</code> 中。</p>\n<p><code>mybatis-spring-boot-autoconfigure</code> 这依赖中只有简单的几个类，其中最核心的就是 <code>MybatisAutoConfiguration</code> 这个配置类。另外一个 <code>MybatisProperties</code> 是 <code>mybatis spring boot</code> 的属性配置类，就是常见的 <code>mybatis.xxxx</code>。</p>\n<h3 id=\"MybatisAutoConfiguration-自动配置类\"><a href=\"#MybatisAutoConfiguration-自动配置类\" class=\"headerlink\" title=\"MybatisAutoConfiguration 自动配置类\"></a>MybatisAutoConfiguration 自动配置类</h3><p><code>MybatisAutoConfiguration</code> 的定义及其生效条件：</p>\n<ul>\n<li>1.当前 <code>classpath</code> 下必须有 <code>SqlSessionFactory</code> 和 <code>SqlSessionFactoryBean</code> 这两个类</li>\n<li>2.存在 <code>DataSource bean</code> 实例</li>\n<li>3.有配置类 <code>MybatisProperties</code> 实例</li>\n<li>4.在 <code>DataSourceAutoConfiguration</code> 和 <code>MybatisLanguageDriverAutoConfiguration</code> 两个自动配置类之后刷新</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@ConditionalOnClass(&#123; SqlSessionFactory.class, SqlSessionFactoryBean.class &#125;)</span></span><br><span class=\"line\"><span class=\"meta\">@ConditionalOnSingleCandidate(DataSource.class)</span></span><br><span class=\"line\"><span class=\"meta\">@EnableConfigurationProperties(MybatisProperties.class)</span></span><br><span class=\"line\"><span class=\"meta\">@AutoConfigureAfter(&#123; DataSourceAutoConfiguration.class, MybatisLanguageDriverAutoConfiguration.class &#125;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">MybatisAutoConfiguration</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">InitializingBean</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 定义 SqlSessionFactory bean</span></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"meta\">@ConditionalOnMissingBean</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> SqlSessionFactory <span class=\"title function_\">sqlSessionFactory</span><span class=\"params\">(DataSource dataSource)</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">        <span class=\"comment\">// </span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// check</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">afterPropertiesSet</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    checkConfigFileExists();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 省略其他code</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>从上面的代码片段大体可以知道 <code>MybatisAutoConfiguration</code> 所做的事情主要包括以下几点：</p>\n<ul>\n<li>1、刷新 <code>SqlSessionFactory</code> 和 <code>SqlSessionFactoryBean</code> 两个 <code>bean；</code></li>\n<li>2、<code>afterPropertiesSet</code> 中做一些准备或者检验工作（这里就是 <code>check 了 mybatis</code> 的配置文件是否配置了）</li>\n</ul>\n<p>关于 <code>DataSource</code> 的 <code>bean</code> ，则是由 <code>DataSourceAutoConfiguration</code> 这个配置类中来定义。</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>具体代码有兴趣的读者可以自己查阅相关源码，这里就不展开了。</p></blockquote>\n<p>所以整体看来， <code>MybatisAutoConfiguration</code> 及其所依赖的 <code>xxxConfiguration</code> 会帮助用户定义 <code>bean</code> 和解析配置。</p>\n<h3 id=\"mybatis-自动配置的-bean-是如何生效的\"><a href=\"#mybatis-自动配置的-bean-是如何生效的\" class=\"headerlink\" title=\"mybatis 自动配置的 bean 是如何生效的\"></a>mybatis 自动配置的 bean 是如何生效的</h3><p>上面分析到 <code>MybatisAutoConfiguration</code> 及其依赖的配置自动类会帮助创建运行时所需要的 <code>bean</code>，那么这些 <code>bean</code> 是如何被 <code>SpringBoot</code> 框架感知并加载的呢？</p>\n<p>其实一般的项目工程中，如果我们在一个类上打了 <code>@Configuration</code> 注解的话，<code>Spring</code> 会直接能够加载到的（前提是这个类所在的包在启动类的子包下）。但是在框架层面，项目的包和所引入的组件包的包路径肯定是有差异的，所以在一些情况下会刷不到依赖中的 <code>bean</code>。</p>\n<p><code>SpringBoot</code> 中提供了一种类似于 <code>SPI</code> 机制的方式来帮忙加载 <code>EnableAutoConfiguration、ApplicationListner、ApplicationContextInitializer</code> 等类型的 <code>bean</code>。比如 <code>mybatis</code> 自动配置的配置如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># Auto Configure</span><br><span class=\"line\">org.springframework.boot.autoconfigure.EnableAutoConfiguration=\\</span><br><span class=\"line\">org.mybatis.spring.boot.autoconfigure.MybatisLanguageDriverAutoConfiguration,\\</span><br><span class=\"line\">org.mybatis.spring.boot.autoconfigure.MybatisAutoConfiguration</span><br></pre></td></tr></table></figure>\n\n<p>其处理逻辑在 <code>SpringApplication</code> 类中，具体解析方法如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> &lt;T&gt; List&lt;T&gt; <span class=\"title function_\">createSpringFactoriesInstances</span><span class=\"params\">(Class&lt;T&gt; type, Class&lt;?&gt;[] parameterTypes,</span></span><br><span class=\"line\"><span class=\"params\">\t\t\tClassLoader classLoader, Object[] args, Set&lt;String&gt; names)</span> &#123;</span><br><span class=\"line\">    List&lt;T&gt; instances = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;(names.size());</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (String name : names) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            Class&lt;?&gt; instanceClass = ClassUtils.forName(name, classLoader);</span><br><span class=\"line\">            Assert.isAssignable(type, instanceClass);</span><br><span class=\"line\">            <span class=\"comment\">// 反射拿到构造函数</span></span><br><span class=\"line\">            Constructor&lt;?&gt; constructor = instanceClass.getDeclaredConstructor(parameterTypes);</span><br><span class=\"line\">            <span class=\"comment\">// 创建 bean </span></span><br><span class=\"line\">            <span class=\"type\">T</span> <span class=\"variable\">instance</span> <span class=\"operator\">=</span> (T) BeanUtils.instantiateClass(constructor, args);</span><br><span class=\"line\">            instances.add(instance);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">catch</span> (Throwable ex) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">IllegalArgumentException</span>(<span class=\"string\">&quot;Cannot instantiate &quot;</span> + type + <span class=\"string\">&quot; : &quot;</span> + name, ex);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> instances;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"如何编写自己的-starter\"><a href=\"#如何编写自己的-starter\" class=\"headerlink\" title=\"如何编写自己的 starter\"></a>如何编写自己的 starter</h2><p>本小节将结合上面的描述，自定义一个 <code>starter</code>，让你的项目和 <code>xml bean</code> 配置说再见。</p>\n<p>场景描述：有两个 <code>bean</code>,一个 <code>parentBean</code>，一个 <code>childBean</code>，<code>parentBean</code> 需要依赖 <code>childBean</code>，<code>parentBean</code> 中又要依赖 <code>http</code> 包</p>\n<p>原来的 <code>xml</code> 配置：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;parentBean&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;com.glmapper.bridge.boot.service.impl.ParentBean&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;childBean&quot;</span> <span class=\"attr\">ref</span>=<span class=\"string\">&quot;childBean&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;childBean&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;com.glmapper.bridge.boot.service.impl.ChildBean&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>下面考虑的是将这些 <code>bean</code> 作为公共组件提供给其他项目工程用，从框架角度来看，最佳实践是：</p>\n<ul>\n<li>提供一个 <code>autoconfigure</code> 模块用于编写自动配置类代码</li>\n<li>提供一个 <code>starter</code>，用于提供给外部用户使用</li>\n</ul>\n<h3 id=\"编写-autoconfigure\"><a href=\"#编写-autoconfigure\" class=\"headerlink\" title=\"编写 autoconfigure\"></a>编写 autoconfigure</h3><ul>\n<li><p>自动配置类</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"comment\">// parentBean 依赖 HttpClient，所以如果没有 HttpClient 则不会刷新当前自动配置类</span></span><br><span class=\"line\"><span class=\"meta\">@ConditionalOnClass(HttpClient.class)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">GlmpperAutoConfiguration</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// ParentBean bean 定义</span></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"meta\">@ConditionalOnMissingBean</span>   <span class=\"comment\">// 如果当前 Spring 容器中已经存在 parentBean则不会再创建</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> ParentBean <span class=\"title function_\">parentBean</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ParentBean</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// ChildBean bean 定义</span></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"meta\">@ConditionalOnMissingBean</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> ChildBean <span class=\"title function_\">childBean</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ChildBean</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>依赖 scope 使用 provided，不直接打在 autoconfigure 依赖中</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.apache.httpcomponents<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>httpclient<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>4.5.6<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">scope</span>&gt;</span>provided<span class=\"tag\">&lt;/<span class=\"name\">scope</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>编写 spring.factories，在 resources&#x2F;META-INF&#x2F; 新建一个 spring.factories 文件，配置如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># Auto Configure</span><br><span class=\"line\">org.springframework.boot.autoconfigure.EnableAutoConfiguration=\\</span><br><span class=\"line\">  com.glmapper.bridge.boot.autoconfigure.GlmpperAutoConfiguration</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"编写-starter\"><a href=\"#编写-starter\" class=\"headerlink\" title=\"编写 starter\"></a>编写 starter</h3><p>starter 里面没有代码，只做依赖管控</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.glmapper.bridge.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>guides-autoconfigure<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>0.0.1-SNAPSHOT<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.apache.httpcomponents<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>httpclient<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>4.5.6<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p><code>starter</code> 里面包括了自动配置的依赖和 <code>httpclient</code> 的依赖，所以用户在引入 <code>starter</code> 之后所有生效条件都满足了，就会在启动时直接刷新。</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>示例工程: <a href=\"https://github.com/glmapper/springboot-series-guides.git%EF%BC%88%60guides-autoconfigure%60\">https://github.com/glmapper/springboot-series-guides.git（`guides-autoconfigure`</a> 模块和 <code>guides-starter</code> 模块）</p></blockquote>\n<h2 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h2><p>本篇以 <code>mybatis</code> 为例，对 <code>spring</code> 环境和 <code>SpringBoot</code> 环境下的使用方式做了简单对比；以此为切入点，介绍了 <code>SpringBoot</code> 中的自动配置及 <code>starter</code> 最佳实践。</p>\n","text":" 一家之言，如有任何错误，请批评指出，不胜感激 本篇主要来讨论研究两个问题：1、什么自动配置，2、如何编写自动配置 在使用 Spring 作为项目开发框架的过程...","permalink":"/post/springboot/springboot-series-auto-configure","photos":[],"count_time":{"symbolsCount":"8.1k","symbolsTime":"7 mins."},"categories":[{"name":"SpringBoot","slug":"SpringBoot","count":17,"path":"api/categories/SpringBoot.json"}],"tags":[{"name":"SpringBoot","slug":"SpringBoot","count":17,"path":"api/tags/SpringBoot.json"},{"name":"自动配置","slug":"自动配置","count":2,"path":"api/tags/自动配置.json"},{"name":"starter 机制","slug":"starter-机制","count":1,"path":"api/tags/starter-机制.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%BD%BF%E7%94%A8-mybatis-spring\"><span class=\"toc-text\">使用 mybatis-spring</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%BE%9D%E8%B5%96\"><span class=\"toc-text\">依赖</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#bean-%E9%85%8D%E7%BD%AE\"><span class=\"toc-text\">bean 配置</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#SpringBoot-%E4%B8%AD%E5%A6%82%E4%BD%95%E9%9B%86%E6%88%90-mybatis-%E7%9A%84\"><span class=\"toc-text\">SpringBoot 中如何集成 mybatis 的</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#mybatis-starter-%E6%98%AF%E5%A6%82%E4%BD%95%E8%A7%84%E9%81%BF-bean-%E9%85%8D%E7%BD%AE%E7%9A%84\"><span class=\"toc-text\">mybatis starter 是如何规避 bean 配置的</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#MybatisAutoConfiguration-%E8%87%AA%E5%8A%A8%E9%85%8D%E7%BD%AE%E7%B1%BB\"><span class=\"toc-text\">MybatisAutoConfiguration 自动配置类</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#mybatis-%E8%87%AA%E5%8A%A8%E9%85%8D%E7%BD%AE%E7%9A%84-bean-%E6%98%AF%E5%A6%82%E4%BD%95%E7%94%9F%E6%95%88%E7%9A%84\"><span class=\"toc-text\">mybatis 自动配置的 bean 是如何生效的</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%A6%82%E4%BD%95%E7%BC%96%E5%86%99%E8%87%AA%E5%B7%B1%E7%9A%84-starter\"><span class=\"toc-text\">如何编写自己的 starter</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%BC%96%E5%86%99-autoconfigure\"><span class=\"toc-text\">编写 autoconfigure</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%BC%96%E5%86%99-starter\"><span class=\"toc-text\">编写 starter</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%B0%8F%E7%BB%93\"><span class=\"toc-text\">小结</span></a></li></ol>","author":{"name":"glmapper","slug":"blog-author","avatar":"https://glmapper-blog.oss-cn-hangzhou.aliyuncs.com/common/favicon.ico","link":"/","description":"开放，开源，分享，共享","socials":{"github":"https://github.com/glmapper","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/2412872703","zhihu":"","csdn":"","juejin":"https://juejin.cn/user/3227821827961806","customs":{"sofastack":{"icon":"https://glmapper-blog.oss-cn-hangzhou.aliyuncs.com/common/sofastack.svg","link":"https://www.sofastack.tech/"}}}},"mapped":true,"hidden":false,"prev_post":{"title":"一文详解蚂蚁金服分布式链路组件 SOFATracer 的埋点机制","uid":"8594734a788b611179d7e2206570ce2a","slug":"sofa/sofa-tracer-integration-analysis","date":"2020-01-20T08:27:53.000Z","updated":"2024-07-05T04:09:05.802Z","comments":true,"path":"api/articles/sofa/sofa-tracer-integration-analysis.json","keywords":null,"cover":[],"text":" 原文链接 一文详解蚂蚁金服分布式链路组件 SOFATracer 的埋点机制 SOFATracer 是一个用于分布式系统调用跟踪的组件，通过统一的 TraceI...","permalink":"/post/sofa/sofa-tracer-integration-analysis","photos":[],"count_time":{"symbolsCount":"9.1k","symbolsTime":"8 mins."},"categories":[{"name":"SOFA","slug":"SOFA","count":9,"path":"api/categories/SOFA.json"}],"tags":[{"name":"分布式链路跟踪","slug":"分布式链路跟踪","count":4,"path":"api/tags/分布式链路跟踪.json"},{"name":"Tracer","slug":"Tracer","count":4,"path":"api/tags/Tracer.json"},{"name":"OpenTracing","slug":"OpenTracing","count":1,"path":"api/tags/OpenTracing.json"}],"author":{"name":"glmapper","slug":"blog-author","avatar":"https://glmapper-blog.oss-cn-hangzhou.aliyuncs.com/common/favicon.ico","link":"/","description":"开放，开源，分享，共享","socials":{"github":"https://github.com/glmapper","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/2412872703","zhihu":"","csdn":"","juejin":"https://juejin.cn/user/3227821827961806","customs":{"sofastack":{"icon":"https://glmapper-blog.oss-cn-hangzhou.aliyuncs.com/common/sofastack.svg","link":"https://www.sofastack.tech/"}}}}},"next_post":{"title":"SpringBoot 实践系列-外部化配置优先级问题","uid":"33c355c4c6e9a75658b222c024ba6de3","slug":"springboot/springboot-series-externalize-prop","date":"2020-01-03T08:52:36.000Z","updated":"2024-07-05T04:09:05.828Z","comments":true,"path":"api/articles/springboot/springboot-series-externalize-prop.json","keywords":null,"cover":null,"text":"本文主要针对 spring.profiles.active、spring.config.location 以及 spring.config.additional...","permalink":"/post/springboot/springboot-series-externalize-prop","photos":[],"count_time":{"symbolsCount":"6k","symbolsTime":"5 mins."},"categories":[{"name":"SpringBoot","slug":"SpringBoot","count":17,"path":"api/categories/SpringBoot.json"}],"tags":[{"name":"SpringBoot","slug":"SpringBoot","count":17,"path":"api/tags/SpringBoot.json"},{"name":"配置","slug":"配置","count":2,"path":"api/tags/配置.json"}],"author":{"name":"glmapper","slug":"blog-author","avatar":"https://glmapper-blog.oss-cn-hangzhou.aliyuncs.com/common/favicon.ico","link":"/","description":"开放，开源，分享，共享","socials":{"github":"https://github.com/glmapper","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/2412872703","zhihu":"","csdn":"","juejin":"https://juejin.cn/user/3227821827961806","customs":{"sofastack":{"icon":"https://glmapper-blog.oss-cn-hangzhou.aliyuncs.com/common/sofastack.svg","link":"https://www.sofastack.tech/"}}}}}}