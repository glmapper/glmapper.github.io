{"title":"SpringBoot 源码系列-启动过程分析","uid":"fb1d63795354398f9ac651e5b767f565","slug":"springboot/springboot-series-started","date":"2019-12-07T09:41:01.000Z","updated":"2024-07-05T04:09:05.831Z","comments":true,"path":"api/articles/springboot/springboot-series-started.json","keywords":"宋国磊, glmapper, 卫恒, 分享, 开源","cover":[],"content":"<p>SpringBoot 作为目前非常流行的微服务框架，它使得构建独立的 Spring 生产级应用变得非常简单，因此受到很多互联网企业的青睐。</p>\n<p>最近在写 <a href=\"https://github.com/sofastack/sofa-tracer\">SOFATracer</a> 集成 Spring Cloud Stream RocketMQ 的过程中，遇到了一些问题，比如：BeanPostProcessor 不生效，如何在 BeanPostProcessor 不生效的情况下去修改一个 Bean 等，这些问题其实都是和 Bean 的生命周期有关系的，当然也和容器启动的过程有关系。SpringBoot 的启动过程对于我来说其实不算陌生，也可以说是比较熟悉，但是之前没有完整的梳理过这一块的东西，在实际的应用过程成难免再去踩一些坑。另外想到之前也写过一篇 <a href=\"http://www.glmapper.com/2019/12/08/springboot/springboot-series-fatjar/\">SpringBoot系列- FatJar 启动原理</a>，刚好承接上篇，继续来探索 SpringBoot 中的一些知识点。</p>\n<span id=\"more\"></span>\n\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>注：本篇基于 SpringBoot 2.1.0.RELEASE 版本，SpringBoot 各个版本之间可能存在差异，不过大体流程基本差不多，所以各位看官在实际的工作过程中也</p></blockquote>\n<h2 id=\"从一份配置文件开始说起\"><a href=\"#从一份配置文件开始说起\" class=\"headerlink\" title=\"从一份配置文件开始说起\"></a>从一份配置文件开始说起</h2><p>Spring 的启动过程实际上就是 Ioc 容器初始化以及载入 Bean 的过程；SpringBoot 的启动过程最核心的容器刷新流程也是复用了  Spring 容器刷新的逻辑。在分析 SpringBoot 启动过程之前，我们先来简单回顾下 Spring web 应用基于 tomcat 容器部署的启动过程。这就需要从一个大家都熟悉的配置文件开始说起：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">listener</span>&gt;</span>  </span><br><span class=\"line\">     <span class=\"tag\">&lt;<span class=\"name\">listener-class</span>&gt;</span>org.springframework.web.context.ContextLoaderListener<span class=\"tag\">&lt;/<span class=\"name\">listener-class</span>&gt;</span>  </span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">listener</span>&gt;</span> </span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">context-param</span>&gt;</span>  </span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">param-name</span>&gt;</span>contextConfigLocation<span class=\"tag\">&lt;/<span class=\"name\">param-name</span>&gt;</span>  </span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">param-value</span>&gt;</span>classpath:applicationContext.xml<span class=\"tag\">&lt;/<span class=\"name\">param-value</span>&gt;</span>  </span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">context-param</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>在一般的传统 WEB 项目中，项目的启动一般是从 web.xml 文件的载入开始，如果我们的项目中使用了Spring，那么你肯定会在你的 web.xml 文件中看到上面的配置。Spring 正是通过 ContextLoaderListener 监听器作为容器初始化入口的。</p>\n<p>ContextLoaderListener 继承了 ContextLoader 类和 ServletContextListener 接口，并且重写了 ServletContextListener 中的contextInitialized 和 contextDestroyed 方法。在 contextInitialized 中，通过调用父类（ContextLoader）的 initWebApplicationContext 方法进行容器创建：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">contextInitialized</span><span class=\"params\">(ServletContextEvent event)</span> &#123;</span><br><span class=\"line\">    initWebApplicationContext(event.getServletContext());</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>对于上述 Spring 容器引导刷新大概可以分为两个点来做简单的归纳：</p>\n<ul>\n<li><p>1、通过监听 ServletContextEvent 事件，为 web 容器提供一个全局的 ServletContext 上下文环境，并作为后面 spring 容器的宿主环境</p>\n</li>\n<li><p>2、在 contextInitialized 方法被调用时，spring 开始初始化一个上下文，这个上下文被称为根上下文，也就是 WebApplicationContext（实际的实现类是 XmlWebApplicationContext ）。这个 WebApplicationContext 就是 spring 的 IoC 容器，其对应的 Bean 定义的配置文件由 web.xml 中的 context-param 指定。</p>\n</li>\n</ul>\n<p>关于依赖监听 ServletContextEvent 事件来引导启动的过程大致可以描述为一下过程：</p>\n<p><img src=\"https://glmapper-blog.oss-cn-hangzhou.aliyuncs.com/spring-start.png\"></p>\n<p>相对于通过监听 ServletContextEvent 事件方式引导刷新 Spring 上下文，SpringBoot 给我的感觉是回归了 java 的本源，即通过 main 方法方式引导启动。由于 SpringBoot 中对于 web 容器也是使用了嵌入式+自动配置的方式，所以在启动入口上差异还是比较大的，当然 SpringBoot 除了支持 fatjar 方式之外，也提供了 war 包方式来保持对原有 Spring 工程的兼容。</p>\n<p>本篇文章将承接上一篇《SpringBoot FatJar 启动原理》，来分析下 SpringBoot 的启动过程。希望通过本篇文章，能够让大家了解到与传统基于 servlet 事件引导启动和基于 main 方式启动的不同，从而对 SpringBoot 的整体启动过程有比较清楚的认识。</p>\n<h2 id=\"启动入口\"><a href=\"#启动入口\" class=\"headerlink\" title=\"启动入口\"></a>启动入口</h2><p>在这篇 <a href=\"http://www.glmapper.com/2019/12/08/springboot/springboot-series-fatjar/\">SpringBoot系列- FatJar 启动原理</a>  文章中介绍得到，JarLaunch 最后是构建了一个 MainMethodRunner 实例对象，然后通过反射的方式调用了 BootStrap 类中的 main 方法，这里的 ’BootStrap 类中的 main 方法‘ 实际上就是 SpringBoot 的业务入口，也就是常见的下面的代码片段：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@SpringBootApplication</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">GlmapperApplication</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        SpringApplication.run(GlmapperApplication.class, args);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>从代码可以非常直观的了解到，启动是通过调用 SpringApplication 的静态方法 run；这个 run 方法内部其实是会构造一个 SpringApplication 的实例，然后再调用这里实例的 run 方法来启动 SpringBoot 的。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">* Static helper that can be used to run a &#123;<span class=\"doctag\">@link</span> SpringApplication&#125; from the</span></span><br><span class=\"line\"><span class=\"comment\">* specified sources using default settings and user supplied arguments.</span></span><br><span class=\"line\"><span class=\"comment\">* <span class=\"doctag\">@param</span> primarySources the primary sources to load</span></span><br><span class=\"line\"><span class=\"comment\">* <span class=\"doctag\">@param</span> args the application arguments (usually passed from a Java main method)</span></span><br><span class=\"line\"><span class=\"comment\">* <span class=\"doctag\">@return</span> the running &#123;<span class=\"doctag\">@link</span> ApplicationContext&#125;</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> ConfigurableApplicationContext <span class=\"title function_\">run</span><span class=\"params\">(Class&lt;?&gt;[] primarySources,</span></span><br><span class=\"line\"><span class=\"params\">    String[] args)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">SpringApplication</span>(primarySources).run(args);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>因此，如果要分析 SpringBoot 的启动过程，我们需要熟悉 SpringApplication 的构造过程以及 SpringApplication 的 run 方法执行过程即可。</p>\n<h2 id=\"SpringApplication-实例的构建\"><a href=\"#SpringApplication-实例的构建\" class=\"headerlink\" title=\"SpringApplication 实例的构建\"></a>SpringApplication 实例的构建</h2><p>篇幅原因，我们只分析核心的构建流程。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"title function_\">SpringApplication</span><span class=\"params\">(ResourceLoader resourceLoader, Class&lt;?&gt;... primarySources)</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 资源加载器，默认是 null</span></span><br><span class=\"line\">    <span class=\"built_in\">this</span>.resourceLoader = resourceLoader;</span><br><span class=\"line\">    <span class=\"comment\">// 启动类 bean </span></span><br><span class=\"line\">    Assert.notNull(primarySources, <span class=\"string\">&quot;PrimarySources must not be null&quot;</span>);</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.primarySources = <span class=\"keyword\">new</span> <span class=\"title class_\">LinkedHashSet</span>&lt;&gt;(Arrays.asList(primarySources));</span><br><span class=\"line\">    <span class=\"comment\">// 是否是 web 应用</span></span><br><span class=\"line\">    <span class=\"built_in\">this</span>.webApplicationType = WebApplicationType.deduceFromClasspath();</span><br><span class=\"line\">    <span class=\"comment\">// 设置了 ApplicationContextInitializer</span></span><br><span class=\"line\">    setInitializers((Collection) getSpringFactoriesInstances(</span><br><span class=\"line\">            ApplicationContextInitializer.class));</span><br><span class=\"line\">    <span class=\"comment\">// 设置 ApplicationListener</span></span><br><span class=\"line\">    setListeners((Collection) getSpringFactoriesInstances(ApplicationListener.class));</span><br><span class=\"line\">    <span class=\"comment\">// 启动类</span></span><br><span class=\"line\">    <span class=\"built_in\">this</span>.mainApplicationClass = deduceMainApplicationClass();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>上面代码段中，需要关注两个点：</p>\n<ul>\n<li>1、初始化 ApplicationContextInitializer；</li>\n<li>2、初始化 ApplicationListener</li>\n</ul>\n<p>要注意的是这里的实例化，并非是通过注解和扫包完成，而是通过一种不依赖 Spring 上下文的加载方法；这种做法是为了能够使得在 Spring 完成启动前做各种配置。Spring 的解决方法是以接口的全限定名作为 key，实现类的全限定名作为 value 记录在项目的 META-INF&#x2F;spring.factories 文件中，然后通过SpringFactoriesLoader 工具类提供静态方法进行类加载并缓存下来，spring.factories 是 SpringBoot 的核心配置文件。SpringFactoriesLoader 可以理解为 Spring 自己提供的一种 spi 扩展实现。SpringBoot 中提供的默认的 spring.factories 配置如下：</p>\n<figure class=\"highlight properties\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># PropertySource Loaders</span></span><br><span class=\"line\"><span class=\"attr\">org.springframework.boot.env.PropertySourceLoader</span>=<span class=\"string\">\\</span></span><br><span class=\"line\"><span class=\"string\">// ..省略</span></span><br><span class=\"line\"><span class=\"comment\"># Run Listeners</span></span><br><span class=\"line\"><span class=\"attr\">org.springframework.boot.SpringApplicationRunListener</span>=<span class=\"string\">\\</span></span><br><span class=\"line\"><span class=\"string\">// ..省略</span></span><br><span class=\"line\"><span class=\"comment\"># Error Reporters</span></span><br><span class=\"line\"><span class=\"attr\">org.springframework.boot.SpringBootExceptionReporter</span>=<span class=\"string\">\\</span></span><br><span class=\"line\"><span class=\"string\">// ..省略</span></span><br><span class=\"line\"><span class=\"comment\"># Application Context Initializers</span></span><br><span class=\"line\"><span class=\"attr\">org.springframework.context.ApplicationContextInitializer</span>=<span class=\"string\">\\/</span></span><br><span class=\"line\"><span class=\"attr\">//</span> <span class=\"string\">..省略</span></span><br><span class=\"line\"><span class=\"comment\"># Application Listeners</span></span><br><span class=\"line\"><span class=\"attr\">org.springframework.context.ApplicationListener</span>=<span class=\"string\">\\</span></span><br><span class=\"line\"><span class=\"string\">// ..省略</span></span><br><span class=\"line\"><span class=\"comment\"># Environment Post Processors</span></span><br><span class=\"line\"><span class=\"attr\">org.springframework.boot.env.EnvironmentPostProcessor</span>=<span class=\"string\">\\</span></span><br><span class=\"line\"><span class=\"string\">// ..省略</span></span><br><span class=\"line\"><span class=\"comment\"># Failure Analyzers</span></span><br><span class=\"line\"><span class=\"attr\">org.springframework.boot.diagnostics.FailureAnalyzer</span>=<span class=\"string\">\\</span></span><br><span class=\"line\"><span class=\"string\">// ..省略</span></span><br><span class=\"line\"><span class=\"comment\"># FailureAnalysisReporters</span></span><br><span class=\"line\"><span class=\"attr\">org.springframework.boot.diagnostics.FailureAnalysisReporter</span>=<span class=\"string\">\\</span></span><br><span class=\"line\"><span class=\"string\">// ..省略</span></span><br></pre></td></tr></table></figure>\n\n<p>关于 SpringFactoriesLoader  如何加载这些资源这里就不过多分析，有兴趣的读者可以自行查看相关源码。<a href=\"\">org.springframework.core.io.support.SpringFactoriesLoader#loadSpringFactories</a></p>\n<h2 id=\"run-方法主流程\"><a href=\"#run-方法主流程\" class=\"headerlink\" title=\"run 方法主流程\"></a>run 方法主流程</h2><p>SpringApplication 的 run 方法 SpringBoot 进行 Spring 容器刷新的实际入口方法，这个方法中包括了很多 SpringBoot 自己扩展出来的一些特性机制，比如 SpringApplicationRunListener、打印启动 Banner、统一的异常处理扩展等等。下面就直观的看下代码，然后再逐个分析各个流程的具体细节：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> ConfigurableApplicationContext <span class=\"title function_\">run</span><span class=\"params\">(String... args)</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 开启容器启动计时</span></span><br><span class=\"line\">    <span class=\"type\">StopWatch</span> <span class=\"variable\">stopWatch</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">StopWatch</span>();</span><br><span class=\"line\">    stopWatch.start();</span><br><span class=\"line\">    <span class=\"type\">ConfigurableApplicationContext</span> <span class=\"variable\">context</span> <span class=\"operator\">=</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">    <span class=\"comment\">// SpringBootExceptionReporter 列表，SpringBoot 允许自定义 Reporter</span></span><br><span class=\"line\">    Collection&lt;SpringBootExceptionReporter&gt; exceptionReporters = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;();</span><br><span class=\"line\">    <span class=\"comment\">// 设置java.awt.headless属性为true还是false</span></span><br><span class=\"line\">    <span class=\"comment\">// 可详见解释：https://blog.csdn.net/michaelgo/article/details/81634017</span></span><br><span class=\"line\">    configureHeadlessProperty();</span><br><span class=\"line\">    <span class=\"comment\">// 获取所有 SpringApplicationRunListener ，也是通过 SpringFactoriesLoader 来获取的</span></span><br><span class=\"line\">    <span class=\"type\">SpringApplicationRunListeners</span> <span class=\"variable\">listeners</span> <span class=\"operator\">=</span> getRunListeners(args);</span><br><span class=\"line\">    <span class=\"comment\">// 发布 starting 事件，在首次启动 run方法时立即调用，可用于非常早的初始化，注意此时容器上下文还没有刷新</span></span><br><span class=\"line\">    listeners.starting();</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 构建 ApplicationArguments 对象</span></span><br><span class=\"line\">        <span class=\"type\">ApplicationArguments</span> <span class=\"variable\">applicationArguments</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">DefaultApplicationArguments</span>(</span><br><span class=\"line\">                args);</span><br><span class=\"line\">        <span class=\"comment\">// 准备上下文刷新需要的环境属性 -- 详见 prepareEnvironment 过程分析</span></span><br><span class=\"line\">        <span class=\"type\">ConfigurableEnvironment</span> <span class=\"variable\">environment</span> <span class=\"operator\">=</span> prepareEnvironment(listeners,</span><br><span class=\"line\">                applicationArguments);</span><br><span class=\"line\">        <span class=\"comment\">// spring.beaninfo.ignore，如果为空设置为true</span></span><br><span class=\"line\">        configureIgnoreBeanInfo(environment);</span><br><span class=\"line\">        <span class=\"comment\">// 打印 SpringBoot 启动 Banner</span></span><br><span class=\"line\">        <span class=\"type\">Banner</span> <span class=\"variable\">printedBanner</span> <span class=\"operator\">=</span> printBanner(environment);</span><br><span class=\"line\">        <span class=\"comment\">// 创建上下文，这里会根据 webApplicationType 类型来创建不同的 ApplicationContext</span></span><br><span class=\"line\">        context = createApplicationContext();</span><br><span class=\"line\">        <span class=\"comment\">// 加载获取 exceptionReporters</span></span><br><span class=\"line\">        exceptionReporters = getSpringFactoriesInstances(</span><br><span class=\"line\">                SpringBootExceptionReporter.class,</span><br><span class=\"line\">                <span class=\"keyword\">new</span> <span class=\"title class_\">Class</span>[] &#123; ConfigurableApplicationContext.class &#125;, context);</span><br><span class=\"line\">        <span class=\"comment\">// 上下文刷新之前的准备工作 -- 详见 prepareContext 过程分析</span></span><br><span class=\"line\">        prepareContext(context, environment, listeners, applicationArguments,</span><br><span class=\"line\">                printedBanner);</span><br><span class=\"line\">        <span class=\"comment\">// 刷新上下文 -- 详见 refreshContext 过程分析</span></span><br><span class=\"line\">        refreshContext(context);</span><br><span class=\"line\">        <span class=\"comment\">// 刷新之后回调，SpringBoot 中这个方法是空实现，可以自行扩展</span></span><br><span class=\"line\">        afterRefresh(context, applicationArguments);</span><br><span class=\"line\">        <span class=\"comment\">// 停止计时</span></span><br><span class=\"line\">        stopWatch.stop();</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"built_in\">this</span>.logStartupInfo) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">new</span> <span class=\"title class_\">StartupInfoLogger</span>(<span class=\"built_in\">this</span>.mainApplicationClass)</span><br><span class=\"line\">                    .logStarted(getApplicationLog(), stopWatch);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 发布 started 事件 </span></span><br><span class=\"line\">        listeners.started(context);</span><br><span class=\"line\">        <span class=\"comment\">// ApplicationRunner 和 CommandLineRunner 调用</span></span><br><span class=\"line\">        callRunners(context, applicationArguments);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">catch</span> (Throwable ex) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 异常处理</span></span><br><span class=\"line\">        handleRunFailure(context, ex, exceptionReporters, listeners);</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">IllegalStateException</span>(ex);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 发布 running 事件 </span></span><br><span class=\"line\">        listeners.running(context);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">catch</span> (Throwable ex) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 异常处理</span></span><br><span class=\"line\">        handleRunFailure(context, ex, exceptionReporters, <span class=\"literal\">null</span>);</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">IllegalStateException</span>(ex);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> context;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>上面对代码基本都做了一些详细的注释，有几个需要关注的点：</p>\n<ul>\n<li>1、prepareEnvironment 的处理过程</li>\n<li>2、prepareContext 的处理过程</li>\n<li>3、refreshContext 的处理过程</li>\n<li>4、listeners 执行时机及顺序</li>\n<li>5、异常处理逻辑</li>\n</ul>\n<p>关于 Listeners 执行时机及顺序在之前的文章中有做过非常详细的分析，详见：<a href=\"http://www.glmapper.com/2019/04/13/springboot-series-event/\">SpringBoot 系列-事件机制详解</a>。下面就对其他的 4 个点做下详细的分析。</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>分析启动过程，本质上是对其整个容器生命周期有个了解，包括 listeners 执行各个事件的时机、PostProcessor 执行的时机，Enviroment Ready 的时机等等。掌握这些扩展和时机，可以在实际的业务开发中来做很多事情。</p></blockquote>\n<h3 id=\"prepareEnvironment-的处理过程\"><a href=\"#prepareEnvironment-的处理过程\" class=\"headerlink\" title=\"prepareEnvironment 的处理过程\"></a>prepareEnvironment 的处理过程</h3><p>prepareEnvironment 过程相对来说是比较早的，这里主要就是为上下文刷新提供 Environment。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> ConfigurableEnvironment <span class=\"title function_\">prepareEnvironment</span><span class=\"params\">(</span></span><br><span class=\"line\"><span class=\"params\">\t\t\tSpringApplicationRunListeners listeners,</span></span><br><span class=\"line\"><span class=\"params\">\t\t\tApplicationArguments applicationArguments)</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// Create and configure the environment</span></span><br><span class=\"line\">    <span class=\"type\">ConfigurableEnvironment</span> <span class=\"variable\">environment</span> <span class=\"operator\">=</span> getOrCreateEnvironment();</span><br><span class=\"line\">    <span class=\"comment\">// 配置 PropertySources 和 Profiles</span></span><br><span class=\"line\">    <span class=\"comment\">// 1、将参数和一些默认的属性配置到 environment</span></span><br><span class=\"line\">    <span class=\"comment\">// 2、激活 profiles </span></span><br><span class=\"line\">    configureEnvironment(environment, applicationArguments.getSourceArgs());</span><br><span class=\"line\">    <span class=\"comment\">// 发布 ApplicationEnvironmentPreparedEvent 事件</span></span><br><span class=\"line\">    listeners.environmentPrepared(environment);</span><br><span class=\"line\">    <span class=\"comment\">// 绑定 SpringApplication 环境</span></span><br><span class=\"line\">    bindToSpringApplication(environment);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!<span class=\"built_in\">this</span>.isCustomEnvironment) &#123;</span><br><span class=\"line\">        environment = <span class=\"keyword\">new</span> <span class=\"title class_\">EnvironmentConverter</span>(getClassLoader())</span><br><span class=\"line\">                .convertEnvironmentIfNecessary(environment, deduceEnvironmentClass());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 附加的解析器将动态跟踪底层 Environment 属性源的任何添加或删除</span></span><br><span class=\"line\">    ConfigurationPropertySources.attach(environment);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> environment;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这里面做的事情就是将我们的配置，包括系统配置、application.properties、-D 参数等等统统打包给 environment。在 Spring 中，我们最常见的 xml 中使用的 ${xxx} 或者代码中使用的 @Value(“${xxxx}”) 等，最后都是从 environment 中拿值的。</p>\n<p>这里需要关注的一个比较重要的点是<strong>发布 ApplicationEnvironmentPreparedEvent 事件</strong>，我们可以通过监听这个事件来<strong>修改 environment</strong>。这里可以参考下 SOFATracer 中 <a href=\"https://github.com/sofastack/sofa-tracer/blob/master/tracer-sofa-boot-starter/src/main/java/com/alipay/sofa/tracer/boot/listener/SofaTracerConfigurationListener.java\">SofaTracerConfigurationListener</a> 是如何利用这个事件来做环境配置处理的。</p>\n<h3 id=\"prepareContext-的处理过程\"><a href=\"#prepareContext-的处理过程\" class=\"headerlink\" title=\"prepareContext 的处理过程\"></a>prepareContext 的处理过程</h3><p>prepareContext 的处理过程中可以利用的点是非常多的，比如 ApplicationContextInitializer 的执行、ApplicationContextInitializedEvent 和 ApplicationPreparedEvent 事件发布。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title function_\">prepareContext</span><span class=\"params\">(ConfigurableApplicationContext context,</span></span><br><span class=\"line\"><span class=\"params\">\t\t\tConfigurableEnvironment environment, SpringApplicationRunListeners listeners,</span></span><br><span class=\"line\"><span class=\"params\">\t\t\tApplicationArguments applicationArguments, Banner printedBanner)</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 设置 environment 给 context，所以需要注意的是，在此之前拿到的 context 中，environment 是没有的。</span></span><br><span class=\"line\">    context.setEnvironment(environment);</span><br><span class=\"line\">    <span class=\"comment\">// 对 ApplicationContext 的后置处理，比如注册 BeanNameGenerator 和 ResourceLoader</span></span><br><span class=\"line\">    postProcessApplicationContext(context);</span><br><span class=\"line\">    <span class=\"comment\">// 这里开始执行所有的 ApplicationContextInitializer</span></span><br><span class=\"line\">    applyInitializers(context);</span><br><span class=\"line\">    <span class=\"comment\">// 发布 ApplicationContextInitializedEvent 事件</span></span><br><span class=\"line\">    listeners.contextPrepared(context);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"built_in\">this</span>.logStartupInfo) &#123;</span><br><span class=\"line\">        logStartupInfo(context.getParent() == <span class=\"literal\">null</span>);</span><br><span class=\"line\">        logStartupProfileInfo(context);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// Add boot specific singleton beans</span></span><br><span class=\"line\">    <span class=\"type\">ConfigurableListableBeanFactory</span> <span class=\"variable\">beanFactory</span> <span class=\"operator\">=</span> context.getBeanFactory();</span><br><span class=\"line\">    beanFactory.registerSingleton(<span class=\"string\">&quot;springApplicationArguments&quot;</span>, applicationArguments);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (printedBanner != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">        beanFactory.registerSingleton(<span class=\"string\">&quot;springBootBanner&quot;</span>, printedBanner);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (beanFactory <span class=\"keyword\">instanceof</span> DefaultListableBeanFactory) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 是否允许 bean 覆盖，这里如果是 false ,则可能会导致 BeanDefinitionOverrideException 异常</span></span><br><span class=\"line\">        ((DefaultListableBeanFactory) beanFactory)</span><br><span class=\"line\">                .setAllowBeanDefinitionOverriding(<span class=\"built_in\">this</span>.allowBeanDefinitionOverriding);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// Load the sources</span></span><br><span class=\"line\">    Set&lt;Object&gt; sources = getAllSources();</span><br><span class=\"line\">    Assert.notEmpty(sources, <span class=\"string\">&quot;Sources must not be empty&quot;</span>);</span><br><span class=\"line\">    load(context, sources.toArray(<span class=\"keyword\">new</span> <span class=\"title class_\">Object</span>[<span class=\"number\">0</span>]));</span><br><span class=\"line\">    <span class=\"comment\">// 发布 ApplicationPreparedEvent 事件</span></span><br><span class=\"line\">    listeners.contextLoaded(context);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>ApplicationContextInitializer 是 spring 容器刷新之前初始化 Spring ConfigurableApplicationContext 的回调接口，ApplicationContextInitializer 的 initialize 方法执行之前，context 是还没有刷新的。可以看到在 applyInitializers 之后紧接着发布了 ApplicationContextInitializedEvent 事件。其实这两个点都可以对 context 搞一些事情，ApplicationContextInitializer 更纯粹些，它只关注 context；而 ApplicationContextInitializedEvent 事件源中除了 context 之外，还有 springApplication 对象和参数 args。</p>\n<p>prepareContext 最后阶段是发布了 ApplicationPreparedEvent 事件，表示上下文已经准备好了，可以随时执行 refresh 了。</p>\n<h3 id=\"refreshContext-的处理过程\"><a href=\"#refreshContext-的处理过程\" class=\"headerlink\" title=\"refreshContext 的处理过程\"></a>refreshContext 的处理过程</h3><p>refreshContext 是 Spring 上下文刷新的过程，这里实际调用的是 AbstractApplicationContext 的 refresh 方法；所以 SpringBoot 也是复用了 Spring 上下文刷新的过程。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">refresh</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> BeansException, IllegalStateException &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 加锁处理</span></span><br><span class=\"line\">    <span class=\"keyword\">synchronized</span> (<span class=\"built_in\">this</span>.startupShutdownMonitor) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 准备刷新此上下文。主要包括占位符的替换及验证所有的 properties</span></span><br><span class=\"line\">        prepareRefresh();</span><br><span class=\"line\">        <span class=\"comment\">// 这里做了很多事情：</span></span><br><span class=\"line\">        <span class=\"comment\">// 1、让子类刷新内部beanFactory ，创建IoC容器（DefaultListableBeanFactory--ConfigurableListableBeanFactory 的实现类）</span></span><br><span class=\"line\">        <span class=\"comment\">// 2、加载解析XML文件（最终存储到Document对象中）</span></span><br><span class=\"line\">        <span class=\"comment\">// 3、读取Document对象，并完成BeanDefinition的加载和注册工作</span></span><br><span class=\"line\">        <span class=\"type\">ConfigurableListableBeanFactory</span> <span class=\"variable\">beanFactory</span> <span class=\"operator\">=</span> obtainFreshBeanFactory();</span><br><span class=\"line\">        <span class=\"comment\">// 对 beanFactory 进行一些预处理（设置一些公共属性）</span></span><br><span class=\"line\">        prepareBeanFactory(beanFactory);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 允许在 AbstractApplicationContext的子类中对 BeanFactory 进行后置处理，postProcessBeanFactory()这个方法是个空实现。</span></span><br><span class=\"line\">            postProcessBeanFactory(beanFactory);</span><br><span class=\"line\">            <span class=\"comment\">// 调用 BeanFactoryPostProcessor 后置处理器处理 BeanFactory 实例（BeanDefinition）</span></span><br><span class=\"line\">            invokeBeanFactoryPostProcessors(beanFactory);</span><br><span class=\"line\">            <span class=\"comment\">// 注册BeanPostProcessor后置处理器，BeanPostProcessors后置处理器用于拦截bean的创建</span></span><br><span class=\"line\">            <span class=\"comment\">// 用于对创建后的bean实例进行处理</span></span><br><span class=\"line\">            registerBeanPostProcessors(beanFactory);</span><br><span class=\"line\">            <span class=\"comment\">// 初始化消息资源</span></span><br><span class=\"line\">            initMessageSource();</span><br><span class=\"line\">            <span class=\"comment\">//  初始化应用事件广播器</span></span><br><span class=\"line\">            initApplicationEventMulticaster();</span><br><span class=\"line\">            <span class=\"comment\">// 初始化特殊的bean，这个方法是空实现，让AbstractApplicationContext的子类重写</span></span><br><span class=\"line\">            onRefresh();</span><br><span class=\"line\">            <span class=\"comment\">// 注册监听器（ApplicationListener）</span></span><br><span class=\"line\">            registerListeners();</span><br><span class=\"line\">            <span class=\"comment\">// 实例化剩余的单例bean（非懒加载方式）， Bean的 IoC、DI 和 AOP 都是发生在此步骤</span></span><br><span class=\"line\">            finishBeanFactoryInitialization(beanFactory);</span><br><span class=\"line\">            <span class=\"comment\">// 完成刷新</span></span><br><span class=\"line\">            <span class=\"comment\">// 1、发布 ContextRefreshedEvent 事件</span></span><br><span class=\"line\">            <span class=\"comment\">// 2、处理 LifecycleProcessor</span></span><br><span class=\"line\">            finishRefresh();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">catch</span> (BeansException ex) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (logger.isWarnEnabled()) &#123;</span><br><span class=\"line\">                logger.warn(<span class=\"string\">&quot;Exception encountered during context initialization - &quot;</span> +</span><br><span class=\"line\">                        <span class=\"string\">&quot;cancelling refresh attempt: &quot;</span> + ex);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">// 销毁已经创建的单例以避免资源悬空。</span></span><br><span class=\"line\">            destroyBeans();</span><br><span class=\"line\">            <span class=\"comment\">// 重置 ”active“ 标记</span></span><br><span class=\"line\">            cancelRefresh(ex);</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> ex;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 重置Spring内核中的常用自检缓存，清空单例bean内缓存</span></span><br><span class=\"line\">            resetCommonCaches();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这个过程涉及到的东西非常多，可扩展的点也非常多，包括 BeanFactoryPostProcessor 处理、BeanPostProcessor 处理、LifecycleProcessor 处理已经 发布 ContextRefreshedEvent 事件等。到这里容器刷新已经完成，容器已经 ready，DI 和 AOP 也已经完成。</p>\n<h4 id=\"BeanFactoryPostProcessor-处理\"><a href=\"#BeanFactoryPostProcessor-处理\" class=\"headerlink\" title=\"BeanFactoryPostProcessor 处理\"></a>BeanFactoryPostProcessor 处理</h4><p> BeanFactoryPostProcessor 可以对我们的 beanFactory 内所有的 beandefinition（未实例化）数据进行修改，这个过程是在 bean 还没有实例化之前做的。所以在这，我们通过自己去注册一些 beandefinition ，也可以对 beandefinition 做一些修改。关于 BeanFactoryPostProcessor 的用法在很多框架中都有体现，这里以 SOFATracer 中修改 Datasource 为例来说明下。</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>SOFATracer 中为了对有所基于 jdbc 规范的数据源进行埋点，提供了一个 DataSourceBeanFactoryPostProcessor，用于修改原生 DataSource 来实现一层代理。代码详见：<a href=\"https://github.com/sofastack/sofa-tracer/blob/master/tracer-sofa-boot-starter/src/main/java/com/alipay/sofa/tracer/boot/datasource/processor/DataSourceBeanFactoryPostProcessor.java\">com.alipay.sofa.tracer.boot.datasource.processor.DataSourceBeanFactoryPostProcessor</a></p></blockquote>\n<p> 这里只看核心代码部分，在 postProcessBeanFactory 方法中会根据 Datasource 的类型来创建不同的 DataSourceProxy；创建 DataSourceProxy 的过程就是修改原生 Datasource 的过程。</p>\n <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title function_\">createDataSourceProxy</span><span class=\"params\">(ConfigurableListableBeanFactory beanFactory,</span></span><br><span class=\"line\"><span class=\"params\">                                      String beanName, BeanDefinition originDataSource,</span></span><br><span class=\"line\"><span class=\"params\">                                      String jdbcUrl)</span> &#123;</span><br><span class=\"line\">   <span class=\"comment\">// re-register origin datasource bean</span></span><br><span class=\"line\">   <span class=\"type\">BeanDefinitionRegistry</span> <span class=\"variable\">beanDefinitionRegistry</span> <span class=\"operator\">=</span> (BeanDefinitionRegistry) beanFactory;</span><br><span class=\"line\">   <span class=\"comment\">// 先把之前已经存在的 Datasource 的 BeanDefinition 移除</span></span><br><span class=\"line\">   beanDefinitionRegistry.removeBeanDefinition(beanName);</span><br><span class=\"line\">   <span class=\"type\">boolean</span> <span class=\"variable\">isPrimary</span> <span class=\"operator\">=</span> originDataSource.isPrimary();</span><br><span class=\"line\">   originDataSource.setPrimary(<span class=\"literal\">false</span>);</span><br><span class=\"line\">   <span class=\"comment\">// 换个 beanName ,重新注册到容器中</span></span><br><span class=\"line\">   beanDefinitionRegistry.registerBeanDefinition(transformDatasourceBeanName(beanName),</span><br><span class=\"line\">       originDataSource);</span><br><span class=\"line\">   <span class=\"comment\">// 构建代理的 datasource BeanDefinition，类型为 SmartDataSource</span></span><br><span class=\"line\">   <span class=\"type\">RootBeanDefinition</span> <span class=\"variable\">proxiedBeanDefinition</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">RootBeanDefinition</span>(SmartDataSource.class);</span><br><span class=\"line\">   <span class=\"comment\">// 设置 BeanDefinition 相关属性</span></span><br><span class=\"line\">   proxiedBeanDefinition.setRole(BeanDefinition.ROLE_APPLICATION);</span><br><span class=\"line\">   proxiedBeanDefinition.setPrimary(isPrimary);</span><br><span class=\"line\">   proxiedBeanDefinition.setInitMethodName(<span class=\"string\">&quot;init&quot;</span>);</span><br><span class=\"line\">   proxiedBeanDefinition.setDependsOn(transformDatasourceBeanName(beanName));</span><br><span class=\"line\">   <span class=\"comment\">// 获取原生 datasource 的属性值</span></span><br><span class=\"line\">   <span class=\"type\">MutablePropertyValues</span> <span class=\"variable\">originValues</span> <span class=\"operator\">=</span> originDataSource.getPropertyValues();</span><br><span class=\"line\">   <span class=\"type\">MutablePropertyValues</span> <span class=\"variable\">values</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">MutablePropertyValues</span>();</span><br><span class=\"line\">   <span class=\"type\">String</span> <span class=\"variable\">appName</span> <span class=\"operator\">=</span> environment.getProperty(TRACER_APPNAME_KEY);</span><br><span class=\"line\">   <span class=\"comment\">// 修改和新增属性</span></span><br><span class=\"line\">   Assert.isTrue(!StringUtils.isBlank(appName), TRACER_APPNAME_KEY + <span class=\"string\">&quot; must be configured!&quot;</span>);</span><br><span class=\"line\">   values.add(<span class=\"string\">&quot;appName&quot;</span>, appName);</span><br><span class=\"line\">   values.add(<span class=\"string\">&quot;delegate&quot;</span>, <span class=\"keyword\">new</span> <span class=\"title class_\">RuntimeBeanReference</span>(transformDatasourceBeanName(beanName)));</span><br><span class=\"line\">   values.add(<span class=\"string\">&quot;dbType&quot;</span>,</span><br><span class=\"line\">       DataSourceUtils.resolveDbTypeFromUrl(unwrapPropertyValue(originValues.get(jdbcUrl))));</span><br><span class=\"line\">   values.add(<span class=\"string\">&quot;database&quot;</span>,</span><br><span class=\"line\">       DataSourceUtils.resolveDatabaseFromUrl(unwrapPropertyValue(originValues.get(jdbcUrl))));</span><br><span class=\"line\">   <span class=\"comment\">// 将新的 values 设置给代理 BeanDefinition</span></span><br><span class=\"line\">   proxiedBeanDefinition.setPropertyValues(values);</span><br><span class=\"line\">   <span class=\"comment\">// 将代理的 datasource BeanDefinition 注册到容器中</span></span><br><span class=\"line\">   beanDefinitionRegistry.registerBeanDefinition(beanName, proxiedBeanDefinition);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>上面这段代码就是 BeanFactoryPostProcessor 一种典型的应用场景，就是修改 BeanDefinition。</p>\n<p>BeanFactoryPostProcessor 处理过程代码比较长，这里就不在具体分析处理的流程。需要关注的点是：1、BeanFactoryPostProcessor 的作用，它能做哪些事情；2、它是在容器启动的哪个阶段执行的。</p>\n<h4 id=\"registerBeanPostProcessors-的处理过程\"><a href=\"#registerBeanPostProcessors-的处理过程\" class=\"headerlink\" title=\"registerBeanPostProcessors 的处理过程\"></a>registerBeanPostProcessors 的处理过程</h4><p>registerBeanPostProcessors 是用于注册 BeanPostProcessor 的。BeanPostProcessor 的作用时机相对于 BeanFactoryPostProcessor 来说要晚一些，BeanFactoryPostProcessor 处理的是 BeanDefinition，Bean 还没有实例化；BeanPostProcessor 处理的是 Bean，BeanPostProcessor 包括两个方法，分别用于在 Bean 实例化之前和实例化之后回调。</p>\n<p>开篇有提到，在某些场景下会出现 BeanPostProcessor 不生效。对于 Spring 来说，BeanPostProcessor 本身也会被注册成一个 Bean，那么自然就可能会出现，BeanPostProcessor  处理的 bean 在 BeanPostProcessor 本身初始化之前就已经完成了的情况。</p>\n<p>registerBeanPostProcessors 大体分为以下几个部分：</p>\n<ul>\n<li>注册 BeanPostProcessorChecker。（当一个 bean 在 BeanPostProcessor 实例化过程中被创建时，即当一个bean没有资格被所有 BeanPostProcessor 处理时，它记录一个信息消息）</li>\n<li>实现优先排序、排序和其他操作的 BeanPostProcessor 之间进行排序</li>\n<li>注册实现 PriorityOrdered 的 BeanPostProcessor</li>\n<li>注册实现 Ordered 的 </li>\n<li>注册所有常规的 BeanPostProcessor</li>\n<li>重新注册所有的内部 BeanPostProcessor</li>\n<li>将后处理器注册为用于检测内部 bean 的 applicationlistener，将其移动到处理器链的末端(用于获取代理等)。</li>\n</ul>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>这里还是以扩展时机为主线，Bean 的 IoC、DI 和 AOP 初始化过程不细究。</p></blockquote>\n<h4 id=\"LifecycleProcessor-的处理过程\"><a href=\"#LifecycleProcessor-的处理过程\" class=\"headerlink\" title=\"LifecycleProcessor 的处理过程\"></a>LifecycleProcessor 的处理过程</h4><p>LifecycleProcessor 的处理过程是在 finishRefresh 方法中执行，下面先看下 finishRefresh 方法：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title function_\">finishRefresh</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 清除上下文级的资源缓存(比如扫描的ASM元数据)。</span></span><br><span class=\"line\">    clearResourceCaches();</span><br><span class=\"line\">    <span class=\"comment\">// 为此上下文初始化 LifecycleProcessor。</span></span><br><span class=\"line\">    initLifecycleProcessor();</span><br><span class=\"line\">    <span class=\"comment\">// 首先将 refresh 传播到 LifecycleProcessor。</span></span><br><span class=\"line\">    getLifecycleProcessor().onRefresh();</span><br><span class=\"line\">    <span class=\"comment\">// 发布 ContextRefreshedEvent 事件</span></span><br><span class=\"line\">    publishEvent(<span class=\"keyword\">new</span> <span class=\"title class_\">ContextRefreshedEvent</span>(<span class=\"built_in\">this</span>));</span><br><span class=\"line\">    <span class=\"comment\">// Participate in LiveBeansView MBean, if active.</span></span><br><span class=\"line\">    LiveBeansView.registerApplicationContext(<span class=\"built_in\">this</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>初始化 initLifecycleProcessor 是从容器中拿到所有的 LifecycleProcessor ，如果业务代码中没有实现 LifecycleProcessor 接口的 bean ，则使用默认的 DefaultLifecycleProcessor。</p>\n<p>onRefresh 过程是 最后会调用到 Lifecycle 接口的 start 方法。LifeCycle 定义 Spring 容器对象的生命周期，任何 spring 管理对象都可以实现该接口。然后，当 ApplicationContext 本身接收启动和停止信号(例如在运行时停止&#x2F;重启场景)时，spring 容器将在容器上下文中找出所有实现了 LifeCycle 及其子类接口的类，并一一调用它们实现的类。spring 是通过委托给生命周期处理器 LifecycleProcessor 来实现这一点的。Lifecycle 接口定义如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">Lifecycle</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 启动当前组件</span></span><br><span class=\"line\"><span class=\"comment\">     * 1、如果组件已经在运行，不应该抛出异常</span></span><br><span class=\"line\"><span class=\"comment\">     * 2、对于容器，这将把开始信号传播到应用的所有组件</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title function_\">start</span><span class=\"params\">()</span>;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 通常以同步方式停止该组件，当该方法执行完成后,该组件会被完全停止。当需要异步停止行为时，考虑实现 SmartLifecycle 和它的 stop</span></span><br><span class=\"line\"><span class=\"comment\">     * (Runnable) 方法变体。注意，此停止通知在销毁前不能保证到达:在常规关闭时，&#123;<span class=\"doctag\">@code</span> Lifecycle&#125; bean将首先收到一个停止通知，然后才传播</span></span><br><span class=\"line\"><span class=\"comment\">     * 常规销毁回调;然而，在上下文的生命周期内的热刷新或中止的刷新尝试上，只调用销毁方法。对于容器，这将把停止信号传播到应用的所有组件</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title function_\">stop</span><span class=\"params\">()</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">      *  检查此组件是否正在运行。</span></span><br><span class=\"line\"><span class=\"comment\">      *  1. 只有该方法返回 false 时，start方法才会被执行。</span></span><br><span class=\"line\"><span class=\"comment\">      *  2. 只有该方法返回 true 时，stop(Runnable callback) 或 stop() 方法才会被执行。</span></span><br><span class=\"line\"><span class=\"comment\">      */</span></span><br><span class=\"line\">    <span class=\"type\">boolean</span> <span class=\"title function_\">isRunning</span><span class=\"params\">()</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>至此，容器刷新其实已经就完成了。可以看到 Spring 或者 SpringBoot 在整个启动过程中，有非常多的口子暴露出来，供用户使用，非常灵活。</p>\n<h3 id=\"异常处理逻辑\"><a href=\"#异常处理逻辑\" class=\"headerlink\" title=\"异常处理逻辑\"></a>异常处理逻辑</h3><p>与正常流程类似，异常处理流程同样作为 SpringBoot 生命周期的一个环节，在异常发生时，会通过一些机制来处理收尾过程。异常处理部分 SpringBoot 1.x 版本和 SpringBoot 2.x 版本差异还是比较大的。这里只分析 SpringBoot 2.x 的处理过程。这里直接贴一段代码：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title function_\">handleRunFailure</span><span class=\"params\">(ConfigurableApplicationContext context,</span></span><br><span class=\"line\"><span class=\"params\">\t\t\tThrowable exception,</span></span><br><span class=\"line\"><span class=\"params\">\t\t\tCollection&lt;SpringBootExceptionReporter&gt; exceptionReporters,</span></span><br><span class=\"line\"><span class=\"params\">\t\t\tSpringApplicationRunListeners listeners)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">// exitCode</span></span><br><span class=\"line\">            handleExitCode(context, exception);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (listeners != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">                <span class=\"comment\">// failed</span></span><br><span class=\"line\">                listeners.failed(context, exception);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 这里也是扩展的口子</span></span><br><span class=\"line\">            reportFailure(exceptionReporters, exception);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (context != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">                context.close();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">catch</span> (Exception ex) &#123;</span><br><span class=\"line\">        logger.warn(<span class=\"string\">&quot;Unable to close ApplicationContext&quot;</span>, ex);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    ReflectionUtils.rethrowRuntimeException(exception);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>上述代码片段主要做了以下几件事：</p>\n<ul>\n<li>handleExitCode： 这里会拿到异常的 exitCode，随后发布一个 ExitCodeEvent 事件，最后交由 SpringBootExceptionHandler 处理。</li>\n<li>SpringApplicationRunListeners#failed： 循环遍历调用所有 SpringApplicationRunListener 的 failed 方法</li>\n<li>reportFailure：用户可以自定义扩展 SpringBootExceptionReporter 接口来实现定制化的异常上报逻辑</li>\n</ul>\n<p>在 SpringApplicationRunListeners#failed 中，业务产生的异常将直接被抛出，而不会影响异常处理的主流程。</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>至此，SpringBoot 启动的主流程已经全部分析完成了。从扩展和扩展时机的角度来看，整个过程中，SpringBoot 提供了非常多的扩展口子，让用户可以在容器启动的各个阶段（无论是启动，环境准备，容器刷新等等）做一些定制化的操作。用户可以利用这些扩展接口来修改 bean 、修改环境变量，给用户极大的空间。</p>\n","text":"SpringBoot 作为目前非常流行的微服务框架，它使得构建独立的 Spring 生产级应用变得非常简单，因此受到很多互联网企业的青睐。 最近在写 SOFAT...","permalink":"/post/springboot/springboot-series-started","photos":[],"count_time":{"symbolsCount":"22k","symbolsTime":"20 mins."},"categories":[{"name":"SpringBoot","slug":"SpringBoot","count":17,"path":"api/categories/SpringBoot.json"}],"tags":[{"name":"SpringBoot","slug":"SpringBoot","count":17,"path":"api/tags/SpringBoot.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%BB%8E%E4%B8%80%E4%BB%BD%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E5%BC%80%E5%A7%8B%E8%AF%B4%E8%B5%B7\"><span class=\"toc-text\">从一份配置文件开始说起</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%90%AF%E5%8A%A8%E5%85%A5%E5%8F%A3\"><span class=\"toc-text\">启动入口</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#SpringApplication-%E5%AE%9E%E4%BE%8B%E7%9A%84%E6%9E%84%E5%BB%BA\"><span class=\"toc-text\">SpringApplication 实例的构建</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#run-%E6%96%B9%E6%B3%95%E4%B8%BB%E6%B5%81%E7%A8%8B\"><span class=\"toc-text\">run 方法主流程</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#prepareEnvironment-%E7%9A%84%E5%A4%84%E7%90%86%E8%BF%87%E7%A8%8B\"><span class=\"toc-text\">prepareEnvironment 的处理过程</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#prepareContext-%E7%9A%84%E5%A4%84%E7%90%86%E8%BF%87%E7%A8%8B\"><span class=\"toc-text\">prepareContext 的处理过程</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#refreshContext-%E7%9A%84%E5%A4%84%E7%90%86%E8%BF%87%E7%A8%8B\"><span class=\"toc-text\">refreshContext 的处理过程</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#BeanFactoryPostProcessor-%E5%A4%84%E7%90%86\"><span class=\"toc-text\">BeanFactoryPostProcessor 处理</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#registerBeanPostProcessors-%E7%9A%84%E5%A4%84%E7%90%86%E8%BF%87%E7%A8%8B\"><span class=\"toc-text\">registerBeanPostProcessors 的处理过程</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#LifecycleProcessor-%E7%9A%84%E5%A4%84%E7%90%86%E8%BF%87%E7%A8%8B\"><span class=\"toc-text\">LifecycleProcessor 的处理过程</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86%E9%80%BB%E8%BE%91\"><span class=\"toc-text\">异常处理逻辑</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%80%BB%E7%BB%93\"><span class=\"toc-text\">总结</span></a></li></ol>","author":{"name":"glmapper","slug":"blog-author","avatar":"https://glmapper-blog.oss-cn-hangzhou.aliyuncs.com/common/favicon.ico","link":"/","description":"开放，开源，分享，共享","socials":{"github":"https://github.com/glmapper","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/2412872703","zhihu":"","csdn":"","juejin":"https://juejin.cn/user/3227821827961806","customs":{"sofastack":{"icon":"https://glmapper-blog.oss-cn-hangzhou.aliyuncs.com/common/sofastack.svg","link":"https://www.sofastack.tech/"}}}},"mapped":true,"hidden":false,"prev_post":{"title":"SpringBoot 实践系列-资源访问","uid":"5f271418dba5b05b4849df36b7771e2b","slug":"springboot/springboot-series-access-resource","date":"2019-12-09T09:38:26.000Z","updated":"2024-07-05T04:09:05.827Z","comments":true,"path":"api/articles/springboot/springboot-series-access-resource.json","keywords":"宋国磊, glmapper, 卫恒, 分享, 开源","cover":null,"text":"简介当我们创建一个 SpringBoot web 应用时，有时候需要从 classpath 去加载一些文件，这里记录下在 war 和 jar 两种不同文件格式下...","permalink":"/post/springboot/springboot-series-access-resource","photos":[],"count_time":{"symbolsCount":"3.8k","symbolsTime":"3 mins."},"categories":[{"name":"SpringBoot","slug":"SpringBoot","count":17,"path":"api/categories/SpringBoot.json"}],"tags":[{"name":"SpringBoot","slug":"SpringBoot","count":17,"path":"api/tags/SpringBoot.json"},{"name":"ResourceLoader","slug":"ResourceLoader","count":1,"path":"api/tags/ResourceLoader.json"}],"author":{"name":"glmapper","slug":"blog-author","avatar":"https://glmapper-blog.oss-cn-hangzhou.aliyuncs.com/common/favicon.ico","link":"/","description":"开放，开源，分享，共享","socials":{"github":"https://github.com/glmapper","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/2412872703","zhihu":"","csdn":"","juejin":"https://juejin.cn/user/3227821827961806","customs":{"sofastack":{"icon":"https://glmapper-blog.oss-cn-hangzhou.aliyuncs.com/common/sofastack.svg","link":"https://www.sofastack.tech/"}}}}},"next_post":{"title":"SpringBoot 源码系列-FatJar 启动原理","uid":"ab9e1ff6883aee9623d9698a3a7669a7","slug":"springboot/springboot-series-fatjar","date":"2019-10-13T09:46:09.000Z","updated":"2024-07-05T04:09:05.828Z","comments":true,"path":"api/articles/springboot/springboot-series-fatjar.json","keywords":"宋国磊, glmapper, 卫恒, 分享, 开源","cover":[],"text":"之前有写过一篇文章来介绍 JAR 文件和 MENIFEST.MF 文件，详见：聊一聊 JAR 文件和 MANIFEST.MF，在这篇文章中介绍了 JAR 文件的...","permalink":"/post/springboot/springboot-series-fatjar","photos":[],"count_time":{"symbolsCount":"11k","symbolsTime":"10 mins."},"categories":[{"name":"SpringBoot","slug":"SpringBoot","count":17,"path":"api/categories/SpringBoot.json"}],"tags":[{"name":"SpringBoot","slug":"SpringBoot","count":17,"path":"api/tags/SpringBoot.json"},{"name":"FatJar","slug":"FatJar","count":1,"path":"api/tags/FatJar.json"}],"author":{"name":"glmapper","slug":"blog-author","avatar":"https://glmapper-blog.oss-cn-hangzhou.aliyuncs.com/common/favicon.ico","link":"/","description":"开放，开源，分享，共享","socials":{"github":"https://github.com/glmapper","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/2412872703","zhihu":"","csdn":"","juejin":"https://juejin.cn/user/3227821827961806","customs":{"sofastack":{"icon":"https://glmapper-blog.oss-cn-hangzhou.aliyuncs.com/common/sofastack.svg","link":"https://www.sofastack.tech/"}}}}}}