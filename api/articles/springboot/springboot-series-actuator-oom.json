{"title":"SpringBoot Actuator 潜在的 OOM 问题","uid":"e6df084a71adfbb41be6ca4e81a75e09","slug":"springboot/springboot-series-actuator-oom","date":"2021-11-29T03:37:27.000Z","updated":"2024-07-05T04:09:05.827Z","comments":true,"path":"api/articles/springboot/springboot-series-actuator-oom.json","keywords":"宋国磊, glmapper, 卫恒, 分享, 开源","cover":[],"content":"<p>此问题背景产生于近期需要上线的一个功能的埋点；主要表现就是在应用启动之后的一段时间内，内存使用一直呈现递增趋势。</p>\n<span id=\"more\"></span>\n\n<p><img src=\"https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/25b35822129a492ea08cab4697afc73e~tplv-k3u1fbpfcp-watermark.image\" alt=\"2021-11-29-18-20-24-image.png\"></p>\n<p>下图为场景复线后，本地通过 jconsole 查看到的内部使用走势图。</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>实际环境受限于配置，内存不会膨胀</p></blockquote>\n<h2 id=\"背景-问题\"><a href=\"#背景-问题\" class=\"headerlink\" title=\"背景&amp;问题\"></a>背景&amp;问题</h2><p>应用 a 使用 rest template 通过 http 方式调用 应用 b，应用项目中开启了 actuator，api 使用的是 micrometer；在 client 调用时，actuator 会产生一个 name 为 http.client.requests 的 metrics，此 metric 的 tag 中包含点目标的 uri。</p>\n<p>应用 b 提供的接口大致如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@RequestMapping(&quot;test_query_params&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> String <span class=\"title function_\">test_query_params</span><span class=\"params\">(<span class=\"meta\">@RequestParam</span> String value)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> value;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@RequestMapping(&quot;test_path_params/&#123;value&#125;&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> String <span class=\"title function_\">test_path_params</span><span class=\"params\">(<span class=\"meta\">@PathVariable</span> String value)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> value;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p><a href=\"http://localhost:8080/api/test/test_query_params?value=\">http://localhost:8080/api/test/test_query_params?value=</a></p>\n<p><a href=\"http://localhost:8080/api/test/test_path_params/%7Bvalue%7D\">http://localhost:8080/api/test/test_path_params/{value}</a>_</p></blockquote>\n<p>期望在 metric 的收集结果中应该包括两个 metrics，主要区别是 tag 中的 uri 不同，一个是 <code>api/test/test_query_params</code>， 另一个是 <code>api/test/test_path_params/&#123;value&#125;</code>；实际上从拿到的 metrics 数据来看，差异很大，这里以 pathvariable 的 metric 为例，数据如下： </p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tag<span class=\"punctuation\">:</span> <span class=\"string\">&quot;uri&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">values<span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span></span><br><span class=\"line\"><span class=\"string\">&quot;/api/test/test_path_params/glmapper58&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\"><span class=\"string\">&quot;/api/test/test_path_params/glmapper59&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\"><span class=\"string\">&quot;/api/test/test_path_params/glmapper54&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\"><span class=\"string\">&quot;/api/test/test_path_params/glmapper55&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\"><span class=\"string\">&quot;/api/test/test_path_params/glmapper56&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\"><span class=\"string\">&quot;/api/test/test_path_params/glmapper57&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\"><span class=\"string\">&quot;/api/test/test_path_params/glmapper50&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\"><span class=\"string\">&quot;/api/test/test_path_params/glmapper51&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\"><span class=\"string\">&quot;/api/test/test_path_params/glmapper52&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\"><span class=\"string\">&quot;/api/test/test_path_params/glmapper53&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\"><span class=\"string\">&quot;/api/test/test_path_params/glmapper47&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\"><span class=\"string\">&quot;/api/test/test_path_params/glmapper48&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\"><span class=\"string\">&quot;/api/test/test_path_params/glmapper49&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\"><span class=\"string\">&quot;/api/test/test_path_params/glmapper43&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\"><span class=\"string\">&quot;/api/test/test_path_params/glmapper44&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\"><span class=\"string\">&quot;/api/test/test_path_params/glmapper45&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\"><span class=\"string\">&quot;/api/test/test_path_params/glmapper46&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\"><span class=\"string\">&quot;/api/test/test_path_params/glmapper40&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\"><span class=\"string\">&quot;/api/test/test_path_params/glmapper41&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\"><span class=\"string\">&quot;/api/test/test_path_params/glmapper42&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\"><span class=\"string\">&quot;/api/test/test_path_params/glmapper36&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\"><span class=\"string\">&quot;/api/test/test_path_params/glmapper37&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\"><span class=\"string\">&quot;/api/test/test_path_params/glmapper38&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\"><span class=\"string\">&quot;/api/test/test_path_params/glmapper39&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\"><span class=\"string\">&quot;/api/test/test_path_params/glmapper32&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\"><span class=\"string\">&quot;/api/test/test_path_params/glmapper33&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\"><span class=\"string\">&quot;/api/test/test_path_params/glmapper34&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\"><span class=\"string\">&quot;/api/test/test_path_params/glmapper35&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\"><span class=\"string\">&quot;/api/test/test_path_params/glmapper30&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\"><span class=\"string\">&quot;/api/test/test_path_params/glmapper31&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\"><span class=\"string\">&quot;/api/test/test_path_params/glmapper25&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\"><span class=\"string\">&quot;/api/test/test_path_params/glmapper26&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">....</span><br><span class=\"line\"><span class=\"punctuation\">]</span></span><br></pre></td></tr></table></figure>\n\n\n\n<p>可以非常明显的看到，这里将{value} 参数作为了 uri 组件部分，并且体现在 tag 中，并不是期望的 <code>api/test/test_path_params/&#123;value&#125;</code>。</p>\n<h2 id=\"问题原因及解决\"><a href=\"#问题原因及解决\" class=\"headerlink\" title=\"问题原因及解决\"></a>问题原因及解决</h2><p>两个问题，1、这个埋点是怎么生效的，先搞清楚这个问题，才能顺藤摸瓜。2、怎么解决。</p>\n<h3 id=\"默认埋点是如何生效的\"><a href=\"#默认埋点是如何生效的\" class=\"headerlink\" title=\"默认埋点是如何生效的\"></a>默认埋点是如何生效的</h3><p>因为是通过 resttemplate 进行调用访问，那么埋点肯定也是基于对 resttemplate 的代理；按照这个思路，笔者找到了 <code>org.springframework.boot.actuate.metrics.web.client.MetricsRestTemplateCustomizer</code> 这个类。RestTemplateCustomizer 就是对 resttemplate 进行定制的，MetricsRestTemplateCustomizer 通过名字也能得知期作用是为了给 resttemplate 增加 metric 能力。</p>\n<p>再来讨论 <code>RestTemplateCustomizer</code>，当使用<code>RestTemplateBuilder</code>构建<code>RestTemplate</code>时，可以通过<code>RestTemplateCustomizer</code>进行更高级的定制，所有<code>RestTemplateCustomizer</code> beans 将自动添加到自动配置的<code>RestTemplateBuilder</code>。也就是说如果 想 MetricsRestTemplateCustomizer 生效，那么构建 resttemplate 必须通过 RestTemplateBuilder 方式构建，而不是直接 new。</p>\n<h3 id=\"http-client-requests-中的-uri\"><a href=\"#http-client-requests-中的-uri\" class=\"headerlink\" title=\"http.client.requests 中的 uri\"></a>http.client.requests 中的 uri</h3><p>塞 tag 的代码在<code>org.springframework.boot.actuate.metrics.web.client.RestTemplateExchangeTags</code> 类中，作用时机是在 MetricsClientHttpRequestInterceptor 拦截器中。当调用执行完成后，会将当次请求 metric 记录下来，在这里就会使用到 RestTemplateExchangeTags 来填充 tags。 下面仅给出 uri 的部分代码</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Creates a &#123;<span class=\"doctag\">@code</span> uri&#125; &#123;<span class=\"doctag\">@code</span> Tag&#125; for the URI of the given &#123;<span class=\"doctag\">@code</span> request&#125;.</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> request the request</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> the uri tag</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Tag <span class=\"title function_\">uri</span><span class=\"params\">(HttpRequest request)</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> Tag.of(<span class=\"string\">&quot;uri&quot;</span>, ensureLeadingSlash(stripUri(request.getURI().toString())));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Creates a &#123;<span class=\"doctag\">@code</span> uri&#125; &#123;<span class=\"doctag\">@code</span> Tag&#125; from the given &#123;<span class=\"doctag\">@code</span> uriTemplate&#125;.</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> uriTemplate the template</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> the uri tag</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Tag <span class=\"title function_\">uri</span><span class=\"params\">(String uriTemplate)</span> &#123;</span><br><span class=\"line\">\t<span class=\"type\">String</span> <span class=\"variable\">uri</span> <span class=\"operator\">=</span> (StringUtils.hasText(uriTemplate) ? uriTemplate : <span class=\"string\">&quot;none&quot;</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> Tag.of(<span class=\"string\">&quot;uri&quot;</span>, ensureLeadingSlash(stripUri(uri)));</span><br></pre></td></tr></table></figure>\n\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>其余的还有 status 和 clientName 等 tag name。</p></blockquote>\n<p>通过断点，可以看到，这里 <code>request.getURI()</code> 拿到的是带有参数的完整请求链接。</p>\n<p><img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/e9caff308d944090b0b94e84d33536c0~tplv-k3u1fbpfcp-watermark.image\" alt=\"2021-11-29-19-41-58-image.png\"></p>\n<p>这些 tag 的组装最终在 DefaultRestTemplateExchangeTagsProvider 中完成，并返回一个 列表。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> Timer.Builder <span class=\"title function_\">getTimeBuilder</span><span class=\"params\">(HttpRequest request, ClientHttpResponse response)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">this</span>.autoTimer.builder(<span class=\"built_in\">this</span>.metricName)</span><br><span class=\"line\">                <span class=\"comment\">// tagProvider 为 DefaultRestTemplateExchangeTagsProvider</span></span><br><span class=\"line\">\t\t\t\t.tags(<span class=\"built_in\">this</span>.tagProvider.getTags(urlTemplate.get().poll(), request, response))</span><br><span class=\"line\">\t\t\t\t.description(<span class=\"string\">&quot;Timer of RestTemplate operation&quot;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"解决\"><a href=\"#解决\" class=\"headerlink\" title=\"解决\"></a>解决</h3><p>这里先来看下官方对于 request.getURI  的解释</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Return the URI of the request (including a query string if any,</span></span><br><span class=\"line\"><span class=\"comment\"> * but only if it is well-formed for a URI representation).</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> the URI of the request (never &#123;<span class=\"doctag\">@code</span> null&#125;)</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\">URI <span class=\"title function_\">getURI</span><span class=\"params\">()</span>;</span><br></pre></td></tr></table></figure>\n\n<p>返回请求的 URI，这里包括了任何的查询参数。那么是不是拿到不用参数的 path 就行呢？</p>\n<p><img src=\"https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/3ddb6c2d864b4a59948488ec23d80163~tplv-k3u1fbpfcp-watermark.image\" alt=\"2021-11-29-20-05-57-image.png\"></p>\n<p>这里尝试通过 <code>request.getURI().getPath()</code> 拿到了预期的 path（@pathvariable 拿到的是模板）。</p>\n<p>再回到 DefaultRestTemplateExchangeTagsProvider，所有的 tag 都是在这里完成组装，这个类明显是一个默认的实现(Spring 体系下基本只要是Defaultxxx 的，一般都能扩展 )，查看它的接口类 RestTemplateExchangeTagsProvider 如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Provides &#123;<span class=\"doctag\">@link</span> Tag Tags&#125; for an exchange performed by a &#123;<span class=\"doctag\">@link</span> RestTemplate&#125;.</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> Jon Schneider</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> Andy Wilkinson</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@since</span> 2.0.0</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@FunctionalInterface</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">RestTemplateExchangeTagsProvider</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * Provides the tags to be associated with metrics that are recorded for the given</span></span><br><span class=\"line\"><span class=\"comment\">\t * &#123;<span class=\"doctag\">@code</span> request&#125; and &#123;<span class=\"doctag\">@code</span> response&#125; exchange.</span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@param</span> urlTemplate the source URl template, if available</span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@param</span> request the request</span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@param</span> response the response (may be &#123;<span class=\"doctag\">@code</span> null&#125; if the exchange failed)</span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@return</span> the tags</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\tIterable&lt;Tag&gt; <span class=\"title function_\">getTags</span><span class=\"params\">(String urlTemplate, HttpRequest request, ClientHttpResponse response)</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>RestTemplateExchangeTagsProvider 的作用就是为 resttemplate 提供 tag 的，所以这里通过自定义一个 RestTemplateExchangeTagsProvider，来替换DefaultRestTemplateExchangeTagsProvider，以达到我们的目标，大致代码如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"> <span class=\"keyword\">public</span> Iterable&lt;Tag&gt; <span class=\"title function_\">getTags</span><span class=\"params\">(String urlTemplate, HttpRequest request, ClientHttpResponse response)</span> &#123;</span><br><span class=\"line\">    Tag uriTag;</span><br><span class=\"line\">    <span class=\"comment\">// 取 request.getURI().getPath() 作为 uri 的 value</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (StringUtils.hasText(request.getURI().getPath())) &#123;</span><br><span class=\"line\">      uriTag = Tag.of(<span class=\"string\">&quot;uri&quot;</span>, ensureLeadingSlash(stripUri(request.getURI().getPath())));</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      uriTag = (StringUtils.hasText(urlTemplate) ? RestTemplateExchangeTags.uri(urlTemplate)</span><br><span class=\"line\">                    : RestTemplateExchangeTags.uri(request));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> Arrays.asList(RestTemplateExchangeTags.method(request), uriTag,</span><br><span class=\"line\">                RestTemplateExchangeTags.status(response), RestTemplateExchangeTags.clientName(request));</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"会不会-OOM\"><a href=\"#会不会-OOM\" class=\"headerlink\" title=\"会不会 OOM\"></a>会不会 OOM</h2><p>理论上，应该参数不同，在使用默认 DefaultRestTemplateExchangeTagsProvider 的情况下，meter 会随着 tags 的不同迅速膨胀，在 micrometer 中，这些数据是存在 map 中的</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Even though writes are guarded by meterMapLock, iterators across value space are supported</span></span><br><span class=\"line\"><span class=\"comment\">// Hence, we use CHM to support that iteration without ConcurrentModificationException risk</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">final</span> Map&lt;Id, Meter&gt; meterMap = <span class=\"keyword\">new</span> <span class=\"title class_\">ConcurrentHashMap</span>&lt;&gt;();</span><br></pre></td></tr></table></figure>\n\n<p>一般情况下不会，这里是因为 spring boot actuator 自己提供了保护机制，对于默认情况，tags 在同一个 metric 下，最多只有 100 个</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">* Maximum number of unique URI tag values allowed. After the max number of</span></span><br><span class=\"line\"><span class=\"comment\">* tag values is reached, metrics with additional tag values are denied by</span></span><br><span class=\"line\"><span class=\"comment\">* filter.</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"type\">int</span> <span class=\"variable\">maxUriTags</span> <span class=\"operator\">=</span> <span class=\"number\">100</span>;</span><br></pre></td></tr></table></figure>\n\n<p>如果你想使得这个数更大一些，可以通过如下配置配置</p>\n<figure class=\"highlight properties\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">management.metrics.web.client.max-uri-tags</span>=<span class=\"string\">10000</span></span><br></pre></td></tr></table></figure>\n<p>如果配置值过大，会存在潜在的 oom 风险。</p>\n","text":"此问题背景产生于近期需要上线的一个功能的埋点；主要表现就是在应用启动之后的一段时间内，内存使用一直呈现递增趋势。 下图为场景复线后，本地通过 jconsole ...","permalink":"/post/springboot/springboot-series-actuator-oom","photos":[],"count_time":{"symbolsCount":"7.8k","symbolsTime":"7 mins."},"categories":[{"name":"SpringBoot","slug":"SpringBoot","count":17,"path":"api/categories/SpringBoot.json"}],"tags":[{"name":"OOM","slug":"OOM","count":2,"path":"api/tags/OOM.json"},{"name":"SpringBoot","slug":"SpringBoot","count":17,"path":"api/tags/SpringBoot.json"},{"name":"actuator","slug":"actuator","count":1,"path":"api/tags/actuator.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E8%83%8C%E6%99%AF-%E9%97%AE%E9%A2%98\"><span class=\"toc-text\">背景&amp;问题</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E9%97%AE%E9%A2%98%E5%8E%9F%E5%9B%A0%E5%8F%8A%E8%A7%A3%E5%86%B3\"><span class=\"toc-text\">问题原因及解决</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E9%BB%98%E8%AE%A4%E5%9F%8B%E7%82%B9%E6%98%AF%E5%A6%82%E4%BD%95%E7%94%9F%E6%95%88%E7%9A%84\"><span class=\"toc-text\">默认埋点是如何生效的</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#http-client-requests-%E4%B8%AD%E7%9A%84-uri\"><span class=\"toc-text\">http.client.requests 中的 uri</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E8%A7%A3%E5%86%B3\"><span class=\"toc-text\">解决</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%BC%9A%E4%B8%8D%E4%BC%9A-OOM\"><span class=\"toc-text\">会不会 OOM</span></a></li></ol>","author":{"name":"glmapper","slug":"blog-author","avatar":"https://glmapper-blog.oss-cn-hangzhou.aliyuncs.com/common/favicon.ico","link":"/","description":"开放，开源，分享，共享","socials":{"github":"https://github.com/glmapper","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/2412872703","zhihu":"","csdn":"","juejin":"https://juejin.cn/user/3227821827961806","customs":{"sofastack":{"icon":"https://glmapper-blog.oss-cn-hangzhou.aliyuncs.com/common/sofastack.svg","link":"https://www.sofastack.tech/"}}}},"mapped":true,"hidden":false,"prev_post":{"title":"2021 年终总结-磊叔的 Work Life Balance","uid":"9bcb128fa947131484c11ffd6af6a280","slug":"share/shares-2021","date":"2021-12-27T03:40:31.000Z","updated":"2024-07-05T04:09:05.797Z","comments":true,"path":"api/articles/share/shares-2021.json","keywords":"宋国磊, glmapper, 卫恒, 分享, 开源","cover":[],"text":" 生活，在喜怒哀乐间走走停停。不知道会遇见什么，只知道阳光这么好，别辜负了今天 抓了一把花生米，开了一罐啤酒，打开新买的台式机，用上被新同事“嫌弃”声音太大的机...","permalink":"/post/share/shares-2021","photos":[],"count_time":{"symbolsCount":"2.1k","symbolsTime":"2 mins."},"categories":[{"name":"experience","slug":"experience","count":2,"path":"api/categories/experience.json"}],"tags":[{"name":"SOFA","slug":"SOFA","count":2,"path":"api/tags/SOFA.json"},{"name":"杭州","slug":"杭州","count":1,"path":"api/tags/杭州.json"},{"name":"合肥","slug":"合肥","count":1,"path":"api/tags/合肥.json"}],"author":{"name":"glmapper","slug":"blog-author","avatar":"https://glmapper-blog.oss-cn-hangzhou.aliyuncs.com/common/favicon.ico","link":"/","description":"开放，开源，分享，共享","socials":{"github":"https://github.com/glmapper","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/2412872703","zhihu":"","csdn":"","juejin":"https://juejin.cn/user/3227821827961806","customs":{"sofastack":{"icon":"https://glmapper-blog.oss-cn-hangzhou.aliyuncs.com/common/sofastack.svg","link":"https://www.sofastack.tech/"}}}}},"next_post":{"title":"为什么你的 SpringBoot 自动配置失效了","uid":"0733c66f6904b8d3bf1d0aaecefb6227","slug":"springboot/springboot-series-autoconfigure-invalid","date":"2021-11-15T03:35:18.000Z","updated":"2024-07-05T04:09:05.827Z","comments":true,"path":"api/articles/springboot/springboot-series-autoconfigure-invalid.json","keywords":"宋国磊, glmapper, 卫恒, 分享, 开源","cover":[],"text":"本文源自近期项目中遇到的问题， bug 总是出现在你自以为是的地方… 问题描述下面是一个简单复现的代码片段，在你没有阅读完本文时，如果能做出正确的判断，那恭喜你...","permalink":"/post/springboot/springboot-series-autoconfigure-invalid","photos":[],"count_time":{"symbolsCount":"6.8k","symbolsTime":"6 mins."},"categories":[{"name":"SpringBoot","slug":"SpringBoot","count":17,"path":"api/categories/SpringBoot.json"}],"tags":[{"name":"SpringBoot","slug":"SpringBoot","count":17,"path":"api/tags/SpringBoot.json"},{"name":"自动配置","slug":"自动配置","count":2,"path":"api/tags/自动配置.json"}],"author":{"name":"glmapper","slug":"blog-author","avatar":"https://glmapper-blog.oss-cn-hangzhou.aliyuncs.com/common/favicon.ico","link":"/","description":"开放，开源，分享，共享","socials":{"github":"https://github.com/glmapper","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/2412872703","zhihu":"","csdn":"","juejin":"https://juejin.cn/user/3227821827961806","customs":{"sofastack":{"icon":"https://glmapper-blog.oss-cn-hangzhou.aliyuncs.com/common/sofastack.svg","link":"https://www.sofastack.tech/"}}}}}}