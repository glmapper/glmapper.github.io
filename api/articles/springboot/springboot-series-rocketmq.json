{"title":"SpringBoot 实践系列-集成 RocketMQ","uid":"007a95c44a187f79d860d68b5fd58832","slug":"springboot/springboot-series-rocketmq","date":"2020-04-05T08:09:25.000Z","updated":"2024-07-05T04:09:05.830Z","comments":true,"path":"api/articles/springboot/springboot-series-rocketmq.json","keywords":"宋国磊, glmapper, 卫恒, 分享, 开源","cover":null,"content":"<h2 id=\"RocketMQ-快速开始\"><a href=\"#RocketMQ-快速开始\" class=\"headerlink\" title=\"RocketMQ 快速开始\"></a>RocketMQ 快速开始</h2><p>RocketMQ 简介：Apache RocketMQ是一个分布式消息传递和流媒体平台，具有低延迟、高性能和可靠性、万亿级容量和灵活的可伸缩性。它提供了多种功能，具体参考: <a href=\"https://github.com/apache/rocketmq\">https://github.com/apache/rocketmq</a> 。</p>\n<span id=\"more\"></span>\n\n<p>官方指导手册快速开始中提到，RocketMQ 安装需要具体以下条件：</p>\n<ul>\n<li>64bit OS, 推荐使用 Linux&#x2F;Unix&#x2F;Mac </li>\n<li>64bit JDK 1.8+</li>\n<li>Maven 3.2.x</li>\n<li>4g+ free disk for Broker server （这个需要特别关注下）</li>\n</ul>\n<h3 id=\"下载安装和编译\"><a href=\"#下载安装和编译\" class=\"headerlink\" title=\"下载安装和编译\"></a>下载安装和编译</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget https://archive.apache.org/dist/rocketmq/4.7.0/rocketmq-all-4.7.0-source-release.zip</span><br><span class=\"line\">unzip rocketmq-all-4.7.0-source-release.zip</span><br><span class=\"line\"><span class=\"built_in\">cd</span> rocketmq-all-4.7.0/</span><br><span class=\"line\">mvn -Prelease-all -DskipTests clean install -U</span><br><span class=\"line\"><span class=\"built_in\">cd</span> distribution/target/rocketmq-4.7.0/rocketmq-4.7.0</span><br></pre></td></tr></table></figure>\n\n<p>1、启动 Name Server</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; <span class=\"built_in\">nohup</span> sh bin/mqnamesrv &amp;</span><br><span class=\"line\">&gt; <span class=\"built_in\">tail</span> -f ~/logs/rocketmqlogs/namesrv.log</span><br><span class=\"line\">The Name Server boot success...</span><br></pre></td></tr></table></figure>\n\n<p>2、启动 Broker</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; <span class=\"built_in\">nohup</span> sh bin/mqbroker -n localhost:9876 &amp;</span><br><span class=\"line\"><span class=\"comment\"># nohup sh bin/mqbroker -n localhost:9876 autoCreateTopicEnable=true &amp;</span></span><br><span class=\"line\">&gt; <span class=\"built_in\">tail</span> -f ~/logs/rocketmqlogs/broker.log </span><br><span class=\"line\">The broker[%s, 172.30.30.233:10911] boot success...</span><br></pre></td></tr></table></figure>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>autoCreateTopicEnable：使用 RocketMQ 进行发消息时，必须要指定 topic，对于 topic 的设置有一个开关 autoCreateTopicEnable，一般在开发测试环境中会使用默认设置 autoCreateTopicEnable &#x3D; true，但是这样就会导致 topic 的设置不容易规范管理，没有统一的审核等等，所以在正式环境中会在 Broker 启动时设置参数 autoCreateTopicEnable &#x3D; false。这样当需要增加 topic 时就需要在 web 管理界面上或者通过 admin tools 添加即可</p></blockquote>\n<h2 id=\"SpringBoot-集成\"><a href=\"#SpringBoot-集成\" class=\"headerlink\" title=\"SpringBoot 集成\"></a>SpringBoot 集成</h2><p>RocketMQ 目前没有提供集成 SpringBoot 的 starter，因此现在接入都是通过引入客户端进行编程。下面来看下 SpringBoot 集成 RocketMQ 的过程。</p>\n<h3 id=\"引入-RocketMQ-客户端依赖\"><a href=\"#引入-RocketMQ-客户端依赖\" class=\"headerlink\" title=\"引入 RocketMQ 客户端依赖\"></a>引入 RocketMQ 客户端依赖</h3><p>github 上目前更新的最新版本是 4.7.0 版本，这里就使用最新版本：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.apache.rocketmq<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>rocketmq-client<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>4.7.0<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"提供生产者的自动配置类\"><a href=\"#提供生产者的自动配置类\" class=\"headerlink\" title=\"提供生产者的自动配置类\"></a>提供生产者的自动配置类</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span>: guolei.sgl (glmapper_2018@163.com) 2020/4/5 5:17 PM</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@since</span>:</span></span><br><span class=\"line\"><span class=\"comment\"> **/</span></span><br><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">MQProducerConfiguration</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">Logger</span> <span class=\"variable\">LOGGER</span> <span class=\"operator\">=</span> LoggerFactory.getLogger(MQProducerConfiguration.class);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Value(&quot;$&#123;rocketmq.producer.groupName&#125;&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String             groupName;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Value(&quot;$&#123;rocketmq.producer.namesrvAddr&#125;&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String             namesrvAddr;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Value(&quot;$&#123;rocketmq.producer.maxMessageSize&#125;&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Integer            maxMessageSize;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Value(&quot;$&#123;rocketmq.producer.sendMsgTimeout&#125;&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Integer            sendMsgTimeout;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Value(&quot;$&#123;rocketmq.producer.retryTimesWhenSendFailed&#125;&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Integer            retryTimesWhenSendFailed;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"meta\">@ConditionalOnMissingBean</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> DefaultMQProducer <span class=\"title function_\">defaultMQProducer</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> RuntimeException &#123;</span><br><span class=\"line\">        <span class=\"type\">DefaultMQProducer</span> <span class=\"variable\">producer</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">DefaultMQProducer</span>(<span class=\"built_in\">this</span>.groupName);</span><br><span class=\"line\">        producer.setNamesrvAddr(<span class=\"built_in\">this</span>.namesrvAddr);</span><br><span class=\"line\">        producer.setCreateTopicKey(<span class=\"string\">&quot;AUTO_CREATE_TOPIC_KEY&quot;</span>);</span><br><span class=\"line\">        <span class=\"comment\">//如果需要同一个 jvm 中不同的 producer 往不同的 mq 集群发送消息，需要设置不同的 instanceName</span></span><br><span class=\"line\">        <span class=\"comment\">//producer.setInstanceName(instanceName);</span></span><br><span class=\"line\">        <span class=\"comment\">//如果发送消息的最大限制</span></span><br><span class=\"line\">        producer.setMaxMessageSize(<span class=\"built_in\">this</span>.maxMessageSize);</span><br><span class=\"line\">        <span class=\"comment\">//如果发送消息超时时间</span></span><br><span class=\"line\">        producer.setSendMsgTimeout(<span class=\"built_in\">this</span>.sendMsgTimeout);</span><br><span class=\"line\">        <span class=\"comment\">//如果发送消息失败，设置重试次数，默认为 2 次</span></span><br><span class=\"line\">        producer.setRetryTimesWhenSendFailed(<span class=\"built_in\">this</span>.retryTimesWhenSendFailed);</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            producer.start();</span><br><span class=\"line\">            LOGGER.info(<span class=\"string\">&quot;producer is started. groupName:&#123;&#125;, namesrvAddr: &#123;&#125;&quot;</span>, groupName, namesrvAddr);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (MQClientException e) &#123;</span><br><span class=\"line\">            LOGGER.error(<span class=\"string\">&quot;failed to start producer.&quot;</span>, e);</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">RuntimeException</span>(e);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> producer;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>groupName: 发送同一类消息的设置为同一个 group，保证唯一， 默认不需要设置，rocketmq 会使用 ip@pid(pid代表jvm名字) 作为唯一标示。</li>\n<li>namesrvAddr：Name Server 地址</li>\n<li>maxMessageSize：消息最大限制，默认 4M</li>\n<li>sendMsgTimeout：消息发送超时时间，默认 3 秒</li>\n<li>retryTimesWhenSendFailed：消息发送失败重试次数，默认 2 次</li>\n</ul>\n<h3 id=\"提供消费者的自动配置类\"><a href=\"#提供消费者的自动配置类\" class=\"headerlink\" title=\"提供消费者的自动配置类\"></a>提供消费者的自动配置类</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">MQConsumerConfiguration</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">Logger</span>  <span class=\"variable\">LOGGER</span> <span class=\"operator\">=</span> LoggerFactory.getLogger(MQConsumerConfiguration.class);</span><br><span class=\"line\">    <span class=\"meta\">@Value(&quot;$&#123;rocketmq.consumer.namesrvAddr&#125;&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String                        namesrvAddr;</span><br><span class=\"line\">    <span class=\"meta\">@Value(&quot;$&#123;rocketmq.consumer.groupName&#125;&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String                        groupName;</span><br><span class=\"line\">    <span class=\"meta\">@Value(&quot;$&#123;rocketmq.consumer.consumeThreadMin&#125;&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"type\">int</span>                           consumeThreadMin;</span><br><span class=\"line\">    <span class=\"meta\">@Value(&quot;$&#123;rocketmq.consumer.consumeThreadMax&#125;&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"type\">int</span>                           consumeThreadMax;</span><br><span class=\"line\">    <span class=\"comment\">// 订阅指定的 topic </span></span><br><span class=\"line\">    <span class=\"meta\">@Value(&quot;$&#123;rocketmq.consumer.topics&#125;&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String                        topics;</span><br><span class=\"line\">    <span class=\"meta\">@Value(&quot;$&#123;rocketmq.consumer.consumeMessageBatchMaxSize&#125;&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"type\">int</span>                           consumeMessageBatchMaxSize;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> MessageListenerHandler mqMessageListenerProcessor;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"meta\">@ConditionalOnMissingBean</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> DefaultMQPushConsumer <span class=\"title function_\">defaultMQPushConsumer</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> RuntimeException &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">DefaultMQPushConsumer</span> <span class=\"variable\">consumer</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">DefaultMQPushConsumer</span>(groupName);</span><br><span class=\"line\">        consumer.setNamesrvAddr(namesrvAddr);</span><br><span class=\"line\">        consumer.setConsumeThreadMin(consumeThreadMin);</span><br><span class=\"line\">        consumer.setConsumeThreadMax(consumeThreadMax);</span><br><span class=\"line\">        consumer.registerMessageListener(mqMessageListenerProcessor);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 设置 consumer 第一次启动是从队列头部开始消费还是队列尾部开始消费</span></span><br><span class=\"line\">        <span class=\"comment\">// 如果非第一次启动，那么按照上次消费的位置继续消费</span></span><br><span class=\"line\">        consumer.setConsumeFromWhere(ConsumeFromWhere.CONSUME_FROM_FIRST_OFFSET);</span><br><span class=\"line\">        <span class=\"comment\">// 设置消费模型，集群还是广播，默认为集群</span></span><br><span class=\"line\">        consumer.setMessageModel(MessageModel.CLUSTERING);</span><br><span class=\"line\">        <span class=\"comment\">// 设置一次消费消息的条数，默认为 1 条</span></span><br><span class=\"line\">        consumer.setConsumeMessageBatchMaxSize(consumeMessageBatchMaxSize);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 设置该消费者订阅的主题和tag，如果是订阅该主题下的所有tag，使用*；</span></span><br><span class=\"line\">            consumer.subscribe(topics, <span class=\"string\">&quot;*&quot;</span>);</span><br><span class=\"line\">            <span class=\"comment\">// 启动消费</span></span><br><span class=\"line\">            consumer.start();</span><br><span class=\"line\">            LOGGER.info(<span class=\"string\">&quot;consumer is started. groupName:&#123;&#125;, topics:&#123;&#125;, namesrvAddr:&#123;&#125;&quot;</span>,groupName,topics,namesrvAddr);</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">            LOGGER.error(<span class=\"string\">&quot;failed to start consumer . groupName:&#123;&#125;, topics:&#123;&#125;, namesrvAddr:&#123;&#125;&quot;</span>,groupName,topics,namesrvAddr,e);</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">RuntimeException</span>(e);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> consumer;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>参数参考上述生产者部分。这里配置只是启动的消费端的监听，具体的消费需要再实现一个 MessageListenerConcurrently 接口。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span>: guolei.sgl (glmapper_2018@163.com) 2020/4/5 5:21 PM</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@since</span>:</span></span><br><span class=\"line\"><span class=\"comment\"> **/</span></span><br><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">MessageListenerHandler</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">MessageListenerConcurrently</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">Logger</span> <span class=\"variable\">LOGGER</span> <span class=\"operator\">=</span> LoggerFactory.getLogger(MessageListenerHandler.class);</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"type\">String</span> <span class=\"variable\">TOPIC</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;DemoTopic&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> ConsumeConcurrentlyStatus <span class=\"title function_\">consumeMessage</span><span class=\"params\">(List&lt;MessageExt&gt; msgs,</span></span><br><span class=\"line\"><span class=\"params\">                                                    ConsumeConcurrentlyContext context)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (CollectionUtils.isEmpty(msgs)) &#123;</span><br><span class=\"line\">            LOGGER.info(<span class=\"string\">&quot;receive blank msgs...&quot;</span>);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> ConsumeConcurrentlyStatus.CONSUME_SUCCESS;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"type\">MessageExt</span> <span class=\"variable\">messageExt</span> <span class=\"operator\">=</span> msgs.get(<span class=\"number\">0</span>);</span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">msg</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">String</span>(messageExt.getBody());</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (messageExt.getTopic().equals(TOPIC)) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// mock 消费逻辑</span></span><br><span class=\"line\">            mockConsume(msg);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ConsumeConcurrentlyStatus.CONSUME_SUCCESS;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title function_\">mockConsume</span><span class=\"params\">(String msg)</span>&#123;</span><br><span class=\"line\">        LOGGER.info(<span class=\"string\">&quot;receive msg: &#123;&#125;.&quot;</span>, msg);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"使用客户端发送消息\"><a href=\"#使用客户端发送消息\" class=\"headerlink\" title=\"使用客户端发送消息\"></a>使用客户端发送消息</h3><p>使用客户端发送消息的逻辑比较简单，就是拿到 DefaultMQProducer 对象，调用 send 方法，支持同步、异步、oneway 等多种调用方式。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@RestController</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">TestController</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">Logger</span> <span class=\"variable\">LOGGER</span> <span class=\"operator\">=</span> LoggerFactory.getLogger(TestController.class);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"type\">String</span> <span class=\"variable\">TOPIC</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;DemoTopic&quot;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"type\">String</span> <span class=\"variable\">TAGS</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;glmapperTags&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> DefaultMQProducer defaultMQProducer;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@RequestMapping(&quot;send&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">test</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Throwable &#123;</span><br><span class=\"line\">        <span class=\"type\">Message</span> <span class=\"variable\">msg</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Message</span>(TOPIC, TAGS, (<span class=\"string\">&quot;Say Hello RocketMQ to Glmapper&quot;</span>).getBytes(RemotingHelper.DEFAULT_CHARSET));</span><br><span class=\"line\">        <span class=\"comment\">// 调用客户端发送消息</span></span><br><span class=\"line\">        <span class=\"type\">SendResult</span> <span class=\"variable\">sendResult</span> <span class=\"operator\">=</span> defaultMQProducer.send(msg);</span><br><span class=\"line\">        LOGGER.info(<span class=\"string\">&quot;sendResult: &#123;&#125;.&quot;</span>,sendResult);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;SUCCESS&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"测试\"><a href=\"#测试\" class=\"headerlink\" title=\"测试\"></a>测试</h3><p>这里的测试应用是将生产端和消费端放在一起的，所以配置如下：</p>\n<figure class=\"highlight properties\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">spring.application.name</span>=<span class=\"string\">test-rocket</span></span><br><span class=\"line\"><span class=\"attr\">server.port</span>=<span class=\"string\">8008</span></span><br><span class=\"line\"><span class=\"comment\">#producer</span></span><br><span class=\"line\"><span class=\"attr\">rocketmq.producer.isOnOff</span>=<span class=\"string\">on #该应用是否启用生产者</span></span><br><span class=\"line\"><span class=\"attr\">rocketmq.producer.groupName</span>=<span class=\"string\">$&#123;spring.application.name&#125;</span></span><br><span class=\"line\"><span class=\"attr\">rocketmq.producer.namesrvAddr</span>=<span class=\"string\">sofa.cloud.alipay.net:9876</span></span><br><span class=\"line\"><span class=\"attr\">rocketmq.producer.maxMessageSize</span>=<span class=\"string\">4096</span></span><br><span class=\"line\"><span class=\"attr\">rocketmq.producer.sendMsgTimeout</span>=<span class=\"string\">3000</span></span><br><span class=\"line\"><span class=\"attr\">rocketmq.producer.retryTimesWhenSendFailed</span>=<span class=\"string\">2</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">#consumer</span></span><br><span class=\"line\"><span class=\"attr\">rocketmq.consumer.isOnOff</span>=<span class=\"string\">on #该应用是否启用消费者</span></span><br><span class=\"line\"><span class=\"attr\">rocketmq.consumer.groupName</span>=<span class=\"string\">$&#123;spring.application.name&#125;</span></span><br><span class=\"line\"><span class=\"attr\">rocketmq.consumer.namesrvAddr</span>=<span class=\"string\">sofa.cloud.alipay.net:9876</span></span><br><span class=\"line\"><span class=\"attr\">rocketmq.consumer.topics</span>=<span class=\"string\">DemoTopic</span></span><br><span class=\"line\"><span class=\"attr\">rocketmq.consumer.consumeThreadMin</span>=<span class=\"string\">20</span></span><br><span class=\"line\"><span class=\"attr\">rocketmq.consumer.consumeThreadMax</span>=<span class=\"string\">64</span></span><br><span class=\"line\"><span class=\"attr\">rocketmq.consumer.consumeMessageBatchMaxSize</span>=<span class=\"string\">1</span></span><br></pre></td></tr></table></figure>\n\n<p>启动程序，查看日志输出:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">2020-04-05 22:53:15.141  INFO 46817 --- [           main] c.g.b.b.c.MQProducerConfiguration        : producer is started. groupName:test-rocket, namesrvAddr: sofa.cloud.alipay.net:9876</span><br><span class=\"line\">2020-04-05 22:53:15.577  INFO 46817 --- [           main] c.g.b.b.c.MQConsumerConfiguration        : consumer is started. groupName:test-rocket, topics:DemoTopic, namesrvAddr:sofa.cloud.alipay.net:9876</span><br></pre></td></tr></table></figure>\n<p>这里看到，生产者和消费者自动配置已经生效并启动完成。通过 curl localhost:8008&#x2F;send 来触发消息发送:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">2020-04-05 22:54:21.654  INFO 46817 --- [nio-8008-exec-1] c.g.b.boot.controller.TestController     : sendResult: SendResult [sendStatus=SEND_OK, msgId=1E0FC3A2B6E118B4AAC21983B3C50000, offsetMsgId=64583D7C00002A9F0000000000011788, messageQueue=MessageQueue [topic=DemoTopic, brokerName=sofa.cloud.alipay.net, queueId=6], queueOffset=50].</span><br><span class=\"line\">2020-04-05 22:54:21.658  INFO 46817 --- [MessageThread_1] c.g.b.b.p.MessageListenerHandler         : receive msg: Say Hello RocketMQ to Glmapper.</span><br></pre></td></tr></table></figure>\n<p>看到发送消息的日志和接受消息的日志。</p>\n<h2 id=\"使用-hook-拦截消息\"><a href=\"#使用-hook-拦截消息\" class=\"headerlink\" title=\"使用 hook 拦截消息\"></a>使用 hook 拦截消息</h2><p>RocKetMQ 中提供了两个 hook 接口：SendMessageHook 和 ConsumeMessageHook 接口，可以用于在消息发送之前、之后，消息消费之前、之后对消息进行拦截，官方文档中并没有关于这部分的描述，那么这里我们就来看下如何使用这两个 hook 接口来搞点事情。</p>\n<h3 id=\"SendMessageHook\"><a href=\"#SendMessageHook\" class=\"headerlink\" title=\"SendMessageHook\"></a>SendMessageHook</h3><p>自定义一个 ProducerTestHook ，代码如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ProducerTestHook</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">SendMessageHook</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">Logger</span> <span class=\"variable\">LOGGER</span> <span class=\"operator\">=</span> LoggerFactory.getLogger(ProducerTestHook.class);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">hookName</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ProducerTestHook.class.getName();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">sendMessageBefore</span><span class=\"params\">(SendMessageContext sendMessageContext)</span> &#123;</span><br><span class=\"line\">        LOGGER.info(<span class=\"string\">&quot;execute sendMessageBefore. sendMessageContext:&#123;&#125;&quot;</span>, sendMessageContext);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">sendMessageAfter</span><span class=\"params\">(SendMessageContext sendMessageContext)</span> &#123;</span><br><span class=\"line\">        LOGGER.info(<span class=\"string\">&quot;execute sendMessageAfter. sendMessageContext:&#123;&#125;&quot;</span>, sendMessageContext);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在上面生产者的自动配置类中，将 ProducerTestHook 注册给 producer。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 注册 SendMessageHook</span></span><br><span class=\"line\">producer.getDefaultMQProducerImpl().registerSendMessageHook(<span class=\"keyword\">new</span> <span class=\"title class_\">ProducerTestHook</span>());</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"ConsumeMessageHook\"><a href=\"#ConsumeMessageHook\" class=\"headerlink\" title=\"ConsumeMessageHook\"></a>ConsumeMessageHook</h3><p>自定义一个 ConsumerTestHook ，代码如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ConsumerTestHook</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">ConsumeMessageHook</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">Logger</span> <span class=\"variable\">LOGGER</span> <span class=\"operator\">=</span> LoggerFactory.getLogger(ConsumerTestHook.class);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">hookName</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ConsumerTestHook.class.getName();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">consumeMessageBefore</span><span class=\"params\">(ConsumeMessageContext consumeMessageContext)</span> &#123;</span><br><span class=\"line\">        LOGGER.info(<span class=\"string\">&quot;execute consumeMessageBefore. consumeMessageContext: &#123;&#125;&quot;</span>,consumeMessageContext);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">consumeMessageAfter</span><span class=\"params\">(ConsumeMessageContext consumeMessageContext)</span> &#123;</span><br><span class=\"line\">        LOGGER.info(<span class=\"string\">&quot;execute consumeMessageAfter. consumeMessageContext: &#123;&#125;&quot;</span>,consumeMessageContext);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在上面消费者的自动配置类中，将 ConsumerTestHook 注册给 consumer</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 注册 ConsumeMessageHook</span></span><br><span class=\"line\">consumer.getDefaultMQPushConsumerImpl().registerConsumeMessageHook(<span class=\"keyword\">new</span> <span class=\"title class_\">ConsumerTestHook</span>());</span><br></pre></td></tr></table></figure>\n\n<p>执行结果如下：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">execute sendMessageBefore. sendMessageContext:org.apache.rocketmq.client.hook.SendMessageContext@a50ea34</span><br><span class=\"line\">execute sendMessageAfter. sendMessageContext:org.apache.rocketmq.client.hook.SendMessageContext@a50ea34</span><br><span class=\"line\">sendResult: SendResult [sendStatus=SEND_OK, msgId=0A0FE8F8C02F18B4AAC21C1275FB0000, offsetMsgId=64583D7C00002A9F0000000000011850, messageQueue=MessageQueue [topic=DemoTopic, brokerName=sofa.cloud.alipay.net, queueId=5], queueOffset=50].</span><br><span class=\"line\">execute consumeMessageBefore. consumeMessageContext: org.apache.rocketmq.client.hook.ConsumeMessageContext@6482209a</span><br><span class=\"line\">receive msg: Say Hello RocketMQ to Glmapper.</span><br><span class=\"line\">execute consumeMessageAfter. consumeMessageContext: org.apache.rocketmq.client.hook.ConsumeMessageContext@6482209a</span><br></pre></td></tr></table></figure>\n<h2 id=\"遇到的一些问题\"><a href=\"#遇到的一些问题\" class=\"headerlink\" title=\"遇到的一些问题\"></a>遇到的一些问题</h2><p>集成过程中遇到几个问题记录如下：</p>\n<p><strong>1、Broker 启动失败。</strong></p>\n<p>我在测试时遇到的情况是，在 Name Server 启动之后，再启动 Boker 时，ssh 连接会直接提示 connect conversation fail. 通过 <code>dmesg | egrep -i -B100 &#39;killed process&#39;</code> 查看进程被 kill 的记录，得到如下日志：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[2257026.030741] Memory cgroup out of memory: Kill process 110719 (systemd) score 0 or sacrifice child</span><br><span class=\"line\">[2257026.031888] Killed process 100735 (sh) total-vm:15708kB, anon-rss:176kB, file-rss:1800kB, shmem-rss:0kB</span><br><span class=\"line\">[2257026.133506] Memory cgroup out of memory: Kill process 110719 (systemd) score 0 or sacrifice child</span><br><span class=\"line\">[2257026.133539] Killed process 100745 (vsar) total-vm:172560kB, anon-rss:22936kB, file-rss:1360kB, shmem-rss:0kB</span><br><span class=\"line\">[2257026.206872] Memory cgroup out of memory: Kill process 104617 (java) score 3 or sacrifice child</span><br><span class=\"line\">[2257026.207742] Killed process 104617 (java) total-vm:9092924kB, anon-rss:4188528kB, file-rss:496kB, shmem-rss:0kB</span><br></pre></td></tr></table></figure>\n<p>那这里看到的结论是发生了 OOM，这里是启动时没哟分配到足够的空间导致的(默认配置文件初始内存设置的太大了)。解决办法是：进入到编译之后的 distribution&#x2F;target&#x2F;apache-rocketmq&#x2F;bin 目录，找到 runbroker.sh 和 runserver.sh 两个脚本文件，这两个脚本理解启动时默认指定的参数是非常大的（4g&#x2F;8g&#x2F;2g），我线下测试机器总共才 1c2g，所以适当的调整了下参数:</p>\n<ul>\n<li>runserver.sh</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">JAVA_OPT=<span class=\"string\">&quot;<span class=\"variable\">$&#123;JAVA_OPT&#125;</span> -server -Xms128m -Xmx256m -Xmn256m -XX:MetaspaceSize=128m -XX:MaxMetaspaceSize=320m&quot;</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>runbroker.sh</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">JAVA_OPT=<span class=\"string\">&quot;<span class=\"variable\">$&#123;JAVA_OPT&#125;</span> -server -Xms256m -Xmx256m -Xmn128m&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>修改后重新启动 namesrv 和 broker ，正常了</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ jps</span><br><span class=\"line\">98633 Jps</span><br><span class=\"line\">55689 BrokerStartup</span><br><span class=\"line\">54906 NamesrvStartup</span><br></pre></td></tr></table></figure>\n<p><strong>2、No Topic Route Info，xxx</strong></p>\n<p>这个在官方的 FAQ 里面有提到，说明遇到的频次一定是很高的。官方给出的方案可以详解<a href=\"http://rocketmq.apache.org/docs/faq/\">这里</a> <a href=\"http://rocketmq.apache.org/docs/faq/\">http://rocketmq.apache.org/docs/faq/</a> 第4条。我是通过 <strong>If you can’t find this topic, create it on a broker via admin tools command updateTopic or web console.</strong>  这个解决的:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sh mqadmin updateTopic -b localhost:10911 -n localhost:9876 -t DemoTopic <span class=\"comment\"># 执行此指令，创建 DemoTopic</span></span><br><span class=\"line\">RocketMQLog:WARN No appenders could be found <span class=\"keyword\">for</span> logger (io.netty.util.internal.PlatformDependent0).</span><br><span class=\"line\">RocketMQLog:WARN Please initialize the logger system properly.</span><br><span class=\"line\">create topic to localhost:10911 success.</span><br><span class=\"line\">TopicConfig [topicName=DemoTopic, readQueueNums=8, writeQueueNums=8, perm=RW-, topicFilterType=SINGLE_TAG, topicSysFlag=0, order=<span class=\"literal\">false</span>]</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>之前在做 SOFATracer 集成消息组件时有看过 RocketMQ 的部分代码，但是在实际操作时还是饶了不少弯路。总体来看，SpringBoot 集成 RocketMQ 还是比较简单的，在此记录一下。如果文中有描述有误的地方，还请各位大佬留言指正。</p>\n<h2 id=\"参考文档\"><a href=\"#参考文档\" class=\"headerlink\" title=\"参考文档\"></a>参考文档</h2><ul>\n<li><a href=\"http://rocketmq.apache.org/docs/quick-start/\">http://rocketmq.apache.org/docs/quick-start/</a></li>\n<li><a href=\"https://blog.csdn.net/ph3636/article/details/79528638\">https://blog.csdn.net/ph3636/article/details/79528638</a></li>\n</ul>\n","text":"RocketMQ 快速开始RocketMQ 简介：Apache RocketMQ是一个分布式消息传递和流媒体平台，具有低延迟、高性能和可靠性、万亿级容量和灵活的...","permalink":"/post/springboot/springboot-series-rocketmq","photos":[],"count_time":{"symbolsCount":"15k","symbolsTime":"14 mins."},"categories":[{"name":"SpringBoot","slug":"SpringBoot","count":17,"path":"api/categories/SpringBoot.json"}],"tags":[{"name":"微服务","slug":"微服务","count":2,"path":"api/tags/微服务.json"},{"name":"SpringBoot","slug":"SpringBoot","count":17,"path":"api/tags/SpringBoot.json"},{"name":"消息","slug":"消息","count":2,"path":"api/tags/消息.json"},{"name":"RocketMQ","slug":"RocketMQ","count":3,"path":"api/tags/RocketMQ.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#RocketMQ-%E5%BF%AB%E9%80%9F%E5%BC%80%E5%A7%8B\"><span class=\"toc-text\">RocketMQ 快速开始</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%B8%8B%E8%BD%BD%E5%AE%89%E8%A3%85%E5%92%8C%E7%BC%96%E8%AF%91\"><span class=\"toc-text\">下载安装和编译</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#SpringBoot-%E9%9B%86%E6%88%90\"><span class=\"toc-text\">SpringBoot 集成</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%BC%95%E5%85%A5-RocketMQ-%E5%AE%A2%E6%88%B7%E7%AB%AF%E4%BE%9D%E8%B5%96\"><span class=\"toc-text\">引入 RocketMQ 客户端依赖</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%8F%90%E4%BE%9B%E7%94%9F%E4%BA%A7%E8%80%85%E7%9A%84%E8%87%AA%E5%8A%A8%E9%85%8D%E7%BD%AE%E7%B1%BB\"><span class=\"toc-text\">提供生产者的自动配置类</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%8F%90%E4%BE%9B%E6%B6%88%E8%B4%B9%E8%80%85%E7%9A%84%E8%87%AA%E5%8A%A8%E9%85%8D%E7%BD%AE%E7%B1%BB\"><span class=\"toc-text\">提供消费者的自动配置类</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%BD%BF%E7%94%A8%E5%AE%A2%E6%88%B7%E7%AB%AF%E5%8F%91%E9%80%81%E6%B6%88%E6%81%AF\"><span class=\"toc-text\">使用客户端发送消息</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%B5%8B%E8%AF%95\"><span class=\"toc-text\">测试</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%BD%BF%E7%94%A8-hook-%E6%8B%A6%E6%88%AA%E6%B6%88%E6%81%AF\"><span class=\"toc-text\">使用 hook 拦截消息</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#SendMessageHook\"><span class=\"toc-text\">SendMessageHook</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#ConsumeMessageHook\"><span class=\"toc-text\">ConsumeMessageHook</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E9%81%87%E5%88%B0%E7%9A%84%E4%B8%80%E4%BA%9B%E9%97%AE%E9%A2%98\"><span class=\"toc-text\">遇到的一些问题</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%80%BB%E7%BB%93\"><span class=\"toc-text\">总结</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%8F%82%E8%80%83%E6%96%87%E6%A1%A3\"><span class=\"toc-text\">参考文档</span></a></li></ol>","author":{"name":"glmapper","slug":"blog-author","avatar":"https://glmapper-blog.oss-cn-hangzhou.aliyuncs.com/common/favicon.ico","link":"/","description":"开放，开源，分享，共享","socials":{"github":"https://github.com/glmapper","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/2412872703","zhihu":"","csdn":"","juejin":"https://juejin.cn/user/3227821827961806","customs":{"sofastack":{"icon":"https://glmapper-blog.oss-cn-hangzhou.aliyuncs.com/common/sofastack.svg","link":"https://www.sofastack.tech/"}}}},"mapped":true,"hidden":false,"prev_post":{"title":"【译】微服务（microservices）","uid":"5845178adf5da311babad1f01389aa66","slug":"solutions/solution-series-microservices","date":"2020-04-12T07:36:06.000Z","updated":"2024-07-05T04:09:05.811Z","comments":true,"path":"api/articles/solutions/solution-series-microservices.json","keywords":"宋国磊, glmapper, 卫恒, 分享, 开源","cover":"https://glmapper-blog.oss-cn-hangzhou.aliyuncs.com/micro/service-boundle.png","text":" 原文链接：https://martinfowler.com/articles/microservices.html 目录 微服务体系结构的特征 通过服务拆分实...","permalink":"/post/solutions/solution-series-microservices","photos":[],"count_time":{"symbolsCount":"51k","symbolsTime":"47 mins."},"categories":[{"name":"解决方案","slug":"解决方案","count":5,"path":"api/categories/解决方案.json"}],"tags":[{"name":"架构","slug":"架构","count":4,"path":"api/tags/架构.json"},{"name":"微服务","slug":"微服务","count":2,"path":"api/tags/微服务.json"},{"name":"microservices","slug":"microservices","count":1,"path":"api/tags/microservices.json"}],"author":{"name":"glmapper","slug":"blog-author","avatar":"https://glmapper-blog.oss-cn-hangzhou.aliyuncs.com/common/favicon.ico","link":"/","description":"开放，开源，分享，共享","socials":{"github":"https://github.com/glmapper","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/2412872703","zhihu":"","csdn":"","juejin":"https://juejin.cn/user/3227821827961806","customs":{"sofastack":{"icon":"https://glmapper-blog.oss-cn-hangzhou.aliyuncs.com/common/sofastack.svg","link":"https://www.sofastack.tech/"}}}}},"next_post":{"title":"解决方案系列-基于 SOFAArk 实现应用的动态装载和卸载","uid":"29bf6d756e74758621dce6f471f701c6","slug":"solutions/solution-series-dynamic-module","date":"2020-04-03T08:12:22.000Z","updated":"2024-07-05T04:09:05.811Z","comments":true,"path":"api/articles/solutions/solution-series-dynamic-module.json","keywords":"宋国磊, glmapper, 卫恒, 分享, 开源","cover":[],"text":" 原文链接：解决方案系列-基于 SOFAArk 实现应用的动态装载和卸载 本篇主要来看下蚂蚁金服开源的 SOFAArk 这个产品。SOFAArk 是一款基于 J...","permalink":"/post/solutions/solution-series-dynamic-module","photos":[],"count_time":{"symbolsCount":"2.5k","symbolsTime":"2 mins."},"categories":[{"name":"解决方案","slug":"解决方案","count":5,"path":"api/categories/解决方案.json"}],"tags":[{"name":"ClassLoader","slug":"ClassLoader","count":4,"path":"api/tags/ClassLoader.json"},{"name":"SOFAArk","slug":"SOFAArk","count":4,"path":"api/tags/SOFAArk.json"},{"name":"架构","slug":"架构","count":4,"path":"api/tags/架构.json"},{"name":"SOFAStack","slug":"SOFAStack","count":1,"path":"api/tags/SOFAStack.json"}],"author":{"name":"glmapper","slug":"blog-author","avatar":"https://glmapper-blog.oss-cn-hangzhou.aliyuncs.com/common/favicon.ico","link":"/","description":"开放，开源，分享，共享","socials":{"github":"https://github.com/glmapper","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/2412872703","zhihu":"","csdn":"","juejin":"https://juejin.cn/user/3227821827961806","customs":{"sofastack":{"icon":"https://glmapper-blog.oss-cn-hangzhou.aliyuncs.com/common/sofastack.svg","link":"https://www.sofastack.tech/"}}}}}}