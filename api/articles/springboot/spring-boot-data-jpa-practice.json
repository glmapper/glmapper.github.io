{"title":"聊一聊 Spring Data JPA 中的那些日常实践","uid":"b4c75674b257351f24efe8fa873c5818","slug":"springboot/spring-boot-data-jpa-practice","date":"2023-11-27T14:58:52.000Z","updated":"2024-07-05T04:09:05.827Z","comments":true,"path":"api/articles/springboot/spring-boot-data-jpa-practice.json","keywords":"宋国磊, glmapper, 卫恒, 分享, 开源","cover":[],"content":"<p>一直以来，团队在使用 ORM 框架上都是比较随意的，一开始是鼓励大家使用 mybatis，主要是期望团队同学可以自<br>己写写 SQL，不至于写 SQL 手生；但是从实际工作中来看，我们并不会涉及到很多非常复杂的 SQL 语句，这就导致<br>了大家会消耗相当部分的精力在写一些重复性并且没有什么技术难度的 SQL，对于基于数据库驱动的业务来说，当业务<br>涉及到的表结构越多时，这种问题就越突出。于是我在项目的脚手架中就提供了 mybatis 和 jpa 两种访问数据库的<br>方式，但是在随后的一段时间中发现，团队在使用 jpa 来操作数据库上的代码提交几乎为0，而有相当部分的同学则<br>是引入了 mybatis-plus。</p>\n<span id=\"more\"></span>\n\n<p>对于这个现象，我没有做过多的干预和询问，但从个人使用体验来说，我觉得可能有两个方面的原因：</p>\n<ul>\n<li>1、mybatis&#x2F;mybatis-plus 相较于 JPA 来说更灵活，它是国内开发者发起的，网上资源多，且都是中文。</li>\n<li>2、JPA 对于一些复杂操作用起来很别扭，网上关于 JPA 的高级用法文档很少且比较凌乱，官网上的介绍也很简单。</li>\n</ul>\n<p>也大概看了下网上关于 JPA 和 mybatis&#x2F;mybatis-plus 家族的区别以及对比文章（推荐知乎这篇：<a href=\"https://www.zhihu.com/question/316458408\">SpringBoot开发使用Mybatis还是Spring Data JPA??</a>，也都各有各的支持者。本篇文档不对比优劣，仅基于自己的项目实践，梳理了关于 JPA 的一些使用方式，这些使用方式主要是针对其默认 <strong>CrudRepository</strong> 在诸如分页、复合条件查询等方面不足的一些实践使用。</p>\n<h2 id=\"关于-Spring-Data-中的-Repository\"><a href=\"#关于-Spring-Data-中的-Repository\" class=\"headerlink\" title=\"关于 Spring Data 中的 Repository\"></a>关于 Spring Data 中的 Repository</h2><h3 id=\"Repository\"><a href=\"#Repository\" class=\"headerlink\" title=\"Repository\"></a>Repository</h3><p>Repository 概念是 Spring Data 中的，源码中关于这个接口的注释写的比较清楚，它是一个标记接口，类似与 Java 中的 <strong>Serializable</strong> 接口差不多含义。那放在 Spring Data 中来解释那就是用于交互数据仓库的接口。它介于业务层和数据层之间，将两者隔离开来，在它不同的实现内部封装了数据查询和存储的逻辑。</p>\n<p><code>Central repository marker interface. Captures the domain type to manage as well as the domain type&#39;s id type. General purpose is to hold type information as well as being able to discover interfaces that extend this one during classpath scanning for easy Spring bean creation.</code></p>\n<h3 id=\"Repository-和-DAO\"><a href=\"#Repository-和-DAO\" class=\"headerlink\" title=\"Repository 和 DAO\"></a>Repository 和 DAO</h3><p>DAO 是传统 MVC 中 Model 的关键角色，全称是 Data Access Object。DAO 直接负责数据库的存取工作，乍一看两者非常类似，但从架构设计上讲两者有着本质的区别：</p>\n<ul>\n<li>Repository 蕴含着真正的 oo 概念，即一个数据仓库角色，负责所有对象的持久化管理。</li>\n<li>DAO 没有摆脱数据的影子，仍然停留在数据操作的层面上。</li>\n</ul>\n<p>Repository 是相对对象而言，DAO 则是相对数据库而言，虽然可能是同一个东西 ，但侧重点不同。</p>\n<h2 id=\"Spring-Data-JPA\"><a href=\"#Spring-Data-JPA\" class=\"headerlink\" title=\"Spring Data JPA\"></a>Spring Data JPA</h2><p>Spring Data JPA 作为 Spring Data 的子集项目，其扩展了 Repository 接口，并提供了一组便于操作数据库的子类。如下图所示：</p>\n<p><img src=\"https://vspicgo.oss-cn-shanghai.aliyuncs.com/CrudRepository.png\" alt=\"CrudRepository\"></p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>PS: KV-Repository主要是对接 Nosql 部分，这里也放出来提供对比视图</p></blockquote>\n<h3 id=\"三种-Repository\"><a href=\"#三种-Repository\" class=\"headerlink\" title=\"三种 Repository\"></a>三种 Repository</h3><p>上面这张图我们主要关注的是 <code>CrudRepository</code>、<code>PagingAndSortingRepository</code> 和 <code>JpaRepository</code>。</p>\n<ul>\n<li><code>CrudRepository</code>：提供最基本的 <code>CRUD</code> 操作。</li>\n<li><code>PagingAndSortingRepository</code>：在 <code>CrudRepository</code> 的基础上，提供排序和分页能力。</li>\n<li><code>JpaRepository</code>：在 <code>PagingAndSortingRepository</code> 的基础上，进一步提供了查询列表、批量删除、强制同步以及 <code>Example</code> 查询等能力。</li>\n</ul>\n<p>在我们项目中，目前是基于 <code>CrudRepository</code> 接口的，因此大多数情况下，对于基本的分页查询能力从 <code>CrudRepository</code> 的视角是不可感知的，亦或是有同学关注到了这一点，但是对比于 <code>mybaitis-plus</code> 来说，缺少了一些吸引力。</p>\n<h3 id=\"Example-构建动态查询\"><a href=\"#Example-构建动态查询\" class=\"headerlink\" title=\"Example 构建动态查询\"></a>Example 构建动态查询</h3><p><code>Example</code> 构建查询主要是基于 <code>QueryByExampleExecutor</code> 接口，<code>QueryByExampleExecutor</code> 接口提供了一组方法，其入参为 <code>Example</code> 对象，通常情况下，可以通过 <code>Example</code> 提供的静态方法结合 <code>ExampleMatcher</code> 来构建 <code>Example</code>。在使用上，根据<a href=\"https://docs.spring.io/spring-data/jpa/reference/repositories/query-by-example.html\">官方文档</a>的描述来看：</p>\n<ul>\n<li>No support for nested or grouped property constraints, such as <code>firstname = ?0 or (firstname = ?1 and lastname = ?2)</code>，不支持嵌套或分组的属性约束</li>\n<li>Only supports starts&#x2F;contains&#x2F;ends&#x2F;regex matching for strings and exact matching for other property types，只支持字符串 start&#x2F;contains&#x2F;ends&#x2F;regex 匹配和其他属性类型的精确匹配。</li>\n</ul>\n<p>下面给出两个常用的基本示例。</p>\n<ul>\n<li><p><strong>OpenTalkUserRepository</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">OpenTalkUserRepository</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">CrudRepository</span>&lt;OpenTalkUserEntity,Long&gt;, </span><br><span class=\"line\">QueryByExampleExecutor&lt;OpenTalkUserEntity&gt; &#123;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>按照指定列精确查询</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 按多条件精确匹配查询</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">test_base_dynamic_query_fixed</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 构建实体类需要动态查询的条件，按照 sourceFrom 和 verified 进行指定条件值匹配查询</span></span><br><span class=\"line\">    <span class=\"type\">OpenTalkUserEntity</span> <span class=\"variable\">user</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">OpenTalkUserEntity</span>();</span><br><span class=\"line\">    user.setSourceFrom(<span class=\"string\">&quot;qq&quot;</span>);</span><br><span class=\"line\">    user.setVerified(<span class=\"string\">&quot;1&quot;</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 注意: 这个 Example 对象是 spring data 的 &#123; @link: org.springframework.data.domain.Example&#125;</span></span><br><span class=\"line\">    Example&lt;OpenTalkUserEntity&gt; example = Example.of(user);</span><br><span class=\"line\">    List&lt;OpenTalkUserEntity&gt; list = (List&lt;OpenTalkUserEntity&gt;) repository.findAll(example);</span><br><span class=\"line\">    Assert.assertTrue(list.size() &gt; <span class=\"number\">0</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>按照指定列模糊查询</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 按指定字段条件模糊匹配查询</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">test_base_dynamic_query_like</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">OpenTalkUserEntity</span> <span class=\"variable\">user</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">OpenTalkUserEntity</span>();</span><br><span class=\"line\">    user.setEmail(<span class=\"string\">&quot;qq&quot;</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 创建一个新的匹配器，默认情况下，probe 中所有的非空属性都匹配。即所有的属性条件用 and 连接</span></span><br><span class=\"line\">    <span class=\"comment\">// matchingAny: probe 中所有的非空属性匹配一个即可。即所有的属性条件用or连接</span></span><br><span class=\"line\">    <span class=\"comment\">// matchingAll:  probe 中所有的非空属性都匹配。即所有的属性条件用and连接</span></span><br><span class=\"line\">    <span class=\"comment\">// probe 表示含有对应字段的实例对象</span></span><br><span class=\"line\">    <span class=\"type\">ExampleMatcher</span> <span class=\"variable\">matcher</span> <span class=\"operator\">=</span> ExampleMatcher.matching();</span><br><span class=\"line\">    <span class=\"comment\">// 查询 email 中包括  qq 的记录</span></span><br><span class=\"line\">    <span class=\"comment\">// 这里指定列名， GenericPropertyMatcher 为 contains</span></span><br><span class=\"line\">    matcher = matcher.withMatcher(<span class=\"string\">&quot;email&quot;</span>, ExampleMatcher.GenericPropertyMatchers.contains());</span><br><span class=\"line\">    Example&lt;OpenTalkUserEntity&gt; example = Example.of(user, matcher);</span><br><span class=\"line\">    List&lt;OpenTalkUserEntity&gt; list = (List&lt;OpenTalkUserEntity&gt;) repository.findAll(example);</span><br><span class=\"line\">  Assert.assertTrue(list.size() &gt; <span class=\"number\">0</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><code>GenericPropertyMatcher</code> 包括以下几种类型：</p>\n<table>\n<thead>\n<tr>\n<th>类型</th>\n<th>解释</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>ignoreCase</code></td>\n<td>忽略大小写</td>\n</tr>\n<tr>\n<td><code>caseSensitive</code></td>\n<td>大小敏感</td>\n</tr>\n<tr>\n<td><code>contains</code></td>\n<td>包含 xx        同 “like %xx%”</td>\n</tr>\n<tr>\n<td><code>endsWith</code></td>\n<td>以 xx 结尾   同 “like %xx”</td>\n</tr>\n<tr>\n<td><code>startsWith</code></td>\n<td>以 xx 开始   同 “like xx%”</td>\n</tr>\n<tr>\n<td><code>exact</code></td>\n<td>精确匹配</td>\n</tr>\n<tr>\n<td><code>storeDefaultMatching</code></td>\n<td>默认规则，效果和 EXACT 相同</td>\n</tr>\n<tr>\n<td><code>regex</code></td>\n<td>正则匹配</td>\n</tr>\n</tbody></table>\n</li>\n<li><p>复杂组合查询</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 组合查询，忽略指定列、忽略 null 值、忽略 大小写等</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">test_base_dynamic_multi_condition_query</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">OpenTalkUserEntity</span> <span class=\"variable\">user</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">OpenTalkUserEntity</span>();</span><br><span class=\"line\">    user.setEmail(<span class=\"string\">&quot;qq&quot;</span>);</span><br><span class=\"line\">    user.setId(<span class=\"number\">17L</span>);</span><br><span class=\"line\">    <span class=\"type\">ExampleMatcher</span> <span class=\"variable\">matcher</span> <span class=\"operator\">=</span> ExampleMatcher.matching();</span><br><span class=\"line\">    <span class=\"comment\">// 查询 email 中包括 qq 的记录</span></span><br><span class=\"line\">    matcher = matcher.withMatcher(<span class=\"string\">&quot;email&quot;</span>, ExampleMatcher.GenericPropertyMatchers.contains());</span><br><span class=\"line\">    <span class=\"comment\">// 忽略主键，所以这里对于上面设置 id = 17 这个条件是无用的，返回结构中会包括 id = 17 的记录</span></span><br><span class=\"line\">    matcher = matcher.withIgnorePaths(<span class=\"string\">&quot;id&quot;</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 忽略 null 值</span></span><br><span class=\"line\">    matcher = matcher.withIgnoreNullValues();</span><br><span class=\"line\">    <span class=\"comment\">// 忽略 大小写</span></span><br><span class=\"line\">    matcher = matcher.withIgnoreCase();</span><br><span class=\"line\">    Example&lt;OpenTalkUserEntity&gt; example = Example.of(user, matcher);</span><br><span class=\"line\">    List&lt;OpenTalkUserEntity&gt; list = (List&lt;OpenTalkUserEntity&gt;) repository.findAll(example);</span><br><span class=\"line\">    System.out.println(JSONObject.toJSONString(list));</span><br><span class=\"line\">    Assert.assertTrue(list.size() &gt; <span class=\"number\">0</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Specification-构建动态查询\"><a href=\"#Specification-构建动态查询\" class=\"headerlink\" title=\"Specification 构建动态查询\"></a><code>Specification</code> 构建动态查询</h3><p><code>Example</code> 只能针对字符串进行条件设置，那如果希望对所有类型支持，可以使用 <code>Specification</code>。<code>Specification</code> 需要继承 <code>JpaSpecificationExecutor</code> 接口。和 <code>Example</code> 的 <strong>QueryByExampleExecutor</strong> 类型，<code>JpaSpecificationExecutor</code> 也同样提供了一组方法，其入参是 <code>Specification</code>。<code>Specification</code> 中几个概念：</p>\n<ul>\n<li><code>Root</code>：查询哪个表（关联查询） &#x3D;  from</li>\n<li><code>CriteriaQuery</code>：查询哪些字段，排序是什么 &#x3D;组合(order by . where )</li>\n<li><code>CriteriaBuilder</code>：条件之间是什么关系，如何生成一个查询条件，每一个查询条件都是什么类型（&gt; between in…) &#x3D; where</li>\n<li><code>Predicate（Expression）</code>： 每一条查询条件的详细描述</li>\n</ul>\n</li>\n</ul>\n<p>下面给出 <code>Specification</code> 的使用示例。</p>\n<ul>\n<li><p>组合条件查询</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">test_specification</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    Specification&lt;OpenTalkUserEntity&gt; spec = (root, query, criteriaBuilder) -&gt; &#123;</span><br><span class=\"line\">        Path&lt;Integer&gt; type = root.get(<span class=\"string\">&quot;verified&quot;</span>);</span><br><span class=\"line\">        <span class=\"comment\">// verified == &quot;1&quot;</span></span><br><span class=\"line\">        <span class=\"type\">Predicate</span> <span class=\"variable\">verifiedPredicate</span> <span class=\"operator\">=</span> criteriaBuilder.equal(type, <span class=\"string\">&quot;1&quot;</span>);</span><br><span class=\"line\">\t    <span class=\"comment\">// email like &quot;%qq%&quot;</span></span><br><span class=\"line\">        Path&lt;String&gt; email = root.get(<span class=\"string\">&quot;email&quot;</span>);</span><br><span class=\"line\">        <span class=\"type\">Predicate</span> <span class=\"variable\">emailPredicate</span> <span class=\"operator\">=</span> criteriaBuilder.like(email, <span class=\"string\">&quot;%qq%&quot;</span>);</span><br><span class=\"line\">        <span class=\"comment\">// and 条件 verified == &quot;1&quot; and email like &quot;%qq%&quot;</span></span><br><span class=\"line\">        <span class=\"type\">Predicate</span> <span class=\"variable\">predicate</span> <span class=\"operator\">=</span> criteriaBuilder.and(verifiedPredicate, emailPredicate);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> predicate;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    List&lt;OpenTalkUserEntity&gt; list = <span class=\"built_in\">this</span>.repository.findAll(spec);</span><br><span class=\"line\">    System.out.println(JSONObject.toJSONString(list));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h2 id=\"使用-Spring-Data-JPA-的一些实践\"><a href=\"#使用-Spring-Data-JPA-的一些实践\" class=\"headerlink\" title=\"使用 Spring Data JPA 的一些实践\"></a>使用 Spring Data JPA 的一些实践</h2><h3 id=\"分页查询\"><a href=\"#分页查询\" class=\"headerlink\" title=\"分页查询\"></a>分页查询</h3><p><strong>需要注意的是，不管是 Specification 还是 Example，查询的起始页都是 0，而不是 1。</strong></p>\n<ul>\n<li><p>使用 <strong>Specification</strong> 的分页查询</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">test_specification_combine_page</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    Specification&lt;OpenTalkUserEntity&gt; spec = (root, query, criteriaBuilder) -&gt; &#123;</span><br><span class=\"line\">        Path&lt;Integer&gt; type = root.get(<span class=\"string\">&quot;verified&quot;</span>);</span><br><span class=\"line\">        <span class=\"comment\">// verified == &quot;1&quot;</span></span><br><span class=\"line\">        <span class=\"type\">Predicate</span> <span class=\"variable\">verifiedPredicate</span> <span class=\"operator\">=</span> criteriaBuilder.equal(type, <span class=\"string\">&quot;1&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        Path&lt;String&gt; email = root.get(<span class=\"string\">&quot;email&quot;</span>);</span><br><span class=\"line\">        <span class=\"comment\">// email like &quot;%qq%&quot;</span></span><br><span class=\"line\">        <span class=\"type\">Predicate</span> <span class=\"variable\">emailPredicate</span> <span class=\"operator\">=</span> criteriaBuilder.like(email, <span class=\"string\">&quot;%qq%&quot;</span>);</span><br><span class=\"line\">        <span class=\"comment\">// and 条件 verified == &quot;1&quot; and email like &quot;%qq%&quot;</span></span><br><span class=\"line\">        <span class=\"type\">Predicate</span> <span class=\"variable\">predicate</span> <span class=\"operator\">=</span> criteriaBuilder.and(verifiedPredicate, emailPredicate);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> predicate;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"type\">Sort</span> <span class=\"variable\">sort</span> <span class=\"operator\">=</span> Sort.by(Sort.Direction.DESC, <span class=\"string\">&quot;createTime&quot;</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 注意这里的起始页为 0</span></span><br><span class=\"line\">    <span class=\"type\">PageRequest</span> <span class=\"variable\">pageRequest</span> <span class=\"operator\">=</span> PageRequest.of(<span class=\"number\">0</span>, <span class=\"number\">10</span>, sort);</span><br><span class=\"line\">    Page&lt;OpenTalkUserEntity&gt; all = <span class=\"built_in\">this</span>.repository.findAll(spec, pageRequest);</span><br><span class=\"line\">    <span class=\"type\">long</span> <span class=\"variable\">total</span> <span class=\"operator\">=</span> all.getTotalElements();</span><br><span class=\"line\">    List&lt;OpenTalkUserEntity&gt; content = all.getContent();</span><br><span class=\"line\">    System.out.println(JSONObject.toJSONString(content));</span><br><span class=\"line\">    Assert.assertTrue(total &gt; <span class=\"number\">0</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>使用 <strong>Example</strong> 的分页查询</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">test_example_combine_page</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 构建实体类需要动态查询的条件，按照 sourceFrom 和 verified 进行指定条件值匹配查询</span></span><br><span class=\"line\">    <span class=\"type\">OpenTalkUserEntity</span> <span class=\"variable\">user</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">OpenTalkUserEntity</span>();</span><br><span class=\"line\">    user.setSourceFrom(<span class=\"string\">&quot;qq&quot;</span>);</span><br><span class=\"line\">    user.setVerified(<span class=\"string\">&quot;1&quot;</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 注意: 这个 Example 对象是 spring data 的 &#123; @link: org.springframework.data.domain.Example&#125;</span></span><br><span class=\"line\">    Example&lt;OpenTalkUserEntity&gt; example = Example.of(user);</span><br><span class=\"line\">    <span class=\"type\">Sort</span> <span class=\"variable\">sort</span> <span class=\"operator\">=</span> Sort.by(Sort.Direction.DESC, <span class=\"string\">&quot;createTime&quot;</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 注意这里的起始页为 0</span></span><br><span class=\"line\">    <span class=\"type\">PageRequest</span> <span class=\"variable\">pageRequest</span> <span class=\"operator\">=</span> PageRequest.of(<span class=\"number\">0</span>, <span class=\"number\">10</span>, sort);</span><br><span class=\"line\">    Page&lt;OpenTalkUserEntity&gt; result = repository.findAll(example, pageRequest);</span><br><span class=\"line\">    System.out.println(JSONObject.toJSONString(result.getContent()));</span><br><span class=\"line\">    Assert.assertTrue(result.getTotalElements() &gt; <span class=\"number\">0</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"返回固定列数据\"><a href=\"#返回固定列数据\" class=\"headerlink\" title=\"返回固定列数据\"></a>返回固定列数据</h3><ul>\n<li><p>1、定义模型，这里须使用 <code>@lombok.Value</code> 注解</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Value</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">SimpleOpenTalkUserModel</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">Serializable</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String email;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String verified;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String sourceFrom;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>2、自定义查询方法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">   * 用户返回指定列的数据</span></span><br><span class=\"line\"><span class=\"comment\">   *</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@param</span> email</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@param</span> tClass</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@param</span> &lt;T&gt;</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">  &lt;T&gt; Optional&lt;T&gt; <span class=\"title function_\">findCustomByEmail</span><span class=\"params\">(String email, Class&lt;T&gt; tClass)</span>;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>3、查询数据</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">test_custom_model</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    Optional&lt;SimpleOpenTalkUserModel&gt; optional = <span class=\"built_in\">this</span>.repository.findCustomByEmail(<span class=\"string\">&quot;test15@qq.com&quot;</span>, SimpleOpenTalkUserModel.class);</span><br><span class=\"line\">    System.out.println(optional.get());</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"使用-SQL\"><a href=\"#使用-SQL\" class=\"headerlink\" title=\"使用 SQL\"></a>使用 SQL</h3><p>还是按照上面那个返回自定义对象，这里使用注解的方式来查询</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">    * 使用注解</span></span><br><span class=\"line\"><span class=\"comment\">    *</span></span><br><span class=\"line\"><span class=\"comment\">    * <span class=\"doctag\">@param</span> email</span></span><br><span class=\"line\"><span class=\"comment\">    * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\">   <span class=\"meta\">@Query(value = &quot;select new com.gl.guides.jpa.entity.SimpleOpenTalkUserModel(user.email ,user.verified, </span></span><br><span class=\"line\"><span class=\"meta\">   user.sourceFrom) from OpenTalkUserEntity user where user.email = ?1&quot;)</span></span><br><span class=\"line\">   SimpleOpenTalkUserModel <span class=\"title function_\">findCustomByEmail</span><span class=\"params\">(String email)</span>;</span><br></pre></td></tr></table></figure>\n\n<p>注意，这里不能使用 <code>nativeQuery = true</code> ，并且 <code>SimpleOpenTalkUserModel</code> 需要提供全参的构造函数。</p>\n<h3 id=\"关联查询\"><a href=\"#关联查询\" class=\"headerlink\" title=\"关联查询\"></a>关联查询</h3><p>正常的复杂关联查询，完全可以通过使用 <code>nativeQuery = true</code> ，然后编写原生的 SQL 来实现即可。这里不再赘述。</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>实际上，<code>Spring Data JPA</code> 可以整的花活是非常多的；上面提到的几种案例对于绝大多数业务场景应该是满足的。JPA 提供的封装屏蔽了底层的复杂逻辑，在一定程度上可能会造成性能上的影响，但是对于中小型项目，并且在数据体量不是很大的情况下，JPA 是个不错的选择。</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>PS: JPA 对于自定义方法，如上面的 <code>findCustomByEmail</code> ，刚开始 debug 起来有点摸不到头脑；但是对于 Java 开发者来说，总归绕不过代理这个东西，顺藤摸瓜就找到了。下面补一张图备忘，以便于后续研究其源码时使用。</p></blockquote>\n<p>此代码片段位于 <code>org.springframework.data.jpa.repository.query.JpaQueryExecution</code> 类中</p>\n<p><img src=\"https://vspicgo.oss-cn-shanghai.aliyuncs.com/image-20231127193637482.png\" alt=\"image-20231127193637482\"></p>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><ul>\n<li><a href=\"https://segmentfault.com/a/1190000012346333\">https://segmentfault.com/a/1190000012346333</a></li>\n<li><a href=\"https://zhuanlan.zhihu.com/p/565770887\">https://zhuanlan.zhihu.com/p/565770887</a></li>\n<li><a href=\"https://www.zhihu.com/question/316458408\">https://www.zhihu.com/question/316458408</a></li>\n<li><a href=\"https://spring.io/projects/spring-data\">https://spring.io/projects/spring-data</a></li>\n<li><a href=\"https://spring.io/projects/spring-data-jpa\">https://spring.io/projects/spring-data-jpa</a></li>\n<li><a href=\"https://tuonioooo-notebook.gitbook.io/application-framework/jpapian/spring-data-jpa-quan-mian-jie-xi\">https://tuonioooo-notebook.gitbook.io/application-framework/jpapian/spring-data-jpa-quan-mian-jie-xi</a></li>\n</ul>\n","text":"一直以来，团队在使用 ORM 框架上都是比较随意的，一开始是鼓励大家使用 mybatis，主要是期望团队同学可以自己写写 SQL，不至于写 SQL 手生；但是从...","permalink":"/post/springboot/spring-boot-data-jpa-practice","photos":[],"count_time":{"symbolsCount":"11k","symbolsTime":"10 mins."},"categories":[{"name":"SpringBoot","slug":"SpringBoot","count":17,"path":"api/categories/SpringBoot.json"}],"tags":[{"name":"SpringBoot","slug":"SpringBoot","count":17,"path":"api/tags/SpringBoot.json"},{"name":"JPA","slug":"JPA","count":1,"path":"api/tags/JPA.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%85%B3%E4%BA%8E-Spring-Data-%E4%B8%AD%E7%9A%84-Repository\"><span class=\"toc-text\">关于 Spring Data 中的 Repository</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Repository\"><span class=\"toc-text\">Repository</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Repository-%E5%92%8C-DAO\"><span class=\"toc-text\">Repository 和 DAO</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Spring-Data-JPA\"><span class=\"toc-text\">Spring Data JPA</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%B8%89%E7%A7%8D-Repository\"><span class=\"toc-text\">三种 Repository</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Example-%E6%9E%84%E5%BB%BA%E5%8A%A8%E6%80%81%E6%9F%A5%E8%AF%A2\"><span class=\"toc-text\">Example 构建动态查询</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Specification-%E6%9E%84%E5%BB%BA%E5%8A%A8%E6%80%81%E6%9F%A5%E8%AF%A2\"><span class=\"toc-text\">Specification 构建动态查询</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%BD%BF%E7%94%A8-Spring-Data-JPA-%E7%9A%84%E4%B8%80%E4%BA%9B%E5%AE%9E%E8%B7%B5\"><span class=\"toc-text\">使用 Spring Data JPA 的一些实践</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%88%86%E9%A1%B5%E6%9F%A5%E8%AF%A2\"><span class=\"toc-text\">分页查询</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E8%BF%94%E5%9B%9E%E5%9B%BA%E5%AE%9A%E5%88%97%E6%95%B0%E6%8D%AE\"><span class=\"toc-text\">返回固定列数据</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%BD%BF%E7%94%A8-SQL\"><span class=\"toc-text\">使用 SQL</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%85%B3%E8%81%94%E6%9F%A5%E8%AF%A2\"><span class=\"toc-text\">关联查询</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%80%BB%E7%BB%93\"><span class=\"toc-text\">总结</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%8F%82%E8%80%83\"><span class=\"toc-text\">参考</span></a></li></ol>","author":{"name":"glmapper","slug":"blog-author","avatar":"https://glmapper-blog.oss-cn-hangzhou.aliyuncs.com/common/favicon.ico","link":"/","description":"开放，开源，分享，共享","socials":{"github":"https://github.com/glmapper","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/2412872703","zhihu":"","csdn":"","juejin":"https://juejin.cn/user/3227821827961806","customs":{"sofastack":{"icon":"https://glmapper-blog.oss-cn-hangzhou.aliyuncs.com/common/sofastack.svg","link":"https://www.sofastack.tech/"}}}},"mapped":true,"hidden":false,"prev_post":{"title":"win 10 部署 langchain-chatchat gpu 版","uid":"815e5fe8003f703e73f556f106d850e3","slug":"llm/langchain-chatchat-deploy","date":"2024-01-05T09:32:34.000Z","updated":"2024-12-25T09:48:28.467Z","comments":true,"path":"api/articles/llm/langchain-chatchat-deploy.json","keywords":"宋国磊, glmapper, 卫恒, 分享, 开源","cover":[],"text":"基于 ChatGLM 等大语言模型与 Langchain 等应用框架实现，开源、可离线部署的检索增强生成(RAG)大模型知识库项目。 本地环境 品牌：戴尔 op...","permalink":"/post/llm/langchain-chatchat-deploy","photos":[],"count_time":{"symbolsCount":"14k","symbolsTime":"13 mins."},"categories":[{"name":"LLM","slug":"LLM","count":2,"path":"api/categories/LLM.json"}],"tags":[{"name":"langchain","slug":"langchain","count":1,"path":"api/tags/langchain.json"}],"author":{"name":"glmapper","slug":"blog-author","avatar":"https://glmapper-blog.oss-cn-hangzhou.aliyuncs.com/common/favicon.ico","link":"/","description":"开放，开源，分享，共享","socials":{"github":"https://github.com/glmapper","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/2412872703","zhihu":"","csdn":"","juejin":"https://juejin.cn/user/3227821827961806","customs":{"sofastack":{"icon":"https://glmapper-blog.oss-cn-hangzhou.aliyuncs.com/common/sofastack.svg","link":"https://www.sofastack.tech/"}}}}},"next_post":{"title":"Linux 服务器端口不可访问问题排查","uid":"13684172933510c4dbfa702cdfb990b7","slug":"linux/linux-port-deny-access","date":"2023-11-27T14:57:01.000Z","updated":"2024-07-05T04:09:05.775Z","comments":true,"path":"api/articles/linux/linux-port-deny-access.json","keywords":"宋国磊, glmapper, 卫恒, 分享, 开源","cover":[],"text":"问题描述项目中使用的服务器是物理机，使用 centos 7.6 版本的操作系统， 4 个千兆网口，上架时间 23 年 8 月份。部署在内网机房，并且在内网机房分...","permalink":"/post/linux/linux-port-deny-access","photos":[],"count_time":{"symbolsCount":"4.7k","symbolsTime":"4 mins."},"categories":[{"name":"Linux","slug":"Linux","count":9,"path":"api/categories/Linux.json"}],"tags":[{"name":"linux","slug":"linux","count":9,"path":"api/tags/linux.json"},{"name":"arping","slug":"arping","count":1,"path":"api/tags/arping.json"}],"author":{"name":"glmapper","slug":"blog-author","avatar":"https://glmapper-blog.oss-cn-hangzhou.aliyuncs.com/common/favicon.ico","link":"/","description":"开放，开源，分享，共享","socials":{"github":"https://github.com/glmapper","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/2412872703","zhihu":"","csdn":"","juejin":"https://juejin.cn/user/3227821827961806","customs":{"sofastack":{"icon":"https://glmapper-blog.oss-cn-hangzhou.aliyuncs.com/common/sofastack.svg","link":"https://www.sofastack.tech/"}}}}}}