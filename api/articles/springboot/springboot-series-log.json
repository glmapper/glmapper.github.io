{"title":"SpringBoot 源码系列-日志详解","uid":"f5d3246c456264d1eef61369dbcbbbab","slug":"springboot/springboot-series-log","date":"2019-12-14T09:18:07.000Z","updated":"2024-07-05T04:09:05.829Z","comments":true,"path":"api/articles/springboot/springboot-series-log.json","keywords":null,"cover":[],"content":"<p>Spring Boot 使用 Commons Logging 进行所有内部日志记录，但保留底层日志实现。为 Java Util Logging、Log4J2 和 Logback 提供了默认配置。在每种情况下，loggers 都预先配置为使用 console 输出，并且也提供可选的文件输出。</p>\n<p>默认情况下，如果使用 “starters”，则使用 Logback 进行日志记录。还包括适当的 Logback 路由，以确保使用 Java Util 日志记录、Commons 日志记录、Log4J 或 SLF4J 的依赖库都能正常工作。</p>\n<span id=\"more\"></span>\n\n<p>下面先来看一个最简单的 SpringBoot demo 工程的日志输出，以此来展开日志格式、控制台输出、日志颜色、日志文件配置、日志体系解析等几个方面的介绍。</p>\n<p>新建一个 SpringBoot 工程，默认在什么都不加的情况下直接启动，其启动日志大概如下：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">2019</span><span class=\"number\">-12</span><span class=\"number\">-24</span> <span class=\"number\">20</span><span class=\"punctuation\">:</span><span class=\"number\">41</span><span class=\"punctuation\">:</span><span class=\"number\">31.866</span>  INFO <span class=\"number\">87851</span> --- <span class=\"punctuation\">[</span>           main<span class=\"punctuation\">]</span> com.glmapper.bridge.boot.BootStrap       <span class=\"punctuation\">:</span> No active profile set<span class=\"punctuation\">,</span> falling back to default profiles<span class=\"punctuation\">:</span> default</span><br><span class=\"line\"><span class=\"number\">2019</span><span class=\"number\">-12</span><span class=\"number\">-24</span> <span class=\"number\">20</span><span class=\"punctuation\">:</span><span class=\"number\">41</span><span class=\"punctuation\">:</span><span class=\"number\">32.003</span>  INFO <span class=\"number\">87851</span> --- <span class=\"punctuation\">[</span>           main<span class=\"punctuation\">]</span> s.c.a.AnnotationConfigApplicationContext <span class=\"punctuation\">:</span> Refreshing org.springframework.context.annotation.AnnotationConfigApplicationContext@<span class=\"number\">314</span>c508a<span class=\"punctuation\">:</span> startup date <span class=\"punctuation\">[</span>Tue Dec <span class=\"number\">24</span> <span class=\"number\">20</span><span class=\"punctuation\">:</span><span class=\"number\">41</span><span class=\"punctuation\">:</span><span class=\"number\">31</span> CST <span class=\"number\">2019</span><span class=\"punctuation\">]</span>; root of context hierarchy</span><br><span class=\"line\"><span class=\"number\">2019</span><span class=\"number\">-12</span><span class=\"number\">-24</span> <span class=\"number\">20</span><span class=\"punctuation\">:</span><span class=\"number\">41</span><span class=\"punctuation\">:</span><span class=\"number\">32.556</span>  INFO <span class=\"number\">87851</span> --- <span class=\"punctuation\">[</span>           main<span class=\"punctuation\">]</span> o.s.j.e.a.AnnotationMBeanExporter        <span class=\"punctuation\">:</span> Registering beans for JMX exposure on startup</span><br><span class=\"line\"><span class=\"number\">2019</span><span class=\"number\">-12</span><span class=\"number\">-24</span> <span class=\"number\">20</span><span class=\"punctuation\">:</span><span class=\"number\">41</span><span class=\"punctuation\">:</span><span class=\"number\">32.568</span>  INFO <span class=\"number\">87851</span> --- <span class=\"punctuation\">[</span>           main<span class=\"punctuation\">]</span> com.glmapper.bridge.boot.BootStrap       <span class=\"punctuation\">:</span> Started BootStrap in <span class=\"number\">1.035</span> seconds (JVM running for <span class=\"number\">2.13</span>)</span><br><span class=\"line\"><span class=\"number\">2019</span><span class=\"number\">-12</span><span class=\"number\">-24</span> <span class=\"number\">20</span><span class=\"punctuation\">:</span><span class=\"number\">41</span><span class=\"punctuation\">:</span><span class=\"number\">32.569</span>  INFO <span class=\"number\">87851</span> --- <span class=\"punctuation\">[</span>       Thread<span class=\"number\">-4</span><span class=\"punctuation\">]</span> s.c.a.AnnotationConfigApplicationContext <span class=\"punctuation\">:</span> Closing org.springframework.context.annotation.AnnotationConfigApplicationContext@<span class=\"number\">314</span>c508a<span class=\"punctuation\">:</span> startup date <span class=\"punctuation\">[</span>Tue Dec <span class=\"number\">24</span> <span class=\"number\">20</span><span class=\"punctuation\">:</span><span class=\"number\">41</span><span class=\"punctuation\">:</span><span class=\"number\">31</span> CST <span class=\"number\">2019</span><span class=\"punctuation\">]</span>; root of context hierarchy</span><br><span class=\"line\"><span class=\"number\">2019</span><span class=\"number\">-12</span><span class=\"number\">-24</span> <span class=\"number\">20</span><span class=\"punctuation\">:</span><span class=\"number\">41</span><span class=\"punctuation\">:</span><span class=\"number\">32.571</span>  INFO <span class=\"number\">87851</span> --- <span class=\"punctuation\">[</span>       Thread<span class=\"number\">-4</span><span class=\"punctuation\">]</span> o.s.j.e.a.AnnotationMBeanExporter        <span class=\"punctuation\">:</span> Unregistering JMX-exposed beans on shutdown</span><br><span class=\"line\"></span><br><span class=\"line\">Process finished with exit code <span class=\"number\">0</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"日志格式\"><a href=\"#日志格式\" class=\"headerlink\" title=\"日志格式\"></a>日志格式</h2><p>上面是 Spring Boot 的默认日志输出，从日志格式来看，主要包括以下几项：</p>\n<ul>\n<li>日期时间: 例如 2019-12-24 20:41:31.866 (毫秒精度)</li>\n<li>日志级别: 例如 INFO (ERROR, WARN, INFO, DEBUG, or TRACE.)</li>\n<li>当前进程: 例如 87851</li>\n<li>— 分隔符，用于区分实际日志消息的开头。</li>\n<li>线程名称: 例如 Thread-4 (用方括号括起来(为了控制台输出可能被截断)).</li>\n<li>日志名称: 这通常是源类名(通常是缩写)。</li>\n<li>日志信息: 具体的日志消息</li>\n</ul>\n<p>比如这条记录：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">2019</span><span class=\"number\">-12</span><span class=\"number\">-24</span> <span class=\"number\">20</span><span class=\"punctuation\">:</span><span class=\"number\">41</span><span class=\"punctuation\">:</span><span class=\"number\">31.866</span>  INFO <span class=\"number\">87851</span> --- <span class=\"punctuation\">[</span>           main<span class=\"punctuation\">]</span> com.glmapper.bridge.boot.BootStrap       <span class=\"punctuation\">:</span> No active profile set<span class=\"punctuation\">,</span> falling back to default profiles<span class=\"punctuation\">:</span> default</span><br></pre></td></tr></table></figure>\n\n<p>是在 org.springframework.boot.SpringApplication#logStartupProfileInfo 方法中打印的，日志级别为 INFO。</p>\n<p><img src=\"https://glmapper-blog.oss-cn-hangzhou.aliyuncs.com/log-boot-print.jpg\"></p>\n<h2 id=\"Console-输出\"><a href=\"#Console-输出\" class=\"headerlink\" title=\"Console 输出\"></a>Console 输出</h2><p>SpringBoot 默认会将日志输出到 Console，默认情况下，会记录 error 级别、warn 级别和 info 级别的消息。还可以通过使用 <code>—-debug</code> 参数启动应用程序来使用 “debug” 级别。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">java -jar myapp.jar --debug</span><br></pre></td></tr></table></figure>\n\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>也可以在 application.properties 中指定 debug&#x3D;true 来启用 debug 级别</p></blockquote>\n<p>当启用 debug 级别时，将配置一系列核心日志记录器(嵌入式容器、Hibernate 和 Spring Boot) 以输出更多信息。启用 debug 模式并不会将应用程序配置为记录所有具有 debug 级别的消息。同样的，也可以使用 <code>—-trace</code> 标记来启动 trace 级别模式来启动应用程序。</p>\n<h2 id=\"彩色编码输出\"><a href=\"#彩色编码输出\" class=\"headerlink\" title=\"彩色编码输出\"></a>彩色编码输出</h2><p>如果你的终端支持 ANSI，你可以通过设置 “spring.output.ansi.enable“ 配置项值来指定颜色（前提是官方已经支持的颜色）。颜色编码是通过使用 <code>%clr</code> 转换字来配置的，最简单的就是根据日志级别对输出的日志进行着色，如下面的示例所示:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">%clr(%5p)</span><br></pre></td></tr></table></figure>\n\n<p>下表是官方提供的描述日志级别到颜色的映射关系表:</p>\n<table>\n<thead>\n<tr>\n<th>Level</th>\n<th>Color</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>FATAL</td>\n<td>Red</td>\n</tr>\n<tr>\n<td>ERROR</td>\n<td>Red</td>\n</tr>\n<tr>\n<td>WARN</td>\n<td>Yellow</td>\n</tr>\n<tr>\n<td>INFO</td>\n<td>Green</td>\n</tr>\n<tr>\n<td>DEBUG</td>\n<td>Green</td>\n</tr>\n<tr>\n<td>TRACE</td>\n<td>Green</td>\n</tr>\n</tbody></table>\n<p>如果你想要使文本变成黄色，可以使用以下设置:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">%clr(%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125;)&#123;yellow&#125;</span><br></pre></td></tr></table></figure>\n\n<p>目前支持的颜色和样式包括 : blue、cyan、faint、green、magenta、red、yellow。</p>\n<h2 id=\"文件输出\"><a href=\"#文件输出\" class=\"headerlink\" title=\"文件输出\"></a>文件输出</h2><p>默认情况下，Spring 引导日志只输出到 Console，不会写入到日志文件中。如果希望在 Console 输出之外还写入到日志文件，则需要设置 logging.file 和 logging.path 属性(在 application.properties 中)。下表显示了 logging.* 属性如何一起使用:</p>\n<table>\n<thead>\n<tr>\n<th>logging.file</th>\n<th>logging.path</th>\n<th>Example</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>none</td>\n<td>none</td>\n<td></td>\n<td>控制台日志</td>\n</tr>\n<tr>\n<td>指定文件</td>\n<td>none</td>\n<td>my.log</td>\n<td>写入指定的日志文件，名称可以是精确位置或相对于当前目录。</td>\n</tr>\n<tr>\n<td>none</td>\n<td>指定文件</td>\n<td>&#x2F;var&#x2F;log</td>\n<td>将 spring.log 写入指定的目录，名称可以是精确位置或相对于当前目录。</td>\n</tr>\n</tbody></table>\n<p>日志文件在达到 10 MB 时会进行 Rolling，与 Console 输出一样，默认情况下会记录 ERROR 级别、WARN 级别和 INFO 级别的消息。可以使用 logging.file.max-size 属性更改大小限制。除非已设置 logging.file.max-history 属性，否则以前 Rolling 的文件将无限期归档。</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>日志系统在应用程序生命周期的早期初始化。因此，在通过 @PropertySource 注释加载的属性文件中是找不到日志属性的。另外，logging 属性独立于实际的logging 基础结构。所以，Spring Boot 不会管理特定的配置密钥（例如 Logback 的 logback.configurationFile）。</p></blockquote>\n<h2 id=\"日志级别\"><a href=\"#日志级别\" class=\"headerlink\" title=\"日志级别\"></a>日志级别</h2><p>SpringBoot 中所支持的日志系统都可以通过 <code>logging.level.&lt;logger-name&gt;=&lt;level&gt;</code> 在 Spring 环境中设置日志的级别(比如在application.properties 中)。日志级别主要包括 TRACE, DEBUG, INFO, WARN, ERROR, FATAL 和 OFF 几种。除此之外，还可以使用  <code>logging.level.root</code> 配置 root logger 的日志级别。下面的示例展示了如何在 application.properties 中配置日志级别:</p>\n<figure class=\"highlight properties\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">logging.level.root</span>=<span class=\"string\">warn</span></span><br><span class=\"line\"><span class=\"attr\">logging.level.org.springframework.web</span>=<span class=\"string\">debug</span></span><br><span class=\"line\"><span class=\"attr\">logging.level.org.hibernate</span>=<span class=\"string\">error</span></span><br></pre></td></tr></table></figure>\n\n<p>除了 application.properties 之外，也可以使用环境变量设置日志级别。例如，LOGGING_LEVEL_ORG_SPRINGFRAMEWORK_WEB&#x3D;DEBUG 将 org.springframework.web 包下的日志打印级别设置为 DEBUG。</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>上面的方法只适用于包级别的日志记录。由于 <a href=\"https://docs.spring.io/spring-boot/docs/2.0.4.RELEASE/reference/htmlsingle/#boot-features-external-config-relaxed-binding\">Relaxed Binding</a> 总是将环境变量转换为小写形式，因此不可能以这种方式为单个类配置日志记录。如果需要为一个类配置日志记录，可以使用 <a href=\"https://docs.spring.io/spring-boot/docs/2.1.11.RELEASE/reference/html/boot-features-external-config.html#boot-features-external-config-application-json\">SPRING_APPLICATION_JSON</a> 变量。</p></blockquote>\n<h2 id=\"日志-Groups\"><a href=\"#日志-Groups\" class=\"headerlink\" title=\"日志 Groups\"></a>日志 Groups</h2><p>将相关的 loggers 分组在一起通常很有用，这样就可以同时对它们进行配置，Spring Boot 允许在 Spring 环境中定义日志组。例如将 “tomcat” 组添加到 application.properties。</p>\n<figure class=\"highlight properties\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">logging.group.tomcat</span>=<span class=\"string\">org.apache.catalina, org.apache.coyote, org.apache.tomcat</span></span><br></pre></td></tr></table></figure>\n\n<p>这样，我们就可以通过一行配置来设置一组日志的日志级别：</p>\n<figure class=\"highlight properties\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">logging.level.tomcat</span>=<span class=\"string\">TRACE</span></span><br></pre></td></tr></table></figure>\n\n<p>Spring Boot 包含以下可以开箱即用的预定义日志组:</p>\n<table>\n<thead>\n<tr>\n<th>Name</th>\n<th>Loggers</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>web</td>\n<td>org.springframework.core.codec, org.springframework.http, org.springframework.web, org.springframework.boot.actuate.endpoint.web, org.springframework.boot.web.servlet.ServletContextInitializerBeans</td>\n</tr>\n<tr>\n<td>sql</td>\n<td>org.springframework.jdbc.core, org.hibernate.SQL</td>\n</tr>\n</tbody></table>\n<h2 id=\"自定义日志配置\"><a href=\"#自定义日志配置\" class=\"headerlink\" title=\"自定义日志配置\"></a>自定义日志配置</h2><p>可以通过在类路径中包含适当的库来激活各种日志系统，还可以通过在类路径的根目录中提供适当的配置文件或在 Spring 环境的 <code>logging.config</code> 属性指定的位置提供适当的配置文件来进一步定制日志系统。</p>\n<p>比如可以使用 <code>org.springframework.boot.logging.LoggingSystem</code> 配置属性强制 Spring 引导使用指定的日志系统。该值应该是 LoggingSystem 实现的完全限定类名；如果配置为 none 的话，则表示完全禁用 Spring Boot 的日志配置。下表描述了 SpringBoot 中日志系统所对应的日志配置文件：</p>\n<table>\n<thead>\n<tr>\n<th>Logging System</th>\n<th>Customization</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>Logback</td>\n<td>logback-spring.xml, logback-spring.groovy, logback.xml, or logback.groovy</td>\n</tr>\n<tr>\n<td>Log4j2</td>\n<td>org.springframework.jdbc.core, org.hibernate.SQL</td>\n</tr>\n<tr>\n<td>JDK (Java Util Logging)</td>\n<td>logging.properties</td>\n</tr>\n</tbody></table>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>SpringBoot 官方建议在日志配置中使用 <code>-spring</code> 的配置方式(例如，使用 <code>logback-spring.xml</code> 而不是 <code>logback.xml</code>)。如果使用标准配置位置，Spring 无法完全控制日志初始化。</p></blockquote>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>另外官方文档中有明确提到，JUL(ava Util Logging) 在 FATJAR 场景下存在一些已知的类加载问题，所以要尽量避免在 FATJAR 场景下使用 JUL。</p></blockquote>\n<p>为了辅助对日志系统进行定制，Spring 会将环境变量属性设置成系统属性，如下表所示:</p>\n<table>\n<thead>\n<tr>\n<th>Spring Environment</th>\n<th>System Property</th>\n<th>Comments</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>logging.exception-conversion-word</td>\n<td>LOG_EXCEPTION_CONVERSION_WORD</td>\n<td>记录异常时使用的 conversion word</td>\n</tr>\n<tr>\n<td>logging.file</td>\n<td>LOG_FILE</td>\n<td>如果已定义，则在默认日志配置中使用。</td>\n</tr>\n<tr>\n<td>logging.file.max-size</td>\n<td>LOG_FILE_MAX_SIZE</td>\n<td>最大日志文件大小(如果启用了LOG_FILE)。(只支持默认的Logback设置)</td>\n</tr>\n<tr>\n<td>logging.file.max-history</td>\n<td>LOG_FILE_MAX_HISTORY</td>\n<td>要保留的归档日志文件的最大数量(如果启用了LOG_FILE)。(只支持默认的Logback设置。)</td>\n</tr>\n<tr>\n<td>logging.path</td>\n<td>LOG_PATH</td>\n<td>如果已定义，则在默认日志配置中使用。</td>\n</tr>\n<tr>\n<td>logging.pattern.console</td>\n<td>CONSOLE_LOG_PATTERN</td>\n<td>要在控制台(stdout)上使用的日志模式。(只支持默认的Logback设置。)</td>\n</tr>\n<tr>\n<td>logging.pattern.dateformat</td>\n<td>LOG_DATEFORMAT_PATTERN</td>\n<td>日志日期格式的附加模式。(只支持默认的 Logback 设置。)</td>\n</tr>\n<tr>\n<td>logging.pattern.file</td>\n<td>FILE_LOG_PATTERN</td>\n<td>最大日志文件大小(如果启用了LOG_FILE)。(只支持默认的Logback设置)</td>\n</tr>\n<tr>\n<td>logging.pattern.level</td>\n<td>LOG_LEVEL_PATTERN</td>\n<td>呈现日志级别时使用的格式(默认%5p)。(只支持默认的Logback设置。)</td>\n</tr>\n<tr>\n<td>PID</td>\n<td>PID</td>\n<td>当前进程ID</td>\n</tr>\n</tbody></table>\n<p>所有支持的日志系统在解析配置文件时都可以参考系统属性进行配置解析。</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>如果希望在日志属性中使用占位符，应该使用 SpringBoot 的语法，而不是底层框架的语法。需要注意的是，如果使用 Logback，应该使用<code>:</code>作为属性名及其默认值之间的分隔符，而不是使用<code>:-</code>。</p></blockquote>\n<h2 id=\"springProfile-配置\"><a href=\"#springProfile-配置\" class=\"headerlink\" title=\"springProfile 配置\"></a>springProfile 配置</h2><p> <springProfile> 允许用户根据激活的 Spring profiles 选择包含或排除配置部分。profile 文件部分在 <configuration> 元素的任何地方都受支持。可以使用 name 属性指定哪个配置文件接受配置。<springProfile> 可以包含简单的 profile 文件名称(例如 dev )或 profile 文件表达式。profile 文件表达式允许一些比较复杂的 profile 文件逻辑，例如: “production &amp; (eu-central | eu-west)”。下面的显示了三个配置文件示例:</p>\n <figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">springProfile</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;dev&quot;</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"comment\">&lt;!-- 激活 dev 环境的配置 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">springProfile</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">springProfile</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;dev | pre&quot;</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"comment\">&lt;!-- 激活 dev 和 pre 的环境变量 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">springProfile</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">springProfile</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;!prod&quot;</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"comment\">&lt;!-- 所有非 prod 环境的都激活 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">springProfile</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"环境属性\"><a href=\"#环境属性\" class=\"headerlink\" title=\"环境属性\"></a>环境属性</h2><p> <springProperty> 标记允许用户传递 Spring Environment 中的属性，以便在 Logback 中使用。比如在 Logback 配置中访问 application.properties 文件中的值。<springProperty> 的作用机制与 Logback 的标准 <property> 标签类似。但是，不是指定直接 value，而是指定属性的 source（来自Environment）。如果需要将属性存储在 local 范围以外的其他位置，则可以使用 scope 属性来控制。如果需要默认值（如果未在 Environment 中设置该属性），则可以使用 defaultValue 属性配置。以下示例描述了如何传递在 Logback 中使用的属性：</p>\n <figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">springProperty</span> <span class=\"attr\">scope</span>=<span class=\"string\">&quot;context&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;fluentHost&quot;</span> <span class=\"attr\">source</span>=<span class=\"string\">&quot;myapp.fluentd.host&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">\t\t<span class=\"attr\">defaultValue</span>=<span class=\"string\">&quot;localhost&quot;</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">appender</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;FLUENT&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;ch.qos.logback.more.appenders.DataFluentAppender&quot;</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">remoteHost</span>&gt;</span>$&#123;fluentHost&#125;<span class=\"tag\">&lt;/<span class=\"name\">remoteHost</span>&gt;</span></span><br><span class=\"line\">\t...</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">appender</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>前面基于 SpringBoot 官方文档对于 Logger 的支持描述做了简单的介绍，下面将通过分析源码来深入的掌握上述这些特性。本文以 log4j2 为例进行分析。</p>\n<p>在 <a href=\"http://www.glmapper.com/2019/04/13/springboot-series-event/#SpringBoot-%E5%90%AF%E5%8A%A8%E8%BF%87%E7%A8%8B%E4%B8%AD%E7%9A%84%E4%BA%8B%E4%BB%B6%E9%98%B6%E6%AE%B5\">SpringBoot 系列-事件机制详解</a> 文章中其实有提到过 logging 初始化的时机。这里简单回顾下：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># Application Listeners</span><br><span class=\"line\">org.springframework.context.ApplicationListener=\\</span><br><span class=\"line\"><span class=\"comment\">// 省略其他</span></span><br><span class=\"line\">org.springframework.boot.context.logging.ClasspathLoggingApplicationListener<span class=\"punctuation\">,</span>\\</span><br><span class=\"line\">org.springframework.boot.context.logging.LoggingApplicationListener<span class=\"punctuation\">,</span>\\</span><br></pre></td></tr></table></figure>\n<p>这两个 logging 的监听器中，主要作用的是 LoggingApplicationListener ，这个监听器就是 SpringBoot 中日志初始化的入口。</p>\n<h2 id=\"日志初始化入口\"><a href=\"#日志初始化入口\" class=\"headerlink\" title=\"日志初始化入口\"></a>日志初始化入口</h2><p>LoggingApplicationListener 继承了 GenericApplicationListener 这个接口，其父接口是 ApplicationListener，GenericApplicationListener 中扩展了对于事件类型的支持判断。这里主要关心的是 onApplicationEvent 这个回调方法，关于这个方法中所提到的几个事件类型，可以参考 <a href=\"http://www.glmapper.com/2019/04/13/springboot-series-event\">SpringBoot 系列-事件机制详解</a> 这篇文章的介绍。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">onApplicationEvent</span><span class=\"params\">(ApplicationEvent event)</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// ApplicationStartingEvent </span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (event <span class=\"keyword\">instanceof</span> ApplicationStartingEvent) &#123;</span><br><span class=\"line\">        onApplicationStartingEvent((ApplicationStartingEvent) event);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// ApplicationEnvironmentPreparedEvent </span></span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (event <span class=\"keyword\">instanceof</span> ApplicationEnvironmentPreparedEvent) &#123;</span><br><span class=\"line\">        onApplicationEnvironmentPreparedEvent((ApplicationEnvironmentPreparedEvent) event);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// ApplicationPreparedEvent</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (event <span class=\"keyword\">instanceof</span> ApplicationPreparedEvent) &#123;</span><br><span class=\"line\">        onApplicationPreparedEvent((ApplicationPreparedEvent) event);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// ContextClosedEvent</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (event <span class=\"keyword\">instanceof</span> ContextClosedEvent</span><br><span class=\"line\">            &amp;&amp; ((ContextClosedEvent) event).getApplicationContext().getParent() == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">        onContextClosedEvent();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// ApplicationFailedEvent</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (event <span class=\"keyword\">instanceof</span> ApplicationFailedEvent) &#123;</span><br><span class=\"line\">        onApplicationFailedEvent();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"ApplicationStartingEvent-阶段的处理\"><a href=\"#ApplicationStartingEvent-阶段的处理\" class=\"headerlink\" title=\"ApplicationStartingEvent 阶段的处理\"></a>ApplicationStartingEvent 阶段的处理</h3><p>在收到 ApplicationStartingEvent 事件时，SpringBoot 将通过当前应用的 classloader 来构建一个 loggingSystem 对象，然后执行初始化之前的一些准备工作。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title function_\">onApplicationStartingEvent</span><span class=\"params\">(ApplicationStartingEvent event)</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 通过当前应用的 classloader 构建 loggingSystem 对象</span></span><br><span class=\"line\">    <span class=\"built_in\">this</span>.loggingSystem = LoggingSystem.get(event.getSpringApplication().getClassLoader());</span><br><span class=\"line\">    <span class=\"comment\">// loggingSystem 初始化之前准备</span></span><br><span class=\"line\">    <span class=\"built_in\">this</span>.loggingSystem.beforeInitialize();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这里可以来看下 loggingSystem 是如何被构建出来的，这个过程可以使得我们非常清楚的了解到，为什么通过引入日志框架依赖或者使用 <code>org.springframework.boot.logging.LoggingSystem</code> 配置能够自动的完成日志框架的选择。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> LoggingSystem <span class=\"title function_\">get</span><span class=\"params\">(ClassLoader classLoader)</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// SYSTEM_PROPERTY=org.springframework.boot.logging.LoggingSystem</span></span><br><span class=\"line\">    <span class=\"comment\">// 这里先从系统变量中获取下 org.springframework.boot.logging.LoggingSystem，看下是否用户自己指定了 LoggingSystem 的类型</span></span><br><span class=\"line\">    <span class=\"type\">String</span> <span class=\"variable\">loggingSystem</span> <span class=\"operator\">=</span> System.getProperty(SYSTEM_PROPERTY);</span><br><span class=\"line\">    <span class=\"comment\">// 如果 org.springframework.boot.logging.LoggingSystem=xx 有配置值 </span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (StringUtils.hasLength(loggingSystem)) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 是否配置的是 none</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (NONE.equals(loggingSystem)) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 如果配置的是 none ，则返回 NoOpLoggingSystem</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">NoOpLoggingSystem</span>();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 根据指定的日志类型通过反射创建 loggingSystem 对象</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> get(classLoader, loggingSystem);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> SYSTEMS.entrySet().stream().filter((entry) -&gt; ClassUtils.isPresent(entry.getKey(), classLoader))</span><br><span class=\"line\">            .map((entry) -&gt; get(classLoader, entry.getValue())).findFirst()</span><br><span class=\"line\">            .orElseThrow(() -&gt; <span class=\"keyword\">new</span> <span class=\"title class_\">IllegalStateException</span>(<span class=\"string\">&quot;No suitable logging system located&quot;</span>));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>上面代码的最后基于 SYSTEMS 一个 Map 结构的数据进行一系列的处理，主要就是通过判断 entry.getKey() 是否在当前 classpath 中存在，如果存在则通过反射构建类型为 entry.getValue() 的对象；SYSTEMS 是 LoggingSystem 抽象类中的一个静态的 MAP 结构变量，其初始化是在静态代码块中完成的：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">static</span> &#123;</span><br><span class=\"line\">    Map&lt;String, String&gt; systems = <span class=\"keyword\">new</span> <span class=\"title class_\">LinkedHashMap</span>&lt;&gt;();</span><br><span class=\"line\">    <span class=\"comment\">// 添加 logback 的 LoggingSystem</span></span><br><span class=\"line\">    systems.put(<span class=\"string\">&quot;ch.qos.logback.core.Appender&quot;</span>, <span class=\"string\">&quot;org.springframework.boot.logging.logback.LogbackLoggingSystem&quot;</span>);、</span><br><span class=\"line\">     <span class=\"comment\">// 添加 log4j2 的 LoggingSystem</span></span><br><span class=\"line\">    systems.put(<span class=\"string\">&quot;org.apache.logging.log4j.core.impl.Log4jContextFactory&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;org.springframework.boot.logging.log4j2.Log4J2LoggingSystem&quot;</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 添加 JUL 的 LoggingSystem</span></span><br><span class=\"line\">    systems.put(<span class=\"string\">&quot;java.util.logging.LogManager&quot;</span>, <span class=\"string\">&quot;org.springframework.boot.logging.java.JavaLoggingSystem&quot;</span>);</span><br><span class=\"line\">    SYSTEMS = Collections.unmodifiableMap(systems);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这样看来就比较清晰，如果当前 classpath 中存在 logback、log4j2 或者 JUL 的依赖，则就构建对应的 LoggingSystem 对象。LoggingSystem 对象构建之后还会调用 beforeInitialize 方法，假设引入的是 log4j2 的依赖，则最后构建的 LoggingSystem 就是 Log4J2LoggingSystem 。beforeInitialize 是 LoggingSystem 提供的抽象方法，其具体实现是由子类实现。下面在源码分析部分会展开分析。</p>\n<h3 id=\"ApplicationEnvironmentPreparedEvent-阶段的处理\"><a href=\"#ApplicationEnvironmentPreparedEvent-阶段的处理\" class=\"headerlink\" title=\"ApplicationEnvironmentPreparedEvent 阶段的处理\"></a>ApplicationEnvironmentPreparedEvent 阶段的处理</h3><p>接收到 ApplicationEnvironmentPreparedEvent 事件说明 Environment 对象已经构建完成，环境变量都已经初始化完成了。所以这里主要的工作就是初始化日志框架。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title function_\">onApplicationEnvironmentPreparedEvent</span><span class=\"params\">(ApplicationEnvironmentPreparedEvent event)</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 这里会再 check 一次loggingSystem 是否已经被创建</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"built_in\">this</span>.loggingSystem == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.loggingSystem = LoggingSystem.get(event.getSpringApplication().getClassLoader());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 通过环境和类路径表达的首选项初始化日志系统。</span></span><br><span class=\"line\">    initialize(event.getEnvironment(), event.getSpringApplication().getClassLoader());</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// initialize</span></span><br><span class=\"line\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title function_\">initialize</span><span class=\"params\">(ConfigurableEnvironment environment, ClassLoader classLoader)</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// Spring 环境转移到系统属性</span></span><br><span class=\"line\">    <span class=\"keyword\">new</span> <span class=\"title class_\">LoggingSystemProperties</span>(environment).apply();</span><br><span class=\"line\">    <span class=\"comment\">// 解析得到 logFile，依赖 logging.file 和 loggin.path 两个配置值</span></span><br><span class=\"line\">    <span class=\"built_in\">this</span>.logFile = LogFile.get(environment);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"built_in\">this</span>.logFile != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">//设置logging.file-&gt;LOG_FILE</span></span><br><span class=\"line\">        <span class=\"comment\">// loggin.path -&gt; LOG_PATH</span></span><br><span class=\"line\">        <span class=\"built_in\">this</span>.logFile.applyToSystemProperties();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    initializeEarlyLoggingLevel(environment);</span><br><span class=\"line\">    <span class=\"comment\">// 根据 log 的配置文件初始化 日志</span></span><br><span class=\"line\">    initializeSystem(environment, <span class=\"built_in\">this</span>.loggingSystem, <span class=\"built_in\">this</span>.logFile);</span><br><span class=\"line\">    <span class=\"comment\">// 绑定 logging.group , 设置 logging.level</span></span><br><span class=\"line\">    initializeFinalLoggingLevels(environment, <span class=\"built_in\">this</span>.loggingSystem);</span><br><span class=\"line\">    <span class=\"comment\">// 注册 logging.register-shutdown-hook 配置的 钩子</span></span><br><span class=\"line\">    registerShutdownHookIfNecessary(environment, <span class=\"built_in\">this</span>.loggingSystem);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这个阶段就是根据我们配置的日志相关的属性和配置文件对日志进行一系列的初始化工作，这里所涉及到的属性和配置在文章前面部分均有提及到。</p>\n<h3 id=\"ApplicationPreparedEvent-阶段的处理\"><a href=\"#ApplicationPreparedEvent-阶段的处理\" class=\"headerlink\" title=\"ApplicationPreparedEvent 阶段的处理\"></a>ApplicationPreparedEvent 阶段的处理</h3><p>接收到 ApplicationPreparedEvent 事件表示应用程序已经准备好，这里会注册两个 bean ， 一个是 springBootLoggingSystem，一个是 pringBootLogFile 。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title function_\">onApplicationPreparedEvent</span><span class=\"params\">(ApplicationPreparedEvent event)</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">ConfigurableListableBeanFactory</span> <span class=\"variable\">beanFactory</span> <span class=\"operator\">=</span> event.getApplicationContext().getBeanFactory();</span><br><span class=\"line\">    <span class=\"comment\">// 注册 springBootLoggingSystem bean </span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!beanFactory.containsBean(LOGGING_SYSTEM_BEAN_NAME)) &#123;</span><br><span class=\"line\">        beanFactory.registerSingleton(LOGGING_SYSTEM_BEAN_NAME, <span class=\"built_in\">this</span>.loggingSystem);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 注册 pringBootLogFile bean</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"built_in\">this</span>.logFile != <span class=\"literal\">null</span> &amp;&amp; !beanFactory.containsBean(LOGFILE_BEAN_NAME)) &#123;</span><br><span class=\"line\">        beanFactory.registerSingleton(LOGFILE_BEAN_NAME, <span class=\"built_in\">this</span>.logFile);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"ContextClosedEvent-和-ApplicationFailedEvent\"><a href=\"#ContextClosedEvent-和-ApplicationFailedEvent\" class=\"headerlink\" title=\"ContextClosedEvent 和 ApplicationFailedEvent\"></a>ContextClosedEvent 和 ApplicationFailedEvent</h3><p>ContextClosedEvent 事件是 Spring 容器关闭时发送的事件，这里主要就是在 Spring 容器关闭时对日志系统做的一些清理操作；ApplicationFailedEvent 是应用启动失败发送的事件，这里也会对日志系统做清理操作。清理方法由各个子 LoggingSystem 提供具体的实现，以 log4j2 为例，log4j2 的清理主要包括注销桥接处理器（前面初始化阶段有提到）、LogContext 置为null、移除 FILTER，基本上就是初始化阶段的逆过程。</p>\n<h2 id=\"LoggingSystem-分析\"><a href=\"#LoggingSystem-分析\" class=\"headerlink\" title=\"LoggingSystem 分析\"></a>LoggingSystem 分析</h2><p>LoggingSystem 是 SpringBoot 对日志框架进行的一层抽象封装，LoggingSystem 使得我们可以很方便地使用一些日志框架，只需要定义对应日志框架的配置文件，比如 Logback、Log4j、Log4j2 等，代码内部便可以直接使用。</p>\n<p><img src=\"https://glmapper-blog.oss-cn-hangzhou.aliyuncs.com/logging-system.jpg\"></p>\n<p>上图为 LoggingSystem 的类继承结构，可以看到 LoggingSystem 的实现子类有 Logback（LogbackLoggingSystem）、Log4j2（Log4J2LoggingSystem）以及 JDK 内置的 Log (JavaLoggingSystem)。LoggingSystem 是个抽象类，内部有这几个方法：</p>\n<ul>\n<li>beforeInitialize：日志系统初始化之前需要处理的事情</li>\n<li>initialize：初始化日志系统</li>\n<li>cleanUp：日志系统的清除工作</li>\n<li>getShutdownHandler：返回一个 Runnable 用于当 jvm 退出的时候处理日志系统关闭后需要进行的操作，默认返回 null</li>\n<li>setLogLevel：设置 logger 的级别</li>\n</ul>\n<p>这几个方法在上面分析启动入口和日志初始化时都有看到，上述几个方法在 LoggingSystem 要么是抽象方法，要么是空实现，均需要有具体的子类来完成的具体日志框架的处理。从类继承结构图看到有一个 AbstractLoggingSystem，日志实现子类都是继承自这个类，而这个类也是一个抽象类，它又是 LoggingSystem 的子类。所以下面就分别看下 AbstractLoggingSystem 和 Log4J2LoggingSystem 两个类是怎么重写上述几个方法的，这也是 SpringBoot 中日志框架处理的核心逻辑。</p>\n<h3 id=\"AbstractLoggingSystem-处理逻辑\"><a href=\"#AbstractLoggingSystem-处理逻辑\" class=\"headerlink\" title=\"AbstractLoggingSystem 处理逻辑\"></a>AbstractLoggingSystem 处理逻辑</h3><p>beforeInitialize 在 AbstractLoggingSystem 中没有具体的处理逻辑，是个空方法，所以主要是看下 initialize 这个方法.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">initialize</span><span class=\"params\">(LoggingInitializationContext initializationContext, String configLocation, LogFile logFile)</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 如果指定了日志配置文件，则通过此配置文件进行初始化</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (StringUtils.hasLength(configLocation)) &#123;</span><br><span class=\"line\">        initializeWithSpecificConfig(initializationContext, configLocation, logFile);</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 没有指定配置文件，则使用默认的方式查找配置文件并加载</span></span><br><span class=\"line\">    initializeWithConventions(initializationContext, logFile);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 通过指定的配置文件初始化</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title function_\">initializeWithSpecificConfig</span><span class=\"params\">(LoggingInitializationContext initializationContext, String configLocation,</span></span><br><span class=\"line\"><span class=\"params\">\t\t\tLogFile logFile)</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 这里会处理日志配置文件中的占位符</span></span><br><span class=\"line\">    configLocation = SystemPropertyUtils.resolvePlaceholders(configLocation);</span><br><span class=\"line\">    <span class=\"comment\">// 抽象方法，由具体子类实现（不同的日志框架处理配置文件的方式由其自身决定）</span></span><br><span class=\"line\">    loadConfiguration(initializationContext, configLocation, logFile);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 通过默认方式查找配置文件并初始化</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title function_\">initializeWithConventions</span><span class=\"params\">(LoggingInitializationContext initializationContext, LogFile logFile)</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 查找配置文件，以 log4j2 为例，默认会在 classpath 下查找文件名为 </span></span><br><span class=\"line\">    <span class=\"comment\">// log4j2.properties、log4j2.yaml, log4j2.yml、log4j2.json，log4j2.jsn，log4j2.xml 的文件</span></span><br><span class=\"line\">    <span class=\"type\">String</span> <span class=\"variable\">config</span> <span class=\"operator\">=</span> getSelfInitializationConfig();</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (config != <span class=\"literal\">null</span> &amp;&amp; logFile == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 发生了自初始化，在属性发生变化时重新初始化</span></span><br><span class=\"line\">        reinitialize(initializationContext);</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (config == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 查找 Spring 规则方式的配置，</span></span><br><span class=\"line\">        <span class=\"comment\">// log4j2-spring.properties、log4j2-spring.xml 等</span></span><br><span class=\"line\">        config = getSpringInitializationConfig();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (config != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">        loadConfiguration(initializationContext, config, logFile);</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 抽象方法，由具体的日志系统实现</span></span><br><span class=\"line\">    loadDefaults(initializationContext, logFile);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>initialize 里主要就是找配置文件，然后通过配置文件进行日志系统的初始化，如果找不到就使用日志系统提供的默认方式进行初始化。上面代码中关于如何 load 配置文件和 load 默认都是在子类中实现的。所以下面就看下在 log4j2 的情况下，是怎么玩的。</p>\n<h3 id=\"Log4J2LoggingSystem-处理逻辑\"><a href=\"#Log4J2LoggingSystem-处理逻辑\" class=\"headerlink\" title=\"Log4J2LoggingSystem 处理逻辑\"></a>Log4J2LoggingSystem 处理逻辑</h3><p>Log4J2LoggingSystem 并非是 AbstractLoggingSystem 的直接子类，而是 Slf4JLoggingSystem 的直接子类，Slf4JLoggingSystem 这个抽象类从代码来看其实就是为了做一些桥接处理，这里不展开分析。</p>\n<h4 id=\"beforeInitialize-在-Log4J2LoggingSystem-中的实现\"><a href=\"#beforeInitialize-在-Log4J2LoggingSystem-中的实现\" class=\"headerlink\" title=\"beforeInitialize 在 Log4J2LoggingSystem 中的实现\"></a>beforeInitialize 在 Log4J2LoggingSystem 中的实现</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">beforeInitialize</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 创建、获取 LoggerContext 对象</span></span><br><span class=\"line\">    <span class=\"type\">LoggerContext</span> <span class=\"variable\">loggerContext</span> <span class=\"operator\">=</span> getLoggerContext();</span><br><span class=\"line\">    <span class=\"comment\">// 判断当前 LoggerContext 是否已经初始化过了，如果已经初始化过了则直接返回</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (isAlreadyInitialized(loggerContext)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 调用父类 Slf4JLoggingSystem 的 beforeInitialize 的方法，父类这个方法主要就是配置JDK Logging 的桥接处理器</span></span><br><span class=\"line\">    <span class=\"built_in\">super</span>.beforeInitialize();</span><br><span class=\"line\">    <span class=\"comment\">// 给 loggerContext 添加默认的 FILTER</span></span><br><span class=\"line\">    loggerContext.getConfiguration().addFilter(FILTER);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>getLoggerContext 是 log4j2 自己构建 LoggerContext 的过程，此处就先 pass。</p></blockquote>\n<h4 id=\"initialize-在-Log4J2LoggingSystem-中的实现\"><a href=\"#initialize-在-Log4J2LoggingSystem-中的实现\" class=\"headerlink\" title=\"initialize 在 Log4J2LoggingSystem 中的实现\"></a>initialize 在 Log4J2LoggingSystem 中的实现</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">initialize</span><span class=\"params\">(LoggingInitializationContext initializationContext, String configLocation, LogFile logFile)</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 拿到当前 loggerContext</span></span><br><span class=\"line\">    <span class=\"type\">LoggerContext</span> <span class=\"variable\">loggerContext</span> <span class=\"operator\">=</span> getLoggerContext();</span><br><span class=\"line\">    <span class=\"comment\">// 判断下是否已经初始化过了</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (isAlreadyInitialized(loggerContext)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 移除默认的 FILTER</span></span><br><span class=\"line\">    loggerContext.getConfiguration().removeFilter(FILTER);</span><br><span class=\"line\">    <span class=\"comment\">// 调用父类 initialize，就是在找日志配置文件并且初始化</span></span><br><span class=\"line\">    <span class=\"built_in\">super</span>.initialize(initializationContext, configLocation, logFile);</span><br><span class=\"line\">    <span class=\"comment\">// 标记已经完成初始化</span></span><br><span class=\"line\">    markAsInitialized(loggerContext);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这里核心 initialize方法 还是使用的父类的处理逻辑，前面也提到 initialize 在 AbstractLoggingSystem 中最核心的是 load 配置配置文件的过程（loadConfiguration&#x2F;loadDefaults），而这个 load 的过程是子类实现的。所以下面就看下 log4j2 中 load 配置文件的过程。</p>\n<ul>\n<li>loadConfiguration：有配置文件的情况</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title function_\">loadConfiguration</span><span class=\"params\">(String location, LogFile logFile)</span> &#123;</span><br><span class=\"line\">    Assert.notNull(location, <span class=\"string\">&quot;Location must not be null&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">LoggerContext</span> <span class=\"variable\">ctx</span> <span class=\"operator\">=</span> getLoggerContext();</span><br><span class=\"line\">        <span class=\"comment\">// 拿到资源url</span></span><br><span class=\"line\">        <span class=\"type\">URL</span> <span class=\"variable\">url</span> <span class=\"operator\">=</span> ResourceUtils.getURL(location);</span><br><span class=\"line\">        <span class=\"comment\">// 构建 ConfigurationSource 对象</span></span><br><span class=\"line\">        <span class=\"type\">ConfigurationSource</span> <span class=\"variable\">source</span> <span class=\"operator\">=</span> getConfigurationSource(url);</span><br><span class=\"line\">        <span class=\"comment\">// 这里会根据配置的类型选择不同的解析器来解析配置文件,比如</span></span><br><span class=\"line\">        <span class=\"comment\">// XmlConfigurationFactory、PropertiesConfigurationFactory...</span></span><br><span class=\"line\">        <span class=\"comment\">// 以指定的 configuration 启动</span></span><br><span class=\"line\">        ctx.start(ConfigurationFactory.getInstance().getConfiguration(ctx, source));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">catch</span> (Exception ex) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">IllegalStateException</span>(<span class=\"string\">&quot;Could not initialize Log4J2 logging from &quot;</span> + location, ex);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>简单概括：通过指定的配置文件地址构建 ConfigurationSource 配置资源对象，然后根据配置资源的文件类型选择不同的 ConfigurationFactory 来解析配置文件，最后日志框架根据此配置文件初始化日志系统。</p>\n<ul>\n<li>loadDefaults：没有配置文件的情况</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title function_\">loadDefaults</span><span class=\"params\">(LoggingInitializationContext initializationContext, LogFile logFile)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (logFile != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 使用 classpath:org/springframework/boot/logging/log4j2/log4j2-file.xml</span></span><br><span class=\"line\">        loadConfiguration(getPackagedConfigFile(<span class=\"string\">&quot;log4j2-file.xml&quot;</span>), logFile);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 使用 classpath:org/springframework/boot/logging/log4j2/log4j2.xml</span></span><br><span class=\"line\">        loadConfiguration(getPackagedConfigFile(<span class=\"string\">&quot;log4j2.xml&quot;</span>), logFile);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>简单概括：在没有指定日志配置文件或者没有在 classpath 下找到符合指定日志系统的配置文件时，则使用 SpringBoot 提供的默认的配置文件进行初始化。</p>\n<h3 id=\"日志系统的清理逻辑\"><a href=\"#日志系统的清理逻辑\" class=\"headerlink\" title=\"日志系统的清理逻辑\"></a>日志系统的清理逻辑</h3><p>cleanUp 方法也是由具体的 LoggingSystem 实现，主要作用就是清理 LoggingSystem 资源。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">cleanUp</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 调用父类，移除桥接器</span></span><br><span class=\"line\">    <span class=\"built_in\">super</span>.cleanUp();</span><br><span class=\"line\">    <span class=\"type\">LoggerContext</span> <span class=\"variable\">loggerContext</span> <span class=\"operator\">=</span> getLoggerContext();</span><br><span class=\"line\">    <span class=\"comment\">// 标记loggerContext为未初始化状态，并将内部的 externalContext 置为 null</span></span><br><span class=\"line\">    markAsUninitialized(loggerContext);</span><br><span class=\"line\">    <span class=\"comment\">// 移除默认的 FILTER</span></span><br><span class=\"line\">    loggerContext.getConfiguration().removeFilter(FILTER);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"一些场景分析\"><a href=\"#一些场景分析\" class=\"headerlink\" title=\"一些场景分析\"></a>一些场景分析</h2><p>这里面包括日常开发工作中使用日志的一些常见场景，比如项目中没有任何日志配置的情况、在 resources 目录下配置日志配置文件的情况、已经使用 SpringBoot 无法识别的日志篇日志文件的情况。</p>\n<h3 id=\"没有任何配置文件\"><a href=\"#没有任何配置文件\" class=\"headerlink\" title=\"没有任何配置文件\"></a>没有任何配置文件</h3><p>没有任何配置，通过前面的分析可知，initialize 方法执行时，是找不到任何资源的，所以会走默认的 loadDefaults 方法进行加载，LogbackLoggingSystem 的loadDefaults 方法，由于 logFile 为 null，所以会使用 <code>classpath:org/springframework/boot/logging/log4j2/log4j2.xml</code> 这份配置文件:</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=<span class=\"string\">&quot;1.0&quot;</span> encoding=<span class=\"string\">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">Configuration</span> <span class=\"attr\">status</span>=<span class=\"string\">&quot;WARN&quot;</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">Properties</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">Property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;PID&quot;</span>&gt;</span>????<span class=\"tag\">&lt;/<span class=\"name\">Property</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">Property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;LOG_EXCEPTION_CONVERSION_WORD&quot;</span>&gt;</span>%xwEx<span class=\"tag\">&lt;/<span class=\"name\">Property</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">Property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;LOG_LEVEL_PATTERN&quot;</span>&gt;</span>%5p<span class=\"tag\">&lt;/<span class=\"name\">Property</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">Property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;LOG_DATEFORMAT_PATTERN&quot;</span>&gt;</span>yyyy-MM-dd HH:mm:ss.SSS<span class=\"tag\">&lt;/<span class=\"name\">Property</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">Property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;CONSOLE_LOG_PATTERN&quot;</span>&gt;</span>%clr&#123;%d&#123;$&#123;LOG_DATEFORMAT_PATTERN&#125;&#125;&#125;&#123;faint&#125; %clr&#123;$&#123;LOG_LEVEL_PATTERN&#125;&#125; %clr&#123;$&#123;sys:PID&#125;&#125;&#123;magenta&#125; %clr&#123;---&#125;&#123;faint&#125; %clr&#123;[%15.15t]&#125;&#123;faint&#125; %clr&#123;%-40.40c&#123;1.&#125;&#125;&#123;cyan&#125; %clr&#123;:&#125;&#123;faint&#125; %m%n$&#123;sys:LOG_EXCEPTION_CONVERSION_WORD&#125;<span class=\"tag\">&lt;/<span class=\"name\">Property</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">Property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;FILE_LOG_PATTERN&quot;</span>&gt;</span>%d&#123;$&#123;LOG_DATEFORMAT_PATTERN&#125;&#125; $&#123;LOG_LEVEL_PATTERN&#125; $&#123;sys:PID&#125; --- [%t] %-40.40c&#123;1.&#125; : %m%n$&#123;sys:LOG_EXCEPTION_CONVERSION_WORD&#125;<span class=\"tag\">&lt;/<span class=\"name\">Property</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">Properties</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">Appenders</span>&gt;</span></span><br><span class=\"line\">        // 打在控制台</span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">Console</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;Console&quot;</span> <span class=\"attr\">target</span>=<span class=\"string\">&quot;SYSTEM_OUT&quot;</span> <span class=\"attr\">follow</span>=<span class=\"string\">&quot;true&quot;</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">PatternLayout</span> <span class=\"attr\">pattern</span>=<span class=\"string\">&quot;$&#123;sys:CONSOLE_LOG_PATTERN&#125;&quot;</span> /&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">Console</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">Appenders</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">Loggers</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">Logger</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;org.apache.catalina.startup.DigesterFactory&quot;</span> <span class=\"attr\">level</span>=<span class=\"string\">&quot;error&quot;</span> /&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">Logger</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;org.apache.catalina.util.LifecycleBase&quot;</span> <span class=\"attr\">level</span>=<span class=\"string\">&quot;error&quot;</span> /&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">Logger</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;org.apache.coyote.http11.Http11NioProtocol&quot;</span> <span class=\"attr\">level</span>=<span class=\"string\">&quot;warn&quot;</span> /&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">logger</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;org.apache.sshd.common.util.SecurityUtils&quot;</span> <span class=\"attr\">level</span>=<span class=\"string\">&quot;warn&quot;</span>/&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">Logger</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;org.apache.tomcat.util.net.NioSelectorPool&quot;</span> <span class=\"attr\">level</span>=<span class=\"string\">&quot;warn&quot;</span> /&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">Logger</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;org.eclipse.jetty.util.component.AbstractLifeCycle&quot;</span> <span class=\"attr\">level</span>=<span class=\"string\">&quot;error&quot;</span> /&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">Logger</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;org.hibernate.validator.internal.util.Version&quot;</span> <span class=\"attr\">level</span>=<span class=\"string\">&quot;warn&quot;</span> /&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">logger</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;org.springframework.boot.actuate.endpoint.jmx&quot;</span> <span class=\"attr\">level</span>=<span class=\"string\">&quot;warn&quot;</span>/&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">Root</span> <span class=\"attr\">level</span>=<span class=\"string\">&quot;info&quot;</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">AppenderRef</span> <span class=\"attr\">ref</span>=<span class=\"string\">&quot;Console&quot;</span> /&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">Root</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">Loggers</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">Configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>这份配置文件中值有一个  Appender，就是默认的 Console，所以没有配置任何日志配置文件时，日志会被打在控制台。</p>\n<h3 id=\"在-resources-目录下配置-log4j2-xml\"><a href=\"#在-resources-目录下配置-log4j2-xml\" class=\"headerlink\" title=\"在 resources 目录下配置 log4j2.xml\"></a>在 resources 目录下配置 log4j2.xml</h3><p>这份配置文件是能够被 SpringBoot 识别的，所以在初始化日志时会使用此份配置文件来进行日志系统的初始化。下面这份配置文件为每种日志级别都配置了一个 appender，所以在使用时，会根据日志级别将日志打在不同的日志目录下。（PS:关于能够识别的日志配置文件参考前面的分析）</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=<span class=\"string\">&quot;1.0&quot;</span> encoding=<span class=\"string\">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">configuration</span> <span class=\"attr\">status</span>=<span class=\"string\">&quot;OFF&quot;</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">Properties</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">Property</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;logging.path&quot;</span>&gt;</span>./logs<span class=\"tag\">&lt;/<span class=\"name\">Property</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">Properties</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">appenders</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">Console</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;Console&quot;</span> <span class=\"attr\">target</span>=<span class=\"string\">&quot;SYSTEM_OUT&quot;</span>&gt;</span></span><br><span class=\"line\">            <span class=\"comment\">&lt;!--只接受程序中 INFO 级别的日志进行处理 --&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">ThresholdFilter</span> <span class=\"attr\">level</span>=<span class=\"string\">&quot;INFO&quot;</span> <span class=\"attr\">onMatch</span>=<span class=\"string\">&quot;ACCEPT&quot;</span> <span class=\"attr\">onMismatch</span>=<span class=\"string\">&quot;DENY&quot;</span> /&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">PatternLayout</span> <span class=\"attr\">pattern</span>=<span class=\"string\">&quot;[%d&#123;HH:mm:ss.SSS&#125;] %-5level %class&#123;36&#125; %L %M - %msg%xEx%n&quot;</span> /&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">Console</span>&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!--处理DEBUG级别的日志，并把该日志放到logs/debug.log文件中--&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!--打印出DEBUG级别日志，每次大小超过size，则这size大小的日志会自动存入按年份-月份建立的文件夹下面并进行压缩，作为存档--&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">RollingFile</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;RollingFileDebug&quot;</span> <span class=\"attr\">fileName</span>=<span class=\"string\">&quot;$&#123;logging.path&#125;/debug.log&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">                     <span class=\"attr\">filePattern</span>=<span class=\"string\">&quot;logs/$$&#123;date:yyyy-MM&#125;/debug-%d&#123;yyyy-MM-dd&#125;-%i.log.gz&quot;</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">Filters</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">ThresholdFilter</span> <span class=\"attr\">level</span>=<span class=\"string\">&quot;DEBUG&quot;</span>/&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">ThresholdFilter</span> <span class=\"attr\">level</span>=<span class=\"string\">&quot;INFO&quot;</span> <span class=\"attr\">onMatch</span>=<span class=\"string\">&quot;DENY&quot;</span> <span class=\"attr\">onMismatch</span>=<span class=\"string\">&quot;NEUTRAL&quot;</span>/&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">Filters</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">PatternLayout</span></span></span><br><span class=\"line\"><span class=\"tag\">                    <span class=\"attr\">pattern</span>=<span class=\"string\">&quot;[%d&#123;yyyy-MM-dd HH:mm:ss&#125;] %-5level %class&#123;36&#125; %L %M - %msg%xEx%n&quot;</span>/&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">Policies</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">SizeBasedTriggeringPolicy</span> <span class=\"attr\">size</span>=<span class=\"string\">&quot;500 MB&quot;</span>/&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">TimeBasedTriggeringPolicy</span>/&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">Policies</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">RollingFile</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">&lt;!--处理INFO级别的日志，并把该日志放到logs/info.log文件中--&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">RollingFile</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;RollingFileInfo&quot;</span> <span class=\"attr\">fileName</span>=<span class=\"string\">&quot;$&#123;logging.path&#125;/info.log&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">                     <span class=\"attr\">filePattern</span>=<span class=\"string\">&quot;logs/$$&#123;date:yyyy-MM&#125;/info-%d&#123;yyyy-MM-dd&#125;-%i.log.gz&quot;</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">Filters</span>&gt;</span></span><br><span class=\"line\">                <span class=\"comment\">&lt;!--只接受INFO级别的日志，其余的全部拒绝处理--&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">ThresholdFilter</span> <span class=\"attr\">level</span>=<span class=\"string\">&quot;INFO&quot;</span>/&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">ThresholdFilter</span> <span class=\"attr\">level</span>=<span class=\"string\">&quot;WARN&quot;</span> <span class=\"attr\">onMatch</span>=<span class=\"string\">&quot;DENY&quot;</span> <span class=\"attr\">onMismatch</span>=<span class=\"string\">&quot;NEUTRAL&quot;</span>/&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">Filters</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">PatternLayout</span></span></span><br><span class=\"line\"><span class=\"tag\">                    <span class=\"attr\">pattern</span>=<span class=\"string\">&quot;[%d&#123;yyyy-MM-dd HH:mm:ss&#125;] %-5level %class&#123;36&#125; %L %M - %msg%xEx%n&quot;</span>/&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">Policies</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">SizeBasedTriggeringPolicy</span> <span class=\"attr\">size</span>=<span class=\"string\">&quot;500 MB&quot;</span>/&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">TimeBasedTriggeringPolicy</span>/&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">Policies</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">RollingFile</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">&lt;!--处理WARN级别的日志，并把该日志放到logs/warn.log文件中--&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">RollingFile</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;RollingFileWarn&quot;</span> <span class=\"attr\">fileName</span>=<span class=\"string\">&quot;$&#123;logging.path&#125;/warn.log&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">                     <span class=\"attr\">filePattern</span>=<span class=\"string\">&quot;logs/$$&#123;date:yyyy-MM&#125;/warn-%d&#123;yyyy-MM-dd&#125;-%i.log.gz&quot;</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">Filters</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">ThresholdFilter</span> <span class=\"attr\">level</span>=<span class=\"string\">&quot;WARN&quot;</span>/&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">ThresholdFilter</span> <span class=\"attr\">level</span>=<span class=\"string\">&quot;ERROR&quot;</span> <span class=\"attr\">onMatch</span>=<span class=\"string\">&quot;DENY&quot;</span> <span class=\"attr\">onMismatch</span>=<span class=\"string\">&quot;NEUTRAL&quot;</span>/&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">Filters</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">PatternLayout</span></span></span><br><span class=\"line\"><span class=\"tag\">                    <span class=\"attr\">pattern</span>=<span class=\"string\">&quot;[%d&#123;yyyy-MM-dd HH:mm:ss&#125;] %-5level %class&#123;36&#125; %L %M - %msg%xEx%n&quot;</span>/&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">Policies</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">SizeBasedTriggeringPolicy</span> <span class=\"attr\">size</span>=<span class=\"string\">&quot;500 MB&quot;</span>/&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">TimeBasedTriggeringPolicy</span>/&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">Policies</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">RollingFile</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">&lt;!--处理error级别的日志，并把该日志放到logs/error.log文件中--&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">RollingFile</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;RollingFileError&quot;</span> <span class=\"attr\">fileName</span>=<span class=\"string\">&quot;$&#123;logging.path&#125;/error.log&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">                     <span class=\"attr\">filePattern</span>=<span class=\"string\">&quot;logs/$$&#123;date:yyyy-MM&#125;/error-%d&#123;yyyy-MM-dd&#125;-%i.log.gz&quot;</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">ThresholdFilter</span> <span class=\"attr\">level</span>=<span class=\"string\">&quot;ERROR&quot;</span>/&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">PatternLayout</span></span></span><br><span class=\"line\"><span class=\"tag\">                    <span class=\"attr\">pattern</span>=<span class=\"string\">&quot;[%d&#123;yyyy-MM-dd HH:mm:ss&#125;] %-5level %class&#123;36&#125; %L %M - %msg%xEx%n&quot;</span>/&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">Policies</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">SizeBasedTriggeringPolicy</span> <span class=\"attr\">size</span>=<span class=\"string\">&quot;500 MB&quot;</span>/&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">TimeBasedTriggeringPolicy</span>/&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">Policies</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">RollingFile</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">appenders</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">loggers</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">root</span> <span class=\"attr\">level</span>=<span class=\"string\">&quot;DEBUG&quot;</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">appender-ref</span> <span class=\"attr\">ref</span>=<span class=\"string\">&quot;Console&quot;</span>/&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">appender-ref</span> <span class=\"attr\">ref</span>=<span class=\"string\">&quot;RollingFileInfo&quot;</span>/&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">appender-ref</span> <span class=\"attr\">ref</span>=<span class=\"string\">&quot;RollingFileWarn&quot;</span>/&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">appender-ref</span> <span class=\"attr\">ref</span>=<span class=\"string\">&quot;RollingFileError&quot;</span>/&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">appender-ref</span> <span class=\"attr\">ref</span>=<span class=\"string\">&quot;RollingFileDebug&quot;</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">root</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">&lt;!--log4j2 自带过滤日志--&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">Logger</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;org.apache.catalina.startup.DigesterFactory&quot;</span> <span class=\"attr\">level</span>=<span class=\"string\">&quot;error&quot;</span> /&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">Logger</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;org.apache.catalina.util.LifecycleBase&quot;</span> <span class=\"attr\">level</span>=<span class=\"string\">&quot;error&quot;</span> /&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">Logger</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;org.apache.coyote.http11.Http11NioProtocol&quot;</span> <span class=\"attr\">level</span>=<span class=\"string\">&quot;warn&quot;</span> /&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">logger</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;org.apache.sshd.common.util.SecurityUtils&quot;</span> <span class=\"attr\">level</span>=<span class=\"string\">&quot;warn&quot;</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">Logger</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;org.apache.tomcat.util.net.NioSelectorPool&quot;</span> <span class=\"attr\">level</span>=<span class=\"string\">&quot;warn&quot;</span> /&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">Logger</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;org.crsh.plugin&quot;</span> <span class=\"attr\">level</span>=<span class=\"string\">&quot;warn&quot;</span> /&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">logger</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;org.crsh.ssh&quot;</span> <span class=\"attr\">level</span>=<span class=\"string\">&quot;warn&quot;</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">Logger</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;org.eclipse.jetty.util.component.AbstractLifeCycle&quot;</span> <span class=\"attr\">level</span>=<span class=\"string\">&quot;error&quot;</span> /&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">Logger</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;org.hibernate.validator.internal.util.Version&quot;</span> <span class=\"attr\">level</span>=<span class=\"string\">&quot;warn&quot;</span> /&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">logger</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;org.thymeleaf&quot;</span> <span class=\"attr\">level</span>=<span class=\"string\">&quot;warn&quot;</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">Logger</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;org.springframework&quot;</span> <span class=\"attr\">level</span>=<span class=\"string\">&quot;warn&quot;</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">loggers</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"在-resources-下配置一个-log4j2-glmapper-xml\"><a href=\"#在-resources-下配置一个-log4j2-glmapper-xml\" class=\"headerlink\" title=\"在 resources 下配置一个 log4j2-glmapper.xml\"></a>在 resources 下配置一个 log4j2-glmapper.xml</h3><p>将上面的配置文件重命名为 log4j2-glmapper.xml ，因为这个命名规则是 SpringBoot 无法默认识别的，所以在日志配置文件加载时和场景一是一样的。如果希望这份配置文件能够被识别，可以使用 logging.config 来指定。</p>\n<figure class=\"highlight properties\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">logging.config</span>=<span class=\"string\">classpath:log4j2-glmapper.xml</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h2><p>本篇对 SpringBoot 中的日志进行了系统的介绍和分析，文章主要是了解 SpringBoot 中对于日志系统的处理，所以不会太关注日志系统自身的一些处理逻辑，有兴趣的读者可以自行研究或者联系作者一起沟通。</p>\n","text":"Spring Boot 使用 Commons Logging 进行所有内部日志记录，但保留底层日志实现。为 Java Util Logging、Log4J2 和...","permalink":"/post/springboot/springboot-series-log","photos":[],"count_time":{"symbolsCount":"30k","symbolsTime":"27 mins."},"categories":[{"name":"SpringBoot","slug":"SpringBoot","count":17,"path":"api/categories/SpringBoot.json"}],"tags":[{"name":"log","slug":"log","count":5,"path":"api/tags/log.json"},{"name":"SpringBoot","slug":"SpringBoot","count":17,"path":"api/tags/SpringBoot.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%97%A5%E5%BF%97%E6%A0%BC%E5%BC%8F\"><span class=\"toc-text\">日志格式</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Console-%E8%BE%93%E5%87%BA\"><span class=\"toc-text\">Console 输出</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%BD%A9%E8%89%B2%E7%BC%96%E7%A0%81%E8%BE%93%E5%87%BA\"><span class=\"toc-text\">彩色编码输出</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%96%87%E4%BB%B6%E8%BE%93%E5%87%BA\"><span class=\"toc-text\">文件输出</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%97%A5%E5%BF%97%E7%BA%A7%E5%88%AB\"><span class=\"toc-text\">日志级别</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%97%A5%E5%BF%97-Groups\"><span class=\"toc-text\">日志 Groups</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E8%87%AA%E5%AE%9A%E4%B9%89%E6%97%A5%E5%BF%97%E9%85%8D%E7%BD%AE\"><span class=\"toc-text\">自定义日志配置</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#springProfile-%E9%85%8D%E7%BD%AE\"><span class=\"toc-text\">springProfile 配置</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E7%8E%AF%E5%A2%83%E5%B1%9E%E6%80%A7\"><span class=\"toc-text\">环境属性</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%97%A5%E5%BF%97%E5%88%9D%E5%A7%8B%E5%8C%96%E5%85%A5%E5%8F%A3\"><span class=\"toc-text\">日志初始化入口</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#ApplicationStartingEvent-%E9%98%B6%E6%AE%B5%E7%9A%84%E5%A4%84%E7%90%86\"><span class=\"toc-text\">ApplicationStartingEvent 阶段的处理</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#ApplicationEnvironmentPreparedEvent-%E9%98%B6%E6%AE%B5%E7%9A%84%E5%A4%84%E7%90%86\"><span class=\"toc-text\">ApplicationEnvironmentPreparedEvent 阶段的处理</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#ApplicationPreparedEvent-%E9%98%B6%E6%AE%B5%E7%9A%84%E5%A4%84%E7%90%86\"><span class=\"toc-text\">ApplicationPreparedEvent 阶段的处理</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#ContextClosedEvent-%E5%92%8C-ApplicationFailedEvent\"><span class=\"toc-text\">ContextClosedEvent 和 ApplicationFailedEvent</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#LoggingSystem-%E5%88%86%E6%9E%90\"><span class=\"toc-text\">LoggingSystem 分析</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#AbstractLoggingSystem-%E5%A4%84%E7%90%86%E9%80%BB%E8%BE%91\"><span class=\"toc-text\">AbstractLoggingSystem 处理逻辑</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Log4J2LoggingSystem-%E5%A4%84%E7%90%86%E9%80%BB%E8%BE%91\"><span class=\"toc-text\">Log4J2LoggingSystem 处理逻辑</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#beforeInitialize-%E5%9C%A8-Log4J2LoggingSystem-%E4%B8%AD%E7%9A%84%E5%AE%9E%E7%8E%B0\"><span class=\"toc-text\">beforeInitialize 在 Log4J2LoggingSystem 中的实现</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#initialize-%E5%9C%A8-Log4J2LoggingSystem-%E4%B8%AD%E7%9A%84%E5%AE%9E%E7%8E%B0\"><span class=\"toc-text\">initialize 在 Log4J2LoggingSystem 中的实现</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%97%A5%E5%BF%97%E7%B3%BB%E7%BB%9F%E7%9A%84%E6%B8%85%E7%90%86%E9%80%BB%E8%BE%91\"><span class=\"toc-text\">日志系统的清理逻辑</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%B8%80%E4%BA%9B%E5%9C%BA%E6%99%AF%E5%88%86%E6%9E%90\"><span class=\"toc-text\">一些场景分析</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%B2%A1%E6%9C%89%E4%BB%BB%E4%BD%95%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6\"><span class=\"toc-text\">没有任何配置文件</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%9C%A8-resources-%E7%9B%AE%E5%BD%95%E4%B8%8B%E9%85%8D%E7%BD%AE-log4j2-xml\"><span class=\"toc-text\">在 resources 目录下配置 log4j2.xml</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%9C%A8-resources-%E4%B8%8B%E9%85%8D%E7%BD%AE%E4%B8%80%E4%B8%AA-log4j2-glmapper-xml\"><span class=\"toc-text\">在 resources 下配置一个 log4j2-glmapper.xml</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%B0%8F%E7%BB%93\"><span class=\"toc-text\">小结</span></a></li></ol>","author":{"name":"glmapper","slug":"blog-author","avatar":"https://glmapper-blog.oss-cn-hangzhou.aliyuncs.com/common/favicon.ico","link":"/","description":"开放，开源，分享，共享","socials":{"github":"https://github.com/glmapper","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/2412872703","zhihu":"","csdn":"","juejin":"https://juejin.cn/user/3227821827961806","customs":{"sofastack":{"icon":"https://glmapper-blog.oss-cn-hangzhou.aliyuncs.com/common/sofastack.svg","link":"https://www.sofastack.tech/"}}}},"mapped":true,"hidden":false,"prev_post":{"title":"SpringBoot 源码系列-Bean 的生命周期与扩展","uid":"f4c2cd21dea87d9615be25c2ed29dd31","slug":"springboot/springboot-series-bean-life","date":"2019-12-14T09:20:43.000Z","updated":"2024-07-05T04:09:05.828Z","comments":true,"path":"api/articles/springboot/springboot-series-bean-life.json","keywords":null,"cover":[],"text":"继续承接上一篇 SpringBoot 系列-启动过程分析，本篇围绕一个 bean 的生命周期，对 bean 进行一些修改和扩展。 本篇将涉及到以下主要内容： 阅...","permalink":"/post/springboot/springboot-series-bean-life","photos":[],"count_time":{"symbolsCount":"25k","symbolsTime":"22 mins."},"categories":[{"name":"SpringBoot","slug":"SpringBoot","count":17,"path":"api/categories/SpringBoot.json"}],"tags":[{"name":"bean 生命周期","slug":"bean-生命周期","count":2,"path":"api/tags/bean-生命周期.json"},{"name":"SpringBoot","slug":"SpringBoot","count":17,"path":"api/tags/SpringBoot.json"},{"name":"bean 扩展机制","slug":"bean-扩展机制","count":1,"path":"api/tags/bean-扩展机制.json"}],"author":{"name":"glmapper","slug":"blog-author","avatar":"https://glmapper-blog.oss-cn-hangzhou.aliyuncs.com/common/favicon.ico","link":"/","description":"开放，开源，分享，共享","socials":{"github":"https://github.com/glmapper","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/2412872703","zhihu":"","csdn":"","juejin":"https://juejin.cn/user/3227821827961806","customs":{"sofastack":{"icon":"https://glmapper-blog.oss-cn-hangzhou.aliyuncs.com/common/sofastack.svg","link":"https://www.sofastack.tech/"}}}}},"next_post":{"title":"SpringBoot 实践系列-资源访问","uid":"5f271418dba5b05b4849df36b7771e2b","slug":"springboot/springboot-series-access-resource","date":"2019-12-09T09:38:26.000Z","updated":"2024-07-05T04:09:05.827Z","comments":true,"path":"api/articles/springboot/springboot-series-access-resource.json","keywords":null,"cover":null,"text":"简介当我们创建一个 SpringBoot web 应用时，有时候需要从 classpath 去加载一些文件，这里记录下在 war 和 jar 两种不同文件格式下...","permalink":"/post/springboot/springboot-series-access-resource","photos":[],"count_time":{"symbolsCount":"3.8k","symbolsTime":"3 mins."},"categories":[{"name":"SpringBoot","slug":"SpringBoot","count":17,"path":"api/categories/SpringBoot.json"}],"tags":[{"name":"SpringBoot","slug":"SpringBoot","count":17,"path":"api/tags/SpringBoot.json"},{"name":"ResourceLoader","slug":"ResourceLoader","count":1,"path":"api/tags/ResourceLoader.json"}],"author":{"name":"glmapper","slug":"blog-author","avatar":"https://glmapper-blog.oss-cn-hangzhou.aliyuncs.com/common/favicon.ico","link":"/","description":"开放，开源，分享，共享","socials":{"github":"https://github.com/glmapper","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/2412872703","zhihu":"","csdn":"","juejin":"https://juejin.cn/user/3227821827961806","customs":{"sofastack":{"icon":"https://glmapper-blog.oss-cn-hangzhou.aliyuncs.com/common/sofastack.svg","link":"https://www.sofastack.tech/"}}}}}}