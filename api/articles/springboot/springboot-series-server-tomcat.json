{"title":"SpringBoot 源码系列-内嵌 Tomcat 的实现原理解析","uid":"beab21777c0d79f5d1291c48820f6305","slug":"springboot/springboot-series-server-tomcat","date":"2019-10-06T09:48:43.000Z","updated":"2024-07-05T04:09:05.831Z","comments":true,"path":"api/articles/springboot/springboot-series-server-tomcat.json","keywords":null,"cover":"https://glmapper-blog.oss-cn-hangzhou.aliyuncs.com/tomcat-boot-one.jpg","content":"<p>对于一个 SpringBoot web 工程来说，一个主要的依赖标志就是有 spring-boot-starter-web 这个 starter ，spring-boot-starter-web 模块在 spring boot 中其实并没有代码存在，只是在 pom.xml 中携带了一些依赖，包括 web、webmvc、tomcat 等：</p>\n<span id=\"more\"></span>\n\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    \t<span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    \t<span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    \t<span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    \t<span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-json<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    \t<span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    \t<span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-tomcat<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    \t<span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.hibernate.validator<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    \t<span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>hibernate-validator<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    \t<span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    \t<span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-web<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    \t<span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    \t<span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-webmvc<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>Spring Boot 默认的 web 服务容器是 tomcat ，如果想使用 Jetty 等来替换 Tomcat ，可以自行参考官方文档来解决。</p></blockquote>\n<p>web、webmvc、tomcat 等提供了 web 应用的运行环境，那 spring-boot-starter 则是让这些运行环境工作的开关（因为 spring-boot-starter 中会间接引入 spring-boot-autoconfigure ）。</p>\n<h2 id=\"WebServer-自动配置\"><a href=\"#WebServer-自动配置\" class=\"headerlink\" title=\"WebServer 自动配置\"></a>WebServer 自动配置</h2><p>在 spring-boot-autoconfigure 模块中，有处理关于 WebServer 的自动配置类 ServletWebServerFactoryAutoConfiguration 。</p>\n<h3 id=\"ServletWebServerFactoryAutoConfiguration\"><a href=\"#ServletWebServerFactoryAutoConfiguration\" class=\"headerlink\" title=\"ServletWebServerFactoryAutoConfiguration\"></a>ServletWebServerFactoryAutoConfiguration</h3><p>代码片段如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"meta\">@AutoConfigureOrder(Ordered.HIGHEST_PRECEDENCE)</span></span><br><span class=\"line\"><span class=\"meta\">@ConditionalOnClass(ServletRequest.class)</span></span><br><span class=\"line\"><span class=\"meta\">@ConditionalOnWebApplication(type = Type.SERVLET)</span></span><br><span class=\"line\"><span class=\"meta\">@EnableConfigurationProperties(ServerProperties.class)</span></span><br><span class=\"line\"><span class=\"meta\">@Import(&#123; ServletWebServerFactoryAutoConfiguration.BeanPostProcessorsRegistrar.class,</span></span><br><span class=\"line\"><span class=\"meta\">\t\tServletWebServerFactoryConfiguration.EmbeddedTomcat.class,</span></span><br><span class=\"line\"><span class=\"meta\">\t\tServletWebServerFactoryConfiguration.EmbeddedJetty.class,</span></span><br><span class=\"line\"><span class=\"meta\">\t\tServletWebServerFactoryConfiguration.EmbeddedUndertow.class &#125;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ServletWebServerFactoryAutoConfiguration</span></span><br></pre></td></tr></table></figure>\n<br />\n\n<p>两个 Condition 表示当前运行环境是基于 servlet 标准规范的 web 服务：</p>\n<ul>\n<li>ConditionalOnClass(ServletRequest.class) ： 表示当前必须有 servlet-api 依赖存在</li>\n<li>ConditionalOnWebApplication(type &#x3D; Type.SERVLET) ：仅基于servlet的Web应用程序</li>\n</ul>\n<p>@EnableConfigurationProperties(ServerProperties.class)：ServerProperties 配置中包括了常见的 server.port 等配置属性。</p>\n<p>通过 <a href=\"#\">@Import</a> 导入嵌入式容器相关的自动配置类，有 EmbeddedTomcat、EmbeddedJetty 和EmbeddedUndertow。</p>\n<p><strong>综合来看，ServletWebServerFactoryAutoConfiguration 自动配置类中主要做了以下几件事情：</strong></p>\n<ul>\n<li>导入了内部类 BeanPostProcessorsRegistrar，它实现了 ImportBeanDefinitionRegistrar，可以实现ImportBeanDefinitionRegistrar 来注册额外的 BeanDefinition。</li>\n<li>导入了 ServletWebServerFactoryConfiguration.EmbeddedTomcat 等嵌入容器先关配置（我们主要关注tomcat 相关的配置）。</li>\n<li>注册了ServletWebServerFactoryCustomizer、TomcatServletWebServerFactoryCustomizer 两个WebServerFactoryCustomizer 类型的 bean。</li>\n</ul>\n<p>下面就针对这几个点，做下详细的分析。</p>\n<h3 id=\"BeanPostProcessorsRegistrar\"><a href=\"#BeanPostProcessorsRegistrar\" class=\"headerlink\" title=\"BeanPostProcessorsRegistrar\"></a>BeanPostProcessorsRegistrar</h3><p>BeanPostProcessorsRegistrar 这个内部类的代码如下(省略了部分代码)：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">class</span> <span class=\"title class_\">BeanPostProcessorsRegistrar</span></span><br><span class=\"line\">    <span class=\"keyword\">implements</span> <span class=\"title class_\">ImportBeanDefinitionRegistrar</span>, BeanFactoryAware &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 省略代码</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">registerBeanDefinitions</span><span class=\"params\">(AnnotationMetadata importingClassMetadata,</span></span><br><span class=\"line\"><span class=\"params\">                                        BeanDefinitionRegistry registry)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"built_in\">this</span>.beanFactory == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 注册 WebServerFactoryCustomizerBeanPostProcessor</span></span><br><span class=\"line\">        registerSyntheticBeanIfMissing(registry,</span><br><span class=\"line\">                                       <span class=\"string\">&quot;webServerFactoryCustomizerBeanPostProcessor&quot;</span>,</span><br><span class=\"line\">                                       WebServerFactoryCustomizerBeanPostProcessor.class);</span><br><span class=\"line\">        <span class=\"comment\">// 注册 errorPageRegistrarBeanPostProcessor</span></span><br><span class=\"line\">        registerSyntheticBeanIfMissing(registry,</span><br><span class=\"line\">                                       <span class=\"string\">&quot;errorPageRegistrarBeanPostProcessor&quot;</span>,</span><br><span class=\"line\">                                       ErrorPageRegistrarBeanPostProcessor.class);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 省略代码</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>上面这段代码中，注册了两个 bean，一个 WebServerFactoryCustomizerBeanPostProcessor，一个 errorPageRegistrarBeanPostProcessor；这两个都实现类 BeanPostProcessor 接口，属于 bean 的后置处理器，作用是在 bean 初始化前后加一些自己的逻辑处理。</p>\n<ul>\n<li>WebServerFactoryCustomizerBeanPostProcessor：作用是在 WebServerFactory 初始化时调用上面自动配置类注入的那些 WebServerFactoryCustomizer ，然后调用 WebServerFactoryCustomizer 中的 customize 方法来 处理 WebServerFactory。</li>\n<li>errorPageRegistrarBeanPostProcessor：和上面的作用差不多，不过这个是处理 ErrorPageRegistrar 的。</li>\n</ul>\n<p>下面简单看下 WebServerFactoryCustomizerBeanPostProcessor 中的代码：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">WebServerFactoryCustomizerBeanPostProcessor</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">implements</span> <span class=\"title class_\">BeanPostProcessor</span>, BeanFactoryAware &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 省略部分代码</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// 在 postProcessBeforeInitialization 方法中，如果当前 bean 是 WebServerFactory，则进行</span></span><br><span class=\"line\">    <span class=\"comment\">// 一些后置处理</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> Object <span class=\"title function_\">postProcessBeforeInitialization</span><span class=\"params\">(Object bean, String beanName)</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">throws</span> BeansException &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (bean <span class=\"keyword\">instanceof</span> WebServerFactory) &#123;</span><br><span class=\"line\">\t\t\tpostProcessBeforeInitialization((WebServerFactory) bean);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> bean;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">    <span class=\"comment\">// 这段代码就是拿到所有的 Customizers ，然后遍历调用这些 Customizers 的 customize 方法</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title function_\">postProcessBeforeInitialization</span><span class=\"params\">(WebServerFactory webServerFactory)</span> &#123;</span><br><span class=\"line\">\t\tLambdaSafe</span><br><span class=\"line\">\t\t\t\t.callbacks(WebServerFactoryCustomizer.class, getCustomizers(),</span><br><span class=\"line\">\t\t\t\t\t\twebServerFactory)</span><br><span class=\"line\">\t\t\t\t.withLogger(WebServerFactoryCustomizerBeanPostProcessor.class)</span><br><span class=\"line\">\t\t\t\t.invoke((customizer) -&gt; customizer.customize(webServerFactory));</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// 省略部分代码</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"自动配置类中注册的两个-Customizer-Bean\"><a href=\"#自动配置类中注册的两个-Customizer-Bean\" class=\"headerlink\" title=\"自动配置类中注册的两个 Customizer Bean\"></a>自动配置类中注册的两个 Customizer Bean</h2><p>这两个 Customizer 实际上就是去处理一些配置值，然后绑定到 各自的工厂类的。</p>\n<h3 id=\"WebServerFactoryCustomizer\"><a href=\"#WebServerFactoryCustomizer\" class=\"headerlink\" title=\"WebServerFactoryCustomizer\"></a>WebServerFactoryCustomizer</h3><p>将 serverProperties 配置值绑定给 ConfigurableServletWebServerFactory 对象实例上。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">customize</span><span class=\"params\">(ConfigurableServletWebServerFactory factory)</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">PropertyMapper</span> <span class=\"variable\">map</span> <span class=\"operator\">=</span> PropertyMapper.get().alwaysApplyingWhenNonNull();</span><br><span class=\"line\">    <span class=\"comment\">// 端口</span></span><br><span class=\"line\">    map.from(<span class=\"built_in\">this</span>.serverProperties::getPort).to(factory::setPort);</span><br><span class=\"line\">    <span class=\"comment\">// address</span></span><br><span class=\"line\">    map.from(<span class=\"built_in\">this</span>.serverProperties::getAddress).to(factory::setAddress);</span><br><span class=\"line\">    <span class=\"comment\">// contextPath</span></span><br><span class=\"line\">    map.from(<span class=\"built_in\">this</span>.serverProperties.getServlet()::getContextPath)</span><br><span class=\"line\">        .to(factory::setContextPath);</span><br><span class=\"line\">    <span class=\"comment\">// displayName</span></span><br><span class=\"line\">    map.from(<span class=\"built_in\">this</span>.serverProperties.getServlet()::getApplicationDisplayName)</span><br><span class=\"line\">        .to(factory::setDisplayName);</span><br><span class=\"line\">    <span class=\"comment\">// session 配置</span></span><br><span class=\"line\">    map.from(<span class=\"built_in\">this</span>.serverProperties.getServlet()::getSession).to(factory::setSession);</span><br><span class=\"line\">    <span class=\"comment\">// ssl</span></span><br><span class=\"line\">    map.from(<span class=\"built_in\">this</span>.serverProperties::getSsl).to(factory::setSsl);</span><br><span class=\"line\">    <span class=\"comment\">// jsp</span></span><br><span class=\"line\">    map.from(<span class=\"built_in\">this</span>.serverProperties.getServlet()::getJsp).to(factory::setJsp);</span><br><span class=\"line\">    <span class=\"comment\">// 压缩配置策略实现</span></span><br><span class=\"line\">    map.from(<span class=\"built_in\">this</span>.serverProperties::getCompression).to(factory::setCompression);</span><br><span class=\"line\">    <span class=\"comment\">// http2 </span></span><br><span class=\"line\">    map.from(<span class=\"built_in\">this</span>.serverProperties::getHttp2).to(factory::setHttp2);</span><br><span class=\"line\">    <span class=\"comment\">// serverHeader</span></span><br><span class=\"line\">    map.from(<span class=\"built_in\">this</span>.serverProperties::getServerHeader).to(factory::setServerHeader);</span><br><span class=\"line\">    <span class=\"comment\">// contextParameters</span></span><br><span class=\"line\">    map.from(<span class=\"built_in\">this</span>.serverProperties.getServlet()::getContextParameters)</span><br><span class=\"line\">        .to(factory::setInitParameters);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"TomcatServletWebServerFactoryCustomizer\"><a href=\"#TomcatServletWebServerFactoryCustomizer\" class=\"headerlink\" title=\"TomcatServletWebServerFactoryCustomizer\"></a>TomcatServletWebServerFactoryCustomizer</h3><p>相比于上面那个，这个 customizer 主要处理 Tomcat 相关的配置值</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">customize</span><span class=\"params\">(TomcatServletWebServerFactory factory)</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 拿到 tomcat 相关的配置</span></span><br><span class=\"line\">    ServerProperties.<span class=\"type\">Tomcat</span> <span class=\"variable\">tomcatProperties</span> <span class=\"operator\">=</span> <span class=\"built_in\">this</span>.serverProperties.getTomcat();</span><br><span class=\"line\">    <span class=\"comment\">// server.tomcat.additional-tld-skip-patterns</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!ObjectUtils.isEmpty(tomcatProperties.getAdditionalTldSkipPatterns())) &#123;</span><br><span class=\"line\">        factory.getTldSkipPatterns()</span><br><span class=\"line\">            .addAll(tomcatProperties.getAdditionalTldSkipPatterns());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// server.redirectContextRoot</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (tomcatProperties.getRedirectContextRoot() != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">        customizeRedirectContextRoot(factory,</span><br><span class=\"line\">                                     tomcatProperties.getRedirectContextRoot());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// server.useRelativeRedirects</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (tomcatProperties.getUseRelativeRedirects() != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">        customizeUseRelativeRedirects(factory,</span><br><span class=\"line\">                                      tomcatProperties.getUseRelativeRedirects());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"WebServerFactory\"><a href=\"#WebServerFactory\" class=\"headerlink\" title=\"WebServerFactory\"></a>WebServerFactory</h2><p>用于创建 WebServer 的工厂的标记接口。</p>\n<h3 id=\"类体系结构\"><a href=\"#类体系结构\" class=\"headerlink\" title=\"类体系结构\"></a>类体系结构</h3><p><img src=\"https://glmapper-blog.oss-cn-hangzhou.aliyuncs.com/tomcat-boot-one.jpg\"></p>\n<p>上图为 WebServerFactory -&gt; TomcatServletWebServerFactory 的整个类结构关系。</p>\n<h3 id=\"TomcatServletWebServerFactory\"><a href=\"#TomcatServletWebServerFactory\" class=\"headerlink\" title=\"TomcatServletWebServerFactory\"></a>TomcatServletWebServerFactory</h3><p>TomcatServletWebServerFactory 是用于获取 Tomcat 作为 WebServer 的工厂类实现，其中最核心的方法就是 getWebServer，获取一个 WebServer 对象实例。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> WebServer <span class=\"title function_\">getWebServer</span><span class=\"params\">(ServletContextInitializer... initializers)</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 创建一个 Tomcat 实例</span></span><br><span class=\"line\">    <span class=\"type\">Tomcat</span> <span class=\"variable\">tomcat</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Tomcat</span>();</span><br><span class=\"line\">    <span class=\"comment\">// 创建一个 Tomcat 实例工作空间目录</span></span><br><span class=\"line\">    <span class=\"type\">File</span> <span class=\"variable\">baseDir</span> <span class=\"operator\">=</span> (<span class=\"built_in\">this</span>.baseDirectory != <span class=\"literal\">null</span>) ? <span class=\"built_in\">this</span>.baseDirectory</span><br><span class=\"line\">        : createTempDir(<span class=\"string\">&quot;tomcat&quot;</span>);</span><br><span class=\"line\">    tomcat.setBaseDir(baseDir.getAbsolutePath());</span><br><span class=\"line\">    <span class=\"comment\">// 创建连接对象</span></span><br><span class=\"line\">    <span class=\"type\">Connector</span> <span class=\"variable\">connector</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Connector</span>(<span class=\"built_in\">this</span>.protocol);</span><br><span class=\"line\">    tomcat.getService().addConnector(connector);</span><br><span class=\"line\">    <span class=\"comment\">// 1</span></span><br><span class=\"line\">    customizeConnector(connector);</span><br><span class=\"line\">    tomcat.setConnector(connector);</span><br><span class=\"line\">    tomcat.getHost().setAutoDeploy(<span class=\"literal\">false</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 配置 Engine，没有什么实质性的操作，可忽略</span></span><br><span class=\"line\">    configureEngine(tomcat.getEngine());</span><br><span class=\"line\">    <span class=\"comment\">// 一些附加链接，默认是 0 个</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (Connector additionalConnector : <span class=\"built_in\">this</span>.additionalTomcatConnectors) &#123;</span><br><span class=\"line\">        tomcat.getService().addConnector(additionalConnector);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 2</span></span><br><span class=\"line\">    prepareContext(tomcat.getHost(), initializers);</span><br><span class=\"line\">    <span class=\"comment\">// 返回 webServer</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> getTomcatWebServer(tomcat);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<ul>\n<li>1、customizeConnector ： 给 Connector 设置 port、protocolHandler、uriEncoding 等。Connector 构造的逻辑主要是在NIO和APR选择中选择一个协议，然后反射创建实例并强转为 ProtocolHandler</li>\n<li>2、prepareContext 这里并不是说准备当前 Tomcat 运行环境的上下文信息，而是准备一个 StandardContext ，也就是准备一个 web app。</li>\n</ul>\n<h3 id=\"准备-Web-App-Context-容器\"><a href=\"#准备-Web-App-Context-容器\" class=\"headerlink\" title=\"准备 Web App Context 容器\"></a>准备 Web App Context 容器</h3><p>对于 Tomcat 来说，每个 context 就是映射到 一个 web app 的，所以 prepareContext 做的事情就是将 web 应用映射到一个 TomcatEmbeddedContext ，然后加入到 Host 中。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title function_\">prepareContext</span><span class=\"params\">(Host host, ServletContextInitializer[] initializers)</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">File</span> <span class=\"variable\">documentRoot</span> <span class=\"operator\">=</span> getValidDocumentRoot();</span><br><span class=\"line\">    <span class=\"comment\">// 创建一个 TomcatEmbeddedContext 对象</span></span><br><span class=\"line\">    <span class=\"type\">TomcatEmbeddedContext</span> <span class=\"variable\">context</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">TomcatEmbeddedContext</span>();</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (documentRoot != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">        context.setResources(<span class=\"keyword\">new</span> <span class=\"title class_\">LoaderHidingResourceRoot</span>(context));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 设置描述此容器的名称字符串。在属于特定父项的子容器集内，容器名称必须唯一。</span></span><br><span class=\"line\">    context.setName(getContextPath());</span><br><span class=\"line\">    <span class=\"comment\">// 设置此Web应用程序的显示名称。</span></span><br><span class=\"line\">    context.setDisplayName(getDisplayName());</span><br><span class=\"line\">    <span class=\"comment\">// 设置 webContextPath  默认是   /</span></span><br><span class=\"line\">    context.setPath(getContextPath());</span><br><span class=\"line\">    <span class=\"type\">File</span> <span class=\"variable\">docBase</span> <span class=\"operator\">=</span> (documentRoot != <span class=\"literal\">null</span>) ? documentRoot</span><br><span class=\"line\">        : createTempDir(<span class=\"string\">&quot;tomcat-docbase&quot;</span>);</span><br><span class=\"line\">    context.setDocBase(docBase.getAbsolutePath());</span><br><span class=\"line\">    <span class=\"comment\">// 注册一个FixContextListener监听，这个监听用于设置context的配置状态以及是否加入登录验证的逻辑</span></span><br><span class=\"line\">    context.addLifecycleListener(<span class=\"keyword\">new</span> <span class=\"title class_\">FixContextListener</span>());</span><br><span class=\"line\">    <span class=\"comment\">// 设置 父 ClassLoader</span></span><br><span class=\"line\">    context.setParentClassLoader(</span><br><span class=\"line\">        (<span class=\"built_in\">this</span>.resourceLoader != <span class=\"literal\">null</span>) ? <span class=\"built_in\">this</span>.resourceLoader.getClassLoader()</span><br><span class=\"line\">        : ClassUtils.getDefaultClassLoader());</span><br><span class=\"line\">    <span class=\"comment\">// 覆盖Tomcat的默认语言环境映射以与其他服务器对齐。</span></span><br><span class=\"line\">    resetDefaultLocaleMapping(context);</span><br><span class=\"line\">    <span class=\"comment\">// 添加区域设置编码映射（请参阅Servlet规范2.4的5.4节）</span></span><br><span class=\"line\">    addLocaleMappings(context);</span><br><span class=\"line\">    <span class=\"comment\">// 设置是否使用相对地址重定向</span></span><br><span class=\"line\">    context.setUseRelativeRedirects(<span class=\"literal\">false</span>);</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        context.setCreateUploadTargets(<span class=\"literal\">true</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">catch</span> (NoSuchMethodError ex) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// Tomcat is &lt; 8.5.39. Continue.</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    configureTldSkipPatterns(context);</span><br><span class=\"line\">    <span class=\"comment\">// 设置 WebappLoader ，并且将 父 classLoader 作为构建参数</span></span><br><span class=\"line\">    <span class=\"type\">WebappLoader</span> <span class=\"variable\">loader</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">WebappLoader</span>(context.getParentClassLoader());</span><br><span class=\"line\">    <span class=\"comment\">// 设置 WebappLoader 的 loaderClass 值</span></span><br><span class=\"line\">    loader.setLoaderClass(TomcatEmbeddedWebappClassLoader.class.getName());</span><br><span class=\"line\">    <span class=\"comment\">// 会将加载类向上委托</span></span><br><span class=\"line\">    loader.setDelegate(<span class=\"literal\">true</span>);</span><br><span class=\"line\">    context.setLoader(loader);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (isRegisterDefaultServlet()) &#123;</span><br><span class=\"line\">        addDefaultServlet(context);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 是否注册 jspServlet</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (shouldRegisterJspServlet()) &#123;</span><br><span class=\"line\">        addJspServlet(context);</span><br><span class=\"line\">        addJasperInitializer(context);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    context.addLifecycleListener(<span class=\"keyword\">new</span> <span class=\"title class_\">StaticResourceConfigurer</span>(context));</span><br><span class=\"line\">    ServletContextInitializer[] initializersToUse = mergeInitializers(initializers);</span><br><span class=\"line\">    <span class=\"comment\">// 在 host 中 加入一个 context 容器</span></span><br><span class=\"line\">    <span class=\"comment\">// add时给context注册了个内存泄漏跟踪的监听MemoryLeakTrackingListener,详见 addChild 方法</span></span><br><span class=\"line\">    host.addChild(context);</span><br><span class=\"line\">    <span class=\"comment\">//对context做了些设置工作，包括TomcatStarter(实例化并set给context),</span></span><br><span class=\"line\">    <span class=\"comment\">// LifecycleListener,contextValue,errorpage,Mime,session超时持久化等以及一些自定义工作</span></span><br><span class=\"line\">    configureContext(context, initializersToUse);</span><br><span class=\"line\">    <span class=\"comment\">// postProcessContext 方法是空的，留给子类重写用的</span></span><br><span class=\"line\">    postProcessContext(context);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>从上面可以看下，WebappLoader 可以通过 setLoaderClass 和 getLoaderClass 这两个方法可以更改loaderClass 的值。所以也就意味着，我们可以自己定义一个继承 webappClassLoader 的类，来更换系统自带的默认实现。</p>\n<h3 id=\"初始化-TomcatWebServer\"><a href=\"#初始化-TomcatWebServer\" class=\"headerlink\" title=\"初始化 TomcatWebServer\"></a>初始化 TomcatWebServer</h3><p>在 getWebServer 方法的最后就是构建一个 TomcatWebServer。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// org.springframework.boot.web.embedded.tomcat.TomcatServletWebServerFactory</span></span><br><span class=\"line\"><span class=\"keyword\">protected</span> TomcatWebServer <span class=\"title function_\">getTomcatWebServer</span><span class=\"params\">(Tomcat tomcat)</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// new 一个 TomcatWebServer</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">TomcatWebServer</span>(tomcat, getPort() &gt;= <span class=\"number\">0</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// org.springframework.boot.web.embedded.tomcat.TomcatWebServer</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"title function_\">TomcatWebServer</span><span class=\"params\">(Tomcat tomcat, <span class=\"type\">boolean</span> autoStart)</span> &#123;</span><br><span class=\"line\">    Assert.notNull(tomcat, <span class=\"string\">&quot;Tomcat Server must not be null&quot;</span>);</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.tomcat = tomcat;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.autoStart = autoStart;</span><br><span class=\"line\">    <span class=\"comment\">// 初始化</span></span><br><span class=\"line\">    initialize();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这里主要是 initialize 这个方法，这个方法中将会启动 tomcat 服务</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title function_\">initialize</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> WebServerException &#123;</span><br><span class=\"line\">    logger.info(<span class=\"string\">&quot;Tomcat initialized with port(s): &quot;</span> + getPortsDescription(<span class=\"literal\">false</span>));</span><br><span class=\"line\">    <span class=\"keyword\">synchronized</span> (<span class=\"built_in\">this</span>.monitor) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 对全局原子变量 containerCounter+1，由于初始值是-1，</span></span><br><span class=\"line\">    <span class=\"comment\">// 所以 addInstanceIdToEngineName 方法内后续的获取引擎并设置名字的逻辑不会执行</span></span><br><span class=\"line\">            addInstanceIdToEngineName();</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 获取 Context </span></span><br><span class=\"line\">            <span class=\"type\">Context</span> <span class=\"variable\">context</span> <span class=\"operator\">=</span> findContext();</span><br><span class=\"line\">            <span class=\"comment\">// 给 Context 对象实例生命周期监听器</span></span><br><span class=\"line\">            context.addLifecycleListener((event) -&gt; &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (context.equals(event.getSource())</span><br><span class=\"line\">                    &amp;&amp; Lifecycle.START_EVENT.equals(event.getType())) &#123;</span><br><span class=\"line\">                    <span class=\"comment\">// 将上面new的connection以service（这里是StandardService[Tomcat]）做key保存到</span></span><br><span class=\"line\">                    <span class=\"comment\">// serviceConnectors中，并将 StandardService 中的connectors 与 service 解绑(connector.setService((Service)null);)，</span></span><br><span class=\"line\">                    <span class=\"comment\">// 解绑后下面利用LifecycleBase启动容器就不会启动到Connector了</span></span><br><span class=\"line\">                    removeServiceConnectors();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">            <span class=\"comment\">// 启动服务器以触发初始化监听器</span></span><br><span class=\"line\">            <span class=\"built_in\">this</span>.tomcat.start();</span><br><span class=\"line\">            <span class=\"comment\">// 这个方法检查初始化过程中的异常，如果有直接在主线程抛出，</span></span><br><span class=\"line\">            <span class=\"comment\">// 检查方法是TomcatStarter中的 startUpException，这个值是在 Context 启动过程中记录的</span></span><br><span class=\"line\">            rethrowDeferredStartupExceptions();</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                <span class=\"comment\">// 绑定命名的上下文和classloader，</span></span><br><span class=\"line\">                ContextBindings.bindClassLoader(context, context.getNamingToken(),</span><br><span class=\"line\">                                                getClass().getClassLoader());</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">catch</span> (NamingException ex) &#123;</span><br><span class=\"line\">                <span class=\"comment\">// 设置失败不需要关心</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t<span class=\"comment\">// ：与Jetty不同，Tomcat所有的线程都是守护线程，所以创建一个非守护线程</span></span><br><span class=\"line\">            <span class=\"comment\">// （例：Thread[container-0,5,main]）来避免服务到这就shutdown了</span></span><br><span class=\"line\">            startDaemonAwaitThread();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">catch</span> (Exception ex) &#123;</span><br><span class=\"line\">            stopSilently();</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">WebServerException</span>(<span class=\"string\">&quot;Unable to start embedded Tomcat&quot;</span>, ex);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>查找 Context ，实际上就是查找一个Tomcat 中的一个 web 应用，SpringBoot 中默认启动一个 Tomcat ，并且一个 Tomcat 中只有一个 Web 应用（FATJAR 模式下，应用与 Tomcat 是 1：1 关系），所有在遍历 Host 下的 Container 时，如果 Container 类型是 Context ，就直接返回了。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> Context <span class=\"title function_\">findContext</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (Container child : <span class=\"built_in\">this</span>.tomcat.getHost().findChildren()) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (child <span class=\"keyword\">instanceof</span> Context) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> (Context) child;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">IllegalStateException</span>(<span class=\"string\">&quot;The host does not contain a Context&quot;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Tomcat-启动过程\"><a href=\"#Tomcat-启动过程\" class=\"headerlink\" title=\"Tomcat 启动过程\"></a>Tomcat 启动过程</h2><p>在 TomcatWebServer 的 initialize 方法中会执行 tomcat 的启动。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Start the server to trigger initialization listeners</span></span><br><span class=\"line\"><span class=\"built_in\">this</span>.tomcat.start();</span><br></pre></td></tr></table></figure>\n\n<p>org.apache.catalina.startup.Tomcat 的 start 方法：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">start</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> LifecycleException &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 初始化 server</span></span><br><span class=\"line\">    getServer();</span><br><span class=\"line\">    <span class=\"comment\">// 启动 server</span></span><br><span class=\"line\">    server.start();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"初始化-Server\"><a href=\"#初始化-Server\" class=\"headerlink\" title=\"初始化 Server\"></a>初始化 Server</h3><p>初始化 server 实际上就是构建一个 StandardServer 对象实例，关于 Tomcat 中的 Server 可以参考附件中的说明。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> Server <span class=\"title function_\">getServer</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 如果已经存在的话就直接返回</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (server != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> server;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">\t<span class=\"comment\">// 设置系统属性 catalina.useNaming</span></span><br><span class=\"line\">    System.setProperty(<span class=\"string\">&quot;catalina.useNaming&quot;</span>, <span class=\"string\">&quot;false&quot;</span>);</span><br><span class=\"line\">\t<span class=\"comment\">// 直接 new 一个 StandardServer</span></span><br><span class=\"line\">    server = <span class=\"keyword\">new</span> <span class=\"title class_\">StandardServer</span>();</span><br><span class=\"line\">\t<span class=\"comment\">// 初始化 baseDir （catalina.base、catalina.home、 ~/tomcat.&#123;port&#125;）</span></span><br><span class=\"line\">    initBaseDir();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Set configuration source</span></span><br><span class=\"line\">    ConfigFileLoader.setSource(<span class=\"keyword\">new</span> <span class=\"title class_\">CatalinaBaseConfigurationSource</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">File</span>(basedir), <span class=\"literal\">null</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">    server.setPort( -<span class=\"number\">1</span> );</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">Service</span> <span class=\"variable\">service</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">StandardService</span>();</span><br><span class=\"line\">    service.setName(<span class=\"string\">&quot;Tomcat&quot;</span>);</span><br><span class=\"line\">    server.addService(service);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> server;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h2><p>上面对 SpringBoot 中内嵌 Tomcat 的过程做了分析，这个过程实际上并不复杂，就是在刷新 Spring 上下文的过程中将 Tomcat 容器启动起来，并且将当前应用绑定到一个 Context ，然后添加了 Host。下图是程序的执行堆栈和执行内嵌 Tomcat 初始化和启动的时机。</p>\n<p><img src=\"https://glmapper-blog.oss-cn-hangzhou.aliyuncs.com/tomcat-boot-two.jpg\"></p>\n<p>下面总结下整个过程：</p>\n<ul>\n<li>通过自定配置注册相关的 Bean ，包括一些 Factory 和 后置处理器等</li>\n<li>上下文刷新阶段，执行创建 WebServer，这里需要用到前一个阶段所注册的 Bean <ul>\n<li>包括创建 ServletContext</li>\n<li>实例化 webServer</li>\n</ul>\n</li>\n<li>创建 Tomcat 实例、创建 Connector 连接器</li>\n<li>绑定 应用到 ServletContext，并添加相关的生命周期范畴内的监听器，然后将 Context 添加到 host 中</li>\n<li>实例化 webServer 并且启动 Tomcat 服务</li>\n</ul>\n<p>SpringBoot 的 Fatjar 方式没有提供共享 Tomcat 的实现逻辑，就是两个 FATJAT 启动可以只实例化一个 Tomcat 实例（包括 Connector 和 Host ），从前面的分析知道，每个 web 应用（一个 FATJAT 对应的应用）实例上就是映射到一个 Context ；而对于 war 方式，一个 Host 下面是可以挂载多个 Context 的。</p>\n<h1 id=\"附：Tomcat-组件说明\"><a href=\"#附：Tomcat-组件说明\" class=\"headerlink\" title=\"附：Tomcat 组件说明\"></a>附：Tomcat 组件说明</h1><table>\n<thead>\n<tr>\n<th>组件名称</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>Server</td>\n<td>表示整个Servlet 容器，因此 Tomcat 运行环境中只有唯一一个 Server 实例</td>\n</tr>\n<tr>\n<td>Service</td>\n<td>Service 表示一个或者多个 Connector 的集合，这些 Connector 共享同一个 Container 来处理其请求。在同一个 Tomcat 实例内可以包含任意多个 Service 实例，他们彼此独立。</td>\n</tr>\n<tr>\n<td>Connector</td>\n<td>Tomcat 连接器，用于监听和转化 Socket 请求，同时将读取的 Socket 请求交由 Container 处理，支持不同协议以及不同的 I&#x2F;O 方式。</td>\n</tr>\n<tr>\n<td>Container</td>\n<td>Container 表示能够执行客户端请求并返回响应的一类对象，在 Tomcat 中存在不同级别的容器：Engine、Host、Context、Wrapper</td>\n</tr>\n<tr>\n<td>Engine</td>\n<td>Engine 表示整个 Servlet 引擎。在 Tomcat 中，Engine 为最高层级的容器对象，虽然 Engine 不是直接处理请求的容器，确是获取目标容器的入口</td>\n</tr>\n<tr>\n<td>Host</td>\n<td>Host 作为一类容器，表示 Servlet 引擎（即Engine）中的虚拟机，与一个服务器的网络名有关，如域名等。客户端可以使用这个网络名连接服务器，这个名称必须要在 DNS 服务器上注册</td>\n</tr>\n<tr>\n<td>Context</td>\n<td>Context 作为一类容器，用于表示 ServletContext，在 Servlet 规范中，一个 ServletContext 即表示一个独立的 web 应用</td>\n</tr>\n<tr>\n<td>Wrapper</td>\n<td>Wrapper 作为一类容器，用于表示 Web 应用中定义的 Servlet</td>\n</tr>\n<tr>\n<td>Executor</td>\n<td>表示 Tomcat 组件间可以共享的线程池</td>\n</tr>\n</tbody></table>\n","text":"对于一个 SpringBoot web 工程来说，一个主要的依赖标志就是有 spring-boot-starter-web 这个 starter ，spring...","permalink":"/post/springboot/springboot-series-server-tomcat","photos":[],"count_time":{"symbolsCount":"18k","symbolsTime":"16 mins."},"categories":[{"name":"SpringBoot","slug":"SpringBoot","count":17,"path":"api/categories/SpringBoot.json"}],"tags":[{"name":"SpringBoot","slug":"SpringBoot","count":17,"path":"api/tags/SpringBoot.json"},{"name":"tomcat","slug":"tomcat","count":1,"path":"api/tags/tomcat.json"},{"name":"Embedded Tomcat","slug":"Embedded-Tomcat","count":1,"path":"api/tags/Embedded-Tomcat.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#WebServer-%E8%87%AA%E5%8A%A8%E9%85%8D%E7%BD%AE\"><span class=\"toc-text\">WebServer 自动配置</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#ServletWebServerFactoryAutoConfiguration\"><span class=\"toc-text\">ServletWebServerFactoryAutoConfiguration</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#BeanPostProcessorsRegistrar\"><span class=\"toc-text\">BeanPostProcessorsRegistrar</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E8%87%AA%E5%8A%A8%E9%85%8D%E7%BD%AE%E7%B1%BB%E4%B8%AD%E6%B3%A8%E5%86%8C%E7%9A%84%E4%B8%A4%E4%B8%AA-Customizer-Bean\"><span class=\"toc-text\">自动配置类中注册的两个 Customizer Bean</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#WebServerFactoryCustomizer\"><span class=\"toc-text\">WebServerFactoryCustomizer</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#TomcatServletWebServerFactoryCustomizer\"><span class=\"toc-text\">TomcatServletWebServerFactoryCustomizer</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#WebServerFactory\"><span class=\"toc-text\">WebServerFactory</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%B1%BB%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84\"><span class=\"toc-text\">类体系结构</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#TomcatServletWebServerFactory\"><span class=\"toc-text\">TomcatServletWebServerFactory</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%87%86%E5%A4%87-Web-App-Context-%E5%AE%B9%E5%99%A8\"><span class=\"toc-text\">准备 Web App Context 容器</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%88%9D%E5%A7%8B%E5%8C%96-TomcatWebServer\"><span class=\"toc-text\">初始化 TomcatWebServer</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Tomcat-%E5%90%AF%E5%8A%A8%E8%BF%87%E7%A8%8B\"><span class=\"toc-text\">Tomcat 启动过程</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%88%9D%E5%A7%8B%E5%8C%96-Server\"><span class=\"toc-text\">初始化 Server</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%B0%8F%E7%BB%93\"><span class=\"toc-text\">小结</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E9%99%84%EF%BC%9ATomcat-%E7%BB%84%E4%BB%B6%E8%AF%B4%E6%98%8E\"><span class=\"toc-text\">附：Tomcat 组件说明</span></a>","author":{"name":"glmapper","slug":"blog-author","avatar":"https://glmapper-blog.oss-cn-hangzhou.aliyuncs.com/common/favicon.ico","link":"/","description":"开放，开源，分享，共享","socials":{"github":"https://github.com/glmapper","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/2412872703","zhihu":"","csdn":"","juejin":"https://juejin.cn/user/3227821827961806","customs":{"sofastack":{"icon":"https://glmapper-blog.oss-cn-hangzhou.aliyuncs.com/common/sofastack.svg","link":"https://www.sofastack.tech/"}}}},"mapped":true,"hidden":false,"prev_post":{"title":"SpringBoot 源码系列-FatJar 启动原理","uid":"ab9e1ff6883aee9623d9698a3a7669a7","slug":"springboot/springboot-series-fatjar","date":"2019-10-13T09:46:09.000Z","updated":"2024-07-05T04:09:05.828Z","comments":true,"path":"api/articles/springboot/springboot-series-fatjar.json","keywords":null,"cover":[],"text":"之前有写过一篇文章来介绍 JAR 文件和 MENIFEST.MF 文件，详见：聊一聊 JAR 文件和 MANIFEST.MF，在这篇文章中介绍了 JAR 文件的...","permalink":"/post/springboot/springboot-series-fatjar","photos":[],"count_time":{"symbolsCount":"11k","symbolsTime":"10 mins."},"categories":[{"name":"SpringBoot","slug":"SpringBoot","count":17,"path":"api/categories/SpringBoot.json"}],"tags":[{"name":"SpringBoot","slug":"SpringBoot","count":17,"path":"api/tags/SpringBoot.json"},{"name":"FatJar","slug":"FatJar","count":1,"path":"api/tags/FatJar.json"}],"author":{"name":"glmapper","slug":"blog-author","avatar":"https://glmapper-blog.oss-cn-hangzhou.aliyuncs.com/common/favicon.ico","link":"/","description":"开放，开源，分享，共享","socials":{"github":"https://github.com/glmapper","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/2412872703","zhihu":"","csdn":"","juejin":"https://juejin.cn/user/3227821827961806","customs":{"sofastack":{"icon":"https://glmapper-blog.oss-cn-hangzhou.aliyuncs.com/common/sofastack.svg","link":"https://www.sofastack.tech/"}}}}},"next_post":{"title":"ARK 插件基本规则及注意事项","uid":"965065d167bea41b1f08335d6ffae271","slug":"sofa/sofa-ark-plugin-rule","date":"2019-08-28T10:53:53.000Z","updated":"2024-07-05T04:09:05.801Z","comments":true,"path":"api/articles/sofa/sofa-ark-plugin-rule.json","keywords":null,"cover":[],"text":"SOFAARK 是一个轻量级的类隔离框架，其有两个基本的能力：解决依赖包冲突和多应用(模块)合并部署。本篇将从解决依赖角度来说明下 SOFARK 插件的基本使用...","permalink":"/post/sofa/sofa-ark-plugin-rule","photos":[],"count_time":{"symbolsCount":"7.4k","symbolsTime":"7 mins."},"categories":[{"name":"SOFA","slug":"SOFA","count":9,"path":"api/categories/SOFA.json"}],"tags":[{"name":"ClassLoader","slug":"ClassLoader","count":4,"path":"api/tags/ClassLoader.json"},{"name":"SOFAArk","slug":"SOFAArk","count":4,"path":"api/tags/SOFAArk.json"},{"name":"类加载","slug":"类加载","count":2,"path":"api/tags/类加载.json"}],"author":{"name":"glmapper","slug":"blog-author","avatar":"https://glmapper-blog.oss-cn-hangzhou.aliyuncs.com/common/favicon.ico","link":"/","description":"开放，开源，分享，共享","socials":{"github":"https://github.com/glmapper","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/2412872703","zhihu":"","csdn":"","juejin":"https://juejin.cn/user/3227821827961806","customs":{"sofastack":{"icon":"https://glmapper-blog.oss-cn-hangzhou.aliyuncs.com/common/sofastack.svg","link":"https://www.sofastack.tech/"}}}}}}