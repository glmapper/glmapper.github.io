{"title":"K8S system OOM 和资源配置实践","uid":"6732a7abc9d37de3b0905738d2c701f5","slug":"solutions/solution-series-k8s-resources-request-limit","date":"2022-12-04T07:49:37.000Z","updated":"2024-07-05T04:09:05.811Z","comments":true,"path":"api/articles/solutions/solution-series-k8s-resources-request-limit.json","keywords":"宋国磊, glmapper, 卫恒, 分享, 开源","cover":null,"content":"<h2 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h2><p>我们目前服务是托管在 Aws K8S 的，近期出现了一次由于生产环境流量增大而导致的 system OOM 问题，进而导致了部分核心业务受损。在此之前，团队并没有思考过关于 K8S 资源配置上存在的一些问题，也没有按照业务自身情况使用对应的 QoS 类，从而导致了故障的产生。</p>\n<p>本文将从这个角度切入，对 K8s 中的资源属性以及 QoS 进行介绍，最后给出生产环境使用的一些建议。</p>\n<span id=\"more\"></span>\n\n<h2 id=\"CPU-和-MEMORY-资源\"><a href=\"#CPU-和-MEMORY-资源\" class=\"headerlink\" title=\"CPU 和 MEMORY 资源\"></a>CPU 和 MEMORY 资源</h2><p>不知道你是否有考虑过这样一个问题，为什么 CPU 可以超卖，而 Memory 不可以超卖? K8S 官方文档中对于水平扩容的默认机制也是基于 CPU 利用率的，而不是基于 Memory。</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>RAM differs significantly from CPU in that it’s an <strong>incompressible resource</strong>. That means we can’t just throttle your RAM usage, RAM is state!</p></blockquote>\n<p>什么是 incompressible resource？incompressible resource 意味着资源可以被节流（throttled）。这里，CPU 可以被认为是可压缩的，而内存是不可压缩的。当 Kubernetes 所管理的宿主机上不可压缩资源短缺时，就有可能触发 Eviction。比如，可用内存（memory.available）、可用的宿主机磁盘空间（nodefs.available），以及容器运行时镜像存储空间（imagefs.available）等等。</p>\n<h2 id=\"QoS\"><a href=\"#QoS\" class=\"headerlink\" title=\"QoS\"></a>QoS</h2><p>QoS：服务质量，Kubernetes 使用 QoS 类来决定 Pod 的调度和驱逐策略，即 <strong>当<strong><strong>宿主机</strong></strong>资源紧张的时候，kubelet 对 Pod 进行</strong> <strong><code>Eviction</code></strong> <strong>（即资源回收）时需要用到的。</strong></p>\n<p>下面这张表，笔者整理了 QoS 分类以及优缺点</p>\n<table>\n<thead>\n<tr>\n<th>QoS</th>\n<th>解释</th>\n<th>优缺点</th>\n<th>备注</th>\n<th>适用场景</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>Guaranteed</td>\n<td>POD 中的内存和CPU 必须指定，并且 request&#x3D;limit</td>\n<td>-   缺失弹性能力，低谷期会有资源浪费-   可以规避 system oom 的出现，但不能保证容器 oom</td>\n<td></td>\n<td>稳定性优先的服务</td>\n</tr>\n<tr>\n<td>Burstable</td>\n<td>Pod 中至少一个容器具有内存或 CPU 的请求或限制</td>\n<td>-   有伸缩能力，一定程度上减少资源浪费-   当 limit 总和大于 node 可用资源时，会触发 system oom，意味着 Node is overcommitted。</td>\n<td>按照 QoS 的划分条件，云端服务目前属于 Burstable。</td>\n<td>稳定性要求较低的服务</td>\n</tr>\n<tr>\n<td>BestEffort</td>\n<td>Pod 中的容器必须没有设置内存和 CPU 限制或请求</td>\n<td>&#x2F;</td>\n<td>一般不考虑此场景，这里不讨论</td>\n<td></td>\n</tr>\n</tbody></table>\n<p>此外，当内存不足时，POD 被驱逐的级别顺序是 BestEffort、Burstable、Guaranteed。</p>\n<h2 id=\"结合实际场景的思考和建议\"><a href=\"#结合实际场景的思考和建议\" class=\"headerlink\" title=\"结合实际场景的思考和建议\"></a>结合实际场景的思考和建议</h2><p>对于我们实际的业务来看，我们一定是期望资源超卖以便于达到最大化的利用率，从而使得相应的成本能够节省下来。但是从 QoS 质量等级来看，是“鱼和熊掌”不可兼得的，所以需要做的就是找到一些平衡。</p>\n<ul>\n<li>期望：资源利用率最大化，资源超卖越多越好，这样可以节省更多的费用</li>\n<li>目标：关键业务要有一定的稳定性保障</li>\n</ul>\n<p>在我们的场景中，服务可以分为核心和非核心两种，对于稳定性要求来说，核心服务要远高于非核心服务，所以得出的结论是：</p>\n<ul>\n<li>1、对于非核心服务，稳定性保障要求较低的服务，我们可以适当的超卖资源，从而获得资源更大程度的利用率；</li>\n<li>2、对于核心服务，则允许服务资源存在一定的浪费，优先保证服务稳定性。</li>\n</ul>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><ul>\n<li><a href=\"https://kubernetes.io/zh-cn/docs/tasks/configure-pod-container/assign-memory-resource/\">为容器和 Pod 分配内存资源</a></li>\n<li><a href=\"https://mihai-albert.com/2022/02/13/out-of-memory-oom-in-kubernetes-part-1-intro-and-topics-discussed/\">out-of-memory-oom-in-kubernetes-part-1-intro-and-topics-discussed</a></li>\n<li><a href=\"https://www.containiq.com/post/oomkilled-troubleshooting-kubernetes-memory-requests-and-limits\">oomkilled-troubleshooting-kubernetes-memory-requests-and-limits</a></li>\n<li><a href=\"https://sysdig.com/blog/troubleshoot-kubernetes-oom/\">troubleshoot-kubernetes-oom</a></li>\n<li><a href=\"https://komodor.com/learn/how-to-fix-oomkilled-exit-code-137/\">how-to-fix-oomkilled-exit-code-137</a></li>\n<li><a href=\"https://www.digitalocean.com/community/tech-talks/kubernetes-requests-limits-and-autoscalers-how-they-sometimes-don-t-work-together\">Kubernetes Requests, Limits, and Autoscalers: How They (Sometimes Don’t) Work Together | DigitalOce</a></li>\n</ul>\n","text":"背景我们目前服务是托管在 Aws K8S 的，近期出现了一次由于生产环境流量增大而导致的 system OOM 问题，进而导致了部分核心业务受损。在此之前，团队...","permalink":"/post/solutions/solution-series-k8s-resources-request-limit","photos":[],"count_time":{"symbolsCount":"1.9k","symbolsTime":"2 mins."},"categories":[{"name":"解决方案","slug":"解决方案","count":5,"path":"api/categories/解决方案.json"}],"tags":[{"name":"kubernetes","slug":"kubernetes","count":4,"path":"api/tags/kubernetes.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E8%83%8C%E6%99%AF\"><span class=\"toc-text\">背景</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#CPU-%E5%92%8C-MEMORY-%E8%B5%84%E6%BA%90\"><span class=\"toc-text\">CPU 和 MEMORY 资源</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#QoS\"><span class=\"toc-text\">QoS</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E7%BB%93%E5%90%88%E5%AE%9E%E9%99%85%E5%9C%BA%E6%99%AF%E7%9A%84%E6%80%9D%E8%80%83%E5%92%8C%E5%BB%BA%E8%AE%AE\"><span class=\"toc-text\">结合实际场景的思考和建议</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%8F%82%E8%80%83\"><span class=\"toc-text\">参考</span></a></li></ol>","author":{"name":"glmapper","slug":"blog-author","avatar":"https://glmapper-blog.oss-cn-hangzhou.aliyuncs.com/common/favicon.ico","link":"/","description":"开放，开源，分享，共享","socials":{"github":"https://github.com/glmapper","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/2412872703","zhihu":"","csdn":"","juejin":"https://juejin.cn/user/3227821827961806","customs":{"sofastack":{"icon":"https://glmapper-blog.oss-cn-hangzhou.aliyuncs.com/common/sofastack.svg","link":"https://www.sofastack.tech/"}}}},"mapped":true,"hidden":false,"prev_post":{"title":"win 系统中使用 gitbash 作为 idea 的默认终端","uid":"baaad82d68657f51bd3c3465e15edac9","slug":"git/tool-config-git-bash-under-win","date":"2023-03-14T03:16:21.000Z","updated":"2024-07-05T04:09:05.759Z","comments":true,"path":"api/articles/git/tool-config-git-bash-under-win.json","keywords":"宋国磊, glmapper, 卫恒, 分享, 开源","cover":null,"text":"意义不大，建议直接使用 wsl2 或者将 win 系统换成 ubuntu 等桌面版本 linux 系统进行开发 ","permalink":"/post/git/tool-config-git-bash-under-win","photos":[],"count_time":{"symbolsCount":56,"symbolsTime":"1 mins."},"categories":[{"name":"git","slug":"git","count":3,"path":"api/categories/git.json"}],"tags":[{"name":"git","slug":"git","count":3,"path":"api/tags/git.json"}],"author":{"name":"glmapper","slug":"blog-author","avatar":"https://glmapper-blog.oss-cn-hangzhou.aliyuncs.com/common/favicon.ico","link":"/","description":"开放，开源，分享，共享","socials":{"github":"https://github.com/glmapper","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/2412872703","zhihu":"","csdn":"","juejin":"https://juejin.cn/user/3227821827961806","customs":{"sofastack":{"icon":"https://glmapper-blog.oss-cn-hangzhou.aliyuncs.com/common/sofastack.svg","link":"https://www.sofastack.tech/"}}}}},"next_post":{"title":"New Features Of JDK - JDK9 Modular System","uid":"679bdcba368529704928bcc9f610db76","slug":"java/java-open-jdk9-module","date":"2022-12-04T07:45:44.000Z","updated":"2024-07-05T04:09:05.764Z","comments":true,"path":"api/articles/java/java-open-jdk9-module.json","keywords":"宋国磊, glmapper, 卫恒, 分享, 开源","cover":null,"text":"Modular System 是 JAVA9 中提供的新特性，它从一个独立的开源项目而来，名为 Jigsaw Project。在此之前，我们对于 Java 技术...","permalink":"/post/java/java-open-jdk9-module","photos":[],"count_time":{"symbolsCount":"7.3k","symbolsTime":"7 mins."},"categories":[{"name":"JAVA","slug":"JAVA","count":12,"path":"api/categories/JAVA.json"}],"tags":[{"name":"openjdk","slug":"openjdk","count":1,"path":"api/tags/openjdk.json"}],"author":{"name":"glmapper","slug":"blog-author","avatar":"https://glmapper-blog.oss-cn-hangzhou.aliyuncs.com/common/favicon.ico","link":"/","description":"开放，开源，分享，共享","socials":{"github":"https://github.com/glmapper","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/2412872703","zhihu":"","csdn":"","juejin":"https://juejin.cn/user/3227821827961806","customs":{"sofastack":{"icon":"https://glmapper-blog.oss-cn-hangzhou.aliyuncs.com/common/sofastack.svg","link":"https://www.sofastack.tech/"}}}}}}