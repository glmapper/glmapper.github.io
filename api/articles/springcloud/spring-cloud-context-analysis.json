{"title":"SpringCloud-Spring Cloud Context","uid":"9c3e8189292b11295e2641e78c47786a","slug":"springcloud/spring-cloud-context-analysis","date":"2018-12-31T15:12:24.000Z","updated":"2024-07-05T04:09:05.837Z","comments":true,"path":"api/articles/springcloud/spring-cloud-context-analysis.json","keywords":null,"cover":[],"content":"<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>A Spring Cloud application operates by creating a “bootstrap” context, which is a parent context for the main application. It is responsible for loading configuration properties from the external sources and for decrypting properties in the local external configuration files. The two contexts share an Environment, which is the source of external properties for any Spring application.</p>\n<p>By default, bootstrap properties (not bootstrap.properties but properties that are loaded during the bootstrap phase) are added with high precedence, so they cannot be overridden by local configuration.</p>\n<p>The bootstrap context uses a different convention for locating external configuration than the main application context. Instead of application.yml (or .properties), you can use bootstrap.yml, keeping the external configuration for bootstrap and main context nicely separate.</p></blockquote>\n<span id=\"more\"></span>\n\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>释文：Spring Cloud 应用程序通过创建“引导程序”上下文来运行，<strong>该上下文是主应用程序的父上下文</strong>共享一个 Environment**，它是任何Spring应用程序的外部属性的来源。</p>\n<p>默认情况下，引导属性（不是bootstrap.properties，而是在引导阶段加载的属性）以<strong>高优先级添加</strong>，因此本地配置无法覆盖它们。</p>\n<p>引导上下文使用与主应用程序上下文不同的外部配置约定。 因此使用 bootstrap.yml application.yml（或.properties）代替引导和主上下文的外部配置，保持引导程序和主上下文的外部配置很好地分开。</p></blockquote>\n<p>上面是 SpringCloud 关于引导上下文的一个解释，详见 <a href=\"https://cloud.spring.io/spring-cloud-static/Finchley.SR2/single/spring-cloud.html#_the_bootstrap_application_context\">这里</a>。</p>\n<p>spring cloud 有自己的一套配置初始化机制，所以它实际上是自己启动了一个Spring 上下文，也就是我们说的引导上文。在上面的描述中有提到，引导上下文会以应用上下文的父类存在；在Spring中，如果上下文存在父子关系，也就意味着子上下文会集成父上下文的属性源和配置文件。在SpringBoot的启动过程中，prepareContext 这个操作会进行父子上下文的关系设置，调用栈如下:</p>\n<p><img src=\"https://intranetproxy.alipay.com/skylark/lark/0/2018/png/97619/1546070770372-d7a4ec62-f29b-477f-adc0-844709415a32.png#wh=561x165\"></p>\n<p>setParent 方法代码片段如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setParent</span><span class=\"params\">(<span class=\"meta\">@Nullable</span> ApplicationContext parent)</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.parent = parent;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (parent != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"type\">Environment</span> <span class=\"variable\">parentEnvironment</span> <span class=\"operator\">=</span> parent.getEnvironment();</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (parentEnvironment <span class=\"keyword\">instanceof</span> ConfigurableEnvironment) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">this</span>.getEnvironment().merge((ConfigurableEnvironment)parentEnvironment);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这个可以看到，子上下文会合并掉父上下文的 Environment 。关于父子上下文是怎么关联起来的，下面来看。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">initialize</span><span class=\"params\">(ConfigurableApplicationContext context)</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">while</span>(context.getParent() != <span class=\"literal\">null</span> &amp;&amp; context.getParent() != context) &#123;</span><br><span class=\"line\">  context = (ConfigurableApplicationContext)context.getParent();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"built_in\">this</span>.reorderSources(context.getEnvironment());</span><br><span class=\"line\">  (<span class=\"keyword\">new</span> <span class=\"title class_\">ParentContextApplicationContextInitializer</span>(<span class=\"built_in\">this</span>.parent)).initialize(context);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"BootstrapApplicationListener\"><a href=\"#BootstrapApplicationListener\" class=\"headerlink\" title=\"BootstrapApplicationListener\"></a>BootstrapApplicationListener</h3><p>上面的代码片段定位在 org.springframework.cloud.bootstrap.BootstrapApplicationListener 这个类；这个监听器监听的事件是  ApplicationEnvironmentPreparedEvent ，对应在SpringBoot启动过程，就是在执行 prepareEnvironment 时触发事件调用。</p>\n<p>BootstrapApplicationListener 的 onApplicationEvent 回调方法中实际上就是用够构建和启动 Spring Cloud  context 的。<br />spring cloud context 算是一个特殊的 spring boot context， 在分析代码的过程中（bootstrapServiceContext方法中）发现，它只扫描 BootstrapConfiguration 这个注解标注的组件。</p>\n<p>这里就着重分析下 SpringCloud Context 的启动过程。</p>\n<h3 id=\"SpringCloud-Context-启动过程\"><a href=\"#SpringCloud-Context-启动过程\" class=\"headerlink\" title=\"SpringCloud Context 启动过程\"></a>SpringCloud Context 启动过程</h3><h4 id=\"通过-spring-cloud-bootstrap-enabled-配置来禁用引导上下文\"><a href=\"#通过-spring-cloud-bootstrap-enabled-配置来禁用引导上下文\" class=\"headerlink\" title=\"通过 spring.cloud.bootstrap.enabled 配置来禁用引导上下文\"></a>通过 spring.cloud.bootstrap.enabled 配置来禁用引导上下文</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (!environment.getProperty(<span class=\"string\">&quot;spring.cloud.bootstrap.enabled&quot;</span>, Boolean.class,<span class=\"literal\">true</span>)) &#123;</span><br><span class=\"line\"> \t <span class=\"keyword\">return</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>回调函数的开始就会对 spring.cloud.bootstrap.enabled 这个配置值进行校验，来决定是否需要禁止引导。这个在官方文档里面也有明确提到。</p>\n<h4 id=\"获取-configName\"><a href=\"#获取-configName\" class=\"headerlink\" title=\"获取 configName\"></a>获取 configName</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">String</span> <span class=\"variable\">configName</span> <span class=\"operator\">=</span> environment</span><br><span class=\"line\">\t\t\t\t.resolvePlaceholders(<span class=\"string\">&quot;$&#123;spring.cloud.bootstrap.name:bootstrap&#125;&quot;</span>);</span><br></pre></td></tr></table></figure>\n<p>可以使用 spring.cloud.bootstrap.name（默认“bootstrap”）或spring.cloud.bootstrap.location（默认为空）指定bootstrap.yml（或.properties）位置，例如在系统属性中。</p>\n<h4 id=\"bootstrapServiceContext-创建-启动\"><a href=\"#bootstrapServiceContext-创建-启动\" class=\"headerlink\" title=\"bootstrapServiceContext 创建&amp;启动\"></a>bootstrapServiceContext 创建&amp;启动</h4><p>bootstrapServiceContext 是完成此过程的核心方法。</p>\n<ul>\n<li>加载 BootstrapConfiguration 自动配置类</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># Bootstrap components</span><br><span class=\"line\">org.springframework.cloud.bootstrap.BootstrapConfiguration=\\</span><br><span class=\"line\">org.springframework.cloud.bootstrap.config.PropertySourceBootstrapConfiguration,\\</span><br><span class=\"line\">org.springframework.cloud.bootstrap.encrypt.EncryptionBootstrapConfiguration,\\</span><br><span class=\"line\">org.springframework.cloud.autoconfigure.ConfigurationPropertiesRebinderAutoConfiguration,\\</span><br><span class=\"line\">org.springframework.boot.autoconfigure.context.PropertyPlaceholderAutoConfiguration</span><br></pre></td></tr></table></figure>\n\n<p>PropertySourceBootstrapConfiguration 将会把 PropertySourceLocator 自定义属性值添加到引导上下文的环境当中，包括如何从远端仓库拉取配置等过程。</p>\n<ul>\n<li><p>构建 SpringApplicationBuilder 类</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">SpringApplicationBuilder</span> <span class=\"variable\">builder</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">SpringApplicationBuilder</span>()</span><br><span class=\"line\">    .profiles(environment.getActiveProfiles()).bannerMode(Mode.OFF)</span><br><span class=\"line\">    .environment(bootstrapEnvironment)</span><br><span class=\"line\">    <span class=\"comment\">// Don&#x27;t use the default properties in this builder</span></span><br><span class=\"line\">    .registerShutdownHook(<span class=\"literal\">false</span>).logStartupInfo(<span class=\"literal\">false</span>)</span><br><span class=\"line\">    .web(WebApplicationType.NONE);</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>构建 引导上下文并 run</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">final</span> <span class=\"type\">ConfigurableApplicationContext</span> <span class=\"variable\">context</span> <span class=\"operator\">=</span> builder.run();</span><br></pre></td></tr></table></figure></li>\n</ul>\n<p>这个 build.run 实际执行的就是 SpringApplication.run 方法。</p>\n<ul>\n<li>为关联父子上下文准备<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">addAncestorInitializer(application, context);</span><br></pre></td></tr></table></figure></li>\n</ul>\n<p>这里会把 ParentContextApplicationContextInitializer 加到应用的 spring context 里，来把自己设置为应用的context 的 parent，具体是在SpringBoot启动过程的 prepareContext 中完成 。</p>\n<h2 id=\"重载远程属性\"><a href=\"#重载远程属性\" class=\"headerlink\" title=\"重载远程属性\"></a>重载远程属性</h2><p>通过Bootstrap 上下文添加到应用程序的属性源通常是远程的，比如说来自配置中心的，一般情况下本地的配置文件不能覆盖这些远程属性源。</p>\n<p>那么如果想覆盖远程属性源怎么办呢？可以通过启动命令行参数方式设定（启动命令行参数的优先级高于远程配置的优先级）。</p>\n<p>如果想使用应用程序的系统属性或者配置文件覆盖远程属性，那么远程属性源必须设置为 spring.cloud.config.allowOverride &#x3D; true，这个配置在本地设置时不会生效的。在远程属性源中设定上述配置后，就可以通过更为细粒度的设置来控制远程属性是否能被重载，具体配置如下：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">spring:</span></span><br><span class=\"line\">\t<span class=\"attr\">cloud:</span></span><br><span class=\"line\">  \t<span class=\"attr\">config:</span></span><br><span class=\"line\">    \t<span class=\"attr\">overrideNone:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">      <span class=\"attr\">overrideSystemProperties:</span> <span class=\"literal\">false</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>overrideNone true，本地属性覆盖所有的远程属性</li>\n<li>overrideSystemProperties ，仅覆盖远程属性源中的系统属性和环境变量</li>\n</ul>\n<h2 id=\"自定义-Bootstrap-属性源\"><a href=\"#自定义-Bootstrap-属性源\" class=\"headerlink\" title=\"自定义 Bootstrap 属性源\"></a>自定义 Bootstrap 属性源</h2><p>默认情况下，Bootstrap 的外部配置属性源是 spring cloud config server ，也就是使用配置中心加载外部属性，但是Spring中也允许用户通过将 ProoertySourceLocator 类型的Bean实例添加到 Bootstrap 上下文，也就是在 spring.factories 中添加相应的配置类，来添加额外的属性源来源。这里可以通过SpringCloud里面提供的测试用例来看下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">protected</span> <span class=\"keyword\">static</span> <span class=\"keyword\">class</span> <span class=\"title class_\">PropertySourceConfiguration</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">PropertySourceLocator</span> &#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 省略其他代码\t</span></span><br><span class=\"line\">  <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> PropertySource&lt;?&gt; locate(Environment environment) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"built_in\">this</span>.name != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">      assertEquals(<span class=\"built_in\">this</span>.name,</span><br><span class=\"line\">                   environment.getProperty(<span class=\"string\">&quot;spring.application.name&quot;</span>));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"built_in\">this</span>.fail) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">RuntimeException</span>(<span class=\"string\">&quot;Planned&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">MapPropertySource</span>(<span class=\"string\">&quot;testBootstrap&quot;</span>, MAP);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// 省略其他代码\t</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>上面代码段中传入的Envirement 参数用于创建应用上下文，它具有 SpringBoot 提供的属性源，可以使用它们来加载指定的属性源。</p>\n<p>最后将这个自定义的 PropertySourceLocator 配置到 spring.factories 中，这样应用程序就可以使用这个 PropertySourceConfiguration 作为其属性源了。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">org.springframework.cloud.bootstrap.BootstrapConfiguration=\\</span><br><span class=\"line\">xx.xx.x.x.PropertySourceConfiguration </span><br></pre></td></tr></table></figure>\n\n<h2 id=\"关于Enviroment-的变化\"><a href=\"#关于Enviroment-的变化\" class=\"headerlink\" title=\"关于Enviroment 的变化\"></a>关于Enviroment 的变化</h2><p>配置中心客户端（Spring Cloud Config Client） 应用会监听  EnviromentChangeEvent 事件，当监听到这个事件时，它将持有一个被改变的键值对列表，然后客户端应用会使用这些值来做一些事情：</p>\n<ul>\n<li>重新绑定所有的@ConfigurationProperties的Bean<a href=\"#\">@ConfigurationProperties</a> 实例，更新本地的配置属性。</li>\n<li>设置日志等级（logging.level.* 相关配置）</li>\n</ul>\n<p>Spring Cloud 中，配置中心服务端使用 Spring Cloud Bus 将EnviromentChangeEvent 事件广播到所有的客户端中，通过这种方式来通过它们 Enviroment 发生变化。</p>\n<h2 id=\"RefreshScope\"><a href=\"#RefreshScope\" class=\"headerlink\" title=\"RefreshScope\"></a>RefreshScope</h2><h3 id=\"注解\"><a href=\"#注解\" class=\"headerlink\" title=\"注解\"></a>注解</h3><p>RefreshScope 注解的作用是，当被这个注解标记的 Bean 实例在配置发生变化时可以重新进行初始化。这个注解很好的解决了状态Bean实例只能在初始化的时候才能进行属性注入的问题。</p>\n<h3 id=\"类\"><a href=\"#类\" class=\"headerlink\" title=\"类\"></a>类</h3><p>org.springframework.cloud.context.scope.refresh.RefreshScope 是上下文中的一个Bean实例，在它的 refreshAll 这个方法中，可以通过清除目标缓存来刷新作用域中的所有Bean实例。RefreshScope中也提供了一个 refresh方法，可以按照名字来刷新单个Bean。</p>\n","text":" A Spring Cloud application operates by creating a “bootstrap” context, which is...","permalink":"/post/springcloud/spring-cloud-context-analysis","photos":[],"count_time":{"symbolsCount":"6.7k","symbolsTime":"6 mins."},"categories":[{"name":"SpringCloud","slug":"SpringCloud","count":14,"path":"api/categories/SpringCloud.json"}],"tags":[{"name":"bootstrap","slug":"bootstrap","count":1,"path":"api/tags/bootstrap.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#BootstrapApplicationListener\"><span class=\"toc-text\">BootstrapApplicationListener</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#SpringCloud-Context-%E5%90%AF%E5%8A%A8%E8%BF%87%E7%A8%8B\"><span class=\"toc-text\">SpringCloud Context 启动过程</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E9%80%9A%E8%BF%87-spring-cloud-bootstrap-enabled-%E9%85%8D%E7%BD%AE%E6%9D%A5%E7%A6%81%E7%94%A8%E5%BC%95%E5%AF%BC%E4%B8%8A%E4%B8%8B%E6%96%87\"><span class=\"toc-text\">通过 spring.cloud.bootstrap.enabled 配置来禁用引导上下文</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E8%8E%B7%E5%8F%96-configName\"><span class=\"toc-text\">获取 configName</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#bootstrapServiceContext-%E5%88%9B%E5%BB%BA-%E5%90%AF%E5%8A%A8\"><span class=\"toc-text\">bootstrapServiceContext 创建&amp;启动</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E9%87%8D%E8%BD%BD%E8%BF%9C%E7%A8%8B%E5%B1%9E%E6%80%A7\"><span class=\"toc-text\">重载远程属性</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E8%87%AA%E5%AE%9A%E4%B9%89-Bootstrap-%E5%B1%9E%E6%80%A7%E6%BA%90\"><span class=\"toc-text\">自定义 Bootstrap 属性源</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%85%B3%E4%BA%8EEnviroment-%E7%9A%84%E5%8F%98%E5%8C%96\"><span class=\"toc-text\">关于Enviroment 的变化</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#RefreshScope\"><span class=\"toc-text\">RefreshScope</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%B3%A8%E8%A7%A3\"><span class=\"toc-text\">注解</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%B1%BB\"><span class=\"toc-text\">类</span></a></li></ol>","author":{"name":"glmapper","slug":"blog-author","avatar":"https://glmapper-blog.oss-cn-hangzhou.aliyuncs.com/common/favicon.ico","link":"/","description":"开放，开源，分享，共享","socials":{"github":"https://github.com/glmapper","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/2412872703","zhihu":"","csdn":"","juejin":"https://juejin.cn/user/3227821827961806","customs":{"sofastack":{"icon":"https://glmapper-blog.oss-cn-hangzhou.aliyuncs.com/common/sofastack.svg","link":"https://www.sofastack.tech/"}}}},"mapped":true,"hidden":false,"prev_post":{"title":"SpringCloud-熔断器 Hystrix","uid":"3b1ec91bc07936ed68fe667fb087db85","slug":"springcloud/spring-cloud-hysitrx-project","date":"2018-12-31T15:12:58.000Z","updated":"2024-07-05T04:09:05.838Z","comments":true,"path":"api/articles/springcloud/spring-cloud-hysitrx-project.json","keywords":null,"cover":null,"text":"Hystrix 是 Netflix 的一个开源项目，它能够在服务失效的情况下，通过隔离系统依赖服务的方式，防止服务级联失败，造成服务雪崩。同时Hystrix 还...","permalink":"/post/springcloud/spring-cloud-hysitrx-project","photos":[],"count_time":{"symbolsCount":"11k","symbolsTime":"10 mins."},"categories":[{"name":"SpringCloud","slug":"SpringCloud","count":14,"path":"api/categories/SpringCloud.json"}],"tags":[{"name":"hystrix","slug":"hystrix","count":1,"path":"api/tags/hystrix.json"}],"author":{"name":"glmapper","slug":"blog-author","avatar":"https://glmapper-blog.oss-cn-hangzhou.aliyuncs.com/common/favicon.ico","link":"/","description":"开放，开源，分享，共享","socials":{"github":"https://github.com/glmapper","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/2412872703","zhihu":"","csdn":"","juejin":"https://juejin.cn/user/3227821827961806","customs":{"sofastack":{"icon":"https://glmapper-blog.oss-cn-hangzhou.aliyuncs.com/common/sofastack.svg","link":"https://www.sofastack.tech/"}}}}},"next_post":{"title":"SpringCloud-配置中心 Config Zookeeper","uid":"f57e9d19e374649b9c60d012c1470985","slug":"springcloud/spring-cloud-config-zookeeper","date":"2018-12-31T15:11:48.000Z","updated":"2024-07-05T04:09:05.836Z","comments":true,"path":"api/articles/springcloud/spring-cloud-config-zookeeper.json","keywords":null,"cover":[],"text":"SpringCloud 除了config自己的client/server 这套配置中心之外，还可以集成使用 zookeeper 。本篇将演示如何使用 sprin...","permalink":"/post/springcloud/spring-cloud-config-zookeeper","photos":[],"count_time":{"symbolsCount":"3.5k","symbolsTime":"3 mins."},"categories":[{"name":"SpringCloud","slug":"SpringCloud","count":14,"path":"api/categories/SpringCloud.json"}],"tags":[{"name":"zookeeper","slug":"zookeeper","count":3,"path":"api/tags/zookeeper.json"},{"name":"config","slug":"config","count":6,"path":"api/tags/config.json"}],"author":{"name":"glmapper","slug":"blog-author","avatar":"https://glmapper-blog.oss-cn-hangzhou.aliyuncs.com/common/favicon.ico","link":"/","description":"开放，开源，分享，共享","socials":{"github":"https://github.com/glmapper","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/2412872703","zhihu":"","csdn":"","juejin":"https://juejin.cn/user/3227821827961806","customs":{"sofastack":{"icon":"https://glmapper-blog.oss-cn-hangzhou.aliyuncs.com/common/sofastack.svg","link":"https://www.sofastack.tech/"}}}}}}