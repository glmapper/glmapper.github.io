{"title":"Spring Cloud-Eureka Client 原理解析","uid":"17d5e51f35b1836a64abac3ed89ad69f","slug":"springcloud/spring-cloud-eureka-client-analysis","date":"2018-12-31T14:48:45.000Z","updated":"2024-07-05T04:09:05.837Z","comments":true,"path":"api/articles/springcloud/spring-cloud-eureka-client-analysis.json","keywords":null,"cover":[],"content":"<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>原文： <a href=\"https://blog.csdn.net/sinat_25518349/article/details/85423398\">https://blog.csdn.net/sinat_25518349/article/details/85423398</a></p></blockquote>\n<p>前面一些 demo 中已经介绍了如何使用 SOFABoot 来集成 Spring Cloud Netflix Eureka 组件。本篇将来先解析下 Eureka Client 的工作原理。</p>\n<span id=\"more\"></span>\n\n<h2 id=\"Netflix-和-SpringCloud\"><a href=\"#Netflix-和-SpringCloud\" class=\"headerlink\" title=\"Netflix 和 SpringCloud\"></a>Netflix 和 SpringCloud</h2><p>spring-cloud-commons 模块是 spring 在分布式领域上(服务发现，服务注册，断路器，负载均衡)的规范定义。spring-cloud-netflix 是基于此规范的具体实现，Netflix OSS 里的各种组件也都实现了这个 commons 规范。关系如下：</p>\n<p><img src=\"https://intranetproxy.alipay.com/skylark/lark/0/2018/png/97619/1545979991419-08ae3e7c-3125-4a3e-8a9d-f43ab6c3322b.png#wh=626x332\"></p>\n<h2 id=\"Spring-Cloud-Netflix-Eureka-服务发现实现原理\"><a href=\"#Spring-Cloud-Netflix-Eureka-服务发现实现原理\" class=\"headerlink\" title=\"Spring Cloud Netflix Eureka 服务发现实现原理\"></a>Spring Cloud Netflix Eureka 服务发现实现原理</h2><p>基于上图，这里以 Eureka 中的服务发现为例，来具体讲下是如何实现的。Spring Cloud common 中提供了用于服务发现的两个关键类：DiscoveryClient 接口 和 EnableDiscoveryClient 注解。</p>\n<h3 id=\"DiscoveryClient-接口\"><a href=\"#DiscoveryClient-接口\" class=\"headerlink\" title=\"DiscoveryClient 接口\"></a>DiscoveryClient 接口</h3><p>下面这张图描述的是在服务发现这个功能上，SpringCloud 是如何与 Netflix 整合的。在 spring-cloud-netflix-eureka-client 中对 Spring Cloud Common 中的 DiscoveryClient 接口进行了实现，实现类是 EurekaDiscoveryClient 。</p>\n<p><img src=\"https://intranetproxy.alipay.com/skylark/lark/0/2018/png/97619/1545981516158-eabcaa30-83e2-439c-9198-77c1f14b6c79.png#wh=577x416\"></p>\n<p>DiscoveryClient 的接口定义与方法：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * DiscoveryClient表示服务发现常用的读取操作，例如Netflix Eureka或consul.io</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> Spencer Gibb</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">DiscoveryClient</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * 实现描述</span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@return</span> the description</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\tString <span class=\"title function_\">description</span><span class=\"params\">()</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * 获取与特定serviceId关联的所有ServiceInstances</span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@param</span> serviceId the serviceId to query</span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@return</span> a List of ServiceInstance</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\tList&lt;ServiceInstance&gt; <span class=\"title function_\">getInstances</span><span class=\"params\">(String serviceId)</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * 返回所有已知的服务ID</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\tList&lt;String&gt; <span class=\"title function_\">getServices</span><span class=\"params\">()</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><code>EurekaDiscoveryClient</code> 中实现了这几个方法，但是 <code>EurekaDiscoveryClient</code> 自身没有实现如何与服务端交互的逻辑，而是通过 <code>com.netflix.DiscoveryClient</code> 类来完成。所以 <code>spring-cloud-netflix-eureka-client</code> 干的事情就是实现了 <code>Spring Cloud Common</code> 规范，然后在实现上包装了 <code>netflix</code> 。</p>\n<h3 id=\"EnableDiscoveryClient-注解\"><a href=\"#EnableDiscoveryClient-注解\" class=\"headerlink\" title=\"@EnableDiscoveryClient 注解\"></a>@EnableDiscoveryClient 注解</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Target(ElementType.TYPE)</span></span><br><span class=\"line\"><span class=\"meta\">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class=\"line\"><span class=\"meta\">@Documented</span></span><br><span class=\"line\"><span class=\"meta\">@Inherited</span></span><br><span class=\"line\"><span class=\"meta\">@Import(EnableDiscoveryClientImportSelector.class)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"meta\">@interface</span> EnableDiscoveryClient &#123;</span><br><span class=\"line\">  <span class=\"comment\">//是否自动注册，默认是true。</span></span><br><span class=\"line\">\t<span class=\"type\">boolean</span> <span class=\"title function_\">autoRegister</span><span class=\"params\">()</span> <span class=\"keyword\">default</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><code>EnableDiscoveryClientImportSelector</code> 将会从 <code>META-INF/spring.factories</code> 里找出 key 为 <code>org.springframework.cloud.client.discovery.EnableDiscoveryClient</code> 的类。</p>\n<p>对于 autoRegister ：</p>\n<ul>\n<li>如果自动注册属性为true，会在找出的这些类里再加上一个类：AutoServiceRegistrationConfiguration， AutoServiceRegistrationConfiguration 内部会使用@EnableConfigurationProperties(AutoServiceRegistrationProperties.class) 触发构造AutoServiceRegistrationProperties 这个 bean。像eureka，nacos，它们的自动化配置类里都使用了@ConditionalOnBean(AutoServiceRegistrationProperties.class) 来确保存在AutoServiceRegistrationProperties 这个 bean 存在的时候才会构造 AutoServiceRegistration 进行注册。</li>\n<li>如果自动注册属性为 false，在Environment 里加一个 PropertySource，内部的配置项是spring.cloud.service-registry.auto-registration.enabled，值是false(代表不构造AutoServiceRegistrationProperties.class)。这样 eureka 就不会注册。</li>\n</ul>\n<p>对应上面这段逻辑的代码如下：</p>\n<p><img src=\"https://intranetproxy.alipay.com/skylark/lark/0/2018/png/97619/1545982472444-7e4995bb-af73-4ca2-9942-5c5ee1ea9901.png#wh=655x204\"></p>\n<p>spring-cloud-netflix-eureka-client 自己也提供了一个注解 EnableEurekaClient，其作用于这个注解一样</p>\n<h2 id=\"Eureka-架构图\"><a href=\"#Eureka-架构图\" class=\"headerlink\" title=\"Eureka 架构图\"></a>Eureka 架构图</h2><p><img src=\"https://intranetproxy.alipay.com/skylark/lark/0/2018/png/97619/1545978817975-4b633117-66eb-4806-90a1-c6a1d419f494.png#wh=712x323\"></p>\n<ul>\n<li>consumer  : 服务消费方，eureka client 角色，可以从 eureka server 上拉取到其他已注册服务的信息，从而根据这些信息找到自己所需的服务，然后发起远程调用。</li>\n<li>provider : 服务提供方，eureka client 角色，可以向 eureka server 上注册和更新自己的信息，当然作为 eureka client ，它也可以从server 上获取到其他服务的信息。</li>\n<li>Eureka server : 服务注册中心，提供服务注册和服务发现功能；</li>\n<li>同步复制 ： eureka server 之间进行注册服务信息的同步，这样可以保证集群中每个server 都能提供完整的服务信息。</li>\n</ul>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>关于 AWS 上 Regin 和 Availability Zone 的概念，请自行查阅相关资料</p></blockquote>\n<h2 id=\"源码解析\"><a href=\"#源码解析\" class=\"headerlink\" title=\"源码解析\"></a>源码解析</h2><h3 id=\"配置信息读取\"><a href=\"#配置信息读取\" class=\"headerlink\" title=\"配置信息读取\"></a>配置信息读取</h3><p>Eureka Client的自动配置类是 org.springframework.cloud.netflix.eureka.EurekaClientAutoConfiguration ，这里面主要就负责了一些配置信息的服务诸如 DiscoveryClient 、EurekaServiceRegistry等主要bean的初始化工作。</p>\n<p>另外还有一个 EurekaDiscoveryClientConfiguration 类，负责配置自动注册和应用的健康检查器初始化。</p>\n<h4 id=\"读取-eureka-client\"><a href=\"#读取-eureka-client\" class=\"headerlink\" title=\"读取 eureka.client.*\"></a>读取 eureka.client.*</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Bean</span></span><br><span class=\"line\"><span class=\"meta\">@ConditionalOnMissingBean(value = EurekaClientConfig.class, search = SearchStrategy.CURRENT)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> EurekaClientConfigBean <span class=\"title function_\">eurekaClientConfigBean</span><span class=\"params\">(ConfigurableEnvironment env)</span> &#123;</span><br><span class=\"line\">\t<span class=\"type\">EurekaClientConfigBean</span> <span class=\"variable\">client</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">EurekaClientConfigBean</span>();</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"string\">&quot;bootstrap&quot;</span>.equals(<span class=\"built_in\">this</span>.env.getProperty(<span class=\"string\">&quot;spring.config.name&quot;</span>))) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 默认情况下，我们不会在引导过程中注册，但是以后会有另一个机会。</span></span><br><span class=\"line\">    client.setRegisterWithEureka(<span class=\"literal\">false</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> client;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>EurekaClientConfigBean 封装的是 eureka client 和 eureka server 交互所需要的配置信息，比如前面demo工程中的 eureka.client.service-url.defaultZone 的配置。</p>\n<h4 id=\"读取-eureka-instance\"><a href=\"#读取-eureka-instance\" class=\"headerlink\" title=\"读取 eureka.instance.*\"></a>读取 eureka.instance.*</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Bean</span></span><br><span class=\"line\"><span class=\"meta\">@ConditionalOnMissingBean(value = EurekaInstanceConfig.class, search = SearchStrategy.CURRENT)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> EurekaInstanceConfigBean <span class=\"title function_\">eurekaInstanceConfigBean</span><span class=\"params\">(InetUtils inetUtils,</span></span><br><span class=\"line\"><span class=\"params\">\tManagementMetadataProvider managementMetadataProvider)</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 代码较长，此处省略</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>EurekaInstanceConfigBean 封装的是 eureka client 自身实例的配置信息，提供服务注册的基本元数据信息。</p>\n<h3 id=\"核心组件-bean-初始化\"><a href=\"#核心组件-bean-初始化\" class=\"headerlink\" title=\"核心组件 bean 初始化\"></a>核心组件 bean 初始化</h3><p>这里也实例化了一些核心的组件bean。</p>\n<h4 id=\"ApplicationInfoManager\"><a href=\"#ApplicationInfoManager\" class=\"headerlink\" title=\"ApplicationInfoManager\"></a>ApplicationInfoManager</h4><ul>\n<li>EurekaClientConfiguration#eurekaApplicationInfoManager</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Bean</span></span><br><span class=\"line\"><span class=\"meta\">@ConditionalOnMissingBean(value = ApplicationInfoManager.class, search = SearchStrategy.CURRENT)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> ApplicationInfoManager <span class=\"title function_\">eurekaApplicationInfoManager</span><span class=\"params\">(</span></span><br><span class=\"line\"><span class=\"params\">EurekaInstanceConfig config)</span> &#123;</span><br><span class=\"line\">  <span class=\"type\">InstanceInfo</span> <span class=\"variable\">instanceInfo</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">InstanceInfoFactory</span>().create(config);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ApplicationInfoManager</span>(config, instanceInfo);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>RefreshableEurekaClientConfiguration#eurekaApplicationInfoManager<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Bean</span></span><br><span class=\"line\"><span class=\"meta\">@ConditionalOnMissingBean(value = ApplicationInfoManager.class, search = SearchStrategy.CURRENT)</span></span><br><span class=\"line\"><span class=\"meta\">@org</span>.springframework.cloud.context.config.annotation.RefreshScope</span><br><span class=\"line\"><span class=\"meta\">@Lazy</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> ApplicationInfoManager <span class=\"title function_\">eurekaApplicationInfoManager</span><span class=\"params\">(EurekaInstanceConfig config)</span> &#123;</span><br><span class=\"line\">  <span class=\"type\">InstanceInfo</span> <span class=\"variable\">instanceInfo</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">InstanceInfoFactory</span>().create(config);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ApplicationInfoManager</span>(config, instanceInfo);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>RefreshScope ，被此注解标注的情况下，将会被动态刷新。包括属性信息等，注意，对于动态刷新，被RefreshScope标记的类不能是final的。</p></blockquote>\n<p>ApplicationInfoManager 是应用信息管理器，用于管理服务实例的信息类 InstanceInfo 和服务实例的配置信息类 EurekaInstanceConfig 。</p>\n<h4 id=\"DiscoveryClient\"><a href=\"#DiscoveryClient\" class=\"headerlink\" title=\"DiscoveryClient\"></a>DiscoveryClient</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Bean</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> DiscoveryClient <span class=\"title function_\">discoveryClient</span><span class=\"params\">(EurekaInstanceConfig config, EurekaClient client)</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">EurekaDiscoveryClient</span>(config, client);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>DiscoveryClient ，前面说到，这个类是Spring Cloud 中用于服务发现使用的客户端接口。注意这里是SpringCloud提供的接口，不是netflix中的类。</p>\n<h4 id=\"EurekaServiceRegistry\"><a href=\"#EurekaServiceRegistry\" class=\"headerlink\" title=\"EurekaServiceRegistry\"></a>EurekaServiceRegistry</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Bean</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> EurekaServiceRegistry <span class=\"title function_\">eurekaServiceRegistry</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">EurekaServiceRegistry</span>();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>EurekaServiceRegistry 是 ServiceRegistry 的实现类。ServiceRegistry 是 SpringCloud 提供了注册和注销等方法，这些方法允许用户提供自定义注册服务。</p>\n<h4 id=\"EurekaRegistration\"><a href=\"#EurekaRegistration\" class=\"headerlink\" title=\"EurekaRegistration\"></a>EurekaRegistration</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Bean</span></span><br><span class=\"line\"><span class=\"meta\">@ConditionalOnBean(AutoServiceRegistrationProperties.class)</span></span><br><span class=\"line\"><span class=\"meta\">@ConditionalOnProperty(value = &quot;spring.cloud.service-registry.auto-registration.enabled&quot;, matchIfMissing = true)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> EurekaRegistration <span class=\"title function_\">eurekaRegistration</span><span class=\"params\">(EurekaClient eurekaClient, CloudEurekaInstanceConfig instanceConfig, ApplicationInfoManager applicationInfoManager, ObjectProvider&lt;HealthCheckHandler&gt; healthCheckHandler)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> EurekaRegistration.builder(instanceConfig)</span><br><span class=\"line\">            .with(applicationInfoManager)</span><br><span class=\"line\">            .with(eurekaClient)</span><br><span class=\"line\">            .with(healthCheckHandler)</span><br><span class=\"line\">            .build();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>每个 ServiceRegistry 实现都有自己的 Registry 实现。</p>\n<ul>\n<li>ZookeeperRegistration -&gt; ZookeeperServiceRegistry</li>\n<li>ZookeeperRegistration -&gt; EurekaServiceRegistry</li>\n<li>ConsulRegistration       -&gt; ConsulServiceRegistry</li>\n</ul>\n<p>如果你需要自定义实现 ServiceRegistry ，则也不要提供一个 Registration  的实现。</p>\n<h2 id=\"服务发现\"><a href=\"#服务发现\" class=\"headerlink\" title=\"服务发现\"></a>服务发现</h2><p>服务发现的基本情况在上面已经提到了，但是由于 SpingCloud 中并没有提供具体的交互操作而是由 com.netflix.discovery.DiscoveryClient 来完成具体工作。所以关于服务服务发现这里就直接围绕这个类来展开。</p>\n<p><img src=\"https://intranetproxy.alipay.com/skylark/lark/0/2018/png/97619/1545987763227-a43b1417-492e-4a33-a19a-1d5aefec0ea1.png#wh=298x167\"></p>\n<h3 id=\"LookopService\"><a href=\"#LookopService\" class=\"headerlink\" title=\"LookopService\"></a>LookopService</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">LookupService</span>&lt;T&gt; &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 根据服务实例注册的appName 来获取 Application</span></span><br><span class=\"line\">    Application <span class=\"title function_\">getApplication</span><span class=\"params\">(String appName)</span>;</span><br><span class=\"line\">    <span class=\"comment\">// 返回当前注册表中所有的服务实例信息</span></span><br><span class=\"line\">    Applications <span class=\"title function_\">getApplications</span><span class=\"params\">()</span>;</span><br><span class=\"line\">    <span class=\"comment\">// 根据服务实例Id获取服务实例信息</span></span><br><span class=\"line\">    List&lt;InstanceInfo&gt; <span class=\"title function_\">getInstancesById</span><span class=\"params\">(String id)</span>;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 获取下一个可能的服务器，以处理来自从eureka接收到的注册表信息的请求。</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@virtualHostname</span> 与服务器关联的虚拟主机名。</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@secure</span> 指示是HTTP还是HTTPS请求</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    InstanceInfo <span class=\"title function_\">getNextServerFromEureka</span><span class=\"params\">(String virtualHostname, <span class=\"type\">boolean</span> secure)</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>LookupService 接口的作用就是用于查找活动服务实例；总共提供了四个方法，很好理解。每个方法的作用见注释。</p>\n<h3 id=\"EurekaClient\"><a href=\"#EurekaClient\" class=\"headerlink\" title=\"EurekaClient\"></a>EurekaClient</h3><p>EurekaClient 也是一个接口，集成并且扩展了 LookupService。</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>This interface does NOT try to clean up the current client interface for eureka 1.x. Rather it tries<br>to provide an easier transition path from eureka 1.x to eureka 2.x.<br>从这来看，EurekaClient 的存在是为了给 Eureka1.x 向 Eureka 2.x 升级提供容错能力。</p></blockquote>\n<p>EurekaClient 在 LookupService 基础上扩展了很多方法，如下：<br /></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">EurekaClient</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">LookupService</span> &#123;</span><br><span class=\"line\">  \t<span class=\"comment\">// 省去@Deprecated方法和获取服务实例信息的接口方法</span></span><br><span class=\"line\">\t\t<span class=\"comment\">// 注册健康检查处理器</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">registerHealthCheck</span><span class=\"params\">(HealthCheckHandler healthCheckHandler)</span>;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 监听client服务信息的更新</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">registerEventListener</span><span class=\"params\">(EurekaEventListener eventListener)</span>;</span><br><span class=\"line\">   \t<span class=\"comment\">// 取消监听</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">unregisterEventListener</span><span class=\"params\">(EurekaEventListener eventListener)</span>;</span><br><span class=\"line\"> \t\t<span class=\"comment\">// 获取当前健康检查处理器</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> HealthCheckHandler <span class=\"title function_\">getHealthCheckHandler</span><span class=\"params\">()</span>;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 关闭 eureka 客户端。还向eureka服务器发送撤销注册请求。</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">shutdown</span><span class=\"params\">()</span>;</span><br><span class=\"line\">  \t<span class=\"comment\">// EurekaClientConfig</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> EurekaClientConfig <span class=\"title function_\">getEurekaClientConfig</span><span class=\"params\">()</span>;</span><br><span class=\"line\"> \t\t<span class=\"comment\">// ApplicationInfoManager</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> ApplicationInfoManager <span class=\"title function_\">getApplicationInfoManager</span><span class=\"params\">()</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>HealthCheckHandler 这个是用于检查当前客户端状态的，这个在后面心跳机制里面会说道。</p>\n<h3 id=\"DiscoveryClient-1\"><a href=\"#DiscoveryClient-1\" class=\"headerlink\" title=\"DiscoveryClient\"></a>DiscoveryClient</h3><p>com.netflix.discovery.DiscoveryClient，这个类会在构造函数中完成一系列重要的操作，如：拉取注册表信息，服务注册，初始化心跳机制，缓存刷新，按需注册定时任务等等。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">DiscoveryClient(ApplicationInfoManager applicationInfoManager, </span><br><span class=\"line\">\t\t\t\t\t\t\t\t EurekaClientConfig config, </span><br><span class=\"line\">                AbstractDiscoveryClientOptionalArgs args,</span><br><span class=\"line\">                Provider&lt;BackupRegistry&gt; backupRegistryProvider) &#123;</span><br><span class=\"line\"><span class=\"comment\">// ... </span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>几个参数的释义如下：</p>\n<ul>\n<li>applicationInfoManager ：应用信息管理器</li>\n<li>config ：client 与 server 交互的配置信息</li>\n<li>args ：客户端提供的过滤器类型(支持jersey1和jersey2)，后面用来构建 EurekaTransport</li>\n<li>backupRegistryProvider ： 备份注册中心</li>\n</ul>\n<h3 id=\"服务发现-1\"><a href=\"#服务发现-1\" class=\"headerlink\" title=\"服务发现\"></a>服务发现</h3><p>下面代码片段也是在 DiscoveryClient 的构造函数里面的，这里就是拉取注册服务信息的逻辑：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (clientConfig.shouldFetchRegistry() &amp;&amp; !fetchRegistry(<span class=\"literal\">false</span>)) &#123;</span><br><span class=\"line\">\tfetchRegistryFromBackup();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>clientConfig.shouldFetchRegistry() 这个方法拿到的就是配置文件中 eureka.client.fetch-registry 的值，默认为true，表示从 eureka server 拉取注册表信息。</p>\n<p>fetchRegistry(boolean)是从 eureka server 拉取注册信息的方法，参数用于表示是否是强制拉取全量的注册信息；此方法除非在协调eureka服务器和客户端注册表信息方面存在问题，否则此方法只尝试在第一次进行全量获取，后面均是增量获取。</p>\n<p>fetchRegistryFromBackup() 如果 eureka server 服务不可用，则采用的备用方案。</p>\n<h4 id=\"底层通信实现-EurekaTransport\"><a href=\"#底层通信实现-EurekaTransport\" class=\"headerlink\" title=\"底层通信实现 EurekaTransport\"></a>底层通信实现 EurekaTransport</h4><p>EurekaTransport 是 DiscoveryClient 的内部类，EurekaTransport 封装了具体的基于 jersey 的底层通信实现。</p>\n<h4 id=\"FetchRegistry\"><a href=\"#FetchRegistry\" class=\"headerlink\" title=\"FetchRegistry\"></a>FetchRegistry</h4><p><img src=\"https://intranetproxy.alipay.com/skylark/lark/0/2018/png/97619/1545996920110-1317ecc6-231e-4184-b534-c2dd9d69b6ba.png#wh=512x383\"></p>\n<p>上图为拉取注册信息的整个过程。对于黄色贴条上的条件，如果满足其中一个，则都会进行全量拉取；否则进行增量拉取。计算 hash 值是为了后面可以与 server 端应用信息的进行对比，用于感知是否需要重新进行拉取操作。</p>\n<h2 id=\"服务注册\"><a href=\"#服务注册\" class=\"headerlink\" title=\"服务注册\"></a>服务注册</h2><p>服务注册逻辑也是在 DiscoveryClient 的构造函数中完成，代码片段如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (clientConfig.shouldRegisterWithEureka() &amp;&amp; clientConfig.shouldEnforceRegistrationAtInit()) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!register() ) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">IllegalStateException</span>(<span class=\"string\">&quot;Registration error at startup. Invalid server response.&quot;</span>);</span><br><span class=\"line\">  \t&#125;</span><br><span class=\"line\">  &#125; <span class=\"keyword\">catch</span> (Throwable th) &#123;</span><br><span class=\"line\">    logger.error(<span class=\"string\">&quot;Registration error at startup: &#123;&#125;&quot;</span>, th.getMessage());</span><br><span class=\"line\">    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">IllegalStateException</span>(th);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>向server端注册需要满足的两个条件是：1、允许向server端注册  2、是否在客户端初始化期间强制注册</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">boolean</span> <span class=\"title function_\">register</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Throwable &#123;</span><br><span class=\"line\">  logger.info(PREFIX + <span class=\"string\">&quot;&#123;&#125;: registering service...&quot;</span>, appPathIdentifier);</span><br><span class=\"line\">  EurekaHttpResponse&lt;Void&gt; httpResponse;</span><br><span class=\"line\">  <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">  \thttpResponse = eurekaTransport.registrationClient.register(instanceInfo);</span><br><span class=\"line\">  &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">    logger.warn(PREFIX + <span class=\"string\">&quot;&#123;&#125; - registration failed &#123;&#125;&quot;</span>, appPathIdentifier, e.getMessage(), e);</span><br><span class=\"line\">    <span class=\"keyword\">throw</span> e;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (logger.isInfoEnabled()) &#123;</span><br><span class=\"line\">  \tlogger.info(PREFIX + <span class=\"string\">&quot;&#123;&#125; - registration status: &#123;&#125;&quot;</span>, appPathIdentifier, httpResponse.getStatusCode());</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> httpResponse.getStatusCode() == <span class=\"number\">204</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>通过 eurekaTransport 对象，基于 REST 调用向 eureka server 进行服务注册。</p>\n<h2 id=\"心跳机制\"><a href=\"#心跳机制\" class=\"headerlink\" title=\"心跳机制\"></a>心跳机制</h2><p>心跳机制的初始化工作也是在 DiscoveryClient 构造函数中完成。在DiscoveryClient构造函数的最后，有一个初始化调度任务的方法，在这个方法里就包括心跳的初始化。</p>\n<p>heartbeatExecutor 心跳线程池：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">heartbeatExecutor = <span class=\"keyword\">new</span> <span class=\"title class_\">ThreadPoolExecutor</span>(</span><br><span class=\"line\">    <span class=\"number\">1</span>, clientConfig.getHeartbeatExecutorThreadPoolSize(), <span class=\"number\">0</span>, TimeUnit.SECONDS,</span><br><span class=\"line\">    <span class=\"keyword\">new</span> <span class=\"title class_\">SynchronousQueue</span>&lt;Runnable&gt;(),</span><br><span class=\"line\">    <span class=\"keyword\">new</span> <span class=\"title class_\">ThreadFactoryBuilder</span>()</span><br><span class=\"line\">            .setNameFormat(<span class=\"string\">&quot;DiscoveryClient-HeartbeatExecutor-%d&quot;</span>)</span><br><span class=\"line\">            .setDaemon(<span class=\"literal\">true</span>)</span><br><span class=\"line\">            .build()</span><br></pre></td></tr></table></figure>\n\n<p>scheduler 提交周期执行：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Heartbeat timer</span></span><br><span class=\"line\">scheduler.schedule(</span><br><span class=\"line\">    <span class=\"keyword\">new</span> <span class=\"title class_\">TimedSupervisorTask</span>(</span><br><span class=\"line\">    <span class=\"string\">&quot;heartbeat&quot;</span>,</span><br><span class=\"line\">    scheduler,</span><br><span class=\"line\">    heartbeatExecutor,</span><br><span class=\"line\">    renewalIntervalInSecs,</span><br><span class=\"line\">    TimeUnit.SECONDS,</span><br><span class=\"line\">    expBackOffBound,</span><br><span class=\"line\">    <span class=\"keyword\">new</span> <span class=\"title class_\">HeartbeatThread</span>()</span><br><span class=\"line\">    ),renewalIntervalInSecs, TimeUnit.SECONDS);</span><br></pre></td></tr></table></figure>\n\n<p>TimedSupervisorTask 是 eureka 中自动调节间隔的周期性任务类。HeartbeatThread 是具体执行任何的线程，run方法中执行的就是 renew() 续期。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">boolean</span> <span class=\"title function_\">renew</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">  EurekaHttpResponse&lt;InstanceInfo&gt; httpResponse;</span><br><span class=\"line\">  <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 通过 eurekaTransport 来与 server 通信续期</span></span><br><span class=\"line\">    httpResponse = eurekaTransport.registrationClient.sendHeartBeat(instanceInfo.getAppName(), instanceInfo.getId(), instanceInfo, <span class=\"literal\">null</span>);</span><br><span class=\"line\">    logger.debug(PREFIX + <span class=\"string\">&quot;&#123;&#125; - Heartbeat status: &#123;&#125;&quot;</span>, appPathIdentifier, httpResponse.getStatusCode());</span><br><span class=\"line\">    <span class=\"comment\">// 404 标识当前服务实例不存在</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (httpResponse.getStatusCode() == <span class=\"number\">404</span>) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 记录心跳次数</span></span><br><span class=\"line\">      REREGISTER_COUNTER.increment();</span><br><span class=\"line\">      logger.info(PREFIX + <span class=\"string\">&quot;&#123;&#125; - Re-registering apps/&#123;&#125;&quot;</span>, appPathIdentifier, instanceInfo.getAppName());</span><br><span class=\"line\">      <span class=\"type\">long</span> <span class=\"variable\">timestamp</span> <span class=\"operator\">=</span> instanceInfo.setIsDirtyWithTime();</span><br><span class=\"line\">      <span class=\"comment\">// 重新注册</span></span><br><span class=\"line\">      <span class=\"type\">boolean</span> <span class=\"variable\">success</span> <span class=\"operator\">=</span> register();</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (success) &#123;</span><br><span class=\"line\">      \tinstanceInfo.unsetIsDirty(timestamp);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    \t<span class=\"keyword\">return</span> success;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 200 状态正常</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> httpResponse.getStatusCode() == <span class=\"number\">200</span>;</span><br><span class=\"line\">  &#125; <span class=\"keyword\">catch</span> (Throwable e) &#123;</span><br><span class=\"line\">    logger.error(PREFIX + <span class=\"string\">&quot;&#123;&#125; - was unable to send heartbeat!&quot;</span>, appPathIdentifier, e);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"服务下线\"><a href=\"#服务下线\" class=\"headerlink\" title=\"服务下线\"></a>服务下线</h2><p>关闭 eureka client，还向 eureka server 发送撤销注册请求。该方法在DiscoveryClient#shutdown 方法中。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@PreDestroy</span></span><br><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">void</span> <span class=\"title function_\">shutdown</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 保证原子操作</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (isShutdown.compareAndSet(<span class=\"literal\">false</span>, <span class=\"literal\">true</span>)) &#123;</span><br><span class=\"line\">        logger.info(<span class=\"string\">&quot;Shutting down DiscoveryClient ...&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (statusChangeListener != <span class=\"literal\">null</span> &amp;&amp; applicationInfoManager != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 应用管理器取消状态监听</span></span><br><span class=\"line\">            applicationInfoManager.unregisterStatusChangeListener(statusChangeListener.getId());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 清理任务调度执行</span></span><br><span class=\"line\">        cancelScheduledTasks();</span><br><span class=\"line\">        <span class=\"comment\">// If APPINFO was registered</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (applicationInfoManager != <span class=\"literal\">null</span></span><br><span class=\"line\">                &amp;&amp; clientConfig.shouldRegisterWithEureka()</span><br><span class=\"line\">                &amp;&amp; clientConfig.shouldUnregisterOnShutdown()) &#123;</span><br><span class=\"line\">            <span class=\"comment\">//设置服务实例状态为 DOWN</span></span><br><span class=\"line\">            applicationInfoManager.setInstanceStatus(InstanceStatus.DOWN);</span><br><span class=\"line\">            <span class=\"comment\">//注销注册</span></span><br><span class=\"line\">            unregister();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">                    <span class=\"comment\">// 关闭 jersey 客户端</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (eurekaTransport != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            eurekaTransport.shutdown();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        heartbeatStalenessMonitor.shutdown();</span><br><span class=\"line\">        registryStalenessMonitor.shutdown();</span><br><span class=\"line\">        logger.info(<span class=\"string\">&quot;Completed shut down of DiscoveryClient&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><ul>\n<li>《SpringCloud 微服务架构进阶》</li>\n</ul>\n","text":" 原文： https://blog.csdn.net/sinat_25518349/article/details/85423398 前面一些 demo 中已经...","permalink":"/post/springcloud/spring-cloud-eureka-client-analysis","photos":[],"count_time":{"symbolsCount":"14k","symbolsTime":"13 mins."},"categories":[{"name":"SpringCloud","slug":"SpringCloud","count":14,"path":"api/categories/SpringCloud.json"}],"tags":[{"name":"eureka","slug":"eureka","count":5,"path":"api/tags/eureka.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Netflix-%E5%92%8C-SpringCloud\"><span class=\"toc-text\">Netflix 和 SpringCloud</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Spring-Cloud-Netflix-Eureka-%E6%9C%8D%E5%8A%A1%E5%8F%91%E7%8E%B0%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86\"><span class=\"toc-text\">Spring Cloud Netflix Eureka 服务发现实现原理</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#DiscoveryClient-%E6%8E%A5%E5%8F%A3\"><span class=\"toc-text\">DiscoveryClient 接口</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#EnableDiscoveryClient-%E6%B3%A8%E8%A7%A3\"><span class=\"toc-text\">@EnableDiscoveryClient 注解</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Eureka-%E6%9E%B6%E6%9E%84%E5%9B%BE\"><span class=\"toc-text\">Eureka 架构图</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90\"><span class=\"toc-text\">源码解析</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E9%85%8D%E7%BD%AE%E4%BF%A1%E6%81%AF%E8%AF%BB%E5%8F%96\"><span class=\"toc-text\">配置信息读取</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E8%AF%BB%E5%8F%96-eureka-client\"><span class=\"toc-text\">读取 eureka.client.*</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E8%AF%BB%E5%8F%96-eureka-instance\"><span class=\"toc-text\">读取 eureka.instance.*</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%A0%B8%E5%BF%83%E7%BB%84%E4%BB%B6-bean-%E5%88%9D%E5%A7%8B%E5%8C%96\"><span class=\"toc-text\">核心组件 bean 初始化</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#ApplicationInfoManager\"><span class=\"toc-text\">ApplicationInfoManager</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#DiscoveryClient\"><span class=\"toc-text\">DiscoveryClient</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#EurekaServiceRegistry\"><span class=\"toc-text\">EurekaServiceRegistry</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#EurekaRegistration\"><span class=\"toc-text\">EurekaRegistration</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%9C%8D%E5%8A%A1%E5%8F%91%E7%8E%B0\"><span class=\"toc-text\">服务发现</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#LookopService\"><span class=\"toc-text\">LookopService</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#EurekaClient\"><span class=\"toc-text\">EurekaClient</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#DiscoveryClient-1\"><span class=\"toc-text\">DiscoveryClient</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%9C%8D%E5%8A%A1%E5%8F%91%E7%8E%B0-1\"><span class=\"toc-text\">服务发现</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%BA%95%E5%B1%82%E9%80%9A%E4%BF%A1%E5%AE%9E%E7%8E%B0-EurekaTransport\"><span class=\"toc-text\">底层通信实现 EurekaTransport</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#FetchRegistry\"><span class=\"toc-text\">FetchRegistry</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%9C%8D%E5%8A%A1%E6%B3%A8%E5%86%8C\"><span class=\"toc-text\">服务注册</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%BF%83%E8%B7%B3%E6%9C%BA%E5%88%B6\"><span class=\"toc-text\">心跳机制</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%9C%8D%E5%8A%A1%E4%B8%8B%E7%BA%BF\"><span class=\"toc-text\">服务下线</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%8F%82%E8%80%83\"><span class=\"toc-text\">参考</span></a></li></ol>","author":{"name":"glmapper","slug":"blog-author","avatar":"https://glmapper-blog.oss-cn-hangzhou.aliyuncs.com/common/favicon.ico","link":"/","description":"开放，开源，分享，共享","socials":{"github":"https://github.com/glmapper","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/2412872703","zhihu":"","csdn":"","juejin":"https://juejin.cn/user/3227821827961806","customs":{"sofastack":{"icon":"https://glmapper-blog.oss-cn-hangzhou.aliyuncs.com/common/sofastack.svg","link":"https://www.sofastack.tech/"}}}},"mapped":true,"hidden":false,"prev_post":{"title":"SpringCloud-配置中心 Config Github","uid":"8dde0e1ef80128bea4c1d65d0e4f86c2","slug":"springcloud/spring-cloud-config-github","date":"2018-12-31T15:11:08.000Z","updated":"2024-07-05T04:09:05.836Z","comments":true,"path":"api/articles/springcloud/spring-cloud-config-github.json","keywords":null,"cover":null,"text":"在分布式系统中，每一个功能模块都能拆分成一个独立的服务，一次请求的完成，可能会调用很多个服务协调来完成，为了方便服务配置文件统一管理，更易于部署、维护，所以就需...","permalink":"/post/springcloud/spring-cloud-config-github","photos":[],"count_time":{"symbolsCount":"6.9k","symbolsTime":"6 mins."},"categories":[{"name":"SpringCloud","slug":"SpringCloud","count":14,"path":"api/categories/SpringCloud.json"}],"tags":[{"name":"config","slug":"config","count":6,"path":"api/tags/config.json"},{"name":"github","slug":"github","count":1,"path":"api/tags/github.json"}],"author":{"name":"glmapper","slug":"blog-author","avatar":"https://glmapper-blog.oss-cn-hangzhou.aliyuncs.com/common/favicon.ico","link":"/","description":"开放，开源，分享，共享","socials":{"github":"https://github.com/glmapper","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/2412872703","zhihu":"","csdn":"","juejin":"https://juejin.cn/user/3227821827961806","customs":{"sofastack":{"icon":"https://glmapper-blog.oss-cn-hangzhou.aliyuncs.com/common/sofastack.svg","link":"https://www.sofastack.tech/"}}}}},"next_post":{"title":"SpringCloud-Eureka 服务发现","uid":"f85e030cf230f0e9651658c347d1ad1b","slug":"springcloud/spring-cloud-eureka-discovery-project","date":"2018-12-31T14:48:17.000Z","updated":"2024-07-05T04:09:05.837Z","comments":true,"path":"api/articles/springcloud/spring-cloud-eureka-discovery-project.json","keywords":null,"cover":[],"text":"本篇将继续接着上一篇 SpringCloud-服务注册 ，通过使用 DiscoveryClient 来实现服务发现，并且消费。 DiscoveryClient ...","permalink":"/post/springcloud/spring-cloud-eureka-discovery-project","photos":[],"count_time":{"symbolsCount":"3.2k","symbolsTime":"3 mins."},"categories":[{"name":"SpringCloud","slug":"SpringCloud","count":14,"path":"api/categories/SpringCloud.json"}],"tags":[{"name":"eureka","slug":"eureka","count":5,"path":"api/tags/eureka.json"}],"author":{"name":"glmapper","slug":"blog-author","avatar":"https://glmapper-blog.oss-cn-hangzhou.aliyuncs.com/common/favicon.ico","link":"/","description":"开放，开源，分享，共享","socials":{"github":"https://github.com/glmapper","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/2412872703","zhihu":"","csdn":"","juejin":"https://juejin.cn/user/3227821827961806","customs":{"sofastack":{"icon":"https://glmapper-blog.oss-cn-hangzhou.aliyuncs.com/common/sofastack.svg","link":"https://www.sofastack.tech/"}}}}}}