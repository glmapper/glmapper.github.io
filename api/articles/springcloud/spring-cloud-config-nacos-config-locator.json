{"title":"Spring Cloud Alibaba Nacos Config 是如何读取配置的？","uid":"e7fa060367ba032c738d6cb91dbbf7a2","slug":"springcloud/spring-cloud-config-nacos-config-locator","date":"2022-03-13T03:45:39.000Z","updated":"2024-07-05T04:09:05.836Z","comments":true,"path":"api/articles/springcloud/spring-cloud-config-nacos-config-locator.json","keywords":null,"cover":[],"content":"<p>nacos 配置最高级别的隔离是 namespace，其后是 group；如果有配置隔离的诉求，建议优先使用 namespace 进行隔离。因为对于 sharedConfigs 和 extensionConfigs 来说，他们使用的是默认的 DEFALUT_GROUP，所以如果你配置了 sharedConfigs 和 extensionConfigs ，期望通过指定 group 进行隔离是做不到的。</p>\n<span id=\"more\"></span>\n\n<p>本文主要分析 Spring Cloud Alibaba Nacos 配置客户端读取配置的部分过程，逻辑入口是 <code>com.alibaba.cloud.nacos.client.NacosPropertySourceLocator#locate</code>；通过本篇，</p>\n<ul>\n<li>1、了解到 sharedConfigs、extensionConfigs 如何加载</li>\n<li>2、应用配置加载时，dataId 的计算逻辑</li>\n<li>3、如何通过 group 和 namespace 来隔离配置</li>\n<li>4、如何禁用默认的 DEFAULT_GROUP</li>\n</ul>\n<h2 id=\"加载顺序和-sharedConfigs、extensionConfigs-加载逻辑\"><a href=\"#加载顺序和-sharedConfigs、extensionConfigs-加载逻辑\" class=\"headerlink\" title=\"加载顺序和 sharedConfigs、extensionConfigs 加载逻辑\"></a>加载顺序和 sharedConfigs、extensionConfigs 加载逻辑</h2><p>这里的配置主要指的是 sharedConfigs、extensionConfigs 以及用户通过 namespace+group+dataId 指定的应用配置。</p>\n<h3 id=\"加载顺序\"><a href=\"#加载顺序\" class=\"headerlink\" title=\"加载顺序\"></a>加载顺序</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 配置临时存档的地方</span></span><br><span class=\"line\"><span class=\"type\">CompositePropertySource</span> <span class=\"variable\">composite</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">CompositePropertySource</span>(</span><br><span class=\"line\">      NACOS_PROPERTY_SOURCE_NAME);</span><br><span class=\"line\"><span class=\"comment\">// 1、先加载 sharedConfigs</span></span><br><span class=\"line\">loadSharedConfiguration(composite);‘</span><br><span class=\"line\"><span class=\"comment\">// 2、接着加载 extensionConfigs</span></span><br><span class=\"line\">loadExtConfiguration(composite);</span><br><span class=\"line\"><span class=\"comment\">// 最后加载指定的应用配置</span></span><br><span class=\"line\">loadApplicationConfiguration(composite, dataIdPrefix, nacosConfigProperties, env);</span><br></pre></td></tr></table></figure>\n\n<p>这里除了需要关注顺序之后，还有一点非常重要，就是对于 sharedConfigs、extensionConfigs 两个指定的配置，他们不依赖用户指定的 group，而是使用默认的 DEFAULT_GROUP，下面来看。</p>\n<h3 id=\"sharedConfigs-加载逻辑\"><a href=\"#sharedConfigs-加载逻辑\" class=\"headerlink\" title=\"sharedConfigs 加载逻辑\"></a>sharedConfigs 加载逻辑</h3><p>先通过代码大概理解下逻辑</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title function_\">loadSharedConfiguration</span><span class=\"params\">(</span></span><br><span class=\"line\"><span class=\"params\">      CompositePropertySource compositePropertySource)</span> &#123;</span><br><span class=\"line\">   <span class=\"comment\">// 通过配置获取 sharedConfigs 列表</span></span><br><span class=\"line\">   List&lt;NacosConfigProperties.Config&gt; sharedConfigs = nacosConfigProperties</span><br><span class=\"line\">         .getSharedConfigs();</span><br><span class=\"line\">   <span class=\"comment\">// 如果没有配置，则啥都不做</span></span><br><span class=\"line\">   <span class=\"keyword\">if</span> (!CollectionUtils.isEmpty(sharedConfigs)) &#123;</span><br><span class=\"line\">      checkConfiguration(sharedConfigs, <span class=\"string\">&quot;shared-configs&quot;</span>);</span><br><span class=\"line\">      loadNacosConfiguration(compositePropertySource, sharedConfigs);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>假设我通过 sharedConfigs 指定的配置如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">spring.cloud.nacos.config.shared-configs=</span><br><span class=\"line\">application.yaml,</span><br><span class=\"line\">application.properties,</span><br><span class=\"line\">application-staging.yaml,</span><br><span class=\"line\">application-staging.properties,</span><br><span class=\"line\">application-CN.properties,</span><br><span class=\"line\">application-staging_CN2.properties</span><br></pre></td></tr></table></figure>\n<p>通过 debug 面板看到，对于指定的 sharedConfigs，全部都挂在 DEFALUT_GROUP 下。</p>\n<p><img src=\"https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/5c89283e7ba2433286ce265fdccd40b7~tplv-k3u1fbpfcp-watermark.image\" alt=\"image-20220303212133294.png\"></p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>不管是 sharedConfigs 还是 extensionConfigs，抑或是用户指定 group 的配置，nacos 在读取配置时，都是优先从本地开始读，如果本地没有，才从远端配置服务端去读取。</p></blockquote>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>spring.cloud.nacos.config.extension-config 配置加载和 sharedConfigs 基本一致，这里不展开介绍。</p></blockquote>\n<h2 id=\"应用配置加载逻辑中的-dataId-计算\"><a href=\"#应用配置加载逻辑中的-dataId-计算\" class=\"headerlink\" title=\"应用配置加载逻辑中的 dataId 计算\"></a>应用配置加载逻辑中的 dataId 计算</h2><p>这里主要指的是加载用户指定的 group 情况下的应用配置加载，还是先通过代码看下基本逻辑：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title function_\">loadApplicationConfiguration</span><span class=\"params\">(</span></span><br><span class=\"line\"><span class=\"params\">      CompositePropertySource compositePropertySource, String dataIdPrefix,</span></span><br><span class=\"line\"><span class=\"params\">      NacosConfigProperties properties, Environment environment)</span> &#123;</span><br><span class=\"line\">   <span class=\"comment\">// 先获取文件的后缀名，比如 yml ，properties </span></span><br><span class=\"line\">   <span class=\"type\">String</span> <span class=\"variable\">fileExtension</span> <span class=\"operator\">=</span> properties.getFileExtension();</span><br><span class=\"line\">   <span class=\"comment\">// 获取 group</span></span><br><span class=\"line\">   <span class=\"type\">String</span> <span class=\"variable\">nacosGroup</span> <span class=\"operator\">=</span> properties.getGroup();</span><br><span class=\"line\">   <span class=\"comment\">// load directly once by default</span></span><br><span class=\"line\">   loadNacosDataIfPresent(compositePropertySource, dataIdPrefix, nacosGroup,</span><br><span class=\"line\">         fileExtension, <span class=\"literal\">true</span>);</span><br><span class=\"line\">   <span class=\"comment\">// load with suffix, which have a higher priority than the default</span></span><br><span class=\"line\">   loadNacosDataIfPresent(compositePropertySource,</span><br><span class=\"line\">         dataIdPrefix + DOT + fileExtension, nacosGroup, fileExtension, <span class=\"literal\">true</span>);</span><br><span class=\"line\">   <span class=\"comment\">// Loaded with profile, which have a higher priority than the suffix</span></span><br><span class=\"line\">   <span class=\"keyword\">for</span> (String profile : environment.getActiveProfiles()) &#123;</span><br><span class=\"line\">      <span class=\"type\">String</span> <span class=\"variable\">dataId</span> <span class=\"operator\">=</span> dataIdPrefix + SEP1 + profile + DOT + fileExtension;</span><br><span class=\"line\">      loadNacosDataIfPresent(compositePropertySource, dataId, nacosGroup,</span><br><span class=\"line\">            fileExtension, <span class=\"literal\">true</span>);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>上面代码片段中，加载配置有三种，第一是直接加载，这里的 dataId 使用的是 dataIdPrefix；第二是通过指定后缀加载；最后是通过 指定的 profile 加载。假设 spring.application.name 为 login-service，fileExtension 是 yaml， profile 为 staging，test，下面看下 dataId 的计算。</p>\n<h3 id=\"直接加载\"><a href=\"#直接加载\" class=\"headerlink\" title=\"直接加载\"></a>直接加载</h3><p>第一部分是加载默认的，这里的默认指的是 dataId 为 dataIdPrefix，dataIdPrefix 可以通过 spring.cloud.nacos.config.prefix 配置，如果没有配置，则使用的是 spring.application.name；这里去加载时，会有从本地文件先加载的逻辑，以这种情况为例，Mac 下本地路径为：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> /Users/xxx/nacos/config/xxx/data/config-data-tenant/&#123;namespace&#125;/&#123;group&#125;/&#123;dataId&#125;</span><br></pre></td></tr></table></figure>\n\n<p>如果本地没有，那就根据 namespace, group 和 dataId 去 nacos 服务端去获取，在直接加载这部分。</p>\n<h3 id=\"使用指定的-suffix-加载\"><a href=\"#使用指定的-suffix-加载\" class=\"headerlink\" title=\"使用指定的 suffix 加载\"></a>使用指定的 suffix 加载</h3><p>ns 和 group 都没变，但是 dataId 变成了 <code>dataIdPrefix + DOT + fileExtension</code>，所以 dataId 就变成了 login-service.yaml，其他加载逻辑和第一部分保持一致。</p>\n<h3 id=\"使用指定的-profile\"><a href=\"#使用指定的-profile\" class=\"headerlink\" title=\"使用指定的 profile\"></a>使用指定的 profile</h3><p>从代码可以看到，如果指定了多个 profile，则会遍历所有 profile 然后拼接 dataId；这里 dataId 的计算逻辑是 <code>dataIdPrefix + SEP1 + profile + DOT + fileExtension</code>；比如 dataIdPrefix 是 login-service，profile 是 staging，fileExtension 是 yaml，那么得到的 dataId 就是 login-service-staging.yaml，然后在根据 ns、group 和这个计算出来的 dataId 去 nacos 服务端拉去配置，其他逻辑和前面加载配置逻辑一致。</p>\n<h2 id=\"配置加载过程\"><a href=\"#配置加载过程\" class=\"headerlink\" title=\"配置加载过程\"></a>配置加载过程</h2><p>1、优先使用本地配，代码逻辑在 </p>\n<p><code>com.alibaba.nacos.client.config.NacosConfigService#getConfigInner</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 优先使用本地配置</span></span><br><span class=\"line\"><span class=\"type\">String</span> <span class=\"variable\">content</span> <span class=\"operator\">=</span> LocalConfigInfoProcessor.getFailover(agent.getName(), dataId, group, tenant);</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/ec26b09129804549ae27e73cdfa15b2a~tplv-k3u1fbpfcp-watermark.image\" alt=\"image.png\"></p>\n<p>2、配置资源定位</p>\n<p>配置资源定位通过三个参数 namespace + group + dataId 来确定</p>\n<p><img src=\"https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/f421c44abf0746ed8d347b28afd6fc84~tplv-k3u1fbpfcp-watermark.image\" alt=\"image-20220303213229747.png\"></p>\n<p>从远端拉去之后，会优先创建本地快照，便于下次加载时能够优先从本地加载到</p>\n<p>3、文件格式解析<br>上一步拿到的data，原始数据是字符串类型，然后会根据配置的后缀名，来匹配一个 loader 解析器，nacos 中提供了 4 种类型的解析器</p>\n<p><img src=\"https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/0c07bdb85e47402e9b0bef68e1f6751c~tplv-k3u1fbpfcp-watermark.image\" alt=\"image-20220303213733933.png\"></p>\n<p>通过解析器将 string 类型的数据进行处理，然后放到 propertySource，这些 propertySource 会被放在 NACOS_PROPERTY_SOURCE_REPOSITORY 这个 ma p 结构中，ke y 为 <code>dataId,group</code></p>\n<p><img src=\"https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/090604155d7e4be59ef23542cb56f6a2~tplv-k3u1fbpfcp-watermark.image\" alt=\"image-20220303214150471.png\"></p>\n<h2 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h2><p>nacos 配置最高级别的隔离是 namespace，其后是 group；如果有配置隔离的诉求，建议优先使用 namespace 进行隔离。因为对于 sharedConfigs 和 extensionConfigs 来说，他们使用的是默认的 DEFALUT_GROUP，所以如果你配置了 sharedConfigs 和 extensionConfigs ，期望通过指定 group 进行隔离是做不到的。</p>\n","text":"nacos 配置最高级别的隔离是 namespace，其后是 group；如果有配置隔离的诉求，建议优先使用 namespace 进行隔离。因为对于 share...","permalink":"/post/springcloud/spring-cloud-config-nacos-config-locator","photos":[],"count_time":{"symbolsCount":"4.8k","symbolsTime":"4 mins."},"categories":[{"name":"SpringCloud","slug":"SpringCloud","count":14,"path":"api/categories/SpringCloud.json"}],"tags":[{"name":"nacos","slug":"nacos","count":2,"path":"api/tags/nacos.json"},{"name":"config","slug":"config","count":6,"path":"api/tags/config.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%8A%A0%E8%BD%BD%E9%A1%BA%E5%BA%8F%E5%92%8C-sharedConfigs%E3%80%81extensionConfigs-%E5%8A%A0%E8%BD%BD%E9%80%BB%E8%BE%91\"><span class=\"toc-text\">加载顺序和 sharedConfigs、extensionConfigs 加载逻辑</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%8A%A0%E8%BD%BD%E9%A1%BA%E5%BA%8F\"><span class=\"toc-text\">加载顺序</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#sharedConfigs-%E5%8A%A0%E8%BD%BD%E9%80%BB%E8%BE%91\"><span class=\"toc-text\">sharedConfigs 加载逻辑</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%BA%94%E7%94%A8%E9%85%8D%E7%BD%AE%E5%8A%A0%E8%BD%BD%E9%80%BB%E8%BE%91%E4%B8%AD%E7%9A%84-dataId-%E8%AE%A1%E7%AE%97\"><span class=\"toc-text\">应用配置加载逻辑中的 dataId 计算</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%9B%B4%E6%8E%A5%E5%8A%A0%E8%BD%BD\"><span class=\"toc-text\">直接加载</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%BD%BF%E7%94%A8%E6%8C%87%E5%AE%9A%E7%9A%84-suffix-%E5%8A%A0%E8%BD%BD\"><span class=\"toc-text\">使用指定的 suffix 加载</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%BD%BF%E7%94%A8%E6%8C%87%E5%AE%9A%E7%9A%84-profile\"><span class=\"toc-text\">使用指定的 profile</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E9%85%8D%E7%BD%AE%E5%8A%A0%E8%BD%BD%E8%BF%87%E7%A8%8B\"><span class=\"toc-text\">配置加载过程</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%B0%8F%E7%BB%93\"><span class=\"toc-text\">小结</span></a></li></ol>","author":{"name":"glmapper","slug":"blog-author","avatar":"https://glmapper-blog.oss-cn-hangzhou.aliyuncs.com/common/favicon.ico","link":"/","description":"开放，开源，分享，共享","socials":{"github":"https://github.com/glmapper","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/2412872703","zhihu":"","csdn":"","juejin":"https://juejin.cn/user/3227821827961806","customs":{"sofastack":{"icon":"https://glmapper-blog.oss-cn-hangzhou.aliyuncs.com/common/sofastack.svg","link":"https://www.sofastack.tech/"}}}},"mapped":true,"hidden":false,"prev_post":{"title":"Spring Cloud Config Nacos 配置热更新分析","uid":"c77c046c2db83a536f549d9b602a59f0","slug":"config/spring-cloud-config-nacos","date":"2022-04-17T14:05:36.000Z","updated":"2024-07-05T04:09:05.748Z","comments":true,"path":"api/articles/config/spring-cloud-config-nacos.json","keywords":null,"cover":[],"text":" ","permalink":"/post/config/spring-cloud-config-nacos","photos":[],"count_time":{"symbolsCount":1,"symbolsTime":"1 mins."},"categories":[{"name":"Nacos","slug":"Nacos","count":1,"path":"api/categories/Nacos.json"}],"tags":[{"name":"spring","slug":"spring","count":11,"path":"api/tags/spring.json"},{"name":"spring cloud","slug":"spring-cloud","count":1,"path":"api/tags/spring-cloud.json"},{"name":"nacos","slug":"nacos","count":2,"path":"api/tags/nacos.json"}],"author":{"name":"glmapper","slug":"blog-author","avatar":"https://glmapper-blog.oss-cn-hangzhou.aliyuncs.com/common/favicon.ico","link":"/","description":"开放，开源，分享，共享","socials":{"github":"https://github.com/glmapper","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/2412872703","zhihu":"","csdn":"","juejin":"https://juejin.cn/user/3227821827961806","customs":{"sofastack":{"icon":"https://glmapper-blog.oss-cn-hangzhou.aliyuncs.com/common/sofastack.svg","link":"https://www.sofastack.tech/"}}}}},"next_post":{"title":"1 分钟快速上手 Spring Cache","uid":"e9b917f0ab2ca1b9d25a2dd79ca6610e","slug":"spring/spring-cache-quick-start","date":"2022-02-21T03:43:24.000Z","updated":"2024-07-05T04:09:05.815Z","comments":true,"path":"api/articles/spring/spring-cache-quick-start.json","keywords":null,"cover":[],"text":"如果你现在有一个现成的工程，你想给你工程的某个接口增加缓存，再不可以分布式缓存的情况下，你可以通过以下两步完成 Spring Cache 接入: 1、引用依赖 ...","permalink":"/post/spring/spring-cache-quick-start","photos":[],"count_time":{"symbolsCount":"14k","symbolsTime":"13 mins."},"categories":[{"name":"spring","slug":"spring","count":15,"path":"api/categories/spring.json"}],"tags":[{"name":"spring","slug":"spring","count":11,"path":"api/tags/spring.json"},{"name":"cache","slug":"cache","count":2,"path":"api/tags/cache.json"}],"author":{"name":"glmapper","slug":"blog-author","avatar":"https://glmapper-blog.oss-cn-hangzhou.aliyuncs.com/common/favicon.ico","link":"/","description":"开放，开源，分享，共享","socials":{"github":"https://github.com/glmapper","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/2412872703","zhihu":"","csdn":"","juejin":"https://juejin.cn/user/3227821827961806","customs":{"sofastack":{"icon":"https://glmapper-blog.oss-cn-hangzhou.aliyuncs.com/common/sofastack.svg","link":"https://www.sofastack.tech/"}}}}}}