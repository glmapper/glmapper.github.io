{"title":"SpringCloud-负载均衡器 Ribbon","uid":"76e31334599a8ccc9ba49abb2e09bda4","slug":"springcloud/spring-cloud-ribbon-project","date":"2018-12-31T14:47:01.000Z","updated":"2024-07-05T04:09:05.839Z","comments":true,"path":"api/articles/springcloud/spring-cloud-ribbon-project.json","keywords":"宋国磊, glmapper, 卫恒, 分享, 开源","cover":[],"content":"<p>上一篇 <a href=\"/2018/12/31/springcloud/spring-cloud-feign-project/\">SpringCloud-声明式服务调用 Feign</a> 中介绍了如何使用 Feign 来完成服务调用。因为 Feign 本身已经集成了 Ribbon ，所以也具有负载均衡的能力。那么本篇将使用 RestTemplate + Ribbon 来实现服务调用和负载均衡策略。</p>\n<span id=\"more\"></span>\n\n<h2 id=\"Ribbon-简介\"><a href=\"#Ribbon-简介\" class=\"headerlink\" title=\"Ribbon 简介\"></a>Ribbon 简介</h2><p>Ribbon 是管理HTTP和TCP服务客户端的负载均衡器。Ribbon 具有一些列带有名称的客户端，也就是带有名称的Ribbon 客户端。每个客户端由可配置的组件构成，负责一类服务的调用请求。Spring Cloud 通过RibbonClientConfiguration 为每个Ribbon 客户端创建一个ApplicationContext 上下文来进行组件装配。Ribbon 作为 Spring Cloud的负载均衡机制的实现，可以与OpenFeign 和 RestTemplate 进行无缝集成，让二者也具有负载均衡的能力。</p>\n<h3 id=\"负载均衡策略\"><a href=\"#负载均衡策略\" class=\"headerlink\" title=\"负载均衡策略\"></a>负载均衡策略</h3><table>\n<thead>\n<tr>\n<th><strong>策略类</strong><br /></th>\n<th><strong>命名</strong><br /></th>\n<th>备注<br /></th>\n</tr>\n</thead>\n<tbody><tr>\n<td>RoundRobinRule<br /></td>\n<td>轮训策略<br /></td>\n<td>按顺序循环选择 Server<br /></td>\n</tr>\n<tr>\n<td>RandomRule<br /></td>\n<td>随机策略<br /></td>\n<td>随机选择 Server<br /></td>\n</tr>\n<tr>\n<td>RetryRule<br /></td>\n<td>重试策略<br /></td>\n<td>在一个配置时问段内当选择 Server 不成功，则一直尝试选择一个可用的 Server<br /></td>\n</tr>\n<tr>\n<td>BestAvailableRule<br /></td>\n<td>最低并发策略<br /></td>\n<td>逐个考察 Server，如果 Server 断路器打开，则忽略，再选择其中并发连接最低的 Server    <br /></td>\n</tr>\n<tr>\n<td>AvailabilityFilteringRule<br /></td>\n<td>可用过滤策略<br /></td>\n<td>过滤掉一直连接失败并被标记为 <code>circuit tripped</code> 的 Server，过滤掉那些高并发连接的 Server（active connections 超过配置的网值）<br /></td>\n</tr>\n<tr>\n<td>ResponseTimeWeightedRule<br /></td>\n<td>响应时间加权策略<br /></td>\n<td>根据 Server 的响应时间分配权重。响应时间越长，权重越低，被选择到的概率就越低；响应时间越短，权重越高，被选择到的概率就越高。这个策略很贴切，综合了各种因素，如：网络、磁盘、IO等，这些因素直接影响着响应时间<br /></td>\n</tr>\n<tr>\n<td>ZoneAvoidanceRule<br /></td>\n<td>区域权衡策略<br /></td>\n<td>综合判断 Server 所在区域的性能和 Server 的可用性轮询选择 Server，并且判定一个 AWS Zone 的运行性能是否可用，剔除不可用的 Zone 中的所有 Server<br /></td>\n</tr>\n</tbody></table>\n<h2 id=\"环境准备\"><a href=\"#环境准备\" class=\"headerlink\" title=\"环境准备\"></a>环境准备</h2><table>\n<thead>\n<tr>\n<th>类别</th>\n<th>值</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>JDK<br /></td>\n<td>1.8.0_162<br /></td>\n</tr>\n<tr>\n<td>SOFABoot&#x2F;SpringBoot<br /></td>\n<td><a href=\"https://github.com/alipay/sofa-boot/releases/tag/v3.0.0\">3.0.0</a>&#x2F;2.0.x.RELEASE<br /></td>\n</tr>\n<tr>\n<td>SpringCloud<br /></td>\n<td>Finchley.RC1<br /></td>\n</tr>\n<tr>\n<td>IDE<br /></td>\n<td>IDEA<br /></td>\n</tr>\n</tbody></table>\n<h2 id=\"工程背景\"><a href=\"#工程背景\" class=\"headerlink\" title=\"工程背景\"></a>工程背景</h2><p>本节将会创建一个 sofa-eureka-consumer-Ribbon 工程，通过 Spring Cloud 提供的负载均衡器 Ribbon 实现服务的负载均衡，并对 Ribbon 中的负载均衡策略进行验证。</p>\n<h2 id=\"新建-sofa-eureka-consumer-ribbon\"><a href=\"#新建-sofa-eureka-consumer-ribbon\" class=\"headerlink\" title=\"新建 sofa-eureka-consumer-ribbon\"></a>新建 sofa-eureka-consumer-ribbon</h2><p>本工程继续使用《SpringCloud-Eureka 服务注册》中的父工程来构建。</p>\n<p>右击 sofa-eureka-parent 父工程 -&gt; New -&gt; Module，这里选择 Maven 工程；</p>\n<ul>\n<li>artifactId：sofa-eureka-consumer-ribbon</li>\n</ul>\n<p>前面我们已经对feign进行的实际操作，因此本节使用 Ribbon + RestTemplate 组合实现具体的负载均衡实验。</p>\n<h3 id=\"修改-pom-文件\"><a href=\"#修改-pom-文件\" class=\"headerlink\" title=\"修改 pom 文件\"></a>修改 pom 文件</h3><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">parent</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>sofa-eureka-parent<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.alipay.sofa<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>0.0.1-SNAPSHOT<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">parent</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">modelVersion</span>&gt;</span>4.0.0<span class=\"tag\">&lt;/<span class=\"name\">modelVersion</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>sofa-eureka-consumer-ribbon<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.cloud<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.cloud<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-cloud-starter-netflix-ribbon<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-web<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"配置文件\"><a href=\"#配置文件\" class=\"headerlink\" title=\"配置文件\"></a>配置文件</h3><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">server:</span></span><br><span class=\"line\">  <span class=\"attr\">port:</span> <span class=\"number\">8889</span></span><br><span class=\"line\"><span class=\"attr\">eureka:</span></span><br><span class=\"line\">  <span class=\"attr\">client:</span></span><br><span class=\"line\">    <span class=\"attr\">service-url:</span></span><br><span class=\"line\">      <span class=\"attr\">defaultZone:</span> <span class=\"string\">http://localhost:8761/eureka/</span></span><br><span class=\"line\"><span class=\"attr\">spring:</span></span><br><span class=\"line\">  <span class=\"attr\">application:</span></span><br><span class=\"line\">    <span class=\"attr\">name:</span> <span class=\"string\">eureka-consumer-ribbon</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"启动类\"><a href=\"#启动类\" class=\"headerlink\" title=\"启动类\"></a>启动类</h3><p>这里需要引入 @EnableEurekaClient 注解，表示当前是一个客户端。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@SpringBootApplication</span></span><br><span class=\"line\"><span class=\"meta\">@EnableEurekaClient</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">SofaEurekaConsumerRibbonApplication</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"meta\">@LoadBalanced</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> RestTemplate <span class=\"title function_\">restTemplate</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">RestTemplate</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        SpringApplication.run(SofaEurekaConsumerRibbonApplication.class, args);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>@LoadBalanced ： Spring Cloud 为客户端负载均衡创建了特定的注解，被该注解修饰的 RestTemplate Bean实例，Spring Cloud 就会让 RestTemplate 使用相关的负载均衡策略，默认情况下使用的就是 Ribbon。</p>\n<h3 id=\"资源类\"><a href=\"#资源类\" class=\"headerlink\" title=\"资源类\"></a>资源类</h3><p>这里我们通过 restTemplate 去访问 Provider 提供的服务，需要注意，这里为了演示作用，直接将资源 Url 固定写成：<a href=\"http://hellosofaservice/hello\">http://HELLOSOFASERVICE/hello</a> ，<a href=\"http://hellosofaservice/hello\">HELLOSOFASERVICE</a> 为 Provider 提供的服务的实例名称，也就是 Eureka 服务端界面上对应的 <strong>Application。</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@RestController</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">RibbonController</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> RestTemplate restTemplate;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@RequestMapping(&quot;/hello&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">hello</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> restTemplate.getForObject(<span class=\"string\">&quot;http://HELLOSOFASERVICE/hello&quot;</span>,String.class);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"启动服务\"><a href=\"#启动服务\" class=\"headerlink\" title=\"启动服务\"></a>启动服务</h3><p>这里正常先后启动 服务注册中心 sofa-eureka-server-center ；服务提供方 sofa-eureka-provider ，服务提供方为了方便演示，这里启动4个实例，对应的端口分别为：8081，8082，8083，8084，如下：</p>\n<p><img src=\"https://oscimg.oschina.net/oscnet/71ffa9b404d5727807a4cfbdc44cdfa8346.jpg\"></p>\n<p>然后启动当前 sofa-eurek-consumer-ribbon 工程。默认情况下，不指定任何负载均衡策略，使用的是轮询策略。</p>\n<p>浏览器输入 <a href=\"http://localhost:8889/hello\">http://localhost:8889/hello</a> ，调用10次：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Hello SOFA! Now Port is <span class=\"number\">8081</span> And hostname is HelloSOFAService</span><br><span class=\"line\">Hello SOFA! Now Port is <span class=\"number\">8082</span> And hostname is HelloSOFAService</span><br><span class=\"line\">Hello SOFA! Now Port is <span class=\"number\">8083</span> And hostname is HelloSOFAService</span><br><span class=\"line\">Hello SOFA! Now Port is <span class=\"number\">8084</span> And hostname is HelloSOFAService</span><br><span class=\"line\">  </span><br><span class=\"line\">Hello SOFA! Now Port is <span class=\"number\">8081</span> And hostname is HelloSOFAService</span><br><span class=\"line\">Hello SOFA! Now Port is <span class=\"number\">8082</span> And hostname is HelloSOFAService</span><br><span class=\"line\">Hello SOFA! Now Port is <span class=\"number\">8083</span> And hostname is HelloSOFAService</span><br><span class=\"line\">Hello SOFA! Now Port is <span class=\"number\">8084</span> And hostname is HelloSOFAService</span><br><span class=\"line\">  </span><br><span class=\"line\">Hello SOFA! Now Port is <span class=\"number\">8081</span> And hostname is HelloSOFAService</span><br><span class=\"line\">Hello SOFA! Now Port is <span class=\"number\">8082</span> And hostname is HelloSOFAService</span><br></pre></td></tr></table></figure>\n<p>从结果来看，默认策略应该是轮询（不用情况下，调用顺序不一定是1-2-3-4，但是以每4组为一组来看，存在周期性）。</p>\n<h2 id=\"负载均衡策略设置\"><a href=\"#负载均衡策略设置\" class=\"headerlink\" title=\"负载均衡策略设置\"></a>负载均衡策略设置</h2><h3 id=\"全局设置\"><a href=\"#全局设置\" class=\"headerlink\" title=\"全局设置\"></a>全局设置</h3><p>全局设置就是自己定义一个配置类，然后在配置类中指定具体的负载均衡策略。在com.alipay.sofa.cloud.configuration 包下面新建一个配置类，这里使用的策略是随机策略：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">RibbonGlobalLoadBalancingConfiguration</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> IRule <span class=\"title function_\">ribbonRule</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">RandomRule</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>浏览器输入 <a href=\"http://localhost:8889/hello\">http://localhost:8889/hello</a> ，调用10次：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Hello SOFA! Now Port is <span class=\"number\">8083</span> And hostname is HelloSOFAService</span><br><span class=\"line\">Hello SOFA! Now Port is <span class=\"number\">8084</span> And hostname is HelloSOFAService</span><br><span class=\"line\">Hello SOFA! Now Port is <span class=\"number\">8084</span> And hostname is HelloSOFAService</span><br><span class=\"line\">Hello SOFA! Now Port is <span class=\"number\">8083</span> And hostname is HelloSOFAService</span><br><span class=\"line\">  </span><br><span class=\"line\">Hello SOFA! Now Port is <span class=\"number\">8082</span> And hostname is HelloSOFAService</span><br><span class=\"line\">Hello SOFA! Now Port is <span class=\"number\">8083</span> And hostname is HelloSOFAService</span><br><span class=\"line\">Hello SOFA! Now Port is <span class=\"number\">8082</span> And hostname is HelloSOFAService</span><br><span class=\"line\">Hello SOFA! Now Port is <span class=\"number\">8084</span> And hostname is HelloSOFAService</span><br><span class=\"line\">  </span><br><span class=\"line\">Hello SOFA! Now Port is <span class=\"number\">8081</span> And hostname is HelloSOFAService</span><br><span class=\"line\">Hello SOFA! Now Port is <span class=\"number\">8081</span> And hostname is HelloSOFAService</span><br></pre></td></tr></table></figure>\n\n<p>从结果来看，具有随机属性。</p>\n<h3 id=\"针对单个服务的-Ribbon-负载均衡策略\"><a href=\"#针对单个服务的-Ribbon-负载均衡策略\" class=\"headerlink\" title=\"针对单个服务的 Ribbon 负载均衡策略\"></a>针对单个服务的 Ribbon 负载均衡策略</h3><p>新建一个 RibbonRandomLBConfiguration 配置类，这里有个前提是需要删除 全局配置类  。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">RibbonRandomLBConfiguration</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> IRule <span class=\"title function_\">ribbonRule</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">RandomRule</span>();</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<p>修改启动类，增加 @RibbonClient 注解，并且通过 configuration 指定负载均衡策略。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@SpringBootApplication</span></span><br><span class=\"line\"><span class=\"meta\">@EnableEurekaClient</span></span><br><span class=\"line\"><span class=\"meta\">@RibbonClient(name=&quot;HELLOSOFASERVICE&quot;,configuration = RibbonRandomLBConfiguration.class)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">SofaEurekaConsumerRibbonApplication</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"meta\">@LoadBalanced</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> RestTemplate <span class=\"title function_\">restTemplate</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">RestTemplate</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        SpringApplication.run(SofaEurekaConsumerRibbonApplication.class, args);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>浏览器输入 <a href=\"http://localhost:8889/hello\">http://localhost:8889/hello</a> ，调用10次：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Hello SOFA! Now Port is <span class=\"number\">8083</span> And hostname is HelloSOFAService</span><br><span class=\"line\">Hello SOFA! Now Port is <span class=\"number\">8081</span> And hostname is HelloSOFAService</span><br><span class=\"line\">Hello SOFA! Now Port is <span class=\"number\">8083</span> And hostname is HelloSOFAService</span><br><span class=\"line\">Hello SOFA! Now Port is <span class=\"number\">8083</span> And hostname is HelloSOFAService</span><br><span class=\"line\">  </span><br><span class=\"line\">Hello SOFA! Now Port is <span class=\"number\">8084</span> And hostname is HelloSOFAService</span><br><span class=\"line\">Hello SOFA! Now Port is <span class=\"number\">8082</span> And hostname is HelloSOFAService</span><br><span class=\"line\">Hello SOFA! Now Port is <span class=\"number\">8082</span> And hostname is HelloSOFAService</span><br><span class=\"line\">Hello SOFA! Now Port is <span class=\"number\">8081</span> And hostname is HelloSOFAService</span><br><span class=\"line\">  </span><br><span class=\"line\">Hello SOFA! Now Port is <span class=\"number\">8081</span> And hostname is HelloSOFAService</span><br><span class=\"line\">Hello SOFA! Now Port is <span class=\"number\">8083</span> And hostname is HelloSOFAService</span><br></pre></td></tr></table></figure>\n<p>从结果来看，具有随机属性。</p>\n<p>@RibbonClient 注解属性中，name 并非是一个数组，也就是说只能指定一个服务实例。那么基于上述情况，如果还存在另外一个服务，比如 SOFABOOTHELLOSERVICE ，那么对于此服务的调用会是什么情况呢？</p>\n<p>先向注册中心注册两个服务：<strong>HELLOSOFABOOTSERVICE 和 <strong>HELLOSOFASERVICE</strong></strong></p>\n<p><img src=\"https://oscimg.oschina.net/oscnet/4ec12075c7fca68bf15d4c6793a6294d760.jpg\"></p>\n<p>修改 RibbonController ，增加一个 &#x2F;helloBoot 资源地址：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@RestController</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">RibbonController</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> RestTemplate restTemplate;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@RequestMapping(&quot;/hello&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">hello</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> restTemplate.getForObject(<span class=\"string\">&quot;http://HELLOSOFASERVICE/hello&quot;</span>,String.class);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@RequestMapping(&quot;/helloBoot&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">helloBoot</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> restTemplate.getForObject(<span class=\"string\">&quot;http://HELLOSOFABOOTSERVICE/hello&quot;</span>,String.class);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>重启启动当前服务。</p>\n<p>浏览器中输入：<a href=\"http://localhost:8889/hello\">http://localhost:8889/hello</a> ，验证结果满足随机调用。</p>\n<p>浏览器中输入：<a href=\"http://localhost:8889/helloBoot\">http://localhost:8889/helloBoot</a> ，验证结果满足轮询调用。</p>\n<h3 id=\"基于配置文件的负载均衡策略设置\"><a href=\"#基于配置文件的负载均衡策略设置\" class=\"headerlink\" title=\"基于配置文件的负载均衡策略设置\"></a>基于配置文件的负载均衡策略设置</h3><p>个人感觉基于配置文件配置方式更加直观，而且对于多个服务对应不同的负载策略设置也更加清晰，下面对HELLOSOFASERVICE 和  HELLOSOFABOOTSERVICE 均使用随机策略。</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">HELLOSOFASERVICE:</span></span><br><span class=\"line\">  <span class=\"attr\">ribbon:</span></span><br><span class=\"line\">    <span class=\"attr\">NFLoadBalancerRuleClassName:</span> <span class=\"string\">com.netflix.loadbalancer.RandomRule</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">HELLOSOFABOOTSERVICE:</span></span><br><span class=\"line\">  <span class=\"attr\">ribbon:</span></span><br><span class=\"line\">    <span class=\"attr\">NFLoadBalancerRuleClassName:</span> <span class=\"string\">com.netflix.loadbalancer.RandomRule</span></span><br></pre></td></tr></table></figure>\n<p>启动类中删除以下注解配置：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@RibbonClient(name = &quot;HELLOSOFASERVICE&quot;, configuration = RibbonRandomLBConfiguration.class)</span></span><br></pre></td></tr></table></figure>\n<p>重启启动当前服务。</p>\n<p>浏览器中输入：<a href=\"http://localhost:8889/hello\">http://localhost:8889/hello</a> ，验证结果满足随机调用。<br>浏览器中输入：<a href=\"http://localhost:8889/helloBoot\">http://localhost:8889/helloBoot</a> ，验证结果满足随机调用。</p>\n","text":"上一篇 SpringCloud-声明式服务调用 Feign 中介绍了如何使用 Feign 来完成服务调用。因为 Feign 本身已经集成了 Ribbon ，所以...","permalink":"/post/springcloud/spring-cloud-ribbon-project","photos":[],"count_time":{"symbolsCount":"8.3k","symbolsTime":"8 mins."},"categories":[{"name":"SpringCloud","slug":"SpringCloud","count":14,"path":"api/categories/SpringCloud.json"}],"tags":[{"name":"负载均衡","slug":"负载均衡","count":3,"path":"api/tags/负载均衡.json"},{"name":"eureka","slug":"eureka","count":5,"path":"api/tags/eureka.json"},{"name":"feign","slug":"feign","count":2,"path":"api/tags/feign.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Ribbon-%E7%AE%80%E4%BB%8B\"><span class=\"toc-text\">Ribbon 简介</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1%E7%AD%96%E7%95%A5\"><span class=\"toc-text\">负载均衡策略</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E7%8E%AF%E5%A2%83%E5%87%86%E5%A4%87\"><span class=\"toc-text\">环境准备</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%B7%A5%E7%A8%8B%E8%83%8C%E6%99%AF\"><span class=\"toc-text\">工程背景</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%96%B0%E5%BB%BA-sofa-eureka-consumer-ribbon\"><span class=\"toc-text\">新建 sofa-eureka-consumer-ribbon</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%BF%AE%E6%94%B9-pom-%E6%96%87%E4%BB%B6\"><span class=\"toc-text\">修改 pom 文件</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6\"><span class=\"toc-text\">配置文件</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%90%AF%E5%8A%A8%E7%B1%BB\"><span class=\"toc-text\">启动类</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E8%B5%84%E6%BA%90%E7%B1%BB\"><span class=\"toc-text\">资源类</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%90%AF%E5%8A%A8%E6%9C%8D%E5%8A%A1\"><span class=\"toc-text\">启动服务</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1%E7%AD%96%E7%95%A5%E8%AE%BE%E7%BD%AE\"><span class=\"toc-text\">负载均衡策略设置</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%85%A8%E5%B1%80%E8%AE%BE%E7%BD%AE\"><span class=\"toc-text\">全局设置</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E9%92%88%E5%AF%B9%E5%8D%95%E4%B8%AA%E6%9C%8D%E5%8A%A1%E7%9A%84-Ribbon-%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1%E7%AD%96%E7%95%A5\"><span class=\"toc-text\">针对单个服务的 Ribbon 负载均衡策略</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%9F%BA%E4%BA%8E%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E7%9A%84%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1%E7%AD%96%E7%95%A5%E8%AE%BE%E7%BD%AE\"><span class=\"toc-text\">基于配置文件的负载均衡策略设置</span></a></li></ol></li></ol>","author":{"name":"glmapper","slug":"blog-author","avatar":"https://glmapper-blog.oss-cn-hangzhou.aliyuncs.com/common/favicon.ico","link":"/","description":"开放，开源，分享，共享","socials":{"github":"https://github.com/glmapper","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/2412872703","zhihu":"","csdn":"","juejin":"https://juejin.cn/user/3227821827961806","customs":{"sofastack":{"icon":"https://glmapper-blog.oss-cn-hangzhou.aliyuncs.com/common/sofastack.svg","link":"https://www.sofastack.tech/"}}}},"mapped":true,"hidden":false,"prev_post":{"title":"SpringCloud-Eureka 服务注册","uid":"552d04375420669150f7f05539f0ea4b","slug":"springcloud/spring-cloud-eureka-register-project","date":"2018-12-31T14:48:05.000Z","updated":"2024-07-05T04:09:05.837Z","comments":true,"path":"api/articles/springcloud/spring-cloud-eureka-register-project.json","keywords":"宋国磊, glmapper, 卫恒, 分享, 开源","cover":[],"text":" 原文： https://blog.csdn.net/sinat_25518349/article/details/85423332 Spring Cloud ...","permalink":"/post/springcloud/spring-cloud-eureka-register-project","photos":[],"count_time":{"symbolsCount":"6.4k","symbolsTime":"6 mins."},"categories":[{"name":"SpringCloud","slug":"SpringCloud","count":14,"path":"api/categories/SpringCloud.json"}],"tags":[{"name":"eureka","slug":"eureka","count":5,"path":"api/tags/eureka.json"}],"author":{"name":"glmapper","slug":"blog-author","avatar":"https://glmapper-blog.oss-cn-hangzhou.aliyuncs.com/common/favicon.ico","link":"/","description":"开放，开源，分享，共享","socials":{"github":"https://github.com/glmapper","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/2412872703","zhihu":"","csdn":"","juejin":"https://juejin.cn/user/3227821827961806","customs":{"sofastack":{"icon":"https://glmapper-blog.oss-cn-hangzhou.aliyuncs.com/common/sofastack.svg","link":"https://www.sofastack.tech/"}}}}},"next_post":{"title":"SpringCloud-声明式服务调用 Feign","uid":"21548e9ec276e6ad92466723ebcdde83","slug":"springcloud/spring-cloud-feign-project","date":"2018-12-31T14:46:42.000Z","updated":"2024-07-05T04:09:05.838Z","comments":true,"path":"api/articles/springcloud/spring-cloud-feign-project.json","keywords":"宋国磊, glmapper, 卫恒, 分享, 开源","cover":null,"text":"Fegin 是一个声明式的 web 服务客户端，它使得编写 web 服务客户端变得更加容易。使用 Fegin 创建一个接口并对它进行注解。它具有可插拔的注解支持...","permalink":"/post/springcloud/spring-cloud-feign-project","photos":[],"count_time":{"symbolsCount":"3.1k","symbolsTime":"3 mins."},"categories":[{"name":"SpringCloud","slug":"SpringCloud","count":14,"path":"api/categories/SpringCloud.json"}],"tags":[{"name":"http","slug":"http","count":3,"path":"api/tags/http.json"},{"name":"eureka","slug":"eureka","count":5,"path":"api/tags/eureka.json"},{"name":"feign","slug":"feign","count":2,"path":"api/tags/feign.json"}],"author":{"name":"glmapper","slug":"blog-author","avatar":"https://glmapper-blog.oss-cn-hangzhou.aliyuncs.com/common/favicon.ico","link":"/","description":"开放，开源，分享，共享","socials":{"github":"https://github.com/glmapper","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/2412872703","zhihu":"","csdn":"","juejin":"https://juejin.cn/user/3227821827961806","customs":{"sofastack":{"icon":"https://glmapper-blog.oss-cn-hangzhou.aliyuncs.com/common/sofastack.svg","link":"https://www.sofastack.tech/"}}}}}}