{"title":"聊一聊 RestTemplate","uid":"081a602eba3d6e39cf0949a624156da5","slug":"middleware/middleware-http-resttemplate","date":"2018-10-30T14:20:07.000Z","updated":"2024-07-05T04:09:05.788Z","comments":true,"path":"api/articles/middleware/middleware-http-resttemplate.json","keywords":null,"cover":[],"content":"<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>原文：<a href=\"https://juejin.cn/post/6844903695981740046\">https://juejin.cn/post/6844903695981740046</a></p></blockquote>\n<p>从 3.0 版本开始，Spring 提供了 RestTemplate 作为用于访问 Rest 服务的客户端，RestTemplate 提供了多种便捷访问远程 Http 服务的方法，能够大大提高客户端的编写效率。</p>\n<p>本篇文章将从 RestTemplate 提供的 API 入手，先来了解下 RestTemplate 的具体使用，然后再对其中涉及到的几个核心类进行分析，最后再来分析下 RestTemplate 执行的整个流程，篇幅比较长，建议先码为快！</p>\n<span id=\"more\"></span>\n\n<h2 id=\"核心-API\"><a href=\"#核心-API\" class=\"headerlink\" title=\"核心 API\"></a>核心 API</h2><p>在平时的使用中，我们通常都是使用包装好的getForObject&#x2F;getForEntity，postForObject&#x2F;postForEntity&#x2F;postForLocation，put以及delete。</p>\n<h3 id=\"get-请求处理\"><a href=\"#get-请求处理\" class=\"headerlink\" title=\"get 请求处理\"></a>get 请求处理</h3><p>getForEntity方法的返回值是一个ResponseEntity<T>，ResponseEntity<T>是Spring对HTTP请求响应的封装，包括了几个重要的元素，如响应码、contentType、contentLength、响应消息体等。</p>\n<ul>\n<li>url：调用的服务的地址</li>\n<li>responseType：返回的body类型</li>\n<li>uriVariables：有两种形式:<ul>\n<li>可以用一个数字做占位符，最后是一个可变长度的参数，来一一替换前面的占位符<br><img src=\"https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2018/10/17/16682a71d3436f37~tplv-t2oaga2asx-image.image\"></li>\n<li>也可以前面使用name&#x3D;{name}这种形式，最后一个参数是一个map，map的key即为前边占位符的名字，map的value为参数值<br><img src=\"https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2018/10/17/16682a77dd355749~tplv-t2oaga2asx-image.image\"></li>\n</ul>\n</li>\n</ul>\n<h4 id=\"responseType-测试案例\"><a href=\"#responseType-测试案例\" class=\"headerlink\" title=\"responseType 测试案例\"></a>responseType 测试案例</h4><p>定义的一个controller资源：</p>\n<p><img src=\"https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2018/10/17/16682a97f48fb171~tplv-t2oaga2asx-image.image\"><br>这里分别使用不同的 responseType 进行测试：</p>\n<p><img src=\"https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2018/10/17/16682a93da364cf1~tplv-t2oaga2asx-image.image\"></p>\n<p>结果：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">getForEntity(responseType=Map.class):&#123;glmapper=hello glmapper&#125;</span><br><span class=\"line\">getForEntity(responseType=String.class):&#123;&quot;glmapper&quot;:&quot;hello glmapper&quot;&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"uriVariables-测试案例\"><a href=\"#uriVariables-测试案例\" class=\"headerlink\" title=\"uriVariables 测试案例\"></a>uriVariables 测试案例</h4><p>先来看下非map方式的，两个controller，两种不同方式的参数获取（本质上是一样的）<br><img src=\"https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2018/10/17/16682ab556c128fc~tplv-t2oaga2asx-image.image\"></p>\n<ul>\n<li>使用占位符的方式：</li>\n</ul>\n<p><img src=\"https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2018/10/17/16682abcc1d8c3ca~tplv-t2oaga2asx-image.image\"></p>\n<ul>\n<li>使用 map 的方式：</li>\n</ul>\n<p><img src=\"https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2018/10/17/16682ac3e84dbb0a~tplv-t2oaga2asx-image.image\"></p>\n<h3 id=\"getForObject\"><a href=\"#getForObject\" class=\"headerlink\" title=\"getForObject\"></a>getForObject</h3><p>getForObject 函数实际上是对 getForEntity 函数的进一步封装，如果只关注返回的消息体的内容，对其他信息都不关注，那么就可以使用 getForObject。</p>\n<p><img src=\"https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2018/10/17/16682ad954b5df90~tplv-t2oaga2asx-image.image\"></p>\n<p>这里调用就比getForEntity要简单一点了，可以直接拿到对象：</p>\n<p><img src=\"https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2018/10/17/16682ae0804d0692~tplv-t2oaga2asx-image.image\"></p>\n<p>getForObject 的几个重载方法和 getForEntity 基本是一样的。</p>\n<h3 id=\"post-请求处理\"><a href=\"#post-请求处理\" class=\"headerlink\" title=\"post 请求处理\"></a>post 请求处理</h3><p>在RestTemplate中，POST请求可以通过如下三个方法来发起：postForEntity，postForObject，postForLocation。</p>\n<h4 id=\"postForEntity-案例\"><a href=\"#postForEntity-案例\" class=\"headerlink\" title=\"postForEntity 案例\"></a>postForEntity 案例</h4><p><img src=\"https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2018/10/18/1668778ea595c23b~tplv-t2oaga2asx-image.image\"><br>调用获取：</p>\n<p><img src=\"https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2018/10/18/16687792c19ca889~tplv-t2oaga2asx-image.image\"></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">postForEntity(URI url, <span class=\"meta\">@Nullable</span> Object request, Class&lt;T&gt; responseType)</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>方法的第一参数表示要调用的服务的地址</li>\n<li>方法的第二个参数表示上传的参数</li>\n<li>方法的第三个参数表示返回的消息体的数据类型</li>\n</ul>\n<h4 id=\"postForObject-案例\"><a href=\"#postForObject-案例\" class=\"headerlink\" title=\"postForObject 案例\"></a>postForObject 案例</h4><p>和 getForObject 相对应，只关注返回的消息体。</p>\n<p><img src=\"https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2018/10/18/166877ade7c3795c~tplv-t2oaga2asx-image.image\"></p>\n<h4 id=\"postForLocation-案例\"><a href=\"#postForLocation-案例\" class=\"headerlink\" title=\"postForLocation 案例\"></a>postForLocation 案例</h4><p>postForLocation也是提交新资源，提交成功之后，返回新资源的URI，postForLocation的参数和前面两种的参数基本一致，只不过该方法的返回值为Uri，这个只需要服务提供者返回一个Uri即可，该Uri表示新资源的位置。</p>\n<p><img src=\"https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2018/10/18/166877b5de7b3e06~tplv-t2oaga2asx-image.image\"></p>\n<p>这里有点坑，我们需要把这个uri添加到response的header中，不然后面拿到的是null。</p>\n<p><img src=\"https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2018/10/18/166877b96ded6304~tplv-t2oaga2asx-image.image\"></p>\n<h3 id=\"exchange\"><a href=\"#exchange\" class=\"headerlink\" title=\"exchange\"></a>exchange</h3><p>exchange 方法和上述这些方法差别在于需要多一个请求类型的参数：</p>\n<p><img src=\"https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2018/10/18/166877c1ee29bf31~tplv-t2oaga2asx-image.image\"></p>\n<h2 id=\"AsyncRestTemplate-异步客户端\"><a href=\"#AsyncRestTemplate-异步客户端\" class=\"headerlink\" title=\"AsyncRestTemplate 异步客户端\"></a>AsyncRestTemplate 异步客户端</h2><p>RestTemplate的异步实现方式。所涉及到的API和RestTemplate基本一致。区别在于RestTemplate直接返回结果，而AsyncRestTemplate返回的是ListenableFuture。</p>\n<p><img src=\"https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2018/10/18/166877cd10d2bb0e~tplv-t2oaga2asx-image.image\"></p>\n<h2 id=\"RestTemplate-拦截器\"><a href=\"#RestTemplate-拦截器\" class=\"headerlink\" title=\"RestTemplate 拦截器\"></a>RestTemplate 拦截器</h2><p>Spring提供了ClientHttpRequestInterceptor和AsyncClientHttpRequestInterceptor两个接口，分别可以对RestTemplate和AsyncRestTemplate发起的请求进行拦截，并在其被发送至服务端之前修改请求或是增强相应的信息。</p>\n<ul>\n<li><p>ClientHttpRequestInterceptor 拦截 RestTemplate<br><img src=\"https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2018/10/18/166877d579c56a0c~tplv-t2oaga2asx-image.image\"></p>\n</li>\n<li><p>AsyncClientHttpRequestInterceptor 拦截AsyncRestTemplate<br><img src=\"https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2018/10/18/166877e0ff73a952~tplv-t2oaga2asx-image.image\"></p>\n</li>\n</ul>\n<p>设置拦截器就是通过提供的 setInterceptors 设置即可：</p>\n<p><img src=\"https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2018/10/18/166877ef7ccd132e~tplv-t2oaga2asx-image.image\"></p>\n<h2 id=\"自定义-ResponseErrorHandler\"><a href=\"#自定义-ResponseErrorHandler\" class=\"headerlink\" title=\"自定义 ResponseErrorHandler\"></a>自定义 ResponseErrorHandler</h2><p>ResponseErrorHandler 接口定义了当response发生错误时需要进行的操作。这里我们自定义一个CustomResponseErrorHandler，当返回的code不是200时，就表示执行出错了。</p>\n<p><img src=\"https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2018/10/20/1668fe76528a5659~tplv-t2oaga2asx-image.image\"></p>\n<p>设置 ResponseErrorHandler：</p>\n<p><img src=\"https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2018/10/20/1668fe8f603b0760~tplv-t2oaga2asx-image.image\"></p>\n<p>执行结果：</p>\n<p><img src=\"https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2018/10/20/1668fe97d6c85821~tplv-t2oaga2asx-image.image\"></p>\n<h2 id=\"处理流程\"><a href=\"#处理流程\" class=\"headerlink\" title=\"处理流程\"></a>处理流程</h2><p>下面来梳理下 RestTemplate 中请求处理的流程。下图中 XXXX 表示我们调用的 API 方法。大体流程就是：api 内部做一些请求相关的处理封装，然后交给 execute 方法执行，最后真正处理则是在 doExecute 方法中完成。<br><img src=\"https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2018/10/20/1668f78ce0e92b1e~tplv-t2oaga2asx-image.image\"></p>\n<p>下面以 getForEntity 方法的执行过程来分析：</p>\n<p><img src=\"https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2018/10/20/1668f7c60711d002~tplv-t2oaga2asx-image.image\"></p>\n<p>getForEntity 方法：</p>\n<ul>\n<li>基于给定响应类型，返回一个请求回调实现，准备请求。</li>\n<li>基于给定响应类型，返回 ResponseEntity 的响应提取器。</li>\n</ul>\n<p><img src=\"https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2018/10/20/1668f7e5d410b82e~tplv-t2oaga2asx-image.image\"><br>execute 方法：</p>\n<ul>\n<li>这个方法里面是对url进行urlencode编码处理的，统一转为URL。这里我们也可以手动把参数进行网络编码。</li>\n</ul>\n<p><img src=\"https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2018/10/20/1668f8294bc82e81~tplv-t2oaga2asx-image.image\"><br>doExecute是请求真正处理的方法，这里来重点看下这个方法的执行过程：</p>\n<ul>\n<li>createRequest</li>\n<li>doWithRequest</li>\n<li>execute</li>\n<li>handleResponse</li>\n</ul>\n<h4 id=\"1、createRequest\"><a href=\"#1、createRequest\" class=\"headerlink\" title=\"1、createRequest\"></a>1、createRequest</h4><p>这个方法的作用就是创建一个 ClientHttpRequest 对象。RestTemplate集成了 HttpAccessor这个抽象类，创建ClientHttpRequest的过程就是在其父类HttpAccessor中通过默认的 ClientHttpRequestFactory 实现类 SimpleClientHttpRequestFactory 完成具体的请求创建。</p>\n<p><img src=\"https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2018/10/20/1668f8a70f4e1664~tplv-t2oaga2asx-image.image\"></p>\n<ul>\n<li><p>1、创建 java.net.HttpURLConnection 对象</p>\n</li>\n<li><p>2、设置 connection，包括 connectTimeout、setDoInput 等。</p>\n</li>\n<li><p>3、bufferRequestBody 用于标志是否使用缓存流的形式，默认是 true。缺点是当发送大量数据时，比如 put&#x2F;post，存在内存消耗严重。该值可以通过 SimpleClientHttpRequestFactory#setBufferRequestBody来修改。</p>\n</li>\n</ul>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>不同版本的变更还是比较大的，大家在阅读源码时，还是从最新的代码来看。</p></blockquote>\n<h4 id=\"2、doWithRequest\"><a href=\"#2、doWithRequest\" class=\"headerlink\" title=\"2、doWithRequest\"></a>2、doWithRequest</h4><p>RequestCallback 封装了请求体和请求头对象。这里会遍历所有的 HttpMessageConverter，解析成所有支持的MediaType，放在allSupportedMediaTypes中。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">request.getHeaders().setAccept(allSupportedMediaTypes);</span><br></pre></td></tr></table></figure>\n<p>RestTemplate中对应了两个内部类的实现：</p>\n<ul>\n<li><p>AcceptHeaderRequestCallback.doWithRequest的处理。<br>发送请求时，Http头部需要设置Accept字段，该字段表明了发送请求的这方接受的媒体类型（消息格式），也是响应端要返回的信息的媒体类型（消息格式）。<br>根据postForEntity方法的第三个参数responseType，程序将选择适合的解析器XXXConverter，并依据该解析器找出所有支持的媒体类型。</p>\n</li>\n<li><p>HttpEntityRequestCallback.doWithRequest的处理。<br>如果是POST请求并且消息体存在时，除了设置Accept字段，还可能需要设置Content-Type字段，该字段表明了所发送请求的媒体类型（消息格式），也是响应端接受的媒体类型（消息格式）。<br>根据postForEntity方法的第二个参数request，程序将选择适合的解析器XXXConverter，将请求消息写入输出流。</p>\n</li>\n</ul>\n<h4 id=\"3、execute\"><a href=\"#3、execute\" class=\"headerlink\" title=\"3、execute\"></a>3、execute</h4><p>这里会把请求头&#x2F;体封装到connect，然后发送请求。跟踪 execute 方法执行，定位到SimpleBufferingClientHttpRequest#executeInternal方法：</p>\n<p><img src=\"https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2018/10/20/1668fdccb7601b1f~tplv-t2oaga2asx-image.image\"><br>这里是使用实例 SimpleBufferingClientHttpRequest 封装请求体和请求头。从代码中可以看到：</p>\n<ul>\n<li>delete 时通过前面设置的 DoOutput参数和是否可以设置输出流来判断是否需要发送请求体如果是 delete 请求，那么很明显 DoOutput &#x3D; false，不会有封装请求体的过程，即不执行FileCopyUtils.copy(bufferedOutput, this.connection.getOutputStream())。</li>\n</ul>\n<h4 id=\"4、handleResponse\"><a href=\"#4、handleResponse\" class=\"headerlink\" title=\"4、handleResponse\"></a>4、handleResponse</h4><p>最后就是 response 的解析了，从代码来看，主要还是 Error 的解析。这里的ErrorHandler我们前面也提到，可以通过实现 ResponseErrorHandler 来自定义 异常处理。<br><img src=\"https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2018/10/20/1668fe3ae92b7ead~tplv-t2oaga2asx-image.image\"></p>\n<h2 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h2><p>本篇先介绍了RestTemplate的API使用，挑了几个介绍了下，更多使用细节还是要针对不同的场景来决定。接着对拦截器，异步RestTemplate以及错误处理器做了简单的介绍并给出了案例。最后分析了下RestTemplate的执行流程，篇幅原因执行流程部分只是大概捋了捋，其中还是很多细节有时间再补充，这部分主要就是看底层是如何通信的，已经请求参数的传递等。</p>\n","text":" 原文：https://juejin.cn/post/6844903695981740046 从 3.0 版本开始，Spring 提供了 RestTemplat...","permalink":"/post/middleware/middleware-http-resttemplate","photos":[],"count_time":{"symbolsCount":"4.5k","symbolsTime":"4 mins."},"categories":[{"name":"Middleware","slug":"Middleware","count":14,"path":"api/categories/Middleware.json"}],"tags":[{"name":"spring","slug":"spring","count":11,"path":"api/tags/spring.json"},{"name":"RestTemplate","slug":"RestTemplate","count":1,"path":"api/tags/RestTemplate.json"},{"name":"http","slug":"http","count":3,"path":"api/tags/http.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%A0%B8%E5%BF%83-API\"><span class=\"toc-text\">核心 API</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#get-%E8%AF%B7%E6%B1%82%E5%A4%84%E7%90%86\"><span class=\"toc-text\">get 请求处理</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#responseType-%E6%B5%8B%E8%AF%95%E6%A1%88%E4%BE%8B\"><span class=\"toc-text\">responseType 测试案例</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#uriVariables-%E6%B5%8B%E8%AF%95%E6%A1%88%E4%BE%8B\"><span class=\"toc-text\">uriVariables 测试案例</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#getForObject\"><span class=\"toc-text\">getForObject</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#post-%E8%AF%B7%E6%B1%82%E5%A4%84%E7%90%86\"><span class=\"toc-text\">post 请求处理</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#postForEntity-%E6%A1%88%E4%BE%8B\"><span class=\"toc-text\">postForEntity 案例</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#postForObject-%E6%A1%88%E4%BE%8B\"><span class=\"toc-text\">postForObject 案例</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#postForLocation-%E6%A1%88%E4%BE%8B\"><span class=\"toc-text\">postForLocation 案例</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#exchange\"><span class=\"toc-text\">exchange</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#AsyncRestTemplate-%E5%BC%82%E6%AD%A5%E5%AE%A2%E6%88%B7%E7%AB%AF\"><span class=\"toc-text\">AsyncRestTemplate 异步客户端</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#RestTemplate-%E6%8B%A6%E6%88%AA%E5%99%A8\"><span class=\"toc-text\">RestTemplate 拦截器</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E8%87%AA%E5%AE%9A%E4%B9%89-ResponseErrorHandler\"><span class=\"toc-text\">自定义 ResponseErrorHandler</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%A4%84%E7%90%86%E6%B5%81%E7%A8%8B\"><span class=\"toc-text\">处理流程</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#1%E3%80%81createRequest\"><span class=\"toc-text\">1、createRequest</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#2%E3%80%81doWithRequest\"><span class=\"toc-text\">2、doWithRequest</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#3%E3%80%81execute\"><span class=\"toc-text\">3、execute</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#4%E3%80%81handleResponse\"><span class=\"toc-text\">4、handleResponse</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%B0%8F%E7%BB%93\"><span class=\"toc-text\">小结</span></a></li></ol>","author":{"name":"glmapper","slug":"blog-author","avatar":"https://glmapper-blog.oss-cn-hangzhou.aliyuncs.com/common/favicon.ico","link":"/","description":"开放，开源，分享，共享","socials":{"github":"https://github.com/glmapper","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/2412872703","zhihu":"","csdn":"","juejin":"https://juejin.cn/user/3227821827961806","customs":{"sofastack":{"icon":"https://glmapper-blog.oss-cn-hangzhou.aliyuncs.com/common/sofastack.svg","link":"https://www.sofastack.tech/"}}}},"mapped":true,"hidden":false,"prev_post":{"title":"SOFATracer 中 Disruptor 实践","uid":"ef8677c434be29d2befc4ae95f7a33d3","slug":"sofa/sofa-tracer-disruptor","date":"2018-11-10T04:26:20.000Z","updated":"2024-07-05T04:09:05.802Z","comments":true,"path":"api/articles/sofa/sofa-tracer-disruptor.json","keywords":null,"cover":[],"text":"OpenTraceing 规范 OpenTracing语义标准 语义惯例 官方文档 SOFATracer 对 OpenTraceing 的实现 SOFATrac...","permalink":"/post/sofa/sofa-tracer-disruptor","photos":[],"count_time":{"symbolsCount":"29k","symbolsTime":"26 mins."},"categories":[{"name":"SOFA","slug":"SOFA","count":9,"path":"api/categories/SOFA.json"}],"tags":[{"name":"分布式链路跟踪","slug":"分布式链路跟踪","count":4,"path":"api/tags/分布式链路跟踪.json"},{"name":"Tracer","slug":"Tracer","count":4,"path":"api/tags/Tracer.json"},{"name":"Disruptor","slug":"Disruptor","count":1,"path":"api/tags/Disruptor.json"}],"author":{"name":"glmapper","slug":"blog-author","avatar":"https://glmapper-blog.oss-cn-hangzhou.aliyuncs.com/common/favicon.ico","link":"/","description":"开放，开源，分享，共享","socials":{"github":"https://github.com/glmapper","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/2412872703","zhihu":"","csdn":"","juejin":"https://juejin.cn/user/3227821827961806","customs":{"sofastack":{"icon":"https://glmapper-blog.oss-cn-hangzhou.aliyuncs.com/common/sofastack.svg","link":"https://www.sofastack.tech/"}}}}},"next_post":{"title":"聊一聊 Spring 中的扩展机制之 NamespaceHandler","uid":"23a4ce7fdfa388085850b04ca0698cfd","slug":"spring/spring-extention-namespace-handler","date":"2018-08-26T15:53:52.000Z","updated":"2024-07-05T04:09:05.816Z","comments":true,"path":"api/articles/spring/spring-extention-namespace-handler.json","keywords":null,"cover":[],"text":" 原文：https://juejin.cn/post/6844903665262657544 前一篇 聊一聊 Spring 中的扩展机制（一） 中聊到了Appl...","permalink":"/post/spring/spring-extention-namespace-handler","photos":[],"count_time":{"symbolsCount":"9.3k","symbolsTime":"8 mins."},"categories":[{"name":"spring","slug":"spring","count":15,"path":"api/categories/spring.json"}],"tags":[{"name":"spring","slug":"spring","count":11,"path":"api/tags/spring.json"},{"name":"spring 扩展机制","slug":"spring-扩展机制","count":2,"path":"api/tags/spring-扩展机制.json"}],"author":{"name":"glmapper","slug":"blog-author","avatar":"https://glmapper-blog.oss-cn-hangzhou.aliyuncs.com/common/favicon.ico","link":"/","description":"开放，开源，分享，共享","socials":{"github":"https://github.com/glmapper","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/2412872703","zhihu":"","csdn":"","juejin":"https://juejin.cn/user/3227821827961806","customs":{"sofastack":{"icon":"https://glmapper-blog.oss-cn-hangzhou.aliyuncs.com/common/sofastack.svg","link":"https://www.sofastack.tech/"}}}}}}