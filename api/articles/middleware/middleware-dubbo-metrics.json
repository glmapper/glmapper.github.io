{"title":"Dubbo Metrics 基本原理及扩展 OTLP 协议","uid":"f39ea97e417100cd6078bb8210dec4a8","slug":"middleware/middleware-dubbo-metrics","date":"2024-09-09T07:43:22.000Z","updated":"2024-09-09T07:52:15.462Z","comments":true,"path":"api/articles/middleware/middleware-dubbo-metrics.json","keywords":null,"cover":[],"content":"<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>关于 dubbo metrics 的使用可以参考<a href=\"https://dubbo.apache.org/zh-cn/overview/mannual/java-sdk/advanced-features-and-usage/observability/meter/\">dubbo-metrics</a> 和  <a href=\"https://dubbo.apache.org/zh-cn/overview/reference/proposals/metrics/\">可观测性 Metrics Proposal</a> 两篇文档。</p></blockquote>\n<p>dubbo 的 metrics 目前是基于 micrometer 实现，这里关于整体的代码结构与工作流程官方文档中阐述的比较清楚，本篇文档主要是补充官方文档之外的更多代码实现细节上的内容，以及简要阐述如何将 metrics 通过 OTLP 协议对外暴露的实现思路。</p>\n<h2 id=\"理解-MetricsEvent、MetricsListener、MetricsCollector-和-MetricsDispatcher\"><a href=\"#理解-MetricsEvent、MetricsListener、MetricsCollector-和-MetricsDispatcher\" class=\"headerlink\" title=\"理解 MetricsEvent、MetricsListener、MetricsCollector 和 MetricsDispatcher\"></a>理解 MetricsEvent、MetricsListener、MetricsCollector 和 MetricsDispatcher</h2><p>dubbo metrics 数据收集主要入口是 provider 端的 MetricsClusterFilter 和 consumer 端的 MetricsFilter 两个 Filter 扩展。metrics 数据的流转是通过 个事件总线进行的异步化处理，以降低埋点这种非核心代码的耦合度，从而有效的降低指标埋点所带来的性能消耗。</p>\n<h3 id=\"MetricsEvent\"><a href=\"#MetricsEvent\" class=\"headerlink\" title=\"MetricsEvent\"></a>MetricsEvent</h3><p>MetricsEvent 抽象类，在 Dubbo 的度量系统中主要用于封装和处理度量事件；TimeCounterEvent 在 Dubbo 的度量系统中用于标记某些类型的事件，并允许自动记录开始和结束时间，提供时间对 TimePair，它提供了一种灵活的方式来处理和记录度量事件的时间信息。下图是 MetricsEvent 的类图结构：</p>\n<p><img src=\"https://vspicgo.oss-cn-shanghai.aliyuncs.com/typora/MetricsEvent.png\" alt=\"MetricsEvent\"></p>\n<ul>\n<li>MetricsEvent：<ul>\n<li>存储度量事件的源对象，即 ApplicationModel 实例。这个实例包含了应用的所有信息，如服务、模块、实例等。 </li>\n<li>提供了一种机制来附加额外的信息到度量事件中。这些信息可以通过 attachments 字段来存储和获取</li>\n<li>提供了一个 MetricsDispatcher 实例，用于分发度量事件。</li>\n<li>提供了一种方式来检查度量事件的可用性。如果度量事件不可用，那么它将不会被分发</li>\n<li>提供了一个 TypeWrapper 实例，用于确定度量事件的类型。</li>\n<li>提供了一种方式来自定义度量事件在被发布后的行为，这可以通过覆盖 customAfterPost 方法来实现。</li>\n</ul>\n</li>\n<li>TimeCounterEvent ：<ul>\n<li>继承了 MetricsEvent 类的所有功能，如存储度量事件的源对象，附加额外的信息到度量事件中，分发度量事件等。 </li>\n<li>提供了一个 TimePair 实例，用于记录事件的开始和结束时间。这个实例在类的构造函数中通过 TimePair.start() 方法创建</li>\n<li>提供了一个 getTimePair 方法，用于获取记录的时间对</li>\n</ul>\n</li>\n</ul>\n<p>其他的诸如 MetadataEvent 等均属于某特定场景的子类事件，读者可以自行查看。</p>\n<h3 id=\"MetricsListener\"><a href=\"#MetricsListener\" class=\"headerlink\" title=\"MetricsListener\"></a>MetricsListener</h3><p>MetricsListener 定义了一个度量事件监听器应该具备的基本行为，其内部提供一个 onEvent 方法，用于度量事件发生时被调用。MetricsLifeListener 在 MetricsListener 基础上扩展了事件的两个生命周期方法 ：onEventFinish 和 onEventError，这两个方法分别在一个度量事件完成和出错时被调用。</p>\n<p>MetricsListener 子类扩展出了两个部分，一块是 xxxListener ，一块是 xxxCollector。可以参考下面两张图所示：</p>\n<ul>\n<li>MetricsListener</li>\n</ul>\n<p><img src=\"https://vspicgo.oss-cn-shanghai.aliyuncs.com/typora/MetricsListener.png\"></p>\n<ul>\n<li>MetricsCollector</li>\n</ul>\n<p><img src=\"https://vspicgo.oss-cn-shanghai.aliyuncs.com/typora/MetricsCollector.png\" alt=\"MetricsCollector\"></p>\n<p>从类图结构和代码分析来看，指标数据的采集最终会由 MetricsCollector 来完成，MetricsCollector 依托 MetricsListener 监听 Dubbo 服务的调用事件，收集各种指标数据。实际上在阅读代码的过程中发现，当 MetricsEventBus 接收到发布的信息时，首先是将信息转发到所有 MetricsCollector 中，如下图所示：</p>\n<p><img src=\"https://vspicgo.oss-cn-shanghai.aliyuncs.com/typora/image-20240402150032043.png\" alt=\"image-20240402150032043\"></p>\n<p>对于 CombMetricsCollector 的实现（上面 4 种均是），它们又会调用自己创建的 MetricsEventMulticaster 再次转发消息，到具体指标的监听器，然后这些监听器就会根据自己的逻辑修改 Collector 中的指标计数。</p>\n<h3 id=\"MetricsDispatcher\"><a href=\"#MetricsDispatcher\" class=\"headerlink\" title=\"MetricsDispatcher\"></a>MetricsDispatcher</h3><p>MetricsDispatcher 本质上就是一个简单的度量事件发布器，它实现了 <code>MetricsEventMulticaster</code> 接口。这个类的主要职责是管理度量事件的监听器，并在度量事件发生时通知这些监听器。其父类 SimpleMetricsEventMulticaster 中维护了一个 listeners 列表用于存储所有的度量事件监听器，这套设计应该是有参考 spring 的事件机制实现的。</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>在 MetricsDispatcher 的构造方法中，会通过 dubbo 自身的 SPI 机制将框架默认的一些 MetricsCollector 添加到 listeners 列表中。</p></blockquote>\n<p>实际上，这里的 MetricsDispatcher 并不是单纯只有一个 MetricsDispatcher，而是一组。</p>\n<p><img src=\"https://vspicgo.oss-cn-shanghai.aliyuncs.com/typora/MetricsDispatcher.png\" alt=\"MetricsDispatcher\"></p>\n<p>它们均继承自 SimpleMetricsEventMulticaster，因此它们都具有注册监听、转发事件的能力；每个 <strong>SubDispatcher 会绑定一个 Collector ，</strong>以 <strong>DefaultSubDispatcher</strong> 为例</p>\n<p><img src=\"https://vspicgo.oss-cn-shanghai.aliyuncs.com/typora/image-20240403202920854.png\" alt=\"image-20240403202920854\"></p>\n<p>DefaultSubDispatcher主要负责<strong>注册核心RPC调用次数指标</strong>，包括：</p>\n<ul>\n<li>请求次数 （METRIC_REQUESTS）</li>\n<li>请求成功次数（METRIC_REQUESTS_SUCCEED）</li>\n<li>请求失败次数（METRIC_REQUEST_BUSINESS_FAILED）</li>\n</ul>\n<p>这三个指标在内部实现上会映射成三个 MetricsCat，MetricsCat 是一个封装类，它包含了 MetricsKey 的行为，保存了键的完整内容（MetricsPlaceValue），对应的收集器（CombMetricsCollector），以及键级别的事件监听器（AbstractMetricsKeyListener），它将这些组合在一起，提供了一种灵活的方式来处理度量事件，借用官方文档中的描述就是：<strong>为特定指标生产指标监听器的工厂</strong>。</p>\n<h2 id=\"理解-MetricsReporter\"><a href=\"#理解-MetricsReporter\" class=\"headerlink\" title=\"理解 MetricsReporter\"></a>理解 MetricsReporter</h2><p>这部分主要是指标上报相关的核心设计。MetricsReporter 是将 Metrics 信息暴露给外部系统，dubbo 中默认提供了两种指标报告器 DefaultMetricsReporter 和 PrometheusMetricsReporter，如下图所示：</p>\n<p><img src=\"https://vspicgo.oss-cn-shanghai.aliyuncs.com/typora/MetricsReporter.png\" alt=\"MetricsReporter\"></p>\n<p>每个 MetricsReporter 都对应一个 MetricsReporterFactory，这里就是简单工厂模式的实现。</p>\n<p><img src=\"https://vspicgo.oss-cn-shanghai.aliyuncs.com/typora/MetricsReporterFactory.png\" alt=\"MetricsReporterFactory\"></p>\n<p>下面分析下 MetricsReporter 初始化的逻辑。</p>\n<h3 id=\"initMetricsReporter-初始化逻辑解析\"><a href=\"#initMetricsReporter-初始化逻辑解析\" class=\"headerlink\" title=\"initMetricsReporter 初始化逻辑解析\"></a>initMetricsReporter 初始化逻辑解析</h3><p> 在应用的初始化和启动过程中（具体代码参考：<code>org.apache.dubbo.config.deploy.DefaultApplicationDeployer</code>），通过 initMetricsReporter 方法来完成，下面摘取和 MetricsReporter 相关的部分代码：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 通过 SPI 机制获取 MetricsReporterFactory</span></span><br><span class=\"line\"><span class=\"type\">MetricsReporterFactory</span> <span class=\"variable\">metricsReporterFactory</span> <span class=\"operator\">=</span></span><br><span class=\"line\">                getExtensionLoader(MetricsReporterFactory.class).getAdaptiveExtension();</span><br><span class=\"line\"><span class=\"type\">MetricsReporter</span> <span class=\"variable\">metricsReporter</span> <span class=\"operator\">=</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\"><span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">  \t<span class=\"comment\">// 通过 MetricsReporterFactory 创建 MetricsReporter</span></span><br><span class=\"line\">    metricsReporter = metricsReporterFactory.createMetricsReporter(metricsConfig.toUrl());</span><br><span class=\"line\">&#125; <span class=\"keyword\">catch</span> (IllegalStateException e) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 省略</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// MetricsReporter 初始化</span></span><br><span class=\"line\">metricsReporter.init();</span><br><span class=\"line\">applicationModel.getBeanFactory().registerBean(metricsReporter);</span><br><span class=\"line\"><span class=\"comment\">// 如果当前不是使用默认协议，则也将默认的 MetricsReporter 创建出来</span></span><br><span class=\"line\"><span class=\"comment\">// 实际上目前仅提供了 default 和 prometheus 两种协议实现方式</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (!PROTOCOL_DEFAULT.equals(metricsConfig.getProtocol())) &#123;</span><br><span class=\"line\">    <span class=\"type\">DefaultMetricsReporterFactory</span> <span class=\"variable\">defaultMetricsReporterFactory</span> <span class=\"operator\">=</span></span><br><span class=\"line\">            <span class=\"keyword\">new</span> <span class=\"title class_\">DefaultMetricsReporterFactory</span>(applicationModel);</span><br><span class=\"line\">    <span class=\"type\">MetricsReporter</span> <span class=\"variable\">defaultMetricsReporter</span> <span class=\"operator\">=</span></span><br><span class=\"line\">            defaultMetricsReporterFactory.createMetricsReporter(metricsConfig.toUrl());</span><br><span class=\"line\">    defaultMetricsReporter.init();</span><br><span class=\"line\">    applicationModel.getBeanFactory().registerBean(defaultMetricsReporter);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>Dubbo 在 metrics 部分的设计使用了非常多的 SPI 扩展能力，包括 MetricsReporterFactory、MetricsCollector 等等，dubbo 作为一个通信框架，使用基于 SPI 而不是  AutoConfiguration （springboot 中的机制），应该也是不期望框架本身过度耦合 Springboot。</p></blockquote>\n<h2 id=\"基于事件驱动的埋点逻辑链路\"><a href=\"#基于事件驱动的埋点逻辑链路\" class=\"headerlink\" title=\"基于事件驱动的埋点逻辑链路\"></a>基于事件驱动的埋点逻辑链路</h2><p>Dubbo 指标采集的整体设计思路基于事件驱动编程思想，其大体的事件处理链路如下（参考官方提供）：</p>\n<p><img src=\"https://vspicgo.oss-cn-shanghai.aliyuncs.com/typora/metrics-event-struct.png\" alt=\"metrics-event-struct\"></p>\n<p>上面这张图，笔者一开始在分析的过程中其实有不少问题；从消息总线到指标转发器，再到指标转发器&#x2F;收集器，最后到指标监听器，事件的流转和二次发布理解起来还是有一些成本在的；在 debug 过程中，结合下面线程堆栈，自下而上，第一次事件发布，消费者是在收集器；第二次事件发布，消费者是监听器，最后再由收集器转存到 BaseStatComposite 中去。</p>\n<p><img src=\"https://vspicgo.oss-cn-shanghai.aliyuncs.com/typora/image-20240406092853120.png\" alt=\"image-20240406092853120\"></p>\n<p>因此这里对上图进行补充，将存储和 export&amp;reporter 也放进来，形成一个完整的结构图</p>\n<p><img src=\"https://vspicgo.oss-cn-shanghai.aliyuncs.com/typora/all-dubbo-metrics.png\" alt=\"all-dubbo-metrics\"></p>\n<h2 id=\"扩展-OTLP-协议\"><a href=\"#扩展-OTLP-协议\" class=\"headerlink\" title=\"扩展 OTLP 协议\"></a>扩展 OTLP 协议</h2><p>笔者在 <a href=\"https://juejin.cn/post/7349360417053474867\">架构解析系列-OTeL &amp; Micrometer 在 Spring Boot 中的应用与分析</a> 这篇文中分析了 springboot 中对于 OTeL &amp; Micrometer 的使用分析，springboot 提供的 埋点机制和 dubbo 中提供的是一样的，底层都是基于 Micrometer api，上层协议透出主要是依赖于 Micrometer 提供的不同sdk，主流的就是 prometheus 和 otlp。在 dubbo 社区的 这个提案 <a href=\"https://github.com/apache/dubbo/issues/13902\">issue</a> 中，已经提供了一些思路，笔者基于 dubbo 3.2.x 版本进行了初步的集成和测试，目前已经提交社区进行讨论，期待进一步的沟通和 approve。</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>因为 prometheus 和 otlp 使用的是两种不同的数据推送方式，prometheus 使用的是 pull 的方式，即提供一个 endpoint 出去（PushGateway 也是基于 push）；而 otlp 的实现则是通过 push 的方式。在推送的数据量中，prometheus 协议一次性推送了全量数据，otlp 则是按批推送。</p></blockquote>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>本篇的出发点是这个提案 <a href=\"https://github.com/apache/dubbo/issues/13902\">issue</a>，期望通过洞悉 dubbo 埋点的内部实现来找到 otlp 协议吐出的切入点。整体看来，dubbo 的 metrics 的实现逻辑还是比较清晰的，而且官方文档中对于 metrics 部分的源码分析也非常详细。笔者在参阅了官方文档和结合自己理解以及逐步 debug 逻辑，也基本摸清了dubbo 的实现逻辑，本篇作为学习备忘记录下来，也分享给更多的同学。</p>\n","text":" 关于 dubbo metrics 的使用可以参考dubbo-metrics 和 可观测性 Metrics Proposal 两篇文档。 dubbo 的 met...","permalink":"/post/middleware/middleware-dubbo-metrics","photos":[],"count_time":{"symbolsCount":"5.3k","symbolsTime":"5 mins."},"categories":[{"name":"Middleware","slug":"Middleware","count":14,"path":"api/categories/Middleware.json"}],"tags":[{"name":"Dubbo","slug":"Dubbo","count":1,"path":"api/tags/Dubbo.json"},{"name":"Metrics","slug":"Metrics","count":2,"path":"api/tags/Metrics.json"},{"name":"OTLP","slug":"OTLP","count":2,"path":"api/tags/OTLP.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E7%90%86%E8%A7%A3-MetricsEvent%E3%80%81MetricsListener%E3%80%81MetricsCollector-%E5%92%8C-MetricsDispatcher\"><span class=\"toc-text\">理解 MetricsEvent、MetricsListener、MetricsCollector 和 MetricsDispatcher</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#MetricsEvent\"><span class=\"toc-text\">MetricsEvent</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#MetricsListener\"><span class=\"toc-text\">MetricsListener</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#MetricsDispatcher\"><span class=\"toc-text\">MetricsDispatcher</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E7%90%86%E8%A7%A3-MetricsReporter\"><span class=\"toc-text\">理解 MetricsReporter</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#initMetricsReporter-%E5%88%9D%E5%A7%8B%E5%8C%96%E9%80%BB%E8%BE%91%E8%A7%A3%E6%9E%90\"><span class=\"toc-text\">initMetricsReporter 初始化逻辑解析</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%9F%BA%E4%BA%8E%E4%BA%8B%E4%BB%B6%E9%A9%B1%E5%8A%A8%E7%9A%84%E5%9F%8B%E7%82%B9%E9%80%BB%E8%BE%91%E9%93%BE%E8%B7%AF\"><span class=\"toc-text\">基于事件驱动的埋点逻辑链路</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%89%A9%E5%B1%95-OTLP-%E5%8D%8F%E8%AE%AE\"><span class=\"toc-text\">扩展 OTLP 协议</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%80%BB%E7%BB%93\"><span class=\"toc-text\">总结</span></a></li></ol>","author":{"name":"glmapper","slug":"blog-author","avatar":"https://glmapper-blog.oss-cn-hangzhou.aliyuncs.com/common/favicon.ico","link":"/","description":"开放，开源，分享，共享","socials":{"github":"https://github.com/glmapper","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/2412872703","zhihu":"","csdn":"","juejin":"https://juejin.cn/user/3227821827961806","customs":{"sofastack":{"icon":"https://glmapper-blog.oss-cn-hangzhou.aliyuncs.com/common/sofastack.svg","link":"https://www.sofastack.tech/"}}}},"mapped":true,"hidden":false,"prev_post":{"title":"OTeL & Micrometer 在 Spring Boot 中的应用与分析","uid":"7bb9924a7e1cee47f31fec8a03bac95f","slug":"middleware/middleware-micrometer-otel","date":"2024-09-09T07:44:30.000Z","updated":"2024-09-09T07:53:45.343Z","comments":true,"path":"api/articles/middleware/middleware-micrometer-otel.json","keywords":null,"cover":[],"text":"之前在 聊聊 SpringBoot3 的 Micrometer Tracing 这篇文章中我介绍了 SpringBoot3 使用 Micrometer Trac...","permalink":"/post/middleware/middleware-micrometer-otel","photos":[],"count_time":{"symbolsCount":"12k","symbolsTime":"11 mins."},"categories":[{"name":"Middleware","slug":"Middleware","count":14,"path":"api/categories/Middleware.json"}],"tags":[{"name":"Metrics","slug":"Metrics","count":2,"path":"api/tags/Metrics.json"},{"name":"OTLP","slug":"OTLP","count":2,"path":"api/tags/OTLP.json"}],"author":{"name":"glmapper","slug":"blog-author","avatar":"https://glmapper-blog.oss-cn-hangzhou.aliyuncs.com/common/favicon.ico","link":"/","description":"开放，开源，分享，共享","socials":{"github":"https://github.com/glmapper","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/2412872703","zhihu":"","csdn":"","juejin":"https://juejin.cn/user/3227821827961806","customs":{"sofastack":{"icon":"https://glmapper-blog.oss-cn-hangzhou.aliyuncs.com/common/sofastack.svg","link":"https://www.sofastack.tech/"}}}}},"next_post":{"title":"浅谈 JAVA 中的垃圾回收机制","uid":"75a9f38981cbb37e9f3b4b30830b22d2","slug":"jvm/jvm-gc-total-summary","date":"2024-07-01T02:59:14.000Z","updated":"2024-07-05T04:09:05.769Z","comments":true,"path":"api/articles/jvm/jvm-gc-total-summary.json","keywords":null,"cover":[],"text":"在现代编程语言中，垃圾回收机制（Garbage Collection）扮演着至关重要的角色，尤其在 Java 语言中更是如此。Java 作为一门广泛应用于企业级...","permalink":"/post/jvm/jvm-gc-total-summary","photos":[],"count_time":{"symbolsCount":"7.7k","symbolsTime":"7 mins."},"categories":[{"name":"jvm","slug":"jvm","count":6,"path":"api/categories/jvm.json"}],"tags":[{"name":"gc","slug":"gc","count":3,"path":"api/tags/gc.json"},{"name":"jvm","slug":"jvm","count":6,"path":"api/tags/jvm.json"}],"author":{"name":"glmapper","slug":"blog-author","avatar":"https://glmapper-blog.oss-cn-hangzhou.aliyuncs.com/common/favicon.ico","link":"/","description":"开放，开源，分享，共享","socials":{"github":"https://github.com/glmapper","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/2412872703","zhihu":"","csdn":"","juejin":"https://juejin.cn/user/3227821827961806","customs":{"sofastack":{"icon":"https://glmapper-blog.oss-cn-hangzhou.aliyuncs.com/common/sofastack.svg","link":"https://www.sofastack.tech/"}}}}}}