{"title":"CentOS 7 编译和部署 ZLMediaKit","uid":"112cbc38ea4b5162ae16f2ac3f23f8d7","slug":"middleware/middleware-zkmediakit-deploy-record","date":"2025-02-15T05:48:05.000Z","updated":"2025-02-15T05:51:05.618Z","comments":true,"path":"api/articles/middleware/middleware-zkmediakit-deploy-record.json","keywords":"宋国磊, glmapper, 卫恒, 分享, 开源","cover":null,"content":"<p>官方建议是在 Ubuntu 上去编译 ZLMediaKit；条件有限，我们的场景用的是 CentOS 7.9，所以就参考着官方文档的 QuickStart: <a href=\"https://github.com/ZLMediaKit/ZLMediaKit/wiki/%E5%BF%AB%E9%80%9F%E5%BC%80%E5%A7%8B\">https://github.com/ZLMediaKit/ZLMediaKit/wiki/%E5%BF%AB%E9%80%9F%E5%BC%80%E5%A7%8B</a> 和网上各位大神的博客以及 ChatGPT 帮忙下完成了在 CentOS 7 编译和部署 ZLMediaKit 的工作。在此整理以备后续查阅，也分享给其他需要的工程师。</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>整体还行，踩坑主要是 make 过程中缺少的乱七八糟依赖；总耗时大约 2 小时。</p></blockquote>\n<span id=\"more\"></span>\n<h1 id=\"基本构建工具\"><a href=\"#基本构建工具\" class=\"headerlink\" title=\"基本构建工具\"></a>基本构建工具</h1><h2 id=\"cmake\"><a href=\"#cmake\" class=\"headerlink\" title=\"cmake\"></a>cmake</h2><p>构建工具 cmake 版本要求 <code>&gt;3.1.3</code>：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># cmake --version</span></span><br><span class=\"line\">cmake version 3.15.5</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>卸载之前的 cmake：yum erase cmake</li>\n<li>yum install -y wget （已安装过可跳过）</li>\n<li>wget <a href=\"https://github.com/Kitware/CMake/releases/download/v3.15.5/cmake-3.15.5.tar.gz\">https://github.com/Kitware/CMake/releases/download/v3.15.5/cmake-3.15.5.tar.gz</a>(如果下载不了，直接去 github 上下载包，自行上传)</li>\n<li>tar -zxvf cmake-3.15.5.tar.gz</li>\n<li>cd cmake-3.15.5</li>\n<li>.&#x2F;bootstrap &amp;&amp; make -j4 &amp;&amp; sudo make install</li>\n<li>ln -s &#x2F;usr&#x2F;local&#x2F;bin&#x2F;cmake &#x2F;usr&#x2F;bin&#x2F;</li>\n</ul>\n<h2 id=\"openssl\"><a href=\"#openssl\" class=\"headerlink\" title=\"openssl\"></a>openssl</h2><p>我系统默认带的 openssl 是 1.0.2k-fips 版本</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># openssl version </span></span><br><span class=\"line\">OpenSSL 1.0.2k-fips  26 Jan 2017</span><br></pre></td></tr></table></figure>\n\n<p>看了很多网上资料，ZLMediaKit 编译依赖的 openssl 版本要 &gt; 1.1.，否则回出现如下类似报错</p>\n<ul>\n<li>1、<code>libssl.so.1.1: cannot open shared object file: No such file or directory</code></li>\n<li>2、<code>[ZLMediaKit]error: ‘X509_up_ref’ was not declared in this scope</code></li>\n<li>3、<code>openssl 未找到, rtmp 将不支持 flash 播放器</code></li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CMake Warning at CMakeLists.txt:412 (message):</span><br><span class=\"line\">  openssl 未找到, rtmp 将不支持 flash 播放器,</span><br><span class=\"line\">  https/wss/rtsps/rtmps/webrtc 也将失效</span><br></pre></td></tr></table></figure>\n\n\n\n<p>这里升级到 1.1.1</p>\n<ul>\n<li><p>先备份</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">mv</span> /usr/bin/openssl /usr/bin/openssl.bak</span><br><span class=\"line\"><span class=\"built_in\">mv</span> /usr/include/openssl /usr/include/openssl.bak</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>下载  wget <a href=\"https://www.openssl.org/source/openssl-1.1.1k.tar.gz\">https://www.openssl.org/source/openssl-1.1.1k.tar.gz</a></p>\n</li>\n<li><p>tar -zxvf openssl-1.1.1k.tar.gz</p>\n</li>\n<li><p>cd openssl-1.1.1k</p>\n</li>\n<li><p>.&#x2F;config shared –openssldir&#x3D;&#x2F;usr&#x2F;local&#x2F;openssl –prefix&#x3D;&#x2F;usr&#x2F;local&#x2F;openssl</p>\n</li>\n<li><p>make &amp;&amp; make install</p>\n</li>\n</ul>\n<p>编译完成后，使用 <code>openssl version</code> 来查看一下当前 openssl 版本号时，你会发现还是 1.0.2，所以这里需要做一些额外的配置工作</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">ln</span> -s /usr/local/openssl/bin/openssl /usr/bin/openssl</span><br><span class=\"line\"><span class=\"built_in\">ln</span> -s /usr/local/openssl/include/openssl /usr/include/openssl</span><br><span class=\"line\"><span class=\"built_in\">echo</span> “/usr/local/openssl/lib” &gt;&gt; /etc/ld.so.conf</span><br><span class=\"line\">ldconfig -v</span><br></pre></td></tr></table></figure>\n\n<p>查看(PS：如果有一些奇怪的提示或者报错，可以重载当前窗口再进入试试)</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># openssl version </span></span><br><span class=\"line\">OpenSSL 1.1.1k  25 Mar 2021</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"libsrtp2\"><a href=\"#libsrtp2\" class=\"headerlink\" title=\"libsrtp2\"></a>libsrtp2</h2><p>这个不安装，编译时会出现如下告警</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[ZLMediaKit]srtp 未找到, WebRTC 相关功能打开失败</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>下载 <a href=\"https://github.com/cisco/libsrtp/releases\">https://github.com/cisco/libsrtp/releases</a></li>\n<li>解压 tar -zxvf libsrtp-2.3.0.tar.gz </li>\n<li>cd libsrtp-2.3.0</li>\n<li>.&#x2F;configure –enable-openssl –with-openssl-dir&#x3D;&#x2F;usr&#x2F;local&#x2F;openssl</li>\n<li>sudo  make -j8 &amp;&amp; sudo make install</li>\n</ul>\n<h2 id=\"编译之前准备\"><a href=\"#编译之前准备\" class=\"headerlink\" title=\"编译之前准备\"></a>编译之前准备</h2><p>避免踩坑，在编译之前先处理好一些环境问题，比如我在编译时，因为 openssl 已经安装过了，并且版本正确；但是可能是连接器无法找到 openssl 中的相关初始化函数，导致我出现如下错误信息：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/data/tools/ZLMediaKit/3rdpart/ZLToolKit/src/Util/SSLBox.cpp:48: undefined reference to OPENSSL_init_ssl<span class=\"string\">&#x27;</span></span><br><span class=\"line\"><span class=\"string\">/data/tools/ZLMediaKit/3rdpart/ZLToolKit/src/Util/SSLBox.cpp:49: undefined reference to OPENSSL_init_ssl&#x27;</span></span><br><span class=\"line\">/data/tools/ZLMediaKit/3rdpart/ZLToolKit/src/Util/SSLBox.cpp:50: undefined reference to OPENSSL_init_crypto<span class=\"string\">&#x27;</span></span><br><span class=\"line\"><span class=\"string\">/data/tools/ZLMediaKit/3rdpart/ZLToolKit/src/Util/SSLBox.cpp:51: undefined reference to OPENSSL_init_crypto&#x27;</span></span><br><span class=\"line\">/data/tools/ZLMediaKit/3rdpart/ZLToolKit/src/Util/SSLBox.cpp:52: undefined reference to OPENSSL_init_crypto<span class=\"string\">&#x27;</span></span><br></pre></td></tr></table></figure>\n\n\n\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">../../../release/linux/Debug/libmk_api.so: undefined reference to HMAC_CTX_reset<span class=\"string\">&#x27;</span></span><br><span class=\"line\"><span class=\"string\">../../../release/linux/Debug/libmk_api.so: undefined reference to X509_get0_pubkey&#x27;</span></span><br><span class=\"line\">../../../release/linux/Debug/libmk_api.so: undefined reference to OPENSSL_init_crypto<span class=\"string\">&#x27;</span></span><br><span class=\"line\"><span class=\"string\">../../../release/linux/Debug/libmk_api.so: undefined reference to OPENSSL_init_ssl&#x27;</span></span><br><span class=\"line\">../../../release/linux/Debug/libmk_api.so: undefined reference to TLS_server_method<span class=\"string\">&#x27;</span></span><br><span class=\"line\"><span class=\"string\">../../../release/linux/Debug/libmk_api.so: undefined reference to SSL_is_init_finished&#x27;</span></span><br><span class=\"line\">../../../release/linux/Debug/libmk_api.so: undefined reference to HMAC_CTX_free<span class=\"string\">&#x27;</span></span><br><span class=\"line\"><span class=\"string\">../../../release/linux/Debug/libmk_api.so: undefined reference to SSL_CTX_set_options&#x27;</span></span><br><span class=\"line\">../../../release/linux/Debug/libmk_api.so: undefined reference to X509_getm_notBefore<span class=\"string\">&#x27;</span></span><br><span class=\"line\"><span class=\"string\">../../../release/linux/Debug/libmk_api.so: undefined reference to EVP_PKEY_up_ref&#x27;</span></span><br><span class=\"line\">../../../release/linux/Debug/libmk_api.so: undefined reference to TLS_client_method<span class=\"string\">&#x27;</span></span><br><span class=\"line\"><span class=\"string\">../../../release/linux/Debug/libmk_api.so: undefined reference to X509_up_ref&#x27;</span></span><br><span class=\"line\">../../../release/linux/Debug/libmk_api.so: undefined reference to HMAC_CTX_new<span class=\"string\">&#x27;</span></span><br><span class=\"line\"><span class=\"string\">../../../release/linux/Debug/libmk_api.so: undefined reference to X509_getm_notAfter&#x27;</span></span><br><span class=\"line\">../../../release/linux/Debug/libmk_api.so: undefined reference to DTLS_set_timer_cb<span class=\"string\">&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<p>GPT 给出的解决方案包括</p>\n<h3 id=\"确认-OpenSSL-库和符号\"><a href=\"#确认-OpenSSL-库和符号\" class=\"headerlink\" title=\"确认 OpenSSL 库和符号\"></a>确认 OpenSSL 库和符号</h3><p>确保 OpenSSL 库文件确实存在，并且包含 <code>OPENSSL_init_ssl</code> 和 <code>OPENSSL_init_crypto</code> 符号。你可以使用 <code>nm</code> 工具检查 OpenSSL 库文件中的符号：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nm /usr/local/openssl/lib/libssl.so | grep OPENSSL_init_ssl</span><br><span class=\"line\">nm /usr/local/openssl/lib/libssl.so | grep OPENSSL_init_crypto</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"手动指定-OpenSSL-路径\"><a href=\"#手动指定-OpenSSL-路径\" class=\"headerlink\" title=\"手动指定 OpenSSL 路径\"></a>手动指定 OpenSSL 路径</h3><p>CMakeLists.txt</p>\n<figure class=\"highlight cmake\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">find_package</span>(OpenSSL REQUIRED PATHS /usr/local/openssl /usr/<span class=\"keyword\">include</span>/openssl)</span><br><span class=\"line\"><span class=\"keyword\">target_link_libraries</span>(your_target /usr/local/openssl/lib/libssl.a /usr/local/openssl/lib/libcrypto.a)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"编译时指定\"><a href=\"#编译时指定\" class=\"headerlink\" title=\"编译时指定\"></a>编译时指定</h3><p>在编译时设置 <code>LDFLAGS</code> 和 <code>CXXFLAGS</code> 环境变量，确保链接器能够找到 OpenSSL 库：</p>\n<figure class=\"highlight cmake\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> LDFLAGS=<span class=\"string\">&quot;-L/usr/local/openssl/lib&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> CXXFLAGS=<span class=\"string\">&quot;-I/usr/local/openssl/include&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>我是通过编译时指定的方式构建成功的。</p>\n<h1 id=\"编译\"><a href=\"#编译\" class=\"headerlink\" title=\"编译\"></a>编译</h1><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">国内用户推荐从同步镜像网站gitee下载</span> </span><br><span class=\"line\">git clone --depth 1 https://gitee.com/xia-chu/ZLMediaKit &amp;&amp; cd ZLMediaKit</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">千万不要忘记执行这句命令,官方文档强调</span></span><br><span class=\"line\">git submodule update --init</span><br><span class=\"line\"></span><br><span class=\"line\">mkdir build &amp;&amp; cd build</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">macOS 下可能需要这样指定 openss 路径：cmake .. -DOPENSSL_ROOT_DIR=/usr/local/Cellar/openssl/1.0.2j/</span></span><br><span class=\"line\">cmake .. &amp;&amp; make -j4</span><br></pre></td></tr></table></figure>\n\n<p>成功编译后日志大致如下(<code>/data/tools/ZLMediaKit/build</code> 是我的路径)：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">make[2]: Leaving directory `/data/tools/ZLMediaKit/build<span class=\"string\">&#x27;</span></span><br><span class=\"line\"><span class=\"string\">[100%] Built target test_rtp</span></span><br><span class=\"line\"><span class=\"string\">make[2]: Leaving directory `/data/tools/ZLMediaKit/build&#x27;</span></span><br><span class=\"line\">[100%] Built target api_tester_pusher</span><br><span class=\"line\">make[2]: Leaving directory `/data/tools/ZLMediaKit/build<span class=\"string\">&#x27;</span></span><br><span class=\"line\"><span class=\"string\">[100%] Built target test_wsServer</span></span><br><span class=\"line\"><span class=\"string\">make[2]: Leaving directory `/data/tools/ZLMediaKit/build&#x27;</span></span><br><span class=\"line\">[100%] Built target test_server</span><br><span class=\"line\">make[1]: Leaving directory `/data/tools/ZLMediaKit/build<span class=\"string\">&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"启动\"><a href=\"#启动\" class=\"headerlink\" title=\"启动\"></a>启动</h1><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 挪到 /opt/ZLMediaKit 下</span></span><br><span class=\"line\"><span class=\"built_in\">mkdir</span> -p /opt/ZLMediaKit下</span><br><span class=\"line\"><span class=\"built_in\">mv</span> ../release/linux/Debug/* /opt/ZLMediaKit/ &amp;&amp; <span class=\"built_in\">cd</span> /opt/ZLMediaKit/</span><br><span class=\"line\"><span class=\"comment\"># 备份配置文件</span></span><br><span class=\"line\"><span class=\"built_in\">cp</span> config.ini config.ini.template</span><br><span class=\"line\"><span class=\"comment\"># 修改 mediaServerId= &#123;your_server_id&#125;</span></span><br><span class=\"line\">vim config.ini</span><br></pre></td></tr></table></figure>\n\n<p>通过 -h 可以了解启动参数 <code>./MediaServer -h</code></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">2025-02-14 17:35:29.340 I [MediaServer] [809550-MediaServer] Factory.cpp:35 registerPlugin | Load codec: H264</span><br><span class=\"line\">2025-02-14 17:35:29.340 I [MediaServer] [809550-MediaServer] Factory.cpp:35 registerPlugin | Load codec: H265</span><br><span class=\"line\">2025-02-14 17:35:29.340 I [MediaServer] [809550-MediaServer] Factory.cpp:35 registerPlugin | Load codec: JPEG</span><br><span class=\"line\">2025-02-14 17:35:29.340 I [MediaServer] [809550-MediaServer] Factory.cpp:35 registerPlugin | Load codec: mpeg4-generic</span><br><span class=\"line\">2025-02-14 17:35:29.340 I [MediaServer] [809550-MediaServer] Factory.cpp:35 registerPlugin | Load codec: opus</span><br><span class=\"line\">2025-02-14 17:35:29.340 I [MediaServer] [809550-MediaServer] Factory.cpp:35 registerPlugin | Load codec: PCMA</span><br><span class=\"line\">2025-02-14 17:35:29.340 I [MediaServer] [809550-MediaServer] Factory.cpp:35 registerPlugin | Load codec: PCMU</span><br><span class=\"line\">2025-02-14 17:35:29.340 I [MediaServer] [809550-MediaServer] Factory.cpp:35 registerPlugin | Load codec: L16</span><br><span class=\"line\">2025-02-14 17:35:29.340 I [MediaServer] [809550-MediaServer] Factory.cpp:35 registerPlugin | Load codec: MP3</span><br><span class=\"line\">  -h  --<span class=\"built_in\">help</span>       无参  默认:null                         选填  打印此信息</span><br><span class=\"line\">  -d  --daemon     无参  默认:null                         选填  是否以Daemon方式启动</span><br><span class=\"line\">  -l  --level      有参  默认:1                            选填  日志等级,LTrace~LError(0~4)</span><br><span class=\"line\">  -m  --max_day    有参  默认:7                            选填  日志最多保存天数</span><br><span class=\"line\">  -c  --config     有参  默认:/opt/ZLMediaKit/config.ini   选填  配置文件路径</span><br><span class=\"line\">  -s  --ssl        有参  默认:/opt/ZLMediaKit/default.pem  选填  ssl证书文件或文件夹,支持p12/pem类型</span><br><span class=\"line\">  -t  --threads    有参  默认:32                           选填  启动事件触发线程数</span><br><span class=\"line\">      --affinity   有参  默认:1                            选填  是否启动cpu亲和性设置</span><br><span class=\"line\">  -v  --version    无参  默认:null                         选填  显示版本号</span><br><span class=\"line\">      --log-slice  有参  默认:100                          选填  最大保存日志切片个数</span><br><span class=\"line\">      --log-size   有参  默认:256                          选填  单个日志切片最大容量,单位MB</span><br><span class=\"line\">      --log-dir    有参  默认:/opt/ZLMediaKit/log/         选填  日志保存文件夹路径</span><br><span class=\"line\"></span><br><span class=\"line\">2025-02-14 17:35:29.342 I [MediaServer] [809550-MediaServer] logger.cpp:91 ~Logger | </span><br></pre></td></tr></table></figure>\n\n<p>以守护进程模式启动 <code>./MediaServer -d &amp;</code></p>\n<h1 id=\"安装-Ffmpeg\"><a href=\"#安装-Ffmpeg\" class=\"headerlink\" title=\"安装 Ffmpeg\"></a>安装 Ffmpeg</h1><p>先安装 epel-release</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install epel-release</span><br></pre></td></tr></table></figure>\n\n<p>安装 nux 存储库</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rpm -v --import http://li.nux.ro/download/nux/RPM-GPG-KEY-nux.ro</span><br><span class=\"line\">rpm -Uvh http://li.nux.ro/download/nux/dextop/el7/x86_64/nux-dextop-release-0-5.el7.nux.noarch.rpm</span><br></pre></td></tr></table></figure>\n\n<p>安装 ffmpeg</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install ffmpeg ffmpeg-devel</span><br></pre></td></tr></table></figure>\n\n<p>最后测试下</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># ffmpeg -version</span></span><br><span class=\"line\">ffmpeg version 2.8.15 Copyright (c) 2000-2018 the FFmpeg developers</span><br><span class=\"line\">built with gcc 4.8.5 (GCC) 20150623 (Red Hat 4.8.5-36)</span><br><span class=\"line\">configuration: --prefix=/usr --bindir=/usr/bin --datadir=/usr/share/ffmpeg --incdir=/usr/include/ffmpeg --libdir=/usr/lib64 --mandir=/usr/share/man --<span class=\"built_in\">arch</span>=x86_64 --optflags=<span class=\"string\">&#x27;-O2 -g -pipe -Wall -Wp,-D_FORTIFY_SOURCE=2 -fexceptions -fstack-protector-strong --param=ssp-buffer-size=4 -grecord-gcc-switches -m64 -mtune=generic&#x27;</span> --extra-ldflags=<span class=\"string\">&#x27;-Wl,-z,relro &#x27;</span> --enable-libopencore-amrnb --enable-libopencore-amrwb --enable-libvo-amrwbenc --enable-version3 --enable-bzlib --disable-crystalhd --enable-gnutls --enable-ladspa --enable-libass --enable-libcdio --enable-libdc1394 --enable-libfdk-aac --enable-nonfree --disable-indev=jack --enable-libfreetype --enable-libgsm --enable-libmp3lame --enable-openal --enable-libopenjpeg --enable-libopus --enable-libpulse --enable-libschroedinger --enable-libsoxr --enable-libspeex --enable-libtheora --enable-libvorbis --enable-libv4l2 --enable-libx264 --enable-libx265 --enable-libxvid --enable-x11grab --enable-avfilter --enable-avresample --enable-postproc --enable-pthreads --disable-static --enable-shared --enable-gpl --disable-debug --disable-stripping --shlibdir=/usr/lib64 --enable-runtime-cpudetect</span><br><span class=\"line\">libavutil      54. 31.100 / 54. 31.100</span><br><span class=\"line\">libavcodec     56. 60.100 / 56. 60.100</span><br><span class=\"line\">libavformat    56. 40.101 / 56. 40.101</span><br><span class=\"line\">libavdevice    56.  4.100 / 56.  4.100</span><br><span class=\"line\">libavfilter     5. 40.101 /  5. 40.101</span><br><span class=\"line\">libavresample   2.  1.  0 /  2.  1.  0</span><br><span class=\"line\">libswscale      3.  1.101 /  3.  1.101</span><br><span class=\"line\">libswresample   1.  2.101 /  1.  2.101</span><br><span class=\"line\">libpostproc    53.  3.100 / 53.  3.100</span><br></pre></td></tr></table></figure>\n\n","text":"官方建议是在 Ubuntu 上去编译 ZLMediaKit；条件有限，我们的场景用的是 CentOS 7.9，所以就参考着官方文档的 QuickStart: h...","permalink":"/post/middleware/middleware-zkmediakit-deploy-record","photos":[],"count_time":{"symbolsCount":"9.9k","symbolsTime":"9 mins."},"categories":[{"name":"Middleware","slug":"Middleware","count":14,"path":"api/categories/Middleware.json"}],"tags":[{"name":"ZLMediaKit","slug":"ZLMediaKit","count":1,"path":"api/tags/ZLMediaKit.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E5%9F%BA%E6%9C%AC%E6%9E%84%E5%BB%BA%E5%B7%A5%E5%85%B7\"><span class=\"toc-text\">基本构建工具</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#cmake\"><span class=\"toc-text\">cmake</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#openssl\"><span class=\"toc-text\">openssl</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#libsrtp2\"><span class=\"toc-text\">libsrtp2</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E7%BC%96%E8%AF%91%E4%B9%8B%E5%89%8D%E5%87%86%E5%A4%87\"><span class=\"toc-text\">编译之前准备</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%A1%AE%E8%AE%A4-OpenSSL-%E5%BA%93%E5%92%8C%E7%AC%A6%E5%8F%B7\"><span class=\"toc-text\">确认 OpenSSL 库和符号</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%89%8B%E5%8A%A8%E6%8C%87%E5%AE%9A-OpenSSL-%E8%B7%AF%E5%BE%84\"><span class=\"toc-text\">手动指定 OpenSSL 路径</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%BC%96%E8%AF%91%E6%97%B6%E6%8C%87%E5%AE%9A\"><span class=\"toc-text\">编译时指定</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E7%BC%96%E8%AF%91\"><span class=\"toc-text\">编译</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E5%90%AF%E5%8A%A8\"><span class=\"toc-text\">启动</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E5%AE%89%E8%A3%85-Ffmpeg\"><span class=\"toc-text\">安装 Ffmpeg</span></a></li></ol>","author":{"name":"glmapper","slug":"blog-author","avatar":"https://glmapper-blog.oss-cn-hangzhou.aliyuncs.com/common/favicon.ico","link":"/","description":"开放，开源，分享，共享","socials":{"github":"https://github.com/glmapper","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/2412872703","zhihu":"","csdn":"","juejin":"https://juejin.cn/user/3227821827961806","customs":{"sofastack":{"icon":"https://glmapper-blog.oss-cn-hangzhou.aliyuncs.com/common/sofastack.svg","link":"https://www.sofastack.tech/"}}}},"mapped":true,"hidden":false,"prev_post":{"title":"探秘开源协议：守护开源生态的规则之书","uid":"8df8017ab5c5647c218cf87cc6b0a97e","slug":"tools/tool-open-protocol","date":"2025-02-15T06:01:31.000Z","updated":"2025-02-15T06:03:35.989Z","comments":true,"path":"api/articles/tools/tool-open-protocol.json","keywords":"宋国磊, glmapper, 卫恒, 分享, 开源","cover":null,"text":"近期在调研一些技术产品时发现一个较为普遍的现象，国内众多个人开发者或小型公司，在项目中采用了相对宽松的开源协议，如 MIT、BSD 等。然而，他们并未完整地开源...","permalink":"/post/tools/tool-open-protocol","photos":[],"count_time":{"symbolsCount":"3.6k","symbolsTime":"3 mins."},"categories":[{"name":"工具","slug":"工具","count":3,"path":"api/categories/工具.json"}],"tags":[{"name":"开源协议","slug":"开源协议","count":1,"path":"api/tags/开源协议.json"}],"author":{"name":"glmapper","slug":"blog-author","avatar":"https://glmapper-blog.oss-cn-hangzhou.aliyuncs.com/common/favicon.ico","link":"/","description":"开放，开源，分享，共享","socials":{"github":"https://github.com/glmapper","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/2412872703","zhihu":"","csdn":"","juejin":"https://juejin.cn/user/3227821827961806","customs":{"sofastack":{"icon":"https://glmapper-blog.oss-cn-hangzhou.aliyuncs.com/common/sofastack.svg","link":"https://www.sofastack.tech/"}}}}},"next_post":{"title":"神经网络浅讲：从神经元到深度学习","uid":"b66d839268b41dec0c2b4caf81d61b35","slug":"llm/shenduxuexi-shenjingwangluo","date":"2024-12-25T09:46:44.000Z","updated":"2024-12-25T09:49:08.848Z","comments":true,"path":"api/articles/llm/shenduxuexi-shenjingwangluo.json","keywords":"宋国磊, glmapper, 卫恒, 分享, 开源","cover":[],"text":" 本篇是笔者最近在学习机器学习时阅读到的一篇文章，刚好和笔者最近在阅读《深度学习革命》这本书里的内容有较多的重叠之处，结合来看，个人认为它比较清楚的帮我捋顺了一...","permalink":"/post/llm/shenduxuexi-shenjingwangluo","photos":[],"count_time":{"symbolsCount":"14k","symbolsTime":"12 mins."},"categories":[{"name":"LLM","slug":"LLM","count":6,"path":"api/categories/LLM.json"}],"tags":[{"name":"neural network","slug":"neural-network","count":1,"path":"api/tags/neural-network.json"},{"name":"marchine learning","slug":"marchine-learning","count":1,"path":"api/tags/marchine-learning.json"}],"author":{"name":"glmapper","slug":"blog-author","avatar":"https://glmapper-blog.oss-cn-hangzhou.aliyuncs.com/common/favicon.ico","link":"/","description":"开放，开源，分享，共享","socials":{"github":"https://github.com/glmapper","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/2412872703","zhihu":"","csdn":"","juejin":"https://juejin.cn/user/3227821827961806","customs":{"sofastack":{"icon":"https://glmapper-blog.oss-cn-hangzhou.aliyuncs.com/common/sofastack.svg","link":"https://www.sofastack.tech/"}}}}}}