{"title":"OTeL & Micrometer 在 Spring Boot 中的应用与分析","uid":"7bb9924a7e1cee47f31fec8a03bac95f","slug":"middleware/middleware-micrometer-otel","date":"2024-09-09T07:44:30.000Z","updated":"2024-09-09T07:53:45.343Z","comments":true,"path":"api/articles/middleware/middleware-micrometer-otel.json","keywords":"宋国磊, glmapper, 卫恒, 分享, 开源","cover":[],"content":"<p>之前在 <a href=\"https://juejin.cn/post/7173914390352101412\">聊聊 SpringBoot3 的 Micrometer Tracing</a> 这篇文章中我介绍了 SpringBoot3 使用 Micrometer Tracing 来作为分布式链路组件的来龙去脉，在那篇文章中也提及了 SpringBoot  在 可观测性部分官方默认使用的是 Micrometer 来实现。</p>\n<p>实际上，在可观测性部分，OpenTelemetry  正在往大一统的方向不断前进，SpringBoot 即时默认使用 Micrometer 来补充其在可观测性上的板块，但是社区也从未停止过对于 SpringBoot 集成 OpenTelemetry 讨论；SpringBoot 实际上先是在 tracing 上完成了对于 OTEL tracing 的桥接，但是对于 metrics 却迟了一些动作，可以从这里看到关于 SpringBoot 对于可观测性的计划 <a href=\"https://github.com/spring-projects/spring-boot/issues/35776\">Observability Planning</a>。关于 OpenTelemetry support in Spring 的讨论，在这个 issue 中有比较详细的记录 <a href=\"https://github.com/spring-projects/spring-boot/issues/37278\">Consolidate OpenTelemetry support in Spring</a>。</p>\n<p>在本篇文章中，我将向您介绍如何使用 OpenTelemetry Java agent 来捕获 SpringBoot Metrics。并希望通过本篇来了解 <em>Micrometer</em> metrics 以及 <em>OpenTelemetry</em> metrics 在指标收集中的差异以及两种报文协议的区别。</p>\n<h2 id=\"环境及前置步骤准备\"><a href=\"#环境及前置步骤准备\" class=\"headerlink\" title=\"环境及前置步骤准备\"></a>环境及前置步骤准备</h2><ul>\n<li>环境</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>项目</th>\n<th>版本</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>macOS</td>\n<td>14.4</td>\n</tr>\n<tr>\n<td>jdk</td>\n<td>21</td>\n</tr>\n<tr>\n<td>Springboot</td>\n<td>3.2.3</td>\n</tr>\n</tbody></table>\n<ul>\n<li>基本依赖</li>\n</ul>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-web<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-test<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">scope</span>&gt;</span>test<span class=\"tag\">&lt;/<span class=\"name\">scope</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>这里仅提供了最基本的 web 工程的依赖，你可以在 idea 或者 start.spring.io 来初始化一个测试工程。</p>\n<h2 id=\"基于-Micrometer-metrics-的指标收集\"><a href=\"#基于-Micrometer-metrics-的指标收集\" class=\"headerlink\" title=\"基于 Micrometer metrics 的指标收集\"></a>基于 Micrometer metrics 的指标收集</h2><p>基于前面的环境和前置步骤，搭建一个简单的 SpringBoot 样例工程。前面提到，SpringBoot 默认使用 micrometer 来实现指标的收集，下面在依赖中添加基于 Prometheus 协议的 registry 来暴露 micrometer 指标。</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!--注意这里使用的是 micrometer-registry-prometheus，在后面将会替换成 otlp 的--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>io.micrometer<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>micrometer-registry-prometheus<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>在 配置文件中配置暴露 prometheus endpoint。</p>\n<figure class=\"highlight properties\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">management.endpoints.web.exposure.include</span>=<span class=\"string\">prometheus</span></span><br></pre></td></tr></table></figure>\n\n<p>启动应用之后，可以通过 <code>http://localhost:8080/actuator/prometheus</code> 来查看默认的一些指标信息。关于指标信息的解释可以查阅 springboot 官方文档 <a href=\"https://docs.spring.io/spring-boot/docs/current/reference/html/actuator.html#actuator.metrics.supported.jvm\">Metrics</a>。这里我添加一个默认的自定义指标 <code>hello.total</code> 来统计调用 &#x2F;hello 接口的次数，以便于后面来区分不同协议中的表现，代码如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@RestController</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">HelloController</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> MeterRegistry registry;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">HelloController</span><span class=\"params\">(MeterRegistry registry)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.registry = registry;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@RequestMapping(&quot;hello&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">hello</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.registry.counter(<span class=\"string\">&quot;hello.total&quot;</span>).increment();</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;hello glmapper&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>请求此接口之后得到的指标信息如下：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">➜  ~ curl -i http://localhost:8080/actuator/prometheus | grep hello_total</span><br><span class=\"line\"><span class=\"comment\"># HELP hello_total</span></span><br><span class=\"line\"><span class=\"comment\"># TYPE hello_total counter</span></span><br><span class=\"line\">hello_total 1.0</span><br></pre></td></tr></table></figure>\n\n\n\n<p>到这里，初步完成相关的准备工作，这里提供出去的 &#x2F;actuator&#x2F;prometheus 实际上就是我们常规生产环境中对外暴露的监控数据获取的 endpoint，以便于 promethus 来拉取指标数据，这里不在赘述。</p>\n<h2 id=\"使用-OpenTelemetry-Collector-来抓取-actuator-prometheus-数据\"><a href=\"#使用-OpenTelemetry-Collector-来抓取-actuator-prometheus-数据\" class=\"headerlink\" title=\"使用 OpenTelemetry Collector 来抓取  &#x2F;actuator&#x2F;prometheus 数据\"></a>使用 OpenTelemetry Collector 来抓取  &#x2F;actuator&#x2F;prometheus 数据</h2><p>首先，需要部署一个  <a href=\"https://opentelemetry.io/docs/collector/\">OpenTelemetry Collector</a> ，这里可以根据官方文档来部署，<a href=\"https://opentelemetry.io/docs/collector/installation/%E3%80%82%E6%88%91%E8%BF%99%E9%87%8C%E6%98%AF%E4%BB%8E\">https://opentelemetry.io/docs/collector/installation/。我这里是从</a> <a href=\"https://github.com/open-telemetry/opentelemetry-collector-releases/releases\">GitHub</a> 下载的可执行文件安装的，可以根据你的操作系统来选择具体的可执行文件下载。然后根据<a href=\"https://opentelemetry.io/docs/collector/configuration/\">官方文档的配置</a>来创建一个 config.yaml 文件，用于指定相应的 <strong>receivers</strong> 和 <strong>exporters</strong>，下面是参考官方文档创建的配置文件：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">receivers:</span></span><br><span class=\"line\">  <span class=\"attr\">prometheus:</span></span><br><span class=\"line\">    <span class=\"attr\">config:</span></span><br><span class=\"line\">      <span class=\"attr\">scrape_configs:</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">job_name:</span> <span class=\"string\">&quot;springboot-otel-guides&quot;</span></span><br><span class=\"line\">          <span class=\"attr\">scrape_interval:</span> <span class=\"string\">5s</span> <span class=\"comment\"># 采集的时间间隔</span></span><br><span class=\"line\">          <span class=\"attr\">metrics_path:</span> <span class=\"string\">&#x27;/actuator/prometheus&#x27;</span> <span class=\"comment\">#采集的目标服务对外提供的 metric endpoint path</span></span><br><span class=\"line\">          <span class=\"attr\">static_configs:</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"attr\">targets:</span> [<span class=\"string\">&quot;localhost:8080&quot;</span>] <span class=\"comment\">#采集的目标服务地址</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">exporters:</span></span><br><span class=\"line\">  <span class=\"attr\">prometheus:</span></span><br><span class=\"line\">    <span class=\"attr\">endpoint:</span> <span class=\"string\">&quot;localhost:8889&quot;</span> <span class=\"comment\">#收集器对外暴露访问的地址，这里仅配置了 prometheus 的 exporters</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">service:</span></span><br><span class=\"line\">  <span class=\"attr\">pipelines:</span></span><br><span class=\"line\">    <span class=\"attr\">metrics:</span></span><br><span class=\"line\">      <span class=\"attr\">receivers:</span> [<span class=\"string\">prometheus</span>]  <span class=\"comment\"># 使用 prometheus 协议，对应上面的 receivers#prometheus</span></span><br><span class=\"line\">      <span class=\"attr\">processors:</span> [<span class=\"string\">batch</span>]</span><br><span class=\"line\">      <span class=\"attr\">exporters:</span> [<span class=\"string\">prometheus</span>] <span class=\"comment\"># 对应上面 exporters#prometheus</span></span><br></pre></td></tr></table></figure>\n\n<p>启动 OTEL Collector</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./otelcol --config=config.yaml</span><br></pre></td></tr></table></figure>\n\n<p>启动日志大致如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Downloads ./otelcol-contrib_0.96.0_darwin_arm64/otelcol-contrib --config=config.yaml</span><br><span class=\"line\">2024-03-21T15:58:26.162+0800\tinfo\tservice@v0.96.0/telemetry.go:55\tSetting up own telemetry...</span><br><span class=\"line\">2024-03-21T15:58:26.162+0800\tinfo\tservice@v0.96.0/telemetry.go:97\tServing metrics\t&#123;&quot;address&quot;: &quot;:8888&quot;, &quot;level&quot;: &quot;Basic&quot;&#125;</span><br><span class=\"line\">2024-03-21T15:58:26.162+0800\tinfo\tservice@v0.96.0/service.go:143\tStarting otelcol-contrib...\t&#123;&quot;Version&quot;: &quot;0.96.0&quot;, &quot;NumCPU&quot;: 8&#125;</span><br><span class=\"line\">2024-03-21T15:58:26.162+0800\tinfo\textensions/extensions.go:34\tStarting extensions...</span><br><span class=\"line\">2024-03-21T15:58:26.163+0800\tinfo\tprometheusreceiver@v0.96.0/metrics_receiver.go:240\tStarting discovery manager\t&#123;&quot;kind&quot;: &quot;receiver&quot;, &quot;name&quot;: &quot;prometheus&quot;, &quot;data_type&quot;: &quot;metrics&quot;&#125;</span><br><span class=\"line\">2024-03-21T15:58:26.164+0800\tinfo\tprometheusreceiver@v0.96.0/metrics_receiver.go:231\tScrape job added\t&#123;&quot;kind&quot;: &quot;receiver&quot;, &quot;name&quot;: &quot;prometheus&quot;, &quot;data_type&quot;: &quot;metrics&quot;, &quot;jobName&quot;: &quot;springboot-otel-guides&quot;&#125;</span><br><span class=\"line\">2024-03-21T15:58:26.164+0800\tinfo\tservice@v0.96.0/service.go:169\tEverything is ready. Begin running and processing data.</span><br><span class=\"line\">2024-03-21T15:58:26.164+0800\twarn\tlocalhostgate/featuregate.go:63\tThe default endpoints for all servers in components will change to use localhost instead of 0.0.0.0 in a future version. Use the feature gate to preview the new default.\t&#123;&quot;feature gate ID&quot;: &quot;component.UseLocalHostAsDefaultHost&quot;&#125;</span><br><span class=\"line\">2024-03-21T15:58:26.164+0800\tinfo\tprometheusreceiver@v0.96.0/metrics_receiver.go:282\tStarting scrape manager\t&#123;&quot;kind&quot;: &quot;receiver&quot;, &quot;name&quot;: &quot;prometheus&quot;, &quot;data_type&quot;: &quot;metrics&quot;&#125;</span><br></pre></td></tr></table></figure>\n\n<p>通过 <code>http://localhost:8889/metrics</code> 访问，查看之前自定义的 hello_total</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">➜  ~ curl -i http://localhost:8889/metrics | grep hello_total</span><br><span class=\"line\"><span class=\"comment\"># HELP hello_total</span></span><br><span class=\"line\"><span class=\"comment\"># TYPE hello_total counter</span></span><br><span class=\"line\">hello_total&#123;instance=<span class=\"string\">&quot;localhost:8080&quot;</span>,job=<span class=\"string\">&quot;springboot-otel-guides&quot;</span>&#125; 1</span><br></pre></td></tr></table></figure>\n\n<p>这里我仅是将 Micrometer 采集的指标数据（本质上使用的是 PromethusMeterRegistry，而不是 Micrometer 默认的 SimpleMeterRegistry）通过 promethus 协议同步到 OpenTelemetry Collector。下面来将 Micrometer 采集的方式换成 OpenTelemetry Java Agent  方式采集。</p>\n<h2 id=\"使用-OpenTelemetry-Java-Agent-代替-Micrometer\"><a href=\"#使用-OpenTelemetry-Java-Agent-代替-Micrometer\" class=\"headerlink\" title=\"使用 OpenTelemetry Java Agent 代替 Micrometer\"></a>使用 OpenTelemetry Java Agent 代替 Micrometer</h2><p>前面我配置了 OpenTelemetry Collector 来抓取 Micrometer 采集的数据，这小节会使用 OpenTelemetry Java Agent 代替 Micrometer 来收集指标，使用 OpenTelemetry Line Protocol (otlp) 协议来提供指标数据给 OpenTelemetry Collector。</p>\n<ul>\n<li><strong>1、首先将前面的 config.yaml  配置文件修改使用 otlp 协议</strong></li>\n</ul>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">receivers:</span></span><br><span class=\"line\">  <span class=\"attr\">otlp:</span></span><br><span class=\"line\">    <span class=\"attr\">protocols:</span></span><br><span class=\"line\">      <span class=\"attr\">grpc:</span></span><br><span class=\"line\">      <span class=\"attr\">http:</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">exporters:</span></span><br><span class=\"line\">  <span class=\"attr\">prometheus:</span></span><br><span class=\"line\">    <span class=\"attr\">endpoint:</span> <span class=\"string\">&quot;localhost:8889&quot;</span> <span class=\"comment\"># 还是适用 prometheus 对外暴露数据</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">service:</span></span><br><span class=\"line\">  <span class=\"attr\">pipelines:</span></span><br><span class=\"line\">    <span class=\"attr\">metrics:</span></span><br><span class=\"line\">      <span class=\"attr\">receivers:</span> [<span class=\"string\">otlp</span>] <span class=\"comment\"># 这里使用 otlp 协议</span></span><br><span class=\"line\">      <span class=\"attr\">processors:</span> [<span class=\"string\">batch</span>]</span><br><span class=\"line\">      <span class=\"attr\">exporters:</span> [<span class=\"string\">prometheus</span>]</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><strong>2、下载  OpenTelemetry Java Agent</strong></li>\n</ul>\n<p>从  github 上下载  agent，地址：<a href=\"https://github.com/open-telemetry/opentelemetry-java-instrumentation/releases%EF%BC%9B%E9%BB%98%E8%AE%A4%E6%83%85%E5%86%B5%E4%B8%8B%EF%BC%8C%E4%BB%A3%E7%90%86%E4%B8%AD%E7%9A%84%E6%8C%87%E6%A0%87%E6%98%AF%E7%A6%81%E7%94%A8%E7%9A%84%EF%BC%8C%E8%BF%99%E9%87%8C%E5%8F%AF%E4%BB%A5%E9%80%9A%E8%BF%87%E8%AE%BE%E7%BD%AE%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F%E6%9D%A5%E5%90%AF%E7%94%A8\">https://github.com/open-telemetry/opentelemetry-java-instrumentation/releases；默认情况下，代理中的指标是禁用的，这里可以通过设置环境变量来启用</a> <code>OTEL_METRICS_EXPORTER=otlp</code>。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">export</span> OTEL_METRICS_EXPORTER=otlp</span><br><span class=\"line\">java -javaagent:opentelemetry-javaagent.jar  -jar target/springboot-otel-guides-0.0.1-SNAPSHOT.jar</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><strong>3、移除关于 promethus 的配置和依赖</strong></li>\n</ul>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># application.properties 中移除</span></span><br><span class=\"line\"><span class=\"string\">management.endpoints.web.exposure.include=prometheus</span></span><br><span class=\"line\"><span class=\"comment\"># pom.xml 中移除</span></span><br><span class=\"line\"><span class=\"string\">&lt;dependency&gt;</span></span><br><span class=\"line\">    <span class=\"string\">&lt;groupId&gt;io.micrometer&lt;/groupId&gt;</span></span><br><span class=\"line\">    <span class=\"string\">&lt;artifactId&gt;micrometer-registry-prometheus&lt;/artifactId&gt;</span></span><br><span class=\"line\">    <span class=\"string\">&lt;scope&gt;runtime&lt;/scope&gt;</span></span><br><span class=\"line\"><span class=\"string\">&lt;/dependency&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>重新启动 OTEL Collector 和 应用程序之后，再次访问 &#x2F;hello，然后查看指标信息</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">➜  ~ curl -i http://localhost:8889/metrics | grep hello_total</span><br><span class=\"line\"># HELP hello_total</span><br><span class=\"line\"># TYPE hello_total counter</span><br><span class=\"line\">hello_total&#123;job=&quot;springboot-otel-guides&quot;&#125; 1 #指标的表现形式和之前不同</span><br></pre></td></tr></table></figure>\n\n\n\n<p>前面两种，我使用了两种不同的采集方式(PromethusMeterRegistry 和 OpenTelemetryMeterRegistry) 和 两种不同的 receivers 方式将指标信息采集到 OpenTelemetry Collector 中。在这篇<a href=\"https://grafana.com/blog/2022/05/04/how-to-capture-spring-boot-metrics-with-the-opentelemetry-java-instrumentation-agent/\">文章</a>中提到的指标差异问题，在我的测试过程中其实体现不是很明显，从源码调试中捕获到的信息是，Micrometer 的 Metrics.globalRegistry 中，除了opentelemetry-javaagent 中的OpenTelemetryMeterRegistry 之外，还有 Micrometer 自己的 SimpleMeterRegistry，但是实际情况看起来是 runtime 使用了 OpenTelemetryMeterRegistry 而不是 SimpleMeterRegistry，这也就和文章中提及的可能注册”错误的 MeterRegistry 实例” 的条件没有成立。</p>\n<p>实际上，SpringBoot 已经默认集成了 <a href=\"https://github.com/spring-projects/spring-boot/blob/main/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/metrics/export/otlp/OtlpMetricsExportAutoConfiguration.java\">otlp exporters</a>，其基本具备和 promethus 同样的接入方式。下面的案例中，将会去除 agent，直接使用 otlp registry。</p>\n<h2 id=\"SpringBoot-使用-otlp-registry\"><a href=\"#SpringBoot-使用-otlp-registry\" class=\"headerlink\" title=\"SpringBoot 使用 otlp registry\"></a>SpringBoot 使用 otlp registry</h2><p>因为在前面的步骤中已经移除了 promethus 相关的依赖和配置，应用服务通过集成 agent 来采集指标数据，在下面的测试中，将会移除 agent，然后引入新的依赖，使得能够使用 otlp 协议来发布指标数据。</p>\n<ul>\n<li>引入 micrometer-registry-otlp 和 opentelemetry-exporter-otlp 依赖</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">     &lt;groupId&gt;io.micrometer&lt;/groupId&gt;</span><br><span class=\"line\">     &lt;artifactId&gt;micrometer-registry-otlp&lt;/artifactId&gt;</span><br><span class=\"line\">     &lt;version&gt;1.12.3&lt;/version&gt;</span><br><span class=\"line\"> &lt;/dependency&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"> &lt;dependency&gt;</span><br><span class=\"line\">     &lt;groupId&gt;io.opentelemetry&lt;/groupId&gt;</span><br><span class=\"line\">     &lt;artifactId&gt;opentelemetry-exporter-otlp&lt;/artifactId&gt;</span><br><span class=\"line\">     &lt;version&gt;1.36.0&lt;/version&gt;</span><br><span class=\"line\"> &lt;/dependency&gt;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>配置  <code>management.otlp.metrics.export.ur</code></li>\n</ul>\n<figure class=\"highlight properties\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">management.otlp.metrics.export.url</span>=<span class=\"string\">http://localhost:4318/v1/metrics</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>修改 OpenTelemetry Collector 配置</li>\n</ul>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">receivers:</span></span><br><span class=\"line\">  <span class=\"attr\">otlp:</span></span><br><span class=\"line\">    <span class=\"attr\">protocols:</span> <span class=\"comment\"># otlp 对应的两种协议方式</span></span><br><span class=\"line\">      <span class=\"attr\">grpc:</span></span><br><span class=\"line\">        <span class=\"attr\">endpoint:</span> <span class=\"string\">localhost:4317</span></span><br><span class=\"line\">      <span class=\"attr\">http:</span></span><br><span class=\"line\">        <span class=\"attr\">endpoint:</span> <span class=\"string\">localhost:4318</span></span><br><span class=\"line\"><span class=\"attr\">exporters:</span></span><br><span class=\"line\">  <span class=\"attr\">debug:</span></span><br><span class=\"line\">    <span class=\"attr\">verbosity:</span> <span class=\"string\">detailed</span></span><br><span class=\"line\">  <span class=\"attr\">file:</span></span><br><span class=\"line\">    <span class=\"attr\">path:</span> <span class=\"string\">/Users/glmapper/Downloads/metrics-otlp.json</span> <span class=\"comment\"># 为了方便查看，这里我将指标信息直接 export 到文件中</span></span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"attr\">service:</span></span><br><span class=\"line\">  <span class=\"attr\">pipelines:</span></span><br><span class=\"line\">    <span class=\"attr\">metrics:</span></span><br><span class=\"line\">      <span class=\"attr\">receivers:</span> [<span class=\"string\">otlp</span>] <span class=\"comment\"># 使用 otlp</span></span><br><span class=\"line\">      <span class=\"attr\">exporters:</span> [<span class=\"string\">file</span>] <span class=\"comment\"># 使用 file</span></span><br></pre></td></tr></table></figure>\n\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>PS：OtlpMeterRegistry 中默认使用了 http 协议，并通过 <a href=\"http://localhost:4318/v1/metrics\">http://localhost:4318/v1/metrics</a> 接口向 OpenTelemetry Collector  POST 指标数据。</p></blockquote>\n<p>重新启动 OpenTelemetry Collector 和应用服务程序，下面是访问 &#x2F;hello 之后，采集到的自定义指标数据如下：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;name&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;hello.total&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;sum&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;dataPoints&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span></span><br><span class=\"line\">            <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">                <span class=\"attr\">&quot;startTimeUnixNano&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;1711090372507000000&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">                <span class=\"attr\">&quot;timeUnixNano&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;1711090415605000000&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">                <span class=\"attr\">&quot;asDouble&quot;</span><span class=\"punctuation\">:</span> <span class=\"number\">1</span></span><br><span class=\"line\">            <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">        <span class=\"punctuation\">]</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;aggregationTemporality&quot;</span><span class=\"punctuation\">:</span> <span class=\"number\">2</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;isMonotonic&quot;</span><span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">true</span></span></span><br><span class=\"line\">    <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br></pre></td></tr></table></figure>\n\n<p>从这里数据结构看，与前面使用 promethus 协议的指标数据结构差异是非常大的 </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># HELP hello_total </span><br><span class=\"line\"># TYPE hello_total counter</span><br><span class=\"line\">hello_total&#123;job=&quot;springboot-otel-guides&quot;&#125; 2</span><br></pre></td></tr></table></figure>\n\n\n\n<p>这里我把 两种协议版本的数据样例格式提供一下，以便于需要的同学自行查看</p>\n<ul>\n<li><a href=\"https://github.com/open-telemetry/opentelemetry-proto/blob/v1.1.0/examples/metrics.json\">otlp v1.1.0 版本的数据格式</a>，其内部通过 <code>opentelemetry/proto/resource/v1/metrics.proto</code> 来描述</li>\n<li><a href=\"https://prometheus.io/docs/instrumenting/exposition_formats/#text-format-example\">prometheus 指标数据格式</a>，其内部通过 <code>io.prometheus.client.Collector.MetricFamilySamples</code> 来描述</li>\n</ul>\n<h2 id=\"从源码角度分析-prometheus-和-otlp-协议的指标收集\"><a href=\"#从源码角度分析-prometheus-和-otlp-协议的指标收集\" class=\"headerlink\" title=\"从源码角度分析 prometheus 和 otlp 协议的指标收集\"></a>从源码角度分析 prometheus 和 otlp 协议的指标收集</h2><p>这里主要以 micrometer 来看，围绕 <code>micrometer-registry-otlp</code> 和 <code>micrometer-registry-prometheus</code> 两个依赖实现的 MeterRegistry 指标收集代码来分析。MeterRegistry 作为 Micrometer 提供的指标管理的顶层抽象类，其除了提供一组共不同厂商扩展的抽象方法（如 newCounter等）之外，主要核心能力是内部通过维护一个 CHM 类型的 meterMap 来统一管理 Meter 数据。 <code>micrometer-registry-otlp</code> 和 <code>micrometer-registry-prometheus</code>  两个包中最核心的也就是对于 MeterRegistry 抽象类的子类扩展实现。从指标数据的透出方式来看， <code>micrometer-registry-otlp</code>  是通过一个定时任务线程池来主动将指标数据 report 给 OpenTelemeter Collector，而  <code>micrometer-registry-prometheus</code>   则是提供一个对外访问的 endpoint 以供收集器来拉取指标数据。</p>\n<h3 id=\"prometheus-PrometheusMeterRegistry\"><a href=\"#prometheus-PrometheusMeterRegistry\" class=\"headerlink\" title=\"prometheus#PrometheusMeterRegistry\"></a>prometheus#PrometheusMeterRegistry</h3><p>prometheus 的实现 SpringBoot 对外提供的 endpoint 对应的类是 PrometheusScrapeEndpoint，其数据是从它内部持有的 collectorRegistry 对象获取，CollectorRegistry负责维护当前系统中所有的Collector实例。 HTTPServer在接收到HTTP请求之后，会从 CollectorRegistry 中拿到所有的Collector实例，并调用其collect()方法获取所有样本，最后格式化为 Prometheus 的标准输出。CollectorRegistry 是 prometheus 客户端提供的能力。同样持有 CollectorRegistry 还有 PrometheusMeterRegistry，前面提到在 micrometer 中所有的指标数据是存在 meterMap 中的，但是在创建 Meter 时，PrometheusMeterRegistry 也会将 Meter 通过 applyToCollector 方法同步到 CollectorRegistry，这样就实现了 prometheus 和 micrometer 对于指标数据的链接。</p>\n<p><img src=\"https://vspicgo.oss-cn-shanghai.aliyuncs.com/typora/image-20240323102509945.png\" alt=\"image-20240323102509945\"></p>\n<h3 id=\"otlp-OtlpMeterRegistry\"><a href=\"#otlp-OtlpMeterRegistry\" class=\"headerlink\" title=\"otlp#OtlpMeterRegistry\"></a>otlp#OtlpMeterRegistry</h3><p>这里主要分析下 OtlpMeterRegistry 的 push 模型，OtlpMeterRegistry 实现了 micrometer PushMeterRegistry 类，其内部提供了 publish 方法的实现，OtlpMeterRegistry#publish 实现了 meter 到 OpenTelemetry 的具体逻辑。</p>\n<p><img src=\"https://vspicgo.oss-cn-shanghai.aliyuncs.com/typora/image-20240323113344051.png\" alt=\"image-20240323113344051\"></p>\n<p>当流量进入之后，经过 &#x2F;hello 接口中的自定义埋点代码，此时 meterRegistry 的注入实例为 OtlpMeterRegistry；但是实际上 OtlpMeterRegistry 对于 meter 数据并没有像 prometheus 那样还提供了内部自己模型的桥接逻辑 ，OtlpMeterRegistry 数据的管理是完全依托于 MeterRegistry 的。</p>\n<h2 id=\"从架构角度分析-OpenTelemetry-Collector-数据流向\"><a href=\"#从架构角度分析-OpenTelemetry-Collector-数据流向\" class=\"headerlink\" title=\"从架构角度分析 OpenTelemetry Collector 数据流向\"></a>从架构角度分析 OpenTelemetry Collector 数据流向</h2><p>这里包括前面实例中的几种场景，首先是 OpenTelemetry Collector pull 应用服务 prometheus endpoint 吐出的数据，otlp collector 使用的是 receiver 和 expose 使用的是 prometheus 协议。</p>\n<p><img src=\"https://vspicgo.oss-cn-shanghai.aliyuncs.com/typora/image-20240323114836417.png\" alt=\"image-20240323114836417\"></p>\n<p>第二个是使用 <code>OpenTelemetry Java instrumentation agent</code> 收集指标的数据流向</p>\n<p><img src=\"https://vspicgo.oss-cn-shanghai.aliyuncs.com/typora/image-20240323115218659.png\" alt=\"image-20240323115218659\"></p>\n<p>最后是使用  <code>micrometer-registry-otlp</code>  方式，它使用的是类似于 <code>micrometer-registry-prometheus</code>  通过业务系统中通过代码打点的方式采集的，但是上报方式是和 agent 上报是一致的，这里就不单独提供数据流程示意图了。</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>本文主要是研究 SpringBoot 如何集成 metrics ，文章中提供了机遇 micrometer 和 agent 两种指标采集的形式；基于 micrometer 的方式又细分了基于 prometheus 协议和 otlp 协议两种方式。并且在使用 Otel collector 作为指标数据的中间组件，并提供了相应的实示例代码和示意图。希望通过本文能够帮助大家使用和理解 Springboot 中对于 micrometer 和 otlp 收集指标数据的基本流程和原理。</p>\n","text":"之前在 聊聊 SpringBoot3 的 Micrometer Tracing 这篇文章中我介绍了 SpringBoot3 使用 Micrometer Trac...","permalink":"/post/middleware/middleware-micrometer-otel","photos":[],"count_time":{"symbolsCount":"12k","symbolsTime":"11 mins."},"categories":[{"name":"Middleware","slug":"Middleware","count":14,"path":"api/categories/Middleware.json"}],"tags":[{"name":"Metrics","slug":"Metrics","count":2,"path":"api/tags/Metrics.json"},{"name":"OTLP","slug":"OTLP","count":2,"path":"api/tags/OTLP.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E7%8E%AF%E5%A2%83%E5%8F%8A%E5%89%8D%E7%BD%AE%E6%AD%A5%E9%AA%A4%E5%87%86%E5%A4%87\"><span class=\"toc-text\">环境及前置步骤准备</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%9F%BA%E4%BA%8E-Micrometer-metrics-%E7%9A%84%E6%8C%87%E6%A0%87%E6%94%B6%E9%9B%86\"><span class=\"toc-text\">基于 Micrometer metrics 的指标收集</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%BD%BF%E7%94%A8-OpenTelemetry-Collector-%E6%9D%A5%E6%8A%93%E5%8F%96-actuator-prometheus-%E6%95%B0%E6%8D%AE\"><span class=\"toc-text\">使用 OpenTelemetry Collector 来抓取  &#x2F;actuator&#x2F;prometheus 数据</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%BD%BF%E7%94%A8-OpenTelemetry-Java-Agent-%E4%BB%A3%E6%9B%BF-Micrometer\"><span class=\"toc-text\">使用 OpenTelemetry Java Agent 代替 Micrometer</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#SpringBoot-%E4%BD%BF%E7%94%A8-otlp-registry\"><span class=\"toc-text\">SpringBoot 使用 otlp registry</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%BB%8E%E6%BA%90%E7%A0%81%E8%A7%92%E5%BA%A6%E5%88%86%E6%9E%90-prometheus-%E5%92%8C-otlp-%E5%8D%8F%E8%AE%AE%E7%9A%84%E6%8C%87%E6%A0%87%E6%94%B6%E9%9B%86\"><span class=\"toc-text\">从源码角度分析 prometheus 和 otlp 协议的指标收集</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#prometheus-PrometheusMeterRegistry\"><span class=\"toc-text\">prometheus#PrometheusMeterRegistry</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#otlp-OtlpMeterRegistry\"><span class=\"toc-text\">otlp#OtlpMeterRegistry</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%BB%8E%E6%9E%B6%E6%9E%84%E8%A7%92%E5%BA%A6%E5%88%86%E6%9E%90-OpenTelemetry-Collector-%E6%95%B0%E6%8D%AE%E6%B5%81%E5%90%91\"><span class=\"toc-text\">从架构角度分析 OpenTelemetry Collector 数据流向</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%80%BB%E7%BB%93\"><span class=\"toc-text\">总结</span></a></li></ol>","author":{"name":"glmapper","slug":"blog-author","avatar":"https://glmapper-blog.oss-cn-hangzhou.aliyuncs.com/common/favicon.ico","link":"/","description":"开放，开源，分享，共享","socials":{"github":"https://github.com/glmapper","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/2412872703","zhihu":"","csdn":"","juejin":"https://juejin.cn/user/3227821827961806","customs":{"sofastack":{"icon":"https://glmapper-blog.oss-cn-hangzhou.aliyuncs.com/common/sofastack.svg","link":"https://www.sofastack.tech/"}}}},"mapped":true,"hidden":false,"prev_post":{"title":"神经网络浅讲：从神经元到深度学习","uid":"b66d839268b41dec0c2b4caf81d61b35","slug":"llm/shenduxuexi-shenjingwangluo","date":"2024-12-25T09:46:44.000Z","updated":"2024-12-25T09:49:08.848Z","comments":true,"path":"api/articles/llm/shenduxuexi-shenjingwangluo.json","keywords":"宋国磊, glmapper, 卫恒, 分享, 开源","cover":[],"text":" 本篇是笔者最近在学习机器学习时阅读到的一篇文章，刚好和笔者最近在阅读《深度学习革命》这本书里的内容有较多的重叠之处，结合来看，个人认为它比较清楚的帮我捋顺了一...","permalink":"/post/llm/shenduxuexi-shenjingwangluo","photos":[],"count_time":{"symbolsCount":"14k","symbolsTime":"12 mins."},"categories":[{"name":"LLM","slug":"LLM","count":2,"path":"api/categories/LLM.json"}],"tags":[{"name":"neural network","slug":"neural-network","count":1,"path":"api/tags/neural-network.json"},{"name":"marchine learning","slug":"marchine-learning","count":1,"path":"api/tags/marchine-learning.json"}],"author":{"name":"glmapper","slug":"blog-author","avatar":"https://glmapper-blog.oss-cn-hangzhou.aliyuncs.com/common/favicon.ico","link":"/","description":"开放，开源，分享，共享","socials":{"github":"https://github.com/glmapper","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/2412872703","zhihu":"","csdn":"","juejin":"https://juejin.cn/user/3227821827961806","customs":{"sofastack":{"icon":"https://glmapper-blog.oss-cn-hangzhou.aliyuncs.com/common/sofastack.svg","link":"https://www.sofastack.tech/"}}}}},"next_post":{"title":"Dubbo Metrics 基本原理及扩展 OTLP 协议","uid":"f39ea97e417100cd6078bb8210dec4a8","slug":"middleware/middleware-dubbo-metrics","date":"2024-09-09T07:43:22.000Z","updated":"2024-09-09T07:52:15.462Z","comments":true,"path":"api/articles/middleware/middleware-dubbo-metrics.json","keywords":"宋国磊, glmapper, 卫恒, 分享, 开源","cover":[],"text":" 关于 dubbo metrics 的使用可以参考dubbo-metrics 和 可观测性 Metrics Proposal 两篇文档。 dubbo 的 met...","permalink":"/post/middleware/middleware-dubbo-metrics","photos":[],"count_time":{"symbolsCount":"5.3k","symbolsTime":"5 mins."},"categories":[{"name":"Middleware","slug":"Middleware","count":14,"path":"api/categories/Middleware.json"}],"tags":[{"name":"Dubbo","slug":"Dubbo","count":1,"path":"api/tags/Dubbo.json"},{"name":"Metrics","slug":"Metrics","count":2,"path":"api/tags/Metrics.json"},{"name":"OTLP","slug":"OTLP","count":2,"path":"api/tags/OTLP.json"}],"author":{"name":"glmapper","slug":"blog-author","avatar":"https://glmapper-blog.oss-cn-hangzhou.aliyuncs.com/common/favicon.ico","link":"/","description":"开放，开源，分享，共享","socials":{"github":"https://github.com/glmapper","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/2412872703","zhihu":"","csdn":"","juejin":"https://juejin.cn/user/3227821827961806","customs":{"sofastack":{"icon":"https://glmapper-blog.oss-cn-hangzhou.aliyuncs.com/common/sofastack.svg","link":"https://www.sofastack.tech/"}}}}}}