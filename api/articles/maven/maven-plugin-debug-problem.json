{"title":"一个 maven 插件打包问题的排查","uid":"d490357e7c00b784e454d21c1c78f619","slug":"maven/maven-plugin-debug-problem","date":"2019-07-23T10:22:50.000Z","updated":"2024-07-05T04:09:05.782Z","comments":true,"path":"api/articles/maven/maven-plugin-debug-problem.json","keywords":"宋国磊, glmapper, 卫恒, 分享, 开源","cover":[],"content":"<p>最近研究 <a href=\"https://github.com/sofastack/sofa-ark\">sofa-ark</a> 的插件机制时，发现当执行完 <code>maven clean install -DskipTests</code> 时，打在 target 目录下的 <code>xxx.jar</code> 与安装到本地仓库的 <code>xxx.jar</code> 大小不一致。</p>\n<span id=\"more\"></span>\n\n<ul>\n<li><p>target 目录下的插件大小<br>  <img src=\"https://glmapper-blog.oss-cn-hangzhou.aliyuncs.com/maven-pack/maven-pack-one.jpg\"></p>\n</li>\n<li><p>.m2 下的插件大小</p>\n<p>  <img src=\"https://glmapper-blog.oss-cn-hangzhou.aliyuncs.com/maven-pack/maven-pack-two.jpg\"></p>\n</li>\n</ul>\n<p>其实一开始看到这种现象也是懵逼，同一个工程，同一次命令执行，但是得到的两个 jar 包大小差距巨大。那么对于这种问题，我想到的有两点：</p>\n<ul>\n<li>debug 打包插件执行过程</li>\n<li>了解 maven 插件的生命周期</li>\n</ul>\n<h2 id=\"debug-打包插件执行过程\"><a href=\"#debug-打包插件执行过程\" class=\"headerlink\" title=\"debug 打包插件执行过程\"></a>debug 打包插件执行过程</h2><p>这里需要借助 IDEA 中的远程 debug 能力来完成。目前有两个工程，一个是我们的主工程，工程名为上面截图中的 mq-client-ark-plugin ，另一个是打包插件的源码工程，如下图所示：</p>\n<p><img src=\"https://glmapper-blog.oss-cn-hangzhou.aliyuncs.com/maven-pack/maven-pack-three.jpg\"></p>\n<p>那么下面就一步一步来完成远程 <code>debug</code> 的配置。</p>\n<h3 id=\"1、使用-mvnDebug-命令开启-debug-模式\"><a href=\"#1、使用-mvnDebug-命令开启-debug-模式\" class=\"headerlink\" title=\"1、使用 mvnDebug 命令开启 debug 模式\"></a>1、使用 mvnDebug 命令开启 debug 模式</h3><p>在主工程 <code>mq-client-ark-plugin</code> 的根目录下执行  <code>mvnDebug install</code>（当然除了 <code>install</code> 之外，也可以是 <code>compile</code>、<code>package</code>、<code>test</code>、<code>deploy</code> 等）。</p>\n<p><img src=\"https://glmapper-blog.oss-cn-hangzhou.aliyuncs.com/maven-pack/maven-pack-four.jpg\"></p>\n<p>当执行完 <code>mvnDebug install</code> 后，可以看到这个阻塞监听 8000 端口了。</p>\n<h3 id=\"2、源码工程配置远程-debug\"><a href=\"#2、源码工程配置远程-debug\" class=\"headerlink\" title=\"2、源码工程配置远程 debug\"></a>2、源码工程配置远程 debug</h3><p>在 <code>idea</code> 主界面找下下图的工具菜单，选择 <code>Edit Configurations...</code><br><img src=\"https://glmapper-blog.oss-cn-hangzhou.aliyuncs.com/maven-pack/maven-pack-five.jpg\"><br>打开配置面板之后，左上角 <code>+</code> 选择 <code>Remote</code><br><img src=\"https://glmapper-blog.oss-cn-hangzhou.aliyuncs.com/maven-pack/maven-pack-six.jpg\"><br>填写相关远程 debug 参数</p>\n<p><img src=\"https://glmapper-blog.oss-cn-hangzhou.aliyuncs.com/maven-pack/maven-pack-seven.jpg\"></p>\n<ul>\n<li><code>Host</code> : 远程目标主机地址，因为之前 主工程也是本地启动的，所以这里就是 <code>localhost</code></li>\n<li><code>Port</code> : 远程目标主机开启的远程 <code>debug</code> 端口</li>\n<li>开启远程 <code>debug</code> 参数：<code>-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=8000</code></li>\n</ul>\n<p>配置完成之后，执行 <code>debug</code> ，可以看下已经连接到了目标机器：</p>\n<p><img src=\"https://glmapper-blog.oss-cn-hangzhou.aliyuncs.com/maven-pack/maven-pack-eight.jpg\"></p>\n<p>在来看主工程这里，在源码工程没有执行上面的 <code>debug</code> 按钮之前，一直都是阻塞的，执行之后 <code>maven</code> 执行的生命周期开始了:<br><img src=\"https://glmapper-blog.oss-cn-hangzhou.aliyuncs.com/maven-pack/maven-pack-nine.jpg\"></p>\n<p>如上图，因为在源码工程中打了断点，所以当执行到 <code>sofa-ark-maven-plugin</code> 插件时阻塞了。</p>\n<h2 id=\"从-maven-执行的生命周期找出问题根源\"><a href=\"#从-maven-执行的生命周期找出问题根源\" class=\"headerlink\" title=\"从 maven 执行的生命周期找出问题根源\"></a>从 maven 执行的生命周期找出问题根源</h2><p>上面已经搞定了对目标插件源码的 <code>debug</code> 模式的开启，那么下面就是对插件代码进行 <code>debug</code> 操作。节省篇幅，这里直接将断点放在目标代码行位置：</p>\n<p><img src=\"https://glmapper-blog.oss-cn-hangzhou.aliyuncs.com/maven-pack/maven-pack-ten.jpg\"></p>\n<p>分析这段代码</p>\n<p><img src=\"https://glmapper-blog.oss-cn-hangzhou.aliyuncs.com/maven-pack/maven-pack-11.jpg\"></p>\n<ul>\n<li>1、获取到项目的 <code>Artifact</code> ,此时 <code>Artifact</code> 的 <code>file</code> 为：<br><img src=\"https://glmapper-blog.oss-cn-hangzhou.aliyuncs.com/maven-pack/maven-pack-12.jpg\"></li>\n<li>2、重新设置的 <code>File</code></li>\n<li>3、重新设置了 <code>artifact</code></li>\n</ul>\n<p><img src=\"https://glmapper-blog.oss-cn-hangzhou.aliyuncs.com/maven-pack/maven-pack-13.jpg\"></p>\n<p>如果单从上面 <code>debug</code> 来看，其实很难解释开篇的那个问题。那么这里在回过头来看下 主工程的 <code>maven</code> 执行日志：</p>\n<p><img src=\"https://glmapper-blog.oss-cn-hangzhou.aliyuncs.com/maven-pack/maven-pack-14.jpg\"></p>\n<p>如上图中圈红的部分，代表 <code>maven install</code> 所经历的所有阶段。可以看到 <code>sofa-ark-plugin-maven-plugin</code> 是在  <code>maven-install-plugin</code> 后面，那这意味着什么呢？</p>\n<p><strong>我们知道在 target 目录下得到的 xxx.jar 是打包阶段的产物，而 .m2 下面的是 install 的产物。</strong></p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>当然这里没有涉及到 <code>deploy</code> ，<code>deploy</code> 是 <code>install</code> 之后的操作，比如发布到远程仓库。</p></blockquote>\n<p>现在再来看，因为 <code>sofa-ark-plugin-maven-plugin</code> 在执行 <code>install</code> 插件之前将 目标文件给替换了，所以导致打包生成的 <code>target</code> 目录下的 <code>xxx.jar</code> 和 安装到本地仓库的 <code>xxx.jar</code> 不一致。</p>\n<h2 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h2><p>本文记录了日常的一个问题排查过程，包括两个小点，一个是如何去 debug maven 的插件，另外一个是简单了解下 maven 打包的生命周期。</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>关于 maven 打包的生命周期的代码没有具体研究过，不过这里可以大概猜测下，就是 maven 在执行命令时，有个类似于中央控制器的东西，通过解析 maven 命令得到一个 LifeCycle 或者 一个 Pipeline （LifeCycle 或者 Pipeline 实际上就是组装了一系列的插件）。然后 LifeCycle 或者 Pipeline 启动执行，遍历插件，依次执行插件的 execute 方法。</p></blockquote>\n","text":"最近研究 sofa-ark 的插件机制时，发现当执行完 maven clean install -DskipTests 时，打在 target 目录下的 xxx...","permalink":"/post/maven/maven-plugin-debug-problem","photos":[],"count_time":{"symbolsCount":"1.9k","symbolsTime":"2 mins."},"categories":[{"name":"maven","slug":"maven","count":4,"path":"api/categories/maven.json"}],"tags":[{"name":"maven","slug":"maven","count":4,"path":"api/tags/maven.json"},{"name":"maven plugin","slug":"maven-plugin","count":3,"path":"api/tags/maven-plugin.json"},{"name":"maven debug","slug":"maven-debug","count":1,"path":"api/tags/maven-debug.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#debug-%E6%89%93%E5%8C%85%E6%8F%92%E4%BB%B6%E6%89%A7%E8%A1%8C%E8%BF%87%E7%A8%8B\"><span class=\"toc-text\">debug 打包插件执行过程</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1%E3%80%81%E4%BD%BF%E7%94%A8-mvnDebug-%E5%91%BD%E4%BB%A4%E5%BC%80%E5%90%AF-debug-%E6%A8%A1%E5%BC%8F\"><span class=\"toc-text\">1、使用 mvnDebug 命令开启 debug 模式</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2%E3%80%81%E6%BA%90%E7%A0%81%E5%B7%A5%E7%A8%8B%E9%85%8D%E7%BD%AE%E8%BF%9C%E7%A8%8B-debug\"><span class=\"toc-text\">2、源码工程配置远程 debug</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%BB%8E-maven-%E6%89%A7%E8%A1%8C%E7%9A%84%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E6%89%BE%E5%87%BA%E9%97%AE%E9%A2%98%E6%A0%B9%E6%BA%90\"><span class=\"toc-text\">从 maven 执行的生命周期找出问题根源</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%B0%8F%E7%BB%93\"><span class=\"toc-text\">小结</span></a></li></ol>","author":{"name":"glmapper","slug":"blog-author","avatar":"https://glmapper-blog.oss-cn-hangzhou.aliyuncs.com/common/favicon.ico","link":"/","description":"开放，开源，分享，共享","socials":{"github":"https://github.com/glmapper","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/2412872703","zhihu":"","csdn":"","juejin":"https://juejin.cn/user/3227821827961806","customs":{"sofastack":{"icon":"https://glmapper-blog.oss-cn-hangzhou.aliyuncs.com/common/sofastack.svg","link":"https://www.sofastack.tech/"}}}},"mapped":true,"hidden":false,"prev_post":{"title":"聊一聊-JAVA 泛型中的通配符 T，E，K，V，？","uid":"099cbe91c3412d78be7c6de51de68c1a","slug":"java/java-base-generic-wildcard","date":"2019-08-19T10:13:57.000Z","updated":"2024-07-05T04:09:05.763Z","comments":true,"path":"api/articles/java/java-base-generic-wildcard.json","keywords":"宋国磊, glmapper, 卫恒, 分享, 开源","cover":[],"text":"前言Java 泛型（generics）是 JDK 5 中引入的一个新特性, 泛型提供了编译时类型安全检测机制，该机制允许开发者在编译时检测到非法的类型。 泛型的...","permalink":"/post/java/java-base-generic-wildcard","photos":[],"count_time":{"symbolsCount":"5.6k","symbolsTime":"5 mins."},"categories":[{"name":"JAVA","slug":"JAVA","count":12,"path":"api/categories/JAVA.json"}],"tags":[{"name":"泛型","slug":"泛型","count":2,"path":"api/tags/泛型.json"},{"name":"java","slug":"java","count":5,"path":"api/tags/java.json"}],"author":{"name":"glmapper","slug":"blog-author","avatar":"https://glmapper-blog.oss-cn-hangzhou.aliyuncs.com/common/favicon.ico","link":"/","description":"开放，开源，分享，共享","socials":{"github":"https://github.com/glmapper","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/2412872703","zhihu":"","csdn":"","juejin":"https://juejin.cn/user/3227821827961806","customs":{"sofastack":{"icon":"https://glmapper-blog.oss-cn-hangzhou.aliyuncs.com/common/sofastack.svg","link":"https://www.sofastack.tech/"}}}}},"next_post":{"title":"聊一聊 JAR 文件和 MANIFEST.MF","uid":"e78ea5ad7948adf87206a77ac7badf59","slug":"java/java-base-jar-manifest-intro","date":"2019-06-30T10:45:37.000Z","updated":"2024-07-05T04:09:05.764Z","comments":true,"path":"api/articles/java/java-base-jar-manifest-intro.json","keywords":"宋国磊, glmapper, 卫恒, 分享, 开源","cover":null,"text":"在 JAVA 语言这个圈子里面摸爬滚打，除了对于语言层面和框架层面的学习之外，有一些东西它一直存在，但是确没有对它们有足够的重视，因为都觉得它是理所当然，比如 ...","permalink":"/post/java/java-base-jar-manifest-intro","photos":[],"count_time":{"symbolsCount":"9.4k","symbolsTime":"9 mins."},"categories":[{"name":"JAVA","slug":"JAVA","count":12,"path":"api/categories/JAVA.json"}],"tags":[{"name":"java","slug":"java","count":5,"path":"api/tags/java.json"},{"name":"JAR","slug":"JAR","count":1,"path":"api/tags/JAR.json"},{"name":"MANIFEST.MF","slug":"MANIFEST-MF","count":1,"path":"api/tags/MANIFEST-MF.json"}],"author":{"name":"glmapper","slug":"blog-author","avatar":"https://glmapper-blog.oss-cn-hangzhou.aliyuncs.com/common/favicon.ico","link":"/","description":"开放，开源，分享，共享","socials":{"github":"https://github.com/glmapper","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/2412872703","zhihu":"","csdn":"","juejin":"https://juejin.cn/user/3227821827961806","customs":{"sofastack":{"icon":"https://glmapper-blog.oss-cn-hangzhou.aliyuncs.com/common/sofastack.svg","link":"https://www.sofastack.tech/"}}}}}}