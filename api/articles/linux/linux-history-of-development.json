{"title":"聊一聊 Linux 的起源和发展","uid":"792d93df9e83310cd9b49667bfb8f9ca","slug":"linux/linux-history-of-development","date":"2023-04-05T08:35:48.000Z","updated":"2024-07-05T04:09:05.774Z","comments":true,"path":"api/articles/linux/linux-history-of-development.json","keywords":null,"cover":null,"content":"<p>最近在系统性重新整理下关于 linux 的一些知识。linux 对于所有的开发工程师来说都不算是陌生的东西，但往往在面对它时，却又显得那么生疏。关于生疏，对于出入门的同学来说，其过多发行版和指令已经够吃一壶的了。这篇文章主要是看看 linux 自身的一些故事。</p>\n<p>计算机主机实际上就是一堆硬件，为了更好的、有效率的控制这些硬件资源，于是乎就有了操作系统。操作系统除了负责控制这些硬件资源的分配，还具备提供计算机运行所需的一些基本功能，比如网络功能。当然，如果仅有这些是不够的，对于用户来说，直接面向的并不是硬件或者操作系统，而是软件。因此，操作系统也会为了让工程师更容易开发软件，也提供了一整组系统调用接口；这也是 Unix 或者 Linux 最原始的初心和核心。</p>\n<span id=\"more\"></span>\n\n<h3 id=\"从-CTSS-到-Multies\"><a href=\"#从-CTSS-到-Multies\" class=\"headerlink\" title=\"从 CTSS 到 Multies\"></a>从 CTSS 到 Multies</h3><p>早期的计算机并不像如今这样普及，并且当时的计算机操作系统仍然比较简单，只能支持单用户、单任务和少量用户之间的数据共享，其主要用于军事、高科技研究以及学术单位，其存在的问题就是</p>\n<ul>\n<li>不好用</li>\n<li>速度慢</li>\n<li>操作接口不友好</li>\n<li>输入输出单一</li>\n<li>程序编写困难</li>\n</ul>\n<p>随着硬件与操作系统的改良，可以使用键盘来进行输入。但是对于一个普通的学校来说，大多数情况下都是只有一台主机，那么这种情况下就会大家都在等着轮换住使用这个主机。于是在 1960年初，麻省理工学院开发了 CTSS（Compatible Time-Sharing System 兼容分时调度系统），其目的是可以让大型主机通过提供数个终端机以连线进入主机（即使是现在这种路子还在一些企业中使用，就是常见的瘦客户端模式），CTSS  这玩意可以说是近代操作系统的始祖。</p>\n<p>CTSS 解决了多个使用者在某一时间内分别使用 CPU的资源（实际上就是 CPU 在内个工作者工作之间进行切换）；但是其问题在于，这些终端机仅具备输入输出的功能，不具备任何运算或者软件安装的能力，并且一台主机所能支持的终端数的数量也是有限的（差不多 30 个）。</p>\n<p>于是在 1965 年，由麻省理工学院、贝尔实验室和通用电气公司共同发起了 Multies 计划：让大型主机可以达成提供 300 个以上的终端机连线的目标。到 1969年，由于计划进度落后，加上资金短缺，Bell 宣布退出。不过 Multies 系统最终还是由剩下的两家合作完成了，不过此时已经没法在“一石激起千层浪“了。Multies 计划的结果没有给业界带来多大的影响，不过在这个过程中也着实培养了许多优秀的人才，这些人也在后续的 Linux 的演进中起到了非常重要的作用，比如 Ken Thompson。</p>\n<p>CTSS 和 Multics 的出现，为后来操作系统的发展奠定了基础，它们的分时段、分层结构、多用户和多任务等特性，成为了后来操作系统开发的重要范本和参考。虽然 Multics 的发展遭遇了失败，但它的设计思想和技术，对后来的操作系统和计算机科学领域产生了深远的影响。</p>\n<p>Ken Thompson 是 Bell 的人，在Bell 退出之后，这哥们也没闲着，他出于自身的需求，花了一个月的时间，基于 DEC PDP-7 计算机，使用 Assemble 语言写出了一组核心程序，同时包括了一些核心工具程序，以及一个小小的文件系统，没错，这就是 <strong>unix</strong> 的原型，在当时这个系统还没有被称为 <strong>unix</strong>，而是 <strong>unics</strong>(相对于 Mutlies 的复杂而言)。下面是 unics 这个文件系统中的两个重要的概念：</p>\n<ul>\n<li>所有的程序或者系统设备都是文件</li>\n<li>不管是使用建构编辑器还是附属文件，编写程序的目标都应该是有效地完成既定的任务</li>\n</ul>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>在软件开发中，建构编辑器和附属文件是两种不同的工具，它们都可以帮助程序员有效地编写代码。建构编辑器（如Visual Studio、Eclipse等）通常包括代码编辑器、编译器和调试器等工具，可以提高程序员的生产力和效率。附属文件则是一些额外的文件，例如配置文件、库文件和资源文件，它们为程序提供了一些必要的附加信息和功能。</p></blockquote>\n<p>不过话说回来，你知道前面提到的 Ken Thompson 的 “自身需求” 是什么吗？—玩游戏….，不过这哥们不仅是玩，为了玩，还贡献了一些代码来改进游戏，包括优化游戏的性能和改进用户界面等方面，当然最重要的是他写的那个 unics 系统。</p>\n<h3 id=\"unix-的诞生\"><a href=\"#unix-的诞生\" class=\"headerlink\" title=\"unix 的诞生\"></a>unix 的诞生</h3><p>上面提到，Ken Tompson 为了玩游戏，搞出了一个叫 unics 系统；由于 unics 系统的易用性，使得在贝尔实验室内部广为流传，并且也进行了数度改版。但是因为 Unics 本来是以 Assmeble 语言写成的，可移植性太差，加上当时的计算机机器架构都不太相同，所以每次要安装到不同的机器都得要重新编写 Assmeble 语言，很不方便。这时另一个大神就出现了，他叫 Dennis Ritchie。为了解决<strong>可移植性</strong>，可读性以及可维护性问题，Ritchie 先是创建了 C 语言（起初是B 语言，但是 B 编译的核心性能不好，所以创建了 C 语言），又基于 C 语言重写了 unics 的核心，这也标志着 unix 的正式诞生。</p>\n<h3 id=\"重要的Unix分支–BSD的诞生\"><a href=\"#重要的Unix分支–BSD的诞生\" class=\"headerlink\" title=\"重要的Unix分支–BSD的诞生\"></a>重要的Unix分支–BSD的诞生</h3><p>BSD（Berkeley Software Distribution）是一个 Unix 操作系统的分支，其起源可以追溯到20世纪70年代。在当时，AT&amp;T的Unix操作系统被广泛用于大型计算机，但是它的源代码并未公开，因此开发者无法自由地修改和分发它。</p>\n<p>为了解决这个问题，加州大学伯克利分校的计算机科学系（主要是 Bill Joy，没错，这哥们就是 sun 的创始人）开始开发自己的Unix操作系统，即BSD。由于该系统是在AT&amp;T的Unix系统的基础上开发的，因此它继承了许多Unix系统的基本特性，并添加了许多新的功能和工具，例如vi编辑器和BSD套接字（socket）API等。</p>\n<p>BSD系统的发展得到了广泛的支持和贡献，成为了Unix操作系统的重要分支之一。BSD操作系统的开放源代码和社区参与模式也为其他类Unix操作系统的开发提供了范例和灵感，例如Linux操作系统的开发就受到了BSD的影响。</p>\n<p>值得注意的是，由于历史原因和版权问题，BSD系统在1994年被划分为两个主要的分支，即FreeBSD和OpenBSD。这两个分支各自拥有自己的开发团队和社区，但它们都继承了BSD系统的传统和哲学，继续为Unix操作系统的发展做出贡献。</p>\n<h3 id=\"System-V\"><a href=\"#System-V\" class=\"headerlink\" title=\"System-V\"></a>System-V</h3><p>System V 最初由 AT&amp;T 开发并发布于 1983 年，相对于早期的 Unix 版本，System V 引入了许多新的特性和功能，包括 TCP&#x2F;IP 协议栈、虚拟内存、可靠信号机制、动态链接等。System V还提供了许多标准的系统调用和库，这些标准在 Unix 系统之间得到了广泛的共享和兼容。</p>\n<p>在System V发布后不久，许多Unix厂商开始将它作为他们的主要操作系统版本，并在其基础上进行了许多改进和定制，例如IBM的AIX、HP 的 HP-UX、Sun 的 Solaris 等。</p>\n<p>由于 Unix 的高度可移植性与强大的性能，加上当时并没有版权的纠纷， 所以让很多商业公司开始了Unix操作系统的发展，例如AT&amp;T自家的System V、IBM的AIX以及HP与DEC等公司， 都有推出自家的主机搭配自己的Unix操作系统。随之而来的一个问题是，早期生产计算机硬件的公司之间并没有所谓的“协定“，这就导致了每一个计算机硬件公司生产的硬件不兼容，所以每个公司又都设计了符合自己硬件的 unix 系统。</p>\n<p>System V 的另一个重要的特点是可以支持x86架构的个人计算机系统，也就是说 System V 可以在个人计算机上面安装与运行了。System V  兴起也使得AT&amp;T 在商业版权上有了新的念头，在 1979 年发行的第七版 Unix 中，特别提到了 “不可对学生提供源代码”的严格限制！这也造成Unix业界之间的紧张气氛，并且也引爆了很多的商业纠纷。</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>目前被称为纯种的 Unix 指的就是 System V 以及 BSD 这两套</p></blockquote>\n<h3 id=\"Minix\"><a href=\"#Minix\" class=\"headerlink\" title=\"Minix\"></a>Minix</h3><p>System V 在1979年的版权声明中，影响最大是学校教 Unix 核心源代码相关知识的教授，这里面就包括了 Andrew Tanenbaum。</p>\n<p>1979年 的Unix第七版可以在Intel的x86架构上面进行移植， 那么是否意味着可以将Unix改写并移植到x86上面了呢？在这个想法上， Tanenbaum教授于是乎自己动手写了Minix这个Unix Like的核心程序！ 在撰写的过程中，为了避免版权纠纷，Tanenbaum 完全不看Unix核心源代码！ 并且强调他的Minix必须能够与Unix相容才行！Tanenbaum在1984年开始撰写核心程序， 到了1986年终于完成。Minix算是一个小型 Unix 操作系统，其主要目的是教学和研究。Minix 的代码是开源的，它吸引了许多程序员的关注和参与，其中就包括了后来的 Linux 开发者林纳斯·托瓦兹（Linus Torvalds）。</p>\n<h3 id=\"Linux\"><a href=\"#Linux\" class=\"headerlink\" title=\"Linux\"></a>Linux</h3><p>1991 年，林纳斯·托瓦兹在 Minix 的基础上，开发出了 Linux 操作系统。Linux 的开发目标是提供一个完全开源、免费、可定制的操作系统，使得更多人可以参与其中的开发和使用。Linux 借鉴了 Unix 和 Minix 的许多设计思想和技术，如文件系统、Shell 命令解释器、分时段系统、网络功能等，但也有许多创新，如内核模块化设计、虚拟文件系统等。</p>\n<p>随着时间的推移，Linux 逐渐得到了广泛的应用和发展。1992 年，GNU 项目的创始人理查德·斯托曼（Richard Stallman）发布了 GPL 许可证，宣布 GNU&#x2F;Linux 以及其他软件的代码可以自由使用、修改和发布。这极大地促进了 Linux 社区的发展和成长，吸引了更多的程序员参与到其中，使得 Linux 变得更加强大和普及。</p>\n<p>在发展过程中，Linux 也经历了多个版本和分支，如 Debian、Red Hat、SUSE 等。这些分支在保留 Linux 原有特性的基础上，也针对不同的应用场景和用户需求进行了适当的改进和定制。例如，Red Hat 的企业版 Linux 专注于提供稳定、安全的操作系统，以满足企业客户的需求；SUSE Linux 则专注于提供针对大型服务器和应用的操作系统。</p>\n<p>此外，还出现了许多基于 Linux 的开源软件和平台，如 Apache Web 服务器、MySQL 数据库、Docker 容器等。这些软件和平台不仅提供了开源的解决方案，也使得 Linux 更加完善和广泛应用。</p>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>Linux 历史的发展有它偶然性和必然性，不管是因为游戏、版权还是社区软件，每一个版本的演进都不断推动 Linux 的发展和完善。不过不得不说的是，这些在 Linux 发展中赫赫有名的人，真的是值得每一个工程师去学习的，<code>Ken Thompson</code> 的兴趣、<code>Andrew Tanenbaum</code> 的 <code>工程师脾气</code> 等；当然这个过程中也是离不开像 <code>麻省理工学院、贝尔实验室和通用电气公司</code> 等大厂以及后续一些商业公司的推波助澜。</p>\n<h3 id=\"参考文档和书籍\"><a href=\"#参考文档和书籍\" class=\"headerlink\" title=\"参考文档和书籍\"></a>参考文档和书籍</h3><ul>\n<li>鸟哥的Linux 私房菜基础学习版（第4版）</li>\n<li>ChatGPT</li>\n<li>只是为了好玩 : Linux之父林纳斯自传</li>\n</ul>\n","text":"最近在系统性重新整理下关于 linux 的一些知识。linux 对于所有的开发工程师来说都不算是陌生的东西，但往往在面对它时，却又显得那么生疏。关于生疏，对于出...","permalink":"/post/linux/linux-history-of-development","photos":[],"count_time":{"symbolsCount":"4.7k","symbolsTime":"4 mins."},"categories":[{"name":"Linux","slug":"Linux","count":9,"path":"api/categories/Linux.json"}],"tags":[{"name":"linux","slug":"linux","count":9,"path":"api/tags/linux.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%BB%8E-CTSS-%E5%88%B0-Multies\"><span class=\"toc-text\">从 CTSS 到 Multies</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#unix-%E7%9A%84%E8%AF%9E%E7%94%9F\"><span class=\"toc-text\">unix 的诞生</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E9%87%8D%E8%A6%81%E7%9A%84Unix%E5%88%86%E6%94%AF%E2%80%93BSD%E7%9A%84%E8%AF%9E%E7%94%9F\"><span class=\"toc-text\">重要的Unix分支–BSD的诞生</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#System-V\"><span class=\"toc-text\">System-V</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Minix\"><span class=\"toc-text\">Minix</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Linux\"><span class=\"toc-text\">Linux</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%80%BB%E7%BB%93\"><span class=\"toc-text\">总结</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%8F%82%E8%80%83%E6%96%87%E6%A1%A3%E5%92%8C%E4%B9%A6%E7%B1%8D\"><span class=\"toc-text\">参考文档和书籍</span></a></li></ol>","author":{"name":"glmapper","slug":"blog-author","avatar":"https://glmapper-blog.oss-cn-hangzhou.aliyuncs.com/common/favicon.ico","link":"/","description":"开放，开源，分享，共享","socials":{"github":"https://github.com/glmapper","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/2412872703","zhihu":"","csdn":"","juejin":"https://juejin.cn/user/3227821827961806","customs":{"sofastack":{"icon":"https://glmapper-blog.oss-cn-hangzhou.aliyuncs.com/common/sofastack.svg","link":"https://www.sofastack.tech/"}}}},"mapped":true,"hidden":false,"prev_post":{"title":"使用 ngrok 解决测试时外部系统无法访问本地网络问题","uid":"c71afb276dbf15777a4f23717015b86c","slug":"tools/tool-ngrok","date":"2023-04-26T02:21:59.000Z","updated":"2024-07-05T04:09:05.849Z","comments":true,"path":"api/articles/tools/tool-ngrok.json","keywords":null,"cover":[],"text":"问题日常开发中有一些场景会有这样的诉求，就是外部系统 callback 回调本系统，但是本系统没有提供外部访问的 IP 或者域名；比如微信公众号测试号开发，就需...","permalink":"/post/tools/tool-ngrok","photos":[],"count_time":{"symbolsCount":741,"symbolsTime":"1 mins."},"categories":[{"name":"工具","slug":"工具","count":3,"path":"api/categories/工具.json"}],"tags":[{"name":"tool","slug":"tool","count":2,"path":"api/tags/tool.json"},{"name":"ngrok","slug":"ngrok","count":1,"path":"api/tags/ngrok.json"}],"author":{"name":"glmapper","slug":"blog-author","avatar":"https://glmapper-blog.oss-cn-hangzhou.aliyuncs.com/common/favicon.ico","link":"/","description":"开放，开源，分享，共享","socials":{"github":"https://github.com/glmapper","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/2412872703","zhihu":"","csdn":"","juejin":"https://juejin.cn/user/3227821827961806","customs":{"sofastack":{"icon":"https://glmapper-blog.oss-cn-hangzhou.aliyuncs.com/common/sofastack.svg","link":"https://www.sofastack.tech/"}}}}},"next_post":{"title":"win 系统中使用 gitbash 作为 idea 的默认终端","uid":"baaad82d68657f51bd3c3465e15edac9","slug":"git/tool-config-git-bash-under-win","date":"2023-03-14T03:16:21.000Z","updated":"2024-07-05T04:09:05.759Z","comments":true,"path":"api/articles/git/tool-config-git-bash-under-win.json","keywords":null,"cover":null,"text":"意义不大，建议直接使用 wsl2 或者将 win 系统换成 ubuntu 等桌面版本 linux 系统进行开发 ","permalink":"/post/git/tool-config-git-bash-under-win","photos":[],"count_time":{"symbolsCount":56,"symbolsTime":"1 mins."},"categories":[{"name":"git","slug":"git","count":3,"path":"api/categories/git.json"}],"tags":[{"name":"git","slug":"git","count":3,"path":"api/tags/git.json"}],"author":{"name":"glmapper","slug":"blog-author","avatar":"https://glmapper-blog.oss-cn-hangzhou.aliyuncs.com/common/favicon.ico","link":"/","description":"开放，开源，分享，共享","socials":{"github":"https://github.com/glmapper","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/2412872703","zhihu":"","csdn":"","juejin":"https://juejin.cn/user/3227821827961806","customs":{"sofastack":{"icon":"https://glmapper-blog.oss-cn-hangzhou.aliyuncs.com/common/sofastack.svg","link":"https://www.sofastack.tech/"}}}}}}