{"title":"Linux 服务器端口不可访问问题排查","uid":"13684172933510c4dbfa702cdfb990b7","slug":"linux/linux-port-deny-access","date":"2023-11-27T14:57:01.000Z","updated":"2024-07-05T04:09:05.775Z","comments":true,"path":"api/articles/linux/linux-port-deny-access.json","keywords":null,"cover":[],"content":"<h2 id=\"问题描述\"><a href=\"#问题描述\" class=\"headerlink\" title=\"问题描述\"></a>问题描述</h2><p>项目中使用的服务器是物理机，使用 centos 7.6 版本的操作系统， 4 个千兆网口，上架时间 23 年 8  月份。部署在内网机房，并且在内网机房分配的固定IP 是 <code>172.87.7.249</code>，并在机器上部署了 docker，</p>\n<span id=\"more\"></span>\n\n<p>大概在 10 月中旬左右，这台机器出现访问时好是坏的问题；前期出现时一直以为是机房调整网络环境导致，短暂性的不可访问没有实际影响业务，所以就没太关注。但是从 10 月底开始，机器开始频繁性出现不可访问的问题，开始接入排查。</p>\n<p>同机房同机柜还有其他 3 台服务器，ip 地址分别为 <code>172.87.7.246，172.87.7.247，172.87.7.248</code>。在 <code>172.87.7.249</code> 出现频繁性不可访问的同时，在办公网环境其他 3 台机器访问均无影响，并在当在办公网通过 ssh 登录 172.87.7.249 提示 <code>Connection refused</code> 时，通过其他三台机器的任何一台  ssh 登录 <code>172.87.7.249</code>，却可以登录。</p>\n<p>总结下现象：</p>\n<ul>\n<li>1、<code>172.87.7.246，172.87.7.247，172.87.7.248，172.87.7.249</code> 同处一个机房，一个机柜，连接的也是同一个核心交换机，同一个网关。</li>\n<li>2、办公网环境访问 <code>172.87.7.249</code>，前期偶发性时好时坏，后期频繁不可访问，间歇性可访问。</li>\n<li>3、办公网环境访问 <code>172.87.7.248/247/246</code>，正常。</li>\n<li>4、<code>172.87.7.248/247/246</code> 访问 <code>172.87.7.249</code> 前期正常，后期短暂间歇性不可访问，但大多数情况下是可以访问的。</li>\n<li>5、<code>172.87.7.249</code> 能 ping 通</li>\n</ul>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>看到这里，对于熟悉网络的大神应该能猜到个八九不离十的原因了，但是对于研发工程师来说，网络问题一直都是技术上的疼点。</p></blockquote>\n<p>下面就从研发视角来看下排查过程。</p>\n<h2 id=\"排查过程\"><a href=\"#排查过程\" class=\"headerlink\" title=\"排查过程\"></a>排查过程</h2><h3 id=\"防火墙配置\"><a href=\"#防火墙配置\" class=\"headerlink\" title=\"防火墙配置\"></a>防火墙配置</h3><p>一般情况下，IP 能 ping 通，端口无法访问，99% 的原因都是出在防火墙；</p>\n<ul>\n<li><p>1、先通过 <code>systemctl status firewalld</code> 查看防火墙状态，可以看到防火墙正常开启</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost ~]# systemctl status firewalld</span><br><span class=\"line\">● firewalld.service - firewalld - dynamic firewall daemon</span><br><span class=\"line\">   Loaded: loaded (/usr/lib/systemd/system/firewalld.service; enabled; vendor preset: enabled)</span><br><span class=\"line\">   Active: active (running) since 二 2023-11-21 00:29:44 CST; 3 days ago</span><br><span class=\"line\">     Docs: man:firewalld(1)</span><br><span class=\"line\"> Main PID: 63661 (firewalld)</span><br><span class=\"line\">    Tasks: 2</span><br><span class=\"line\">   Memory: 26.0M</span><br><span class=\"line\">   CGroup: /system.slice/firewalld.service</span><br><span class=\"line\">           └─63661 /usr/bin/python2 -Es /usr/sbin/firewalld --nofork --nopid</span><br><span class=\"line\"></span><br><span class=\"line\">11月 21 00:29:44 172-87-7-249.brainerd.net systemd[1]: Starting firewalld - dynamic firewall daemon...</span><br><span class=\"line\">11月 21 00:29:44 172-87-7-249.brainerd.net systemd[1]: Started firewalld - dynamic firewall daemon.</span><br></pre></td></tr></table></figure>\n\n\n</li>\n<li><p>2、通过 <code>firewall-cmd --list-ports</code> 查看端口开发策略，22 端口正常的</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost ~]<span class=\"comment\"># firewall-cmd --list-ports</span></span><br><span class=\"line\">22/tcp 80/tcp 9080/tcp</span><br></pre></td></tr></table></figure></li>\n</ul>\n<p>​\t\t一般情况下，默认 zone 是 public；</p>\n<ul>\n<li><p>3、这里为了避免可能是 zone 策略问题，也看了下 zone 和出网网卡的对应</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost ~]<span class=\"comment\"># firewall-cmd --get-active-zones</span></span><br><span class=\"line\">public</span><br><span class=\"line\">  interfaces: enp61s0f0</span><br><span class=\"line\">[root@localhost ~]<span class=\"comment\">#</span></span><br><span class=\"line\">[root@localhost ~]<span class=\"comment\"># firewall-cmd --get-zone-of-interface=enp61s0f0</span></span><br><span class=\"line\">public</span><br><span class=\"line\">[root@localhost ~]<span class=\"comment\">#</span></span><br></pre></td></tr></table></figure>\n\n<p>这里也没问题，同时为了避免环境差异，对比了其他三台机器，配置策略都是一样的。</p>\n</li>\n</ul>\n<h3 id=\"进程是否-OK\"><a href=\"#进程是否-OK\" class=\"headerlink\" title=\"进程是否 OK\"></a>进程是否 OK</h3><p>之前在使用 onlyoffic 时遇到的一个问题，在宿主机上通过 docker 启动 onlyoffic，启动完成之后通过 <code>docker ps </code> 查看镜像运行状态是正常的，通过 netstat 查看端口对应的进程也存在（宿主机的），但是也是端口无法访问；当时问题是因为镜像容器内部的 nginx 进程没有被拉起导致的，就是宿主机的端口正常，但是映射到容器内部的端口对应的进程不存在。</p>\n<p>为了避免重复踩坑，也涨了记性查了下进程</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost ~]<span class=\"comment\"># ps -ef | grep sshd</span></span><br><span class=\"line\">root      93164 171028  0 14:02 ?        00:00:00 sshd: root@pts/0</span><br><span class=\"line\">root      96871  93211  0 14:18 pts/0    00:00:00 grep --color=auto sshd</span><br><span class=\"line\">root     171028      1  0 11月13 ?      00:00:00 /usr/sbin/sshd -D</span><br></pre></td></tr></table></figure>\n\n<p>sshd 进程也是正常的。实际上到这里从研发视角的排查基本就到头了，但是这些都是正常的，问题依然存在。</p>\n<h3 id=\"是否和-docker-有关\"><a href=\"#是否和-docker-有关\" class=\"headerlink\" title=\"是否和 docker 有关\"></a>是否和 docker 有关</h3><p>在排查完防火墙和进程之后，把目标瞄向了 docker 容器了，这里的依据是：</p>\n<ul>\n<li><p>1、执行 <code>systemctl status firewalld</code> 时，有一条告警</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">WARNING: COMMAND_FAILED: <span class=\"string\">&#x27;/usr/sbin/iptables -w10 -D FORWARD -i docker0 -o d</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>2、执行 <code>firewall-cmd --get-zones</code> 时，提示</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">block dmz docker drop external home internal nm-shared public trusted work</span><br></pre></td></tr></table></figure></li>\n</ul>\n<p>实际上这两个问题从排查来看，并不是前述问题的原因，但是这两个提示把我们排查的方向带的有点偏。首先是第一个告警，这个问题是因为 dockerd 启动时，参数 –iptables 默认为 true，表示允许修改 iptables 路由表；当时排查时，我是直接将 docker stop 掉了，因此排除了这个因素，如果需要修改docker iptables ，可以在 <code>/etc/docker/daemon.json</code> 这个文件修改。</p>\n<p>关于第二个，这里稍微介绍下；firewalled 有两个基础概念，分别是 zone 和 service，每个 zone 里面有不同的 iptables 规则，默认一共有 9 个 zone，而 Centos7 默认的 zone 为 public：</p>\n<ul>\n<li><p><code>drop（丢弃）</code>：任何接收的网络数据包都被抛弃，没有任何回复。仅能有发送出去的网络连接。</p>\n</li>\n<li><p><code>block（限制）</code>：任何接收的网络连接都被IPv4的icmp-host-prohibited信息和IPv6的icmp-adm-prohibited信息所拒绝。</p>\n</li>\n<li><p><code>public（公共）</code>：在公共区域使用，不能相信网络内的其他计算机不会对你的计算机造成危害，只能接收经过选取的连接</p>\n</li>\n<li><p><code>external（外部）</code>：特别是为路由器启用了伪装功能的外部网。你不能信任来自网络的其他计算，不能相信它们不会对你的计算机造成危害，只能接收经过选择的连接。</p>\n</li>\n<li><p><code>dmz（非军事区）</code>：用于你的非军事区内的计算机，此区域内可公开访问，可以有限地进入你的内部网络，仅仅接收经过选择的连接。</p>\n</li>\n<li><p><code>work（工作）</code>：用于工作区。你可以基本相信网络内的其它计算机不会危害你的计算机。仅仅接收经过选择的连接。</p>\n</li>\n<li><p><code>home（家庭）</code>：用于家庭网络。你可以基本信任网络内的其它计算机不会危害你的计算机。仅仅接收经过选择的连接。</p>\n</li>\n<li><p><code>internal（内部）</code>：用于内部网络。你可以基本上信任网络内的其它计算机不会威胁你的计算机，仅仅接收经过选择的连接。</p>\n</li>\n<li><p><code>trusted（信任）</code>：可接收所有的网络连接</p>\n</li>\n<li><p><code>docker</code>: 这个当我们在机器上启动 dockerd 时，docker 自己会默认创建一个 zone。</p>\n</li>\n</ul>\n<p>根据前面防火墙部分的排查，我们的规则是在 public zone 的，是正常的。</p>\n<h3 id=\"IP-冲突\"><a href=\"#IP-冲突\" class=\"headerlink\" title=\"IP 冲突\"></a>IP 冲突</h3><p>在排查完上面几种情况之后，已经开始怀疑是不是硬件问题导致的。并且联系和厂商和机房网管从机房防火墙层面开始排查，但是结论都是正常。这个问题和两位小伙伴闲聊提了下，他们猜测的点中包括了上面的几种情况，此外还提到一个点就是可能是 <strong>IP 冲突</strong>。</p>\n<p>实际上一开始关于 IP 冲突，第一直觉就是不大可能，因为机房里面的机器都是固定分配的，而且不同单位分配的地址也是按段分配，所以不大可能出现 IP 冲突。<em>DHCP</em></p>\n<p>但是在排除上述可以排查的所有问题之后，我又把排查思路转义回到了这个问题上，并开始测试。这里使用的工具是 arp-scan。</p>\n<p>执行：<code>sudo arp-scan -I eno1 -l</code> （eno1 是我使用的测试机器的网卡标识）</p>\n<p><img src=\"https://vspicgo.oss-cn-shanghai.aliyuncs.com/image-20231124151500963.png\"></p>\n<p><img src=\"https://vspicgo.oss-cn-shanghai.aliyuncs.com/image-20231124151551093.png\"></p>\n<p>可以看到，确实存在两个相同的 IP，并且有一台通过 mac 地址对比是我们的机器。通过 arping 也可以看到能够收到两台设备返回的数据包。</p>\n<p><img src=\"https://vspicgo.oss-cn-shanghai.aliyuncs.com/image-20231124151834399.png\" alt=\"image-20231124151834399\"></p>\n<p>那至此基本是明确是因为 IP 冲突导致的。一开始因为当前 IP 绑定了一些上下游服务，不大想改我们的 ip，于是就尝试从 mac 地址来找设备，但是没能实现。如果你的环境允许，你可以先是通过 <a href=\"https://mac.bmcx.com/\">https://mac.bmcx.com/</a> 查了下当前冲突的那个 mac 地址对应的设备类型和厂商来缩小人工排查范围。</p>\n<p>最后再回头来盘一下 IP 冲突的问题，因为之前提到，机房内的设备 IP 都是固定分配的，那为什么会存在 IP 冲突呢？这只能是我们当前环境是如此的糟糕，当找网管要了办公区及机房 IP 段分配标准时发现，机房的 IP 和办公区域的 IP 分段规则是有重合的。比如机房的 172.87.7.xxx 在办公网环境也会存在，并且是基于 DHCP 协议自动分配 IP 的。</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>本篇主要记录了一次 Linux 服务端口访问不通问题的排查过程，涉及到了 Linux 防火墙、进程&#x2F;端口、Docker 以及 arp-scan 等方向和工具。事实证明，大多数问题并不是那么复杂，在没有足够的知识积累的情况下，总归是要花这些成本去弥补自己知识欠缺的。最后想说的就是，一个耗费相当大精力排查的问题，不一定是复杂的问题，往往这个问题的产生原因是相关简单的。</p>\n","text":"问题描述项目中使用的服务器是物理机，使用 centos 7.6 版本的操作系统， 4 个千兆网口，上架时间 23 年 8 月份。部署在内网机房，并且在内网机房分...","permalink":"/post/linux/linux-port-deny-access","photos":[],"count_time":{"symbolsCount":"4.7k","symbolsTime":"4 mins."},"categories":[{"name":"Linux","slug":"Linux","count":9,"path":"api/categories/Linux.json"}],"tags":[{"name":"linux","slug":"linux","count":9,"path":"api/tags/linux.json"},{"name":"arping","slug":"arping","count":1,"path":"api/tags/arping.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E9%97%AE%E9%A2%98%E6%8F%8F%E8%BF%B0\"><span class=\"toc-text\">问题描述</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%8E%92%E6%9F%A5%E8%BF%87%E7%A8%8B\"><span class=\"toc-text\">排查过程</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E9%98%B2%E7%81%AB%E5%A2%99%E9%85%8D%E7%BD%AE\"><span class=\"toc-text\">防火墙配置</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E8%BF%9B%E7%A8%8B%E6%98%AF%E5%90%A6-OK\"><span class=\"toc-text\">进程是否 OK</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%98%AF%E5%90%A6%E5%92%8C-docker-%E6%9C%89%E5%85%B3\"><span class=\"toc-text\">是否和 docker 有关</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#IP-%E5%86%B2%E7%AA%81\"><span class=\"toc-text\">IP 冲突</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%80%BB%E7%BB%93\"><span class=\"toc-text\">总结</span></a></li></ol>","author":{"name":"glmapper","slug":"blog-author","avatar":"https://glmapper-blog.oss-cn-hangzhou.aliyuncs.com/common/favicon.ico","link":"/","description":"开放，开源，分享，共享","socials":{"github":"https://github.com/glmapper","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/2412872703","zhihu":"","csdn":"","juejin":"https://juejin.cn/user/3227821827961806","customs":{"sofastack":{"icon":"https://glmapper-blog.oss-cn-hangzhou.aliyuncs.com/common/sofastack.svg","link":"https://www.sofastack.tech/"}}}},"mapped":true,"hidden":false,"prev_post":{"title":"聊一聊 Spring Data JPA 中的那些日常实践","uid":"b4c75674b257351f24efe8fa873c5818","slug":"springboot/spring-boot-data-jpa-practice","date":"2023-11-27T14:58:52.000Z","updated":"2024-07-05T04:09:05.827Z","comments":true,"path":"api/articles/springboot/spring-boot-data-jpa-practice.json","keywords":null,"cover":[],"text":"一直以来，团队在使用 ORM 框架上都是比较随意的，一开始是鼓励大家使用 mybatis，主要是期望团队同学可以自己写写 SQL，不至于写 SQL 手生；但是从...","permalink":"/post/springboot/spring-boot-data-jpa-practice","photos":[],"count_time":{"symbolsCount":"11k","symbolsTime":"10 mins."},"categories":[{"name":"SpringBoot","slug":"SpringBoot","count":17,"path":"api/categories/SpringBoot.json"}],"tags":[{"name":"SpringBoot","slug":"SpringBoot","count":17,"path":"api/tags/SpringBoot.json"},{"name":"JPA","slug":"JPA","count":1,"path":"api/tags/JPA.json"}],"author":{"name":"glmapper","slug":"blog-author","avatar":"https://glmapper-blog.oss-cn-hangzhou.aliyuncs.com/common/favicon.ico","link":"/","description":"开放，开源，分享，共享","socials":{"github":"https://github.com/glmapper","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/2412872703","zhihu":"","csdn":"","juejin":"https://juejin.cn/user/3227821827961806","customs":{"sofastack":{"icon":"https://glmapper-blog.oss-cn-hangzhou.aliyuncs.com/common/sofastack.svg","link":"https://www.sofastack.tech/"}}}},"feature":true},"next_post":{"title":"Nginx 转发 404 问题的排查和思考","uid":"b6cc4bb37be33d0751cb992f744131af","slug":"middleware/middleware-nginx-proxy-pass","date":"2023-09-13T01:04:07.000Z","updated":"2024-07-05T04:09:05.790Z","comments":true,"path":"api/articles/middleware/middleware-nginx-proxy-pass.json","keywords":null,"cover":[],"text":" 本篇文章原自当前业务遇到的一个实际问题，因为受到所在网络环境的因素影响，所以整体排查下来耗费了很大精力，记录一下。 项目背景项目是 toG 项目，部署的网络环...","permalink":"/post/middleware/middleware-nginx-proxy-pass","photos":[],"count_time":{"symbolsCount":"4.2k","symbolsTime":"4 mins."},"categories":[{"name":"Middleware","slug":"Middleware","count":11,"path":"api/categories/Middleware.json"}],"tags":[{"name":"nginx","slug":"nginx","count":2,"path":"api/tags/nginx.json"},{"name":"反向代理","slug":"反向代理","count":2,"path":"api/tags/反向代理.json"},{"name":"负载均衡","slug":"负载均衡","count":3,"path":"api/tags/负载均衡.json"}],"author":{"name":"glmapper","slug":"blog-author","avatar":"https://glmapper-blog.oss-cn-hangzhou.aliyuncs.com/common/favicon.ico","link":"/","description":"开放，开源，分享，共享","socials":{"github":"https://github.com/glmapper","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/2412872703","zhihu":"","csdn":"","juejin":"https://juejin.cn/user/3227821827961806","customs":{"sofastack":{"icon":"https://glmapper-blog.oss-cn-hangzhou.aliyuncs.com/common/sofastack.svg","link":"https://www.sofastack.tech/"}}}}}}