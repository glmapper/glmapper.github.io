{"title":"Linux Top 命令指南","uid":"3da34a407a5e481b18f31bdb1ed34b7e","slug":"linux/linux-cmd-top","date":"2020-08-10T01:53:31.000Z","updated":"2024-07-05T04:09:05.774Z","comments":true,"path":"api/articles/linux/linux-cmd-top.json","keywords":"宋国磊, glmapper, 卫恒, 分享, 开源","cover":null,"content":"<p><code>top</code> 命令允许用户监视 Linux 上的进程和系统资源使用情况，它是系统管理员工具箱中最有用的工具之一，并且在每个发行版中都预装了它。与 <code>ps</code> 等其他命令不同，它是交互式的，我们可以浏览进程列表、终止进程，等等。本文中，我们将了解如何使用 <code>top</code> 命令。</p>\n<span id=\"more\"></span>\n<h2 id=\"Getting-started\"><a href=\"#Getting-started\" class=\"headerlink\" title=\"Getting started\"></a>Getting started</h2><p><code>top</code> 命令非常简单，只需要在终端中输入 <code>top</code> 即可。<code>top</code> 指令将启动一个交互式命令行应用程序，如下所示，输出的上半部分包含有关进程和资源使用情况的统计信息，下半部分包含当前运行的进程的列表。可以使用箭头键和页面向上&#x2F;向下键浏览列表。如果你想退出，只需按 <code>q</code> 键。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ top</span><br><span class=\"line\">top - 21:07:28 up 21 days,  4:31,  1 user,  load average: 0.12, 0.06, 0.07</span><br><span class=\"line\">Tasks:  33 total,   1 running,  31 sleeping,   0 stopped,   1 zombie</span><br><span class=\"line\">%Cpu(s):  0.2 us,  0.5 sy,  0.0 ni, 89.7 <span class=\"built_in\">id</span>,  0.0 wa,  0.0 hi,  0.0 si,  9.6 st</span><br><span class=\"line\">KiB Mem : 33554432 total, 31188884 free,   513100 used,  1852448 buff/cache</span><br><span class=\"line\">KiB Swap:  2097148 total,  2097148 free,        0 used. 31188884 avail Mem</span><br><span class=\"line\"></span><br><span class=\"line\">   PID USER      PR  NI    VIRT    RES    SHR S  %CPU %MEM     TIME+ COMMAND</span><br><span class=\"line\"> 52601 root      39  19 1310268  14900   9836 S   0.3  0.0  22:59.21 logagent-collec</span><br><span class=\"line\">     1 root      20   0   45416   5244   3968 S   0.0  0.0   5:35.71 systemd</span><br><span class=\"line\">   340 root      20   0   64700  21336  17684 S   0.0  0.1   8:33.90 systemd-journal</span><br><span class=\"line\">   357 root      20   0  101836   2768   2312 S   0.0  0.0   0:01.13 gssproxy</span><br><span class=\"line\">   384 dbus      20   0   28632   2800   2464 S   0.0  0.0   0:00.04 dbus-daemon</span><br><span class=\"line\">   432 root      20   0   84760   5852   4984 S   0.0  0.0   0:00.01 sshd</span><br><span class=\"line\">   461 agent     20   0   52376   5200   3684 S   0.0  0.0   0:00.01 ilogtail</span><br><span class=\"line\">  1690 agent     20   0 2193388 246304  11264 S   0.0  0.7  23:45.88 java</span><br><span class=\"line\">  2527 admin     20   0  161744   4268   3704 R   0.0  0.0   0:00.72 top</span><br><span class=\"line\">  3245 root      20   0  559140  12412   5860 S   0.0  0.0  64:48.67 logagent</span><br><span class=\"line\">  3420 root      20   0  745052  58464  43820 S   0.0  0.2  11:16.32 metricbeat</span><br><span class=\"line\">  3447 root      20   0  957796  55548  43708 S   0.0  0.2  10:14.47 metricbeat</span><br><span class=\"line\">  5093 root      20   0 1905356 159280   9584 S   0.0  0.5  35:00.14 java</span><br><span class=\"line\">  7458 root      20   0   13700   2564   2356 S   0.0  0.0   0:00.00 bash</span><br><span class=\"line\">  7464 root      20   0   86268   4436   3740 S   0.0  0.0   0:00.00 sudo</span><br><span class=\"line\">  <span class=\"comment\"># ... 省略其他</span></span><br></pre></td></tr></table></figure>\n\n<p><code>top</code> 有许多变体，但在本文的其余部分中，我们将讨论最常见的变体 <code>— props -ng</code> 包附带的变体，下面来运行验证体验下：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ top -v</span><br><span class=\"line\">  procps-ng version 3.3.10</span><br><span class=\"line\">Usage:</span><br><span class=\"line\">  top -hv | -bcHiOSs -d secs -n max -u|U user -p pid(s) -o field -w [cols]</span><br></pre></td></tr></table></figure>\n\n<p>在 <code>top</code> 的界面中发生了相当多的事情，将在下一节中对其逐一进行分析。</p>\n<h2 id=\"了解-top-的界面-the-summary-area\"><a href=\"#了解-top-的界面-the-summary-area\" class=\"headerlink\" title=\"了解 top 的界面 - the summary area\"></a>了解 top 的界面 - the summary area</h2><p>第一小节中 <code>top</code> 的输出界面，我们可以比较明显的看到被分成了两个部分，这个小节中我们将关注在上半部分信息，这部分一般被称之为：<code>summary area</code></p>\n<h3 id=\"系统时间、正常运行时间和用户会话\"><a href=\"#系统时间、正常运行时间和用户会话\" class=\"headerlink\" title=\"系统时间、正常运行时间和用户会话\"></a>系统时间、正常运行时间和用户会话</h3><ul>\n<li>系统时间：当前系统的时间(21:07:28)</li>\n<li>正常运行：系统运行时长(21 days, 4:31)</li>\n<li>活动用户会话个数：1</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">top - 21:07:28 up 21 days,  4:31,  1 user,</span><br></pre></td></tr></table></figure>\n\n<p>活动用户会话包括 <code>TTY</code> 和 <code>PTY</code> 两种。实际上，如果您通过桌面环境登录到 Linux 系统，然后启动终端模拟器，您将发现将有两个活动会话。</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>TTY: 通过命令行或桌面环境在系统上物理地运行<br>PTY: 终端模拟器窗口或通过 SSH</p></blockquote>\n<p>如果我们期望得到更多关于活动用户会话的信息，可以通过 <code>who</code> 命令来得到，如下：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">who</span></span><br><span class=\"line\">admin    pts/0        2020-10-31 17:15 (xx.xx.xx.xx)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"内存使用情况\"><a href=\"#内存使用情况\" class=\"headerlink\" title=\"内存使用情况\"></a>内存使用情况</h3><p><code>Memory</code> 部分显示的是关于系统内存使用情况的信息，如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">KiB Mem : 33554432 total, 31188208 free,   513488 used,  1852736 buff/cache</span><br><span class=\"line\">KiB Swap:  2097148 total,  2097148 free,        0 used. 31188208 avail Mem</span><br></pre></td></tr></table></figure>\n\n<p><code>Mem</code> 和 <code>Swap</code> 分别显示的是 <code>RAM</code> 和 <code>swap</code> 空间信息；当 <code>RAM</code> 使用率接近满时，<code>RAM</code> 中不经常使用的区域将被写入 <code>Swap</code> 空间，以便稍后需要时检索。但是，由于访问磁盘的速度很慢，过分依赖 <code>Swap</code> 可能会损害系统性能。</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>关于 Swap</p>\n<ul>\n<li>物理内存就是计算机的实际内存大小，由RAM芯片组成的。虚拟内存则是虚拟出来的、使用磁盘代替内存。虚拟内存的出现，让机器内存不够的情况得到部分解决。当程序运行起来由操作系统做具体虚拟内存到物理内存的替换和加载(相应的页与段的虚拟内存管理)。这里的虚拟内存即所谓的 swap;</li>\n<li>当用户提交程序，然后产生进程，在机器上运行。机器会判断当前物理内存是否还有空闲允许进程调入内存运行，如果有那么则直接调入内存进行运行；如果没有，那么会根据优先级选择一个进程挂起，把该进程交换到swap中等待，然后把新的进程调入到内存中运行。根据这种换入和换出，实现了内存的循环利用，让用户感觉不到内存的限制。从这也可以看出swap扮演了一个非常重要的角色，就是暂存被换出的进程。</li>\n<li>内存与swap之间是按照内存页为单位来交换数据的，一般Linux中页的大小设置为4kb。而内存与磁盘则是按照块来交换数据的</li>\n</ul></blockquote>\n<p><code>total</code>、<code>free</code>、<code>used</code> 就是这些单词含义所描述的一样，分别是当前对应空间的总大小、空闲大小、已使用大小。<code>avail mem</code> 值指的是可以分配给进程而不会导致更多的交换的内存量。</p>\n<p><code>Linux</code> 内核层面上总是以不同的方式来尝试减少访问磁盘的次数；它在 <code>RAM</code> 中维护一个“磁盘缓存（disk cache）”，存储磁盘中经常使用的区域，另外，磁盘写被存储到一个“磁盘缓冲区（disk buffer）”，内核最终将它们写到磁盘上。它们消耗的总内存是 <code>buff/cache</code> 值。这看起来像是一件坏事，但实际上不是，原因是缓存使用的内存将在需要时分配给进程。</p>\n<h3 id=\"任务-Tasks\"><a href=\"#任务-Tasks\" class=\"headerlink\" title=\"任务-Tasks\"></a>任务-Tasks</h3><p><code>Tasks</code> 部分显示的是有关系统上运行的进程的统计信息</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Tasks:  33 total,   1 running,  31 sleeping,   0 stopped,   1 zombie</span><br></pre></td></tr></table></figure>\n\n<p><code>total</code> 比较好理解，它表示的就是当前系统正在运行的进程总数。但是对于其他几个状态相关的数字，我们需要了解一点 <code>Linux</code> 内核如何处理进程的背景知识。</p>\n<p><strong>进程执行是 I&#x2F;O 限制的工作(如读取磁盘)和 cpu 限制的工作(如执行算术操作)的混合模式。当一个进程执行 I&#x2F;O 时，CPU 是空闲的，所以 os 在这段时间切换到执行其他进程。此外，该操作系统允许一个给定的进程执行非常短的时间，然后它切换到另一个进程。这就是操作系统“多任务处理”的表现。做所有这些需要我们跟踪流程的“状态”。在 Linux 中，进程可能处于以下状态:</strong></p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>1、Runnable (R): 处于这种状态的进程要么在 CPU 上执行，要么存在于运行队列中，准备执行。<br>2、Interruptible sleep(S): 处于这种状态的进程在等待事件完成。<br>3、Uninterruptible sleep (D): 在这种情况下，一个进程正在等待一个 I&#x2F;O 操作完成。<br>4、Stopped (T): 这些进程已经被一个作业控制信号(如按 Ctrl+Z)停止，或者因为它们正在被跟踪。<br>5、Zombie (Z): 僵尸进程</p></blockquote>\n<p>一个进程可以创建许多子进程，当父进程仍然存在时，这些子进程是可以退出的，但是，这些数据结构必须保留下来，直到父进程获得子进程的状态。这种数据结构仍然存在的终止进程称为僵尸进程。D 和 S 状态都是在 <code>top</code> 信息中体现为 <code>sleeping</code>，T 状态体现为 <code>stopped</code>，Z 状态体现为 <code>zombie</code>。</p>\n<h3 id=\"CPU-使用情况\"><a href=\"#CPU-使用情况\" class=\"headerlink\" title=\"CPU 使用情况\"></a>CPU 使用情况</h3><p><code>CPU</code> 使用情况，显示了在各种任务上花费的 <code>CPU</code> 时间的百分比。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">%Cpu(s):  0.3 us,  0.4 sy,  0.0 ni, 90.3 <span class=\"built_in\">id</span>,  0.0 wa,  0.0 hi,  0.0 si,  9.0 st</span><br></pre></td></tr></table></figure>\n<p><code>us</code> 指的是 <code>CPU</code> 在用户空间中执行进程所花费的时间。类似地，<code>sy</code> 指的就是运行内核空间进程所花费的时间。<code>Linux</code> 中使用 <code>nice</code> 值来表示进程的优先级，值越高，优先级越低，后面我们会了解到，默认的 <code>nice</code> 值是可以被修改的。在手动设置 nice 的情况下，执行进程所花费的时间显示为 <code>ni</code> 值。<code>ni</code> 后面是 <code>id</code>，它是 <code>CPU</code> 保持空闲的时间，大多数操作系统在 <code>CPU</code> 空闲时将其设置为“省电模式”。接下来是 <code>wa</code> 值，它是 <code>CPU</code> 等待 <code>I/O</code> 完成所花费的时间。</p>\n<p>中断(Interrupt)是向处理器发出的有关需要立即关注的事件的信号；外设通常使用硬件中断来告知系统有关事件的信息，例如键盘上的按键。另一方面，软件中断是由于处理器上执行的特定指令而产生的。在这两种情况下，操作系统都将处理它们，处理硬件中断和软件中断所花费的时间分别由hi和si给出。</p>\n<p>在虚拟化环境中，会将一部分 <code>CPU</code> 资源分配给每个虚拟机（<code>VM</code>）。操作系统会检测到何时有工作要做，如果检测到他需要执行但是由于 <code>CPU</code> 在其他 <code>VM</code> 上繁忙而无法执行时，以这种方式浪费的时间就是“窃取”时间，显示为<code>st</code>。</p>\n<h3 id=\"平均负载-Load-average\"><a href=\"#平均负载-Load-average\" class=\"headerlink\" title=\"平均负载-Load average\"></a>平均负载-Load average</h3><p><code>load average</code> 部分表示的是在最近 1、5 和 15 分钟内的系统平均“负载”。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">load average: 0.11, 0.07, 0.07</span><br></pre></td></tr></table></figure>\n\n<p>负载是对系统执行的计算工作量的度量。在 <code>Linux</code>上，负载是在任何给定时刻处于 <code>R</code> 和 <code>D</code> 状态的进程数。<code>load average</code> 值为您提供了必须等待多长时间才能完成任务的相对度量。这里有几个小例子，我们来直观的理解下这两个概念。</p>\n<ul>\n<li>1、在单核心系统上，<code>load average</code> 为 0.4 意味着系统只完成了它能完成的 40% 的工作。<code>load average</code> 为 1 意味着系统正好处于满负荷状态——即使添加一点点额外的工作，系统也会过载。一个 <code>load average</code> 为 2.12 的系统意味着它超载了 112% 的工作，超出了它的处理能力。</li>\n<li>2、在多核系统上，应该首先用 <code>load average</code> 除以 <code>CPU</code> 核数，以得到类似的度量。</li>\n</ul>\n<p>此外，<code>load average</code> 实际上并不是我们大多数人所知道的典型的<strong>平均负载</strong>。它是一个“指数移动平均”，这意味着以前的 <code>load average</code> 的一小部分被考虑到当前的值（关于这个点，可以通过<a href=\"https://www.linuxjournal.com/article/9001\">这篇文章</a>来了解更多技术细节）。</p>\n<h2 id=\"了解-top-的界面-the-task-area\"><a href=\"#了解-top-的界面-the-task-area\" class=\"headerlink\" title=\"了解 top 的界面 - the task area\"></a>了解 top 的界面 - the task area</h2><p><code>summury area</code> 相对简单，通过它我们可以快速了解到当前系统运行的一些摘要统计信息。但是一个细节性的信息，我们只能通过 <code>task area</code> 中来得到。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">PID USER      PR  NI    VIRT    RES    SHR S  %CPU %MEM     TIME+ COMMAND</span><br><span class=\"line\"> 52601 root      39  19 1310268  14900   9836 S   0.3  0.0  22:59.21 logagent-collec</span><br><span class=\"line\">     1 root      20   0   45416   5244   3968 S   0.0  0.0   5:35.71 systemd</span><br><span class=\"line\">   340 root      20   0   64700  21336  17684 S   0.0  0.1   8:33.90 systemd-journal</span><br><span class=\"line\">   357 root      20   0  101836   2768   2312 S   0.0  0.0   0:01.13 gssproxy</span><br><span class=\"line\">   384 dbus      20   0   28632   2800   2464 S   0.0  0.0   0:00.04 dbus-daemon</span><br><span class=\"line\">   432 root      20   0   84760   5852   4984 S   0.0  0.0   0:00.01 sshd</span><br><span class=\"line\">   461 agent     20   0   52376   5200   3684 S   0.0  0.0   0:00.01 ilogtail</span><br><span class=\"line\">  1690 agent     20   0 2193388 246304  11264 S   0.0  0.7  23:45.88 java</span><br><span class=\"line\">  2527 admin     20   0  161744   4268   3704 R   0.0  0.0   0:00.72 top</span><br><span class=\"line\">  3245 root      20   0  559140  12412   5860 S   0.0  0.0  64:48.67 logagent</span><br><span class=\"line\">  3420 root      20   0  745052  58464  43820 S   0.0  0.2  11:16.32 metricbeat</span><br><span class=\"line\">  3447 root      20   0  957796  55548  43708 S   0.0  0.2  10:14.47 metricbeat</span><br><span class=\"line\">  5093 root      20   0 1905356 159280   9584 S   0.0  0.5  35:00.14 java</span><br><span class=\"line\">  7458 root      20   0   13700   2564   2356 S   0.0  0.0   0:00.00 bash</span><br><span class=\"line\">  7464 root      20   0   86268   4436   3740 S   0.0  0.0   0:00.00 sudo</span><br></pre></td></tr></table></figure>\n\n<p>先来说明下各个列的含义：</p>\n<table>\n<thead>\n<tr>\n<th>项目</th>\n<th>解释</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><strong>PID</strong></td>\n<td>这是进程<code>ID</code>，一个惟一的正整数，用于标识进程。</td>\n</tr>\n<tr>\n<td><strong>USER</strong></td>\n<td>这是启动进程的用户的“有效”用户名(映射到用户<code>ID</code>)。<code>Linux</code> 为进程分配一个真实的用户 <code>ID</code> 和一个有效的用户<code>ID</code>；后者允许进程代表另一个用户进行操作。(例如，非 <code>root</code> 用户可以提升到 <code>root</code> 用户来安装软件)</td>\n</tr>\n<tr>\n<td><strong>PR NI</strong></td>\n<td><code>“NI”</code> 字段显示进程的 <code>“nice”</code> 值，<code>“PR”</code> 字段是从内核的角度显示了进程的调度优先级，<code>“nice”</code> 值影响的是进程的优先级。</td>\n</tr>\n<tr>\n<td><strong>VIRT, RES, SHR and %MEM</strong></td>\n<td><code>VIRT</code>、<code>RES</code>、<code>SHR</code> 这三个字段都与进程的内存消耗有关。<code>VIRT</code> 是一个进程所消耗的内存总量。这包括程序代码、进程在内存中存储的数据，以及已经 <code>swap</code> 到磁盘的任何内存区域。RES是进程在 <code>RAM</code> 中消耗的内存，<code>%MEM</code> 表示这个值占总可用 <code>RAM</code> 的百分比。最后，<code>SHR</code> 是与其他进程共享的内存量。</td>\n</tr>\n<tr>\n<td><strong>S</strong></td>\n<td>表示进程状态</td>\n</tr>\n<tr>\n<td><strong>TIME+</strong></td>\n<td><code>TIME+</code> 列表示的是进程自启动以来所使用的总 <code>CPU</code> 时间，精确到百分之一秒。</td>\n</tr>\n<tr>\n<td><strong>COMMAND</strong></td>\n<td><code>COMMAND</code> 列表示的是当前进程的名称。</td>\n</tr>\n</tbody></table>\n<h2 id=\"top-命令的使用示例\"><a href=\"#top-命令的使用示例\" class=\"headerlink\" title=\"top 命令的使用示例\"></a>top 命令的使用示例</h2><p>到目前为止，我们已经讨论了 <code>top</code> 的界面信息所描述的含义。但是，<code>top</code> 除了显示这个信息之外，它还可以管理进程，并且我们可以控制 <code>top</code> 输出的各个方面。在本节中，我们将举几个例子。（在下面的大多数例子中，你必须在 <code>top</code> 运行时按下一个键。这些按键是区分大小写的，所以如果你在大写锁定状态下按了k，你实际上已经按了一个<code>k</code>，但是这个命令并不会工作）</p>\n<h3 id=\"kill-进程\"><a href=\"#kill-进程\" class=\"headerlink\" title=\"kill 进程\"></a>kill 进程</h3><p>如果你想杀死一个进程，只要在<code>top</code>运行时按<code>k</code>。这将出现一个提示，它将询问进程的进程<code>ID</code>并按<code>enter</code>。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">PID to signal/kill [default pid = 384]</span><br></pre></td></tr></table></figure>\n<p>当然上面的这段输出的后面是可以手动输入进程 <code>ID</code>，下面的 34444444444444 就是手动输入的进程ID</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">PID to signal/kill [default pid = 384] 34444444444444</span><br></pre></td></tr></table></figure>\n<p>如果保留此空白，<code>top</code> 将使用一个<code>SIGTERM</code>，它允许进程优雅地终止。如果您想强制终止进程，您可以在这里输入<code>SIGKILL</code>。你也可以在这里输入信号号，例如，<code>SIGTERM</code> 的数字是 384，而 <code>SIGKILL</code> 的数字是。如果你将进程<code>ID</code>留空并直接按<code>enter</code>，它将终止列表中最顶端的进程。正如前面提到的，我们也可以使用箭头键滚动，并通过这种方式更改想要终止的进程。</p>\n<h3 id=\"排序进程列表\"><a href=\"#排序进程列表\" class=\"headerlink\" title=\"排序进程列表\"></a>排序进程列表</h3><p>使用像 <code>top</code> 这样的工具的一个最常见的原因是找出哪个进程消耗的资源最多。我们可以按以下键排序列表:</p>\n<ul>\n<li>M：用于按内存使用情况排序</li>\n<li>P：来按<code>CPU</code>使用率排序</li>\n<li>N：按进程<code>ID</code>排序</li>\n<li>T：来按运行时间排序<br>默认情况下，<code>top</code> 按降序显示所有结果，但是我们可以通过按R键切换到升序。还可以使用 <code>-o</code> 开关对列表进行排序。例如，如果想排序进程的<code>CPU</code>使用量，可以这样做:<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">top -o %CPU</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"显示线程列表而不是进程列表\"><a href=\"#显示线程列表而不是进程列表\" class=\"headerlink\" title=\"显示线程列表而不是进程列表\"></a>显示线程列表而不是进程列表</h3><p>前面已经介绍过 <code>Linux</code> 如何在进程之间切换。我们知道，进程是不共享内存或其他资源的，这使得这种切换相当慢。和其他操作系统一样，<code>Linux</code> 支持一种“轻量级”的替代方案，称为“线程”。“线程”是进程的一部分，“线程”可以共享内存和其他资源的某些区域，同时它们也可以像进程一样并发运行。默认情况下，<code>top</code>在其输出中显示一个进程列表。如果想列出线程代替进程，按 <code>H</code> 即可，此时 <code>“Tasks”</code> 行将显示的是 <code>“Threads”</code>，显示的是线程的数量，而不是进程的数量。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1 Threads: 351 total,   2 running, 349 sleeping,   0 stopped,   0 zombie</span><br></pre></td></tr></table></figure>\n<p>细心的读者可能会发现， <code>summury area</code> 中的 <code>“Tasks”</code> 行已经改变成 <code>“Threads”</code> 的了，但是在 <code>task area</code> 中，对应的列表中的属性却没有任何更改，那既然进程和线程不同，这怎么可能呢? 原因是在 <code>Linux</code> 内核内部，线程和进程使用相同的数据结构进行处理，因此，每个线程都有自己的<code>ID</code>、状态等等。如果我们要切换回进程视图，则再次按 <code>H</code> 即可。此外，也可以使用 <code>top -H</code> 在默认情况下显示线程。</p>\n<h3 id=\"显示进程完整路径\"><a href=\"#显示进程完整路径\" class=\"headerlink\" title=\"显示进程完整路径\"></a>显示进程完整路径</h3><p>默认情况下，<code>COMMAND</code> 列下的所有进程名显示的都是摘要名，如果我们期望显示当前进程的完成路径，可以通过按 <code>c</code> 来切换视角，或者直接使用 <code>top -c</code> 来启动交互界面。</p>\n<h3 id=\"以树形结构显示父子进程\"><a href=\"#以树形结构显示父子进程\" class=\"headerlink\" title=\"以树形结构显示父子进程\"></a>以树形结构显示父子进程</h3><p>可以通过在 <code>top</code> 交互中按 <code>V</code> 来切到 <code>forest view</code> 视角，即以以树形结构显示父子进程。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">432      root      20   0   84760   5852   4984 S   0.0  0.0   0:00.01  - /usr/sbin/sshd -D</span><br><span class=\"line\">98518    root      20   0  118432   6884   5792 S   0.0  0.0   0:00.00      - sshd: admin [priv]</span><br><span class=\"line\">98520    admin     20   0  118432   3648   2556 S   0.0  0.0   0:01.32          - sshd: admin@pts/0</span><br><span class=\"line\">98521    admin     20   0  120656   4936   3768 S   0.0  0.0   0:00.34              - -bash</span><br><span class=\"line\">130138   admin     20   0  161748   4208   3624 R   0.0  0.0   0:00.27                  - top -c</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"列出用户的进程\"><a href=\"#列出用户的进程\" class=\"headerlink\" title=\"列出用户的进程\"></a>列出用户的进程</h3><p>要列出某个用户的进程，请在<code>top</code>运行时按 <code>u</code>。然后，输入用户名，或者留空以显示所有用户的进程；或者直接通过 <code>top -u xxx</code> 来指定 <code>xxx</code> 用户的所有进程信息。</p>\n <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">KiB Swap:  2097148 total,  2097148 free,        0 used. 31179088 avail Mem</span><br><span class=\"line\">Which user (blank <span class=\"keyword\">for</span> all) root   <span class=\"comment\"># waiting for input</span></span><br><span class=\"line\">  PID USER      PR  NI    VIRT    RES    SHR S  %CPU %MEM     TIME+ COMMAND</span><br><span class=\"line\">    1 root      20   0   45416   5244   3968 S   0.0  0.0   5:37.57 /usr/lib/systemd/systemd --system --deserialize 18</span><br><span class=\"line\">  340 root      20   0   72892  30836  27184 S   0.0  0.1   8:36.56 /usr/lib/systemd/systemd-journald</span><br><span class=\"line\">  357 root      20   0  101836   2768   2312 S   0.0  0.0   0:01.14 /usr/sbin/gssproxy -D</span><br><span class=\"line\">  432 root      20   0   84760   5852   4984 S   0.0  0.0   0:00.01 /usr/sbin/sshd -D</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"过滤进程\"><a href=\"#过滤进程\" class=\"headerlink\" title=\"过滤进程\"></a>过滤进程</h3><p>如果我们需要处理许多进程，那么简单的排序实际上对我们的帮助并不是很大。那么在这种情况下，我们可以按 <code>o</code> 来激活 <code>top</code> 的过滤模式，然后通过输入一个过滤器表达式来过滤到我们的目前进程。过滤器表达式是指定属性和值之间关系的语句，例如：</p>\n<ul>\n<li>COMMAND&#x3D;java: 进程名&#x3D;java 的</li>\n<li>!COMMAND&#x3D;java: 进程名 !&#x3D;java 的</li>\n<li>%CPU&gt;3.0: CPU &gt; 3.0 的<br>如果要清除所有过滤条件的话，按 <code>=</code> 即可。</li>\n</ul>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>本文主要是对<code>A Guide to the Linux “Top” Command</code> 这篇文章的一些内容翻译，感谢原作者提供的分享</p></blockquote>\n<p><code>top</code> 命令对于监视和管理 <code>Linux</code> 系统上的进程非常有帮助，本文只是从表面做了一些简单的介绍，还有很多我们没有涉及到的内容；例如，如何在 <code>top</code> 中添加更多的列。更多信息，可以通过运行 <code>man top</code> 查看 <code>man</code> 页面，来进行更深层面的学习。</p>\n","text":"top 命令允许用户监视 Linux 上的进程和系统资源使用情况，它是系统管理员工具箱中最有用的工具之一，并且在每个发行版中都预装了它。与 ps 等其他命令不同...","permalink":"/post/linux/linux-cmd-top","photos":[],"count_time":{"symbolsCount":"11k","symbolsTime":"10 mins."},"categories":[{"name":"Linux","slug":"Linux","count":9,"path":"api/categories/Linux.json"}],"tags":[{"name":"linux","slug":"linux","count":9,"path":"api/tags/linux.json"},{"name":"top","slug":"top","count":1,"path":"api/tags/top.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Getting-started\"><span class=\"toc-text\">Getting started</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%BA%86%E8%A7%A3-top-%E7%9A%84%E7%95%8C%E9%9D%A2-the-summary-area\"><span class=\"toc-text\">了解 top 的界面 - the summary area</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%B3%BB%E7%BB%9F%E6%97%B6%E9%97%B4%E3%80%81%E6%AD%A3%E5%B8%B8%E8%BF%90%E8%A1%8C%E6%97%B6%E9%97%B4%E5%92%8C%E7%94%A8%E6%88%B7%E4%BC%9A%E8%AF%9D\"><span class=\"toc-text\">系统时间、正常运行时间和用户会话</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%86%85%E5%AD%98%E4%BD%BF%E7%94%A8%E6%83%85%E5%86%B5\"><span class=\"toc-text\">内存使用情况</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%BB%BB%E5%8A%A1-Tasks\"><span class=\"toc-text\">任务-Tasks</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#CPU-%E4%BD%BF%E7%94%A8%E6%83%85%E5%86%B5\"><span class=\"toc-text\">CPU 使用情况</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%B9%B3%E5%9D%87%E8%B4%9F%E8%BD%BD-Load-average\"><span class=\"toc-text\">平均负载-Load average</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%BA%86%E8%A7%A3-top-%E7%9A%84%E7%95%8C%E9%9D%A2-the-task-area\"><span class=\"toc-text\">了解 top 的界面 - the task area</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#top-%E5%91%BD%E4%BB%A4%E7%9A%84%E4%BD%BF%E7%94%A8%E7%A4%BA%E4%BE%8B\"><span class=\"toc-text\">top 命令的使用示例</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#kill-%E8%BF%9B%E7%A8%8B\"><span class=\"toc-text\">kill 进程</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%8E%92%E5%BA%8F%E8%BF%9B%E7%A8%8B%E5%88%97%E8%A1%A8\"><span class=\"toc-text\">排序进程列表</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%98%BE%E7%A4%BA%E7%BA%BF%E7%A8%8B%E5%88%97%E8%A1%A8%E8%80%8C%E4%B8%8D%E6%98%AF%E8%BF%9B%E7%A8%8B%E5%88%97%E8%A1%A8\"><span class=\"toc-text\">显示线程列表而不是进程列表</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%98%BE%E7%A4%BA%E8%BF%9B%E7%A8%8B%E5%AE%8C%E6%95%B4%E8%B7%AF%E5%BE%84\"><span class=\"toc-text\">显示进程完整路径</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%BB%A5%E6%A0%91%E5%BD%A2%E7%BB%93%E6%9E%84%E6%98%BE%E7%A4%BA%E7%88%B6%E5%AD%90%E8%BF%9B%E7%A8%8B\"><span class=\"toc-text\">以树形结构显示父子进程</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%88%97%E5%87%BA%E7%94%A8%E6%88%B7%E7%9A%84%E8%BF%9B%E7%A8%8B\"><span class=\"toc-text\">列出用户的进程</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E8%BF%87%E6%BB%A4%E8%BF%9B%E7%A8%8B\"><span class=\"toc-text\">过滤进程</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%80%BB%E7%BB%93\"><span class=\"toc-text\">总结</span></a></li></ol>","author":{"name":"glmapper","slug":"blog-author","avatar":"https://glmapper-blog.oss-cn-hangzhou.aliyuncs.com/common/favicon.ico","link":"/","description":"开放，开源，分享，共享","socials":{"github":"https://github.com/glmapper","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/2412872703","zhihu":"","csdn":"","juejin":"https://juejin.cn/user/3227821827961806","customs":{"sofastack":{"icon":"https://glmapper-blog.oss-cn-hangzhou.aliyuncs.com/common/sofastack.svg","link":"https://www.sofastack.tech/"}}}},"mapped":true,"hidden":false,"prev_post":{"title":"JVM 性能调优监控工具","uid":"720aeef568b7f074067984fdc263021a","slug":"jvm/jvm-self-command","date":"2020-10-26T15:49:29.000Z","updated":"2024-07-05T04:09:05.769Z","comments":true,"path":"api/articles/jvm/jvm-self-command.json","keywords":"宋国磊, glmapper, 卫恒, 分享, 开源","cover":[],"text":"本篇主要学习记录下工作中常用的 JDK 自带的一些 JVM 性能调优监控工具，通过了解这些工具，可以在排查问题时给予我们非常大的帮助，将一些隐藏在底下的东西拿到...","permalink":"/post/jvm/jvm-self-command","photos":[],"count_time":{"symbolsCount":"19k","symbolsTime":"17 mins."},"categories":[{"name":"jvm","slug":"jvm","count":6,"path":"api/categories/jvm.json"}],"tags":[{"name":"jvm","slug":"jvm","count":6,"path":"api/tags/jvm.json"},{"name":"JDK","slug":"JDK","count":1,"path":"api/tags/JDK.json"}],"author":{"name":"glmapper","slug":"blog-author","avatar":"https://glmapper-blog.oss-cn-hangzhou.aliyuncs.com/common/favicon.ico","link":"/","description":"开放，开源，分享，共享","socials":{"github":"https://github.com/glmapper","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/2412872703","zhihu":"","csdn":"","juejin":"https://juejin.cn/user/3227821827961806","customs":{"sofastack":{"icon":"https://glmapper-blog.oss-cn-hangzhou.aliyuncs.com/common/sofastack.svg","link":"https://www.sofastack.tech/"}}}}},"next_post":{"title":"聊一聊 BeanPostProcessor 不生效","uid":"8d3c27cae87c9531596050d409b7764c","slug":"spring/spring-series-factory-bean-and-post-processor","date":"2020-06-21T02:52:12.000Z","updated":"2024-07-05T04:09:05.817Z","comments":true,"path":"api/articles/spring/spring-series-factory-bean-and-post-processor.json","keywords":"宋国磊, glmapper, 卫恒, 分享, 开源","cover":[],"text":"关于 BeanPostProcessor 各位一定不陌生，在 SpringBoot 源码系列-Bean 的生命周期与扩展 这篇文章中，我有介绍过 bean 的创...","permalink":"/post/spring/spring-series-factory-bean-and-post-processor","photos":[],"count_time":{"symbolsCount":"12k","symbolsTime":"11 mins."},"categories":[{"name":"spring","slug":"spring","count":15,"path":"api/categories/spring.json"}],"tags":[{"name":"BeanPostProcessor","slug":"BeanPostProcessor","count":1,"path":"api/tags/BeanPostProcessor.json"},{"name":"bean 生命周期","slug":"bean-生命周期","count":2,"path":"api/tags/bean-生命周期.json"}],"author":{"name":"glmapper","slug":"blog-author","avatar":"https://glmapper-blog.oss-cn-hangzhou.aliyuncs.com/common/favicon.ico","link":"/","description":"开放，开源，分享，共享","socials":{"github":"https://github.com/glmapper","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"https://weibo.com/u/2412872703","zhihu":"","csdn":"","juejin":"https://juejin.cn/user/3227821827961806","customs":{"sofastack":{"icon":"https://glmapper-blog.oss-cn-hangzhou.aliyuncs.com/common/sofastack.svg","link":"https://www.sofastack.tech/"}}}}}}